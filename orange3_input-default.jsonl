{"repo": "biolab/orange3", "pull_number": 3321.0, "instance_id": "biolab__orange3-3321", "issue_numbers": 0, "base_commit": "a9f233e7805abc417f65e334f678b45960926614", "patch": "diff --git a/Orange/widgets/settings.py b/Orange/widgets/settings.py\nindex 8be8bf0ae..75ebe4129 100644\n--- a/Orange/widgets/settings.py\n+++ b/Orange/widgets/settings.py\n@@ -49,7 +49,8 @@ log = logging.getLogger(__name__)\n __all__ = [\"Setting\", \"SettingsHandler\", \"SettingProvider\",\n            \"ContextSetting\", \"ContextHandler\",\n            \"DomainContextHandler\", \"PerfectDomainContextHandler\",\n-           \"ClassValuesContextHandler\", \"widget_settings_dir\"]\n+           \"ClassValuesContextHandler\", \"widget_settings_dir\",\n+           \"IncompatibleContext\"]\n \n _IMMUTABLES = (str, int, bytes, bool, float, tuple)\n \n@@ -624,8 +625,16 @@ class ContextHandler(SettingsHandler):\n         self._migrate_contexts(self.global_contexts)\n \n     def _migrate_contexts(self, contexts):\n-        for context in contexts:\n-            self.widget_class.migrate_context(context, context.values.pop(VERSION_KEY, 0))\n+        i = 0\n+        while i < len(contexts):\n+            context = contexts[i]\n+            try:\n+                self.widget_class.migrate_context(\n+                    context, context.values.pop(VERSION_KEY, 0))\n+            except IncompatibleContext:\n+                del contexts[i]\n+            else:\n+                i += 1\n \n     def write_defaults_file(self, settings_file):\n         \"\"\"Call the inherited method, then add global context to the pickle.\"\"\"\n.", "test_patch": "diff --git a/Orange/widgets/tests/test_context_handler.py b/Orange/widgets/tests/test_context_handler.py\nindex a3c94f54d..3ea0c540e 100644\n--- a/Orange/widgets/tests/test_context_handler.py\n+++ b/Orange/widgets/tests/test_context_handler.py\n@@ -5,7 +5,7 @@ from unittest import TestCase\n from unittest.mock import Mock, patch, call\n from Orange.widgets.settings import (\n     ContextHandler, ContextSetting, Context, Setting, SettingsPrinter,\n-    VERSION_KEY\n+    VERSION_KEY, IncompatibleContext\n )\n \n __author__ = 'anze'\n@@ -111,6 +111,26 @@ class TestContextHandler(TestCase):\n             handler.initialize(widget, dict(context_settings=deepcopy(contexts)))\n         migrate_context.assert_has_calls([call(c, c.values[VERSION_KEY]) for c in contexts])\n \n+    def test_migrates_settings_removes_incompatible(self):\n+        handler = ContextHandler()\n+        handler.bind(SimpleWidget)\n+\n+        widget = SimpleWidget()\n+\n+        contexts = [Context(foo=i) for i in (13, 13, 0, 1, 13, 2, 13)]\n+\n+        def migrate_context(context, _):\n+            if context.foo == 13:\n+                raise IncompatibleContext()\n+\n+        with patch.object(SimpleWidget, \"migrate_context\", migrate_context):\n+            handler.initialize(widget, dict(context_settings=contexts))\n+            contexts = widget.context_settings\n+            self.assertEqual(len(contexts), 3)\n+            self.assertTrue(\n+                all(context.foo == i\n+                    for i, context in enumerate(contexts)))\n+\n     def test_fast_save(self):\n         handler = ContextHandler()\n         handler.bind(SimpleWidget)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3242.0, "instance_id": "biolab__orange3-3242", "issue_numbers": 0, "base_commit": "1a916d7bffde022f04cc4547d35adda82484d151", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 838b4a66c..e3b7564f9 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -27,7 +27,19 @@ DISCRETE_MAX_VALUES = 3  # == 2 + nan\n def make_variable(cls, compute_value, *args):\n     if compute_value is not None:\n         return cls(*args, compute_value=compute_value)\n-    return cls.make(*args)\n+    if issubclass(cls, DiscreteVariable):\n+        name, values = args[:2]\n+        var = cls.make(*args)\n+        # The `var.values` are in general a superset of `values` with different\n+        # order. Only use it if it is a structural subtype of the requested\n+        # descriptor so any indices/codes retain their proper interpretation on\n+        # deserialization.\n+        if var.values[:len(values)] == values:\n+            return var\n+        else:\n+            return cls(*args)\n+    else:\n+        return cls.make(*args)\n \n \n def is_discrete_values(values):\n@@ -707,9 +719,12 @@ class DiscreteVariable(Variable):\n     def __reduce__(self):\n         if not self.name:\n             raise PickleError(\"Variables without names cannot be pickled\")\n+        __dict__ = dict(self.__dict__)\n+        __dict__.pop(\"master\")\n+        __dict__.pop(\"values\")\n         return make_variable, (self.__class__, self._compute_value, self.name,\n                                self.values, self.ordered, self.base_value), \\\n-            self.__dict__\n+            __dict__\n \n     @classmethod\n     def make(cls, name, values=(), ordered=False, base_value=-1):\n@@ -742,7 +757,7 @@ class DiscreteVariable(Variable):\n         var = cls._find_compatible(\n             name, values, ordered, base_value)\n         if var:\n-            return var\n+            return var.make_proxy()\n         if not ordered:\n             base_value_rep = base_value != -1 and values[base_value]\n             values = cls.ordered_values(values)\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex 59af00418..4a3c21a73 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -266,6 +266,23 @@ class TestDiscreteVariable(VariableTest):\n         a = DiscreteVariable(\"foo\", values=[\"a\", \"b\", \"c\"])\n         self.assertRaises(TypeError, a.add_value, 42)\n \n+    def test_unpickle(self):\n+        d1 = DiscreteVariable(\"A\", values=[\"two\", \"one\"])\n+        s = pickle.dumps(d1)\n+        d2 = DiscreteVariable.make(\"A\", values=[\"one\", \"two\", \"three\"])\n+        d2_values = tuple(d2.values)\n+        d1c = pickle.loads(s)\n+        # See: gh-3238\n+        # The unpickle reconstruction picks an existing variable (d2), on which\n+        # __setstate__ or __dict__.update is called\n+        self.assertSequenceEqual(d2.values, d2_values)\n+        self.assertSequenceEqual(d1c.values, d1.values)\n+        s = pickle.dumps(d2)\n+        DiscreteVariable._clear_all_caches()  # [comment redacted]\n+        d1 = DiscreteVariable(\"A\", values=[\"one\", \"two\"])\n+        d2 = pickle.loads(s)\n+        self.assertSequenceEqual(d2.values, [\"two\", \"one\", \"three\"])\n+\n \n @variabletest(ContinuousVariable)\n class TestContinuousVariable(VariableTest):\n@@ -474,9 +491,9 @@ class VariableTestMakeProxy(unittest.TestCase):\n         self.assertEqual(abc1p, abc)\n \n         abcp, abc1p, abc2p = pickle.loads(pickle.dumps((abc, abc1, abc2)))\n-        self.assertIs(abcp.master, abcp)\n-        self.assertIs(abc1p.master, abcp)\n-        self.assertIs(abc2p.master, abcp)\n+        self.assertIs(abcp.master, abcp.master)\n+        self.assertIs(abc1p.master, abcp.master)\n+        self.assertIs(abc2p.master, abcp.master)\n         self.assertEqual(abcp, abc1p)\n         self.assertEqual(abcp, abc2p)\n         self.assertEqual(abc1p, abc2p)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3180.0, "instance_id": "biolab__orange3-3180", "issue_numbers": 0, "base_commit": "fc0f160d114ff8c2fe52c4571c318c557368ccd5", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 965b361ef..c8aaa9c85 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -11,7 +11,7 @@ from Orange.data import (\n     ContinuousVariable,\n )\n \n-__all__ = ['table_from_frame']\n+__all__ = ['table_from_frame', 'table_to_frame']\n \n \n def table_from_frame(df, *, force_nominal=False):\n@@ -76,3 +76,52 @@ def table_from_frame(df, *, force_nominal=False):\n                             np.column_stack(X) if X else np.empty((df.shape[0], 0)),\n                             None,\n                             np.column_stack(M) if M else None)\n+\n+\n+def table_to_frame(tab):\n+    \"\"\"\n+    Convert Orange.data.Table to pandas.DataFrame\n+\n+    Parameters\n+    ----------\n+    tab : Table\n+\n+    Returns\n+    -------\n+    pandas.DataFrame\n+    \"\"\"\n+    def _column_to_series(col, vals):\n+        result = ()\n+        if col.is_discrete:\n+            codes = pd.Series(vals).fillna(-1).astype(int)\n+            result = (col.name, pd.Categorical.from_codes(codes=codes, categories=col.values,\n+                                                          ordered=col.ordered))\n+        elif col.is_time:\n+            result = (col.name, pd.to_datetime(vals, unit='s').to_series().reset_index()[0])\n+        elif col.is_continuous:\n+            dt = float\n+            # np.nan are not compatible with int column\n+            nan_values_in_column = [t for t in vals if np.isnan(t)]\n+            if col.number_of_decimals == 0 and len(nan_values_in_column) == 0:\n+                dt = int\n+            result = (col.name, pd.Series(vals).astype(dt))\n+        elif col.is_string:\n+            result = (col.name, pd.Series(vals))\n+        return result\n+\n+    def _columns_to_series(cols, vals):\n+        return [_column_to_series(col, vals[:, i]) for i, col in enumerate(cols)]\n+\n+    x, y, metas = [], [], []\n+    domain = tab.domain\n+    if domain.attributes:\n+        x = _columns_to_series(domain.attributes, tab.X)\n+    if domain.class_vars:\n+        y_values = tab.Y.reshape(tab.Y.shape[0], len(domain.class_vars))\n+        y = _columns_to_series(domain.class_vars, y_values)\n+    if domain.metas:\n+        metas = _columns_to_series(domain.metas, tab.metas)\n+    all_series = dict(x + y + metas)\n+    original_column_order = [var.name for var in tab.domain.variables]\n+    unsorted_columns_df = pd.DataFrame(all_series)\n+    return unsorted_columns_df[original_column_order]\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 184b04537..95c0a8d2a 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -1,6 +1,6 @@\n import unittest\n import numpy as np\n-from Orange.data import ContinuousVariable, DiscreteVariable, TimeVariable\n+from Orange.data import ContinuousVariable, DiscreteVariable, TimeVariable, Table\n \n try:\n     import pandas as pd\n@@ -60,3 +60,15 @@ class TestPandasCompat(unittest.TestCase):\n         types = [type(var) for var in table.domain.attributes]\n         self.assertEqual(names, ['index', '1', '2'])\n         self.assertEqual(types, [DiscreteVariable, ContinuousVariable, TimeVariable])\n+\n+    def test_table_to_frame(self):\n+        from Orange.data.pandas_compat import table_to_frame\n+        table = Table(\"iris\")\n+        df = table_to_frame(table)\n+        table_column_names = [var.name for var in table.domain.variables]\n+        frame_column_names = df.columns\n+\n+        self.assertEqual(sorted(table_column_names), sorted(frame_column_names))\n+        self.assertEqual(type(df['iris'].dtype), pd.api.types.CategoricalDtype)\n+        self.assertEqual(list(df['sepal length'])[0:4], [5.1, 4.9, 4.7, 4.6])\n+        self.assertEqual(list(df['iris'])[0:2], ['Iris-setosa', 'Iris-setosa'])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4490.0, "instance_id": "biolab__orange3-4490", "issue_numbers": 0, "base_commit": "d322857be16c552309079e8b81c9f3e6c09f9b11", "patch": "diff --git a/Orange/preprocess/discretize.py b/Orange/preprocess/discretize.py\nindex 7b0e9e224..8b02bab1d 100644\n--- a/Orange/preprocess/discretize.py\n+++ b/Orange/preprocess/discretize.py\n@@ -358,16 +358,15 @@ def time_binnings(data, *, min_bins=2, max_bins=50, min_unique=5, add_unique=0):\n \n \n def _time_binnings(mn, mx, min_pts, max_pts):\n-    yfmt = \"%y \" if mn.tm_year >= 1950 else \"%Y \"\n     bins = []\n     for place, step, fmt, unit in (\n             [(5, x, \"%H:%M:%S\", \"second\") for x in (1, 5, 10, 15, 30)] +\n             [(4, x, \"%b %d %H:%M\", \"minute\") for x in (1, 5, 10, 15, 30)] +\n-            [(3, x, yfmt + \"%b %d %H:%M\", \"hour\") for x in (1, 2, 3, 6, 12)] +\n-            [(2, 1, yfmt + \"%b %d\", \"day\")] +\n-            [(2, x, yfmt + \"%b %d\", \"week\") for x in (7, 14)] +\n-            [(1, x, yfmt + \"%b\", \"month\") for x in (1, 2, 3, 6)] +\n-            [(0, x, yfmt.strip(), \"year\") for x in (1, 2, 5, 10, 25, 50, 100)]):\n+            [(3, x, \"%y %b %d %H:%M\", \"hour\") for x in (1, 2, 3, 6, 12)] +\n+            [(2, 1, \"%y %b %d\", \"day\")] +\n+            [(2, x, \"%y %b %d\", \"week\") for x in (7, 14)] +\n+            [(1, x, \"%y %b\", \"month\") for x in (1, 2, 3, 6)] +\n+            [(0, x, \"%Y\", \"year\") for x in (1, 2, 5, 10, 25, 50, 100)]):\n         times = _time_range(mn, mx, place, step, min_pts, max_pts)\n         if not times:\n             continue\n@@ -437,10 +436,10 @@ def _simplified_labels(labels):\n         if len(firsts) > 1:\n             break\n         to_remove = firsts.pop()\n-        flen = len(to_remove) + 1\n+        flen = len(to_remove)\n         if any(len(lab) == flen for lab in labels):\n             break\n-        labels = [lab[flen:] for lab in labels]\n+        labels = [lab[flen+1:] for lab in labels]\n     for i in range(len(labels) - 1, 0, -1):\n         for k, c, d in zip(count(), labels[i].split(), labels[i - 1].split()):\n             if c != d:\n@@ -455,7 +454,7 @@ def _simplified_labels(labels):\n \n def _unique_time_bins(unique):\n     times = [time.gmtime(x) for x in unique]\n-    fmt = f'{\"%y \" if times[0][0] >= 1950 else \"%Y \"} %b %d'\n+    fmt = f'%y %b %d'\n     fmt += \" %H:%M\" * (len({t[2:] for t in times}) > 1)\n     fmt += \":%S\" * bool(np.all(unique % 60 == 0))\n     labels = [time.strftime(fmt, x) for x in times]\n.", "test_patch": "diff --git a/Orange/preprocess/tests/test_discretize.py b/Orange/preprocess/tests/test_discretize.py\nindex 9c8f01136..32fbe1d95 100644\n--- a/Orange/preprocess/tests/test_discretize.py\n+++ b/Orange/preprocess/tests/test_discretize.py\n@@ -32,18 +32,19 @@ class TestTimeBinning(unittest.TestCase):\n         self.assertEqual(\n             testbin((1975, 4, 2), (1989, 3, 1)),\n             [('10 years',\n-              ['70', '80', '90'],\n+              ['1970', '1980', '1990'],\n               [0, 315532800, 631152000]),\n              ('5 years',\n-              ['75', '80', '85', '90'],\n+              ['1975', '1980', '1985', '1990'],\n               [157766400, 315532800, 473385600, 631152000]),\n              ('2 years',\n-              ['74', '76', '78', '80', '82', '84', '86', '88', '90'],\n+              ['1974', '1976', '1978', '1980', '1982', '1984', '1986', '1988',\n+               '1990'],\n               [126230400, 189302400, 252460800, 315532800, 378691200, 441763200,\n                504921600, 567993600, 631152000]),\n              ('1 year',\n-              ['75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85',\n-               '86', '87', '88', '89', '90'],\n+              ['1975', '1976', '1977', '1978', '1979', '1980', '1981', '1982',\n+               '1983', '1984', '1985', '1986', '1987', '1988', '1989', '1990'],\n               [157766400, 189302400, 220924800, 252460800, 283996800, 315532800,\n                347155200, 378691200, 410227200, 441763200, 473385600, 504921600,\n                536457600, 567993600, 599616000, 631152000]),\n@@ -64,10 +65,10 @@ class TestTimeBinning(unittest.TestCase):\n         self.assertEqual(\n             testbin((1975, 4, 2), (1978, 3, 1)),\n             [('2 years',\n-              ['74', '76', '78', '80'],\n+              ['1974', '1976', '1978', '1980'],\n               [126230400, 189302400, 252460800, 315532800]),\n              ('1 year',\n-              ['75', '76', '77', '78', '79'],\n+              ['1975', '1976', '1977', '1978', '1979'],\n               [157766400, 189302400, 220924800, 252460800, 283996800]),\n              ('6 months',\n               ['75 Jan', 'Jul',\n@@ -626,6 +627,50 @@ class TestTimeBinning(unittest.TestCase):\n                -1437832012, -1437832011, -1437832010, -1437832009, -1437832008,\n                -1437832007])])\n \n+        self.assertEqual(\n+            testbin((1973, 9, 14), (2010, 9, 8)),\n+            [\n+                ('50 years',\n+                 ['1950', '2000', '2050'],\n+                 [-631152000, 946684800, 2524608000]),\n+                ('25 years',\n+                 ['1950', '1975', '2000', '2025'],\n+                 [-631152000, 157766400, 946684800, 1735689600]),\n+                ('10 years',\n+                 ['1970', '1980', '1990', '2000', '2010', '2020'],\n+                 [0, 315532800, 631152000, 946684800, 1262304000, 1577836800]),\n+                ('5 years',\n+                 ['1970', '1975', '1980', '1985', '1990', '1995', '2000',\n+                  '2005', '2010', '2015'],\n+                 [0, 157766400, 315532800, 473385600, 631152000, 788918400,\n+                  946684800, 1104537600, 1262304000, 1420070400]),\n+                ('2 years',\n+                 ['1972', '1974', '1976', '1978', '1980', '1982', '1984',\n+                  '1986', '1988', '1990', '1992', '1994', '1996', '1998',\n+                  '2000', '2002', '2004', '2006', '2008', '2010', '2012'],\n+                 [63072000, 126230400, 189302400, 252460800, 315532800,\n+                  378691200, 441763200, 504921600, 567993600, 631152000,\n+                  694224000, 757382400, 820454400, 883612800, 946684800,\n+                  1009843200, 1072915200, 1136073600, 1199145600, 1262304000,\n+                  1325376000]),\n+                ('1 year',\n+                 ['1973', '1974', '1975', '1976', '1977', '1978', '1979',\n+                  '1980', '1981', '1982', '1983', '1984', '1985', '1986',\n+                  '1987', '1988', '1989', '1990', '1991', '1992', '1993',\n+                  '1994', '1995', '1996', '1997', '1998', '1999', '2000',\n+                  '2001', '2002', '2003', '2004', '2005', '2006', '2007',\n+                  '2008', '2009', '2010', '2011'],\n+                 [94694400, 126230400, 157766400, 189302400, 220924800,\n+                  252460800, 283996800, 315532800, 347155200, 378691200,\n+                  410227200, 441763200, 473385600, 504921600, 536457600,\n+                  567993600, 599616000, 631152000, 662688000, 694224000,\n+                  725846400, 757382400, 788918400, 820454400, 852076800,\n+                  883612800, 915148800, 946684800, 978307200, 1009843200,\n+                  1041379200, 1072915200, 1104537600, 1136073600, 1167609600,\n+                  1199145600, 1230768000, 1262304000, 1293840000])\n+            ]\n+        )\n+\n     def test_min_unique(self):\n         bins = time_binnings(self.dates, min_unique=7)\n         self.assertEqual(len(bins), 1)\n@@ -656,6 +701,12 @@ class TestTimeBinning(unittest.TestCase):\n         self.assertEqual(len(bins), 1)\n         np.testing.assert_equal(bins[0].thresholds, [42, 43])\n \n+    def test_multiple_identical(self):\n+        dates = np.array([42] * 5)\n+        bins = time_binnings(dates)\n+        self.assertEqual(len(bins), 1)\n+        np.testing.assert_equal(bins[0].thresholds, [42, 43])\n+\n     def test_no_values(self):\n         dates = np.array([])\n         self.assertRaises(ValueError, time_binnings, dates)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4431.0, "instance_id": "biolab__orange3-4431", "issue_numbers": 0, "base_commit": "9eac7d19aade1d23bb1e170bf68ff16670a9bb24", "patch": "diff --git a/Orange/data/util.py b/Orange/data/util.py\nindex 3d81a57ec..0a583702c 100644\n--- a/Orange/data/util.py\n+++ b/Orange/data/util.py\n@@ -2,8 +2,8 @@\n Data-manipulation utilities.\n \"\"\"\n import re\n-from collections import Counter, defaultdict\n-from itertools import chain\n+from collections import Counter\n+from itertools import chain, count\n from typing import Callable\n \n import numpy as np\n@@ -155,8 +155,8 @@ def get_indices(names, name):\n     :param name: str\n     :return: list of indices\n     \"\"\"\n-    return [int(a.group(2)) for x in names\n-            for a in re.finditer(RE_FIND_INDEX.format(name), x)]\n+    return [int(a.group(2)) for x in filter(None, names)\n+            for a in re.finditer(RE_FIND_INDEX.format(re.escape(name)), x)]\n \n \n def get_unique_names(names, proposed):\n@@ -203,26 +203,22 @@ def get_unique_names(names, proposed):\n     return [f\"{name} ({max_index})\" for name in proposed]\n \n \n-def get_unique_names_duplicates(proposed: list) -> list:\n+def get_unique_names_duplicates(proposed: list, return_duplicated=False) -> list:\n     \"\"\"\n     Returns list of unique names. If a name is duplicated, the\n-    function appends the smallest available index in parentheses.\n+    function appends the next available index in parentheses.\n \n     For example, a proposed list of names `x`, `x` and `x (2)`\n-    results in `x (1)`, `x (3)`, `x (2)`.\n+    results in `x (3)`, `x (4)`, `x (2)`.\n     \"\"\"\n-    counter = Counter(proposed)\n-    index = defaultdict(int)\n-    names = []\n-    for name in proposed:\n-        if name and counter[name] > 1:\n-            unique_name = name\n-            while unique_name in counter:\n-                index[name] += 1\n-                unique_name = f\"{name} ({index[name]})\"\n-            name = unique_name\n-        names.append(name)\n-    return names\n+    indices = {name: count(max(get_indices(proposed, name), default=0) + 1)\n+               for name, cnt in Counter(proposed).items()\n+               if name and cnt > 1}\n+    new_names = [f\"{name} ({next(indices[name])})\" if name in indices else name\n+                 for name in proposed]\n+    if return_duplicated:\n+        return new_names, list(indices)\n+    return new_names\n \n \n def get_unique_names_domain(attributes, class_vars=(), metas=()):\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_util.py b/Orange/data/tests/test_util.py\nindex 2df6c287b..f594abffa 100644\n--- a/Orange/data/tests/test_util.py\n+++ b/Orange/data/tests/test_util.py\n@@ -59,10 +59,39 @@ class TestGetUniqueNames(unittest.TestCase):\n             [\"x (2)\", \"x (3)\", \"x (1)\"])\n         self.assertEqual(\n             get_unique_names_duplicates([\"x (2)\", \"x\", \"x\", \"x (2)\", \"x (3)\"]),\n-            [\"x (2) (1)\", \"x (1)\", \"x (4)\", \"x (2) (2)\", \"x (3)\"])\n+            [\"x (2) (1)\", \"x (4)\", \"x (5)\", \"x (2) (2)\", \"x (3)\"])\n+        self.assertEqual(\n+                        get_unique_names_duplicates([\"iris\", \"iris\", \"iris (1)\"]),\n+                        [\"iris (2)\", \"iris (3)\", \"iris (1)\"])\n+\n+        self.assertEqual(\n+            get_unique_names_duplicates([\"foo\", \"bar\", \"baz\"], return_duplicated=True),\n+            ([\"foo\", \"bar\", \"baz\"], []))\n+        self.assertEqual(\n+            get_unique_names_duplicates([\"foo\", \"bar\", \"baz\", \"bar\"], return_duplicated=True),\n+            ([\"foo\", \"bar (1)\", \"baz\", \"bar (2)\"], [\"bar\"]))\n+        self.assertEqual(\n+            get_unique_names_duplicates([\"x\", \"x\", \"x (1)\"], return_duplicated=True),\n+            ([\"x (2)\", \"x (3)\", \"x (1)\"], [\"x\"]))\n+        self.assertEqual(\n+            get_unique_names_duplicates([\"x (2)\", \"x\", \"x\", \"x (2)\", \"x (3)\"], return_duplicated=True),\n+            ([\"x (2) (1)\", \"x (4)\", \"x (5)\", \"x (2) (2)\", \"x (3)\"], [\"x (2)\", \"x\"]))\n         self.assertEqual(\n             get_unique_names_duplicates([\"x\", \"\", \"\", None, None, \"x\"]),\n             [\"x (1)\", \"\", \"\", None, None, \"x (2)\"])\n+        self.assertEqual(\n+            get_unique_names_duplicates([\"iris\", \"iris\", \"iris (1)\", \"iris (2)\"], return_duplicated=True),\n+            ([\"iris (3)\", \"iris (4)\", \"iris (1)\", \"iris (2)\"], [\"iris\"]))\n+\n+        self.assertEqual(\n+            get_unique_names_duplicates([\"iris (1) (1)\", \"iris (1)\", \"iris (1)\"]),\n+            [\"iris (1) (1)\", \"iris (1) (2)\", \"iris (1) (3)\"]\n+        )\n+\n+        self.assertEqual(\n+            get_unique_names_duplicates([\"iris (1) (1)\", \"iris (1)\", \"iris (1)\", \"iris\", \"iris\"]),\n+            [\"iris (1) (1)\", \"iris (1) (2)\", \"iris (1) (3)\", \"iris (2)\", \"iris (3)\"]\n+        )\n \n     def test_get_unique_names_domain(self):\n         (attrs, classes, metas), renamed = \\\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3865.0, "instance_id": "biolab__orange3-3865", "issue_numbers": 0, "base_commit": "d672ab78dee0449c79a942c2d8ff2dbe38956394", "patch": "diff --git a/Orange/misc/distmatrix.py b/Orange/misc/distmatrix.py\nindex e995e68fb..4ded41737 100644\n--- a/Orange/misc/distmatrix.py\n+++ b/Orange/misc/distmatrix.py\n@@ -51,7 +51,7 @@ class DistMatrix(np.ndarray):\n \n     def __array_wrap__(self, out_arr, context=None):\n         if out_arr.ndim == 0:  # a single scalar\n-            return out_arr.item()\n+            return out_arr[()]\n         return np.ndarray.__array_wrap__(self, out_arr, context)\n \n     \"\"\"\n.", "test_patch": "diff --git a/Orange/tests/test_distances.py b/Orange/tests/test_distances.py\nindex 65b07f8c4..907b84a19 100644\n--- a/Orange/tests/test_distances.py\n+++ b/Orange/tests/test_distances.py\n@@ -186,6 +186,17 @@ class TestDistMatrix(TestCase):\n                              [\"danny\", \"eve\", \"frank\"])\n             self.assertEqual(m.axis, 0)\n \n+    def test_numpy_type(self):\n+        \"\"\"GH-3658\"\"\"\n+        data1 = np.array([1, 2], dtype=np.int64)\n+        data2 = np.array([2, 3], dtype=np.int64)\n+        dm1, dm2 = DistMatrix(data1), DistMatrix(data2)\n+\n+        self.assertIsInstance(dm1.max(), np.int64)\n+        self.assertNotIsInstance(dm1.max(), int)\n+        with self.assertRaises(AssertionError):\n+            np.testing.assert_array_equal(dm1, dm2)\n+\n \n # noinspection PyTypeChecker\n class TestEuclidean(TestCase):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5295.0, "instance_id": "biolab__orange3-5295", "issue_numbers": 0, "base_commit": "3617a5b8f3077a83dd6af645af53296792b39c99", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 785c87c86..3e13b7bca 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -53,7 +53,8 @@ def is_discrete_values(values):\n     # the type is numeric\n     try:\n         isinstance(next(iter(values)), Number) or \\\n-        [float(v) for _, v in zip(range(min(3, len(values))), values)]\n+        [v not in MISSING_VALUES and float(v)\n+         for _, v in zip(range(min(3, len(values))), values)]\n     except ValueError:\n         is_numeric = False\n         max_values = int(round(len(values)**.7))\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_io_util.py b/Orange/data/tests/test_io_util.py\nnew file mode 100644\nindex 000000000..683132da8\n--- /dev/null\n+++ b/Orange/data/tests/test_io_util.py\n@@ -0,0 +1,14 @@\n+import unittest\n+\n+from Orange.data import ContinuousVariable, guess_data_type\n+\n+\n+class TestIoUtil(unittest.TestCase):\n+    def test_guess_continuous_w_nans(self):\n+        self.assertIs(\n+            guess_data_type([\"9\", \"\", \"98\", \"?\", \"98\", \"98\", \"98\"])[2],\n+            ContinuousVariable)\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4780.0, "instance_id": "biolab__orange3-4780", "issue_numbers": 0, "base_commit": "43f086f0bacccd69e514788ae55e7f7df2285937", "patch": "diff --git a/Orange/classification/logistic_regression.py b/Orange/classification/logistic_regression.py\nindex f41c47fe3..aeb4fbfc1 100644\n--- a/Orange/classification/logistic_regression.py\n+++ b/Orange/classification/logistic_regression.py\n@@ -36,7 +36,22 @@ class LogisticRegressionLearner(SklLearner, _FeatureScorerMixin):\n \n     def __init__(self, penalty=\"l2\", dual=False, tol=0.0001, C=1.0,\n                  fit_intercept=True, intercept_scaling=1, class_weight=None,\n-                 random_state=None, solver=\"lbfgs\", max_iter=100,\n+                 random_state=None, solver=\"auto\", max_iter=100,\n                  multi_class=\"auto\", verbose=0, n_jobs=1, preprocessors=None):\n         super().__init__(preprocessors=preprocessors)\n         self.params = vars()\n+\n+    def _initialize_wrapped(self):\n+        params = self.params.copy()\n+        # The default scikit-learn solver `lbfgs` (v0.22) does not support the\n+        # l1 penalty.\n+        solver, penalty = params.pop(\"solver\"), params.get(\"penalty\")\n+        if solver == \"auto\":\n+            if penalty == \"l1\":\n+                solver = \"liblinear\"\n+            else:\n+                solver = \"lbfgs\"\n+        params[\"solver\"] = solver\n+\n+        return self.__wraps__(**params)\n+\n.", "test_patch": "diff --git a/Orange/tests/test_logistic_regression.py b/Orange/tests/test_logistic_regression.py\nindex 68c49dc67..d38d0ddd1 100644\n--- a/Orange/tests/test_logistic_regression.py\n+++ b/Orange/tests/test_logistic_regression.py\n@@ -131,3 +131,23 @@ class TestLogisticRegressionLearner(unittest.TestCase):\n         self.assertEqual(len(np.unique(t.Y)), 1)\n         lr = sklearn.linear_model.LogisticRegression()\n         self.assertRaises(ValueError, lr.fit, t.X, t.Y)\n+\n+    def test_auto_solver(self):\n+        # These defaults are valid as of sklearn v0.23.0\n+        # lbfgs is default for l2 penalty\n+        lr = LogisticRegressionLearner(penalty=\"l2\", solver=\"auto\")\n+        skl_clf = lr._initialize_wrapped()\n+        self.assertEqual(skl_clf.solver, \"lbfgs\")\n+        self.assertEqual(skl_clf.penalty, \"l2\")\n+\n+        # lbfgs is default for no penalty\n+        lr = LogisticRegressionLearner(penalty=None, solver=\"auto\")\n+        skl_clf = lr._initialize_wrapped()\n+        self.assertEqual(skl_clf.solver, \"lbfgs\")\n+        self.assertEqual(skl_clf.penalty, None)\n+\n+        # liblinear is default for l2 penalty\n+        lr = LogisticRegressionLearner(penalty=\"l1\", solver=\"auto\")\n+        skl_clf = lr._initialize_wrapped()\n+        self.assertEqual(skl_clf.solver, \"liblinear\")\n+        self.assertEqual(skl_clf.penalty, \"l1\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3757.0, "instance_id": "biolab__orange3-3757", "issue_numbers": 0, "base_commit": "9cf23e651f38092b42946ca69499880d09b7e4fa", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex dcb07690a..5bf0c34de 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -22,6 +22,7 @@ Unknown = ValueUnknown = float(\"nan\")\n MISSING_VALUES = {np.nan, \"?\", \"nan\", \".\", \"\", \"NA\", \"~\", None}\n \n DISCRETE_MAX_VALUES = 3  # == 2 + nan\n+MAX_NUM_OF_DECIMALS = 5\n \n \n def make_variable(cls, compute_value, *args):\n@@ -522,10 +523,10 @@ class ContinuousVariable(Variable):\n         three, but adjusted at the first call of :obj:`to_val`.\n         \"\"\"\n         super().__init__(name, compute_value, sparse=sparse)\n+        self._format_str = \"%g\"\n         if number_of_decimals is None:\n             self._number_of_decimals = 3\n             self.adjust_decimals = 2\n-            self._format_str = \"%g\"\n         else:\n             self.number_of_decimals = number_of_decimals\n \n@@ -559,7 +560,8 @@ class ContinuousVariable(Variable):\n     def number_of_decimals(self, x):\n         self._number_of_decimals = x\n         self.adjust_decimals = 0\n-        self._format_str = \"%.{}f\".format(self.number_of_decimals)\n+        if self._number_of_decimals <= MAX_NUM_OF_DECIMALS:\n+            self._format_str = \"%.{}f\".format(self.number_of_decimals)\n \n     def to_val(self, s):\n         \"\"\"\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex dd4e98f8e..62e8285e5 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -292,7 +292,12 @@ class TestContinuousVariable(VariableTest):\n     def test_decimals(self):\n         a = ContinuousVariable(\"a\", 4)\n         self.assertEqual(a.str_val(4.654321), \"4.6543\")\n+        self.assertEqual(a.str_val(4.654321654321), \"4.6543\")\n         self.assertEqual(a.str_val(Unknown), \"?\")\n+        a = ContinuousVariable(\"a\", 5)\n+        self.assertEqual(a.str_val(0.000000000001), \"0.00000\")\n+        a = ContinuousVariable(\"a\", 10)\n+        self.assertEqual(a.str_val(0.000000000001), \"1e-12\")\n \n     def test_adjust_decimals(self):\n         a = ContinuousVariable(\"a\")\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4543.0, "instance_id": "biolab__orange3-4543", "issue_numbers": 0, "base_commit": "3bb0749a843daf4aa0ca85630c22b38149f82438", "patch": "diff --git a/Orange/widgets/utils/state_summary.py b/Orange/widgets/utils/state_summary.py\nindex c43f14864..b77bf8cd1 100644\n--- a/Orange/widgets/utils/state_summary.py\n+++ b/Orange/widgets/utils/state_summary.py\n@@ -24,9 +24,7 @@ def format_variables_string(variables):\n         # `isinstance`, which would fail in the above case\n         var_type_list = [v for v in variables if type(v) is var_type]  # pylint: disable=unidiomatic-typecheck\n         if var_type_list:\n-            not_shown = ' (not shown)' if issubclass(var_type, StringVariable)\\\n-                else ''\n-            agg.append((f'{var_type_name}{not_shown}', len(var_type_list)))\n+            agg.append((var_type_name, len(var_type_list)))\n \n     attrs, counts = list(zip(*agg))\n     if len(attrs) > 1:\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_state_summary.py b/Orange/widgets/utils/tests/test_state_summary.py\nindex 14e61dfbf..463018631 100644\n--- a/Orange/widgets/utils/tests/test_state_summary.py\n+++ b/Orange/widgets/utils/tests/test_state_summary.py\n@@ -108,7 +108,7 @@ class TestUtils(unittest.TestCase):\n                   f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} categorical\\n' \\\n                   f'Target: categorical\\n' \\\n-                  f'Metas: string (not shown)'\n+                  f'Metas: string'\n         self.assertEqual(details, format_summary_details(data))\n \n         data = Table('housing')\n@@ -154,7 +154,7 @@ class TestUtils(unittest.TestCase):\n                   f'(2 categorical, 1 numeric, 1 time)\\n' \\\n                   f'Target: {len(data.domain.class_vars)} ' \\\n                   f'(1 categorical, 1 numeric)\\n' \\\n-                  f'Metas: {len(data.domain.metas)} string (not shown)'\n+                  f'Metas: {len(data.domain.metas)} string'\n         self.assertEqual(details, format_summary_details(data))\n \n         data = make_table([time_full, time_missing], target=[ints_missing],\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5411.0, "instance_id": "biolab__orange3-5411", "issue_numbers": 0, "base_commit": "cab0ee2c1d545cad2c18fa7979be4af9fcb4bfba", "patch": "diff --git a/Orange/preprocess/discretize.py b/Orange/preprocess/discretize.py\nindex f16a3f812..1502b97f0 100644\n--- a/Orange/preprocess/discretize.py\n+++ b/Orange/preprocess/discretize.py\n@@ -320,8 +320,11 @@ def decimal_binnings(\n         nbins = np.round((mx_ - mn_) / width)\n         if min_bins <= nbins <= max_bins \\\n                 and (not bins or bins[-1].nbins != nbins):\n-            bin_def = BinDefinition(mn_ + width * np.arange(nbins + 1),\n-                                    label_fmt, None, width)\n+            bins_ = mn_ + width * np.arange(nbins + 1)\n+            # to prevent values on the edge of the bin fall in the wrong bin\n+            # due to precision error on decimals that are not precise\n+            bins_ = np.around(bins_, decimals=np.finfo(bins_.dtype).precision)\n+            bin_def = BinDefinition(bins_, label_fmt, None, width)\n             bins.append(bin_def)\n     return bins\n \n.", "test_patch": "diff --git a/Orange/tests/test_discretize.py b/Orange/tests/test_discretize.py\nindex 1b938f825..119ac8c86 100644\n--- a/Orange/tests/test_discretize.py\n+++ b/Orange/tests/test_discretize.py\n@@ -8,7 +8,7 @@ from unittest import TestCase\n import numpy as np\n import scipy.sparse as sp\n \n-from Orange.preprocess import discretize, Discretize\n+from Orange.preprocess import discretize, Discretize, decimal_binnings\n from Orange import data\n from Orange.data import Table, Instance, Domain, ContinuousVariable, DiscreteVariable\n \n@@ -95,6 +95,34 @@ class TestEqualWidth(TestCase):\n         self.assertEqual(dvar.compute_value.points, [])\n \n \n+class TestBinning(TestCase):\n+    def test_decimal_binnings(self):\n+        values = np.array([\n+            -0.2, -0.2, -0.6, 1.0, 0.2, -0.6, 0.6, 1.0, 0.4, -0.5, -0.4, -0.4,\n+            -0.6, 0.6, 0.75, 0.4, -0.2, 0.2, 0.0, 0.0, -1.0, -0.6, -0.2, -0.6,\n+        ])\n+        binning = decimal_binnings(values, factors=[0.2, 0.25, 0.5])\n+        self.assertEqual(len(binning), 3)\n+\n+        np.testing.assert_array_equal(\n+            binning[0].thresholds,\n+            [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1]\n+        )\n+        self.assertEqual(binning[0].width, 0.2)\n+\n+        np.testing.assert_array_equal(\n+            binning[1].thresholds,\n+            [-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1]\n+        )\n+        self.assertEqual(binning[1].width, 0.25)\n+\n+        np.testing.assert_array_equal(\n+            binning[2].thresholds,\n+            [-1, -0.5, 0, 0.5, 1]\n+        )\n+        self.assertEqual(binning[2].width, 0.5)\n+\n+\n # noinspection PyPep8Naming\n class TestEntropyMDL(TestCase):\n     def test_entropy_with_two_values(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4490.0, "instance_id": "biolab__orange3-4490", "issue_numbers": 0, "base_commit": "e57202073b6fcfd0e2986cd30e9b4358d1318081", "patch": "diff --git a/Orange/preprocess/discretize.py b/Orange/preprocess/discretize.py\nindex 7b0e9e224..8b02bab1d 100644\n--- a/Orange/preprocess/discretize.py\n+++ b/Orange/preprocess/discretize.py\n@@ -358,16 +358,15 @@ def time_binnings(data, *, min_bins=2, max_bins=50, min_unique=5, add_unique=0):\n \n \n def _time_binnings(mn, mx, min_pts, max_pts):\n-    yfmt = \"%y \" if mn.tm_year >= 1950 else \"%Y \"\n     bins = []\n     for place, step, fmt, unit in (\n             [(5, x, \"%H:%M:%S\", \"second\") for x in (1, 5, 10, 15, 30)] +\n             [(4, x, \"%b %d %H:%M\", \"minute\") for x in (1, 5, 10, 15, 30)] +\n-            [(3, x, yfmt + \"%b %d %H:%M\", \"hour\") for x in (1, 2, 3, 6, 12)] +\n-            [(2, 1, yfmt + \"%b %d\", \"day\")] +\n-            [(2, x, yfmt + \"%b %d\", \"week\") for x in (7, 14)] +\n-            [(1, x, yfmt + \"%b\", \"month\") for x in (1, 2, 3, 6)] +\n-            [(0, x, yfmt.strip(), \"year\") for x in (1, 2, 5, 10, 25, 50, 100)]):\n+            [(3, x, \"%y %b %d %H:%M\", \"hour\") for x in (1, 2, 3, 6, 12)] +\n+            [(2, 1, \"%y %b %d\", \"day\")] +\n+            [(2, x, \"%y %b %d\", \"week\") for x in (7, 14)] +\n+            [(1, x, \"%y %b\", \"month\") for x in (1, 2, 3, 6)] +\n+            [(0, x, \"%Y\", \"year\") for x in (1, 2, 5, 10, 25, 50, 100)]):\n         times = _time_range(mn, mx, place, step, min_pts, max_pts)\n         if not times:\n             continue\n@@ -437,10 +436,10 @@ def _simplified_labels(labels):\n         if len(firsts) > 1:\n             break\n         to_remove = firsts.pop()\n-        flen = len(to_remove) + 1\n+        flen = len(to_remove)\n         if any(len(lab) == flen for lab in labels):\n             break\n-        labels = [lab[flen:] for lab in labels]\n+        labels = [lab[flen+1:] for lab in labels]\n     for i in range(len(labels) - 1, 0, -1):\n         for k, c, d in zip(count(), labels[i].split(), labels[i - 1].split()):\n             if c != d:\n@@ -455,7 +454,7 @@ def _simplified_labels(labels):\n \n def _unique_time_bins(unique):\n     times = [time.gmtime(x) for x in unique]\n-    fmt = f'{\"%y \" if times[0][0] >= 1950 else \"%Y \"} %b %d'\n+    fmt = f'%y %b %d'\n     fmt += \" %H:%M\" * (len({t[2:] for t in times}) > 1)\n     fmt += \":%S\" * bool(np.all(unique % 60 == 0))\n     labels = [time.strftime(fmt, x) for x in times]\n.", "test_patch": "diff --git a/Orange/preprocess/tests/test_discretize.py b/Orange/preprocess/tests/test_discretize.py\nindex 9c8f01136..32fbe1d95 100644\n--- a/Orange/preprocess/tests/test_discretize.py\n+++ b/Orange/preprocess/tests/test_discretize.py\n@@ -32,18 +32,19 @@ class TestTimeBinning(unittest.TestCase):\n         self.assertEqual(\n             testbin((1975, 4, 2), (1989, 3, 1)),\n             [('10 years',\n-              ['70', '80', '90'],\n+              ['1970', '1980', '1990'],\n               [0, 315532800, 631152000]),\n              ('5 years',\n-              ['75', '80', '85', '90'],\n+              ['1975', '1980', '1985', '1990'],\n               [157766400, 315532800, 473385600, 631152000]),\n              ('2 years',\n-              ['74', '76', '78', '80', '82', '84', '86', '88', '90'],\n+              ['1974', '1976', '1978', '1980', '1982', '1984', '1986', '1988',\n+               '1990'],\n               [126230400, 189302400, 252460800, 315532800, 378691200, 441763200,\n                504921600, 567993600, 631152000]),\n              ('1 year',\n-              ['75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85',\n-               '86', '87', '88', '89', '90'],\n+              ['1975', '1976', '1977', '1978', '1979', '1980', '1981', '1982',\n+               '1983', '1984', '1985', '1986', '1987', '1988', '1989', '1990'],\n               [157766400, 189302400, 220924800, 252460800, 283996800, 315532800,\n                347155200, 378691200, 410227200, 441763200, 473385600, 504921600,\n                536457600, 567993600, 599616000, 631152000]),\n@@ -64,10 +65,10 @@ class TestTimeBinning(unittest.TestCase):\n         self.assertEqual(\n             testbin((1975, 4, 2), (1978, 3, 1)),\n             [('2 years',\n-              ['74', '76', '78', '80'],\n+              ['1974', '1976', '1978', '1980'],\n               [126230400, 189302400, 252460800, 315532800]),\n              ('1 year',\n-              ['75', '76', '77', '78', '79'],\n+              ['1975', '1976', '1977', '1978', '1979'],\n               [157766400, 189302400, 220924800, 252460800, 283996800]),\n              ('6 months',\n               ['75 Jan', 'Jul',\n@@ -626,6 +627,50 @@ class TestTimeBinning(unittest.TestCase):\n                -1437832012, -1437832011, -1437832010, -1437832009, -1437832008,\n                -1437832007])])\n \n+        self.assertEqual(\n+            testbin((1973, 9, 14), (2010, 9, 8)),\n+            [\n+                ('50 years',\n+                 ['1950', '2000', '2050'],\n+                 [-631152000, 946684800, 2524608000]),\n+                ('25 years',\n+                 ['1950', '1975', '2000', '2025'],\n+                 [-631152000, 157766400, 946684800, 1735689600]),\n+                ('10 years',\n+                 ['1970', '1980', '1990', '2000', '2010', '2020'],\n+                 [0, 315532800, 631152000, 946684800, 1262304000, 1577836800]),\n+                ('5 years',\n+                 ['1970', '1975', '1980', '1985', '1990', '1995', '2000',\n+                  '2005', '2010', '2015'],\n+                 [0, 157766400, 315532800, 473385600, 631152000, 788918400,\n+                  946684800, 1104537600, 1262304000, 1420070400]),\n+                ('2 years',\n+                 ['1972', '1974', '1976', '1978', '1980', '1982', '1984',\n+                  '1986', '1988', '1990', '1992', '1994', '1996', '1998',\n+                  '2000', '2002', '2004', '2006', '2008', '2010', '2012'],\n+                 [63072000, 126230400, 189302400, 252460800, 315532800,\n+                  378691200, 441763200, 504921600, 567993600, 631152000,\n+                  694224000, 757382400, 820454400, 883612800, 946684800,\n+                  1009843200, 1072915200, 1136073600, 1199145600, 1262304000,\n+                  1325376000]),\n+                ('1 year',\n+                 ['1973', '1974', '1975', '1976', '1977', '1978', '1979',\n+                  '1980', '1981', '1982', '1983', '1984', '1985', '1986',\n+                  '1987', '1988', '1989', '1990', '1991', '1992', '1993',\n+                  '1994', '1995', '1996', '1997', '1998', '1999', '2000',\n+                  '2001', '2002', '2003', '2004', '2005', '2006', '2007',\n+                  '2008', '2009', '2010', '2011'],\n+                 [94694400, 126230400, 157766400, 189302400, 220924800,\n+                  252460800, 283996800, 315532800, 347155200, 378691200,\n+                  410227200, 441763200, 473385600, 504921600, 536457600,\n+                  567993600, 599616000, 631152000, 662688000, 694224000,\n+                  725846400, 757382400, 788918400, 820454400, 852076800,\n+                  883612800, 915148800, 946684800, 978307200, 1009843200,\n+                  1041379200, 1072915200, 1104537600, 1136073600, 1167609600,\n+                  1199145600, 1230768000, 1262304000, 1293840000])\n+            ]\n+        )\n+\n     def test_min_unique(self):\n         bins = time_binnings(self.dates, min_unique=7)\n         self.assertEqual(len(bins), 1)\n@@ -656,6 +701,12 @@ class TestTimeBinning(unittest.TestCase):\n         self.assertEqual(len(bins), 1)\n         np.testing.assert_equal(bins[0].thresholds, [42, 43])\n \n+    def test_multiple_identical(self):\n+        dates = np.array([42] * 5)\n+        bins = time_binnings(dates)\n+        self.assertEqual(len(bins), 1)\n+        np.testing.assert_equal(bins[0].thresholds, [42, 43])\n+\n     def test_no_values(self):\n         dates = np.array([])\n         self.assertRaises(ValueError, time_binnings, dates)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5474.0, "instance_id": "biolab__orange3-5474", "issue_numbers": 0, "base_commit": "a78eaf3e037b91a2e8048625079866be7fbdf2f7", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 401902f4a..f0476dc32 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -371,7 +371,9 @@ def table_to_frame(tab, include_metas=False):\n         elif col.is_continuous:\n             dt = float\n             # np.nan are not compatible with int column\n-            if col.number_of_decimals == 0 and not np.any(np.isnan(vals)):\n+            # using pd.isnull since np.isnan fails on array with dtype object\n+            # which can happen when metas contain column with strings\n+            if col.number_of_decimals == 0 and not np.any(pd.isnull(vals)):\n                 dt = int\n             result = (col.name, pd.Series(vals).astype(dt))\n         elif col.is_string:\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 6182c7023..91b1b361d 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -81,6 +81,18 @@ class TestPandasCompat(unittest.TestCase):\n         self.assertEqual(list(df['sepal length'])[0:4], [5.1, 4.9, 4.7, 4.6])\n         self.assertEqual(list(df['iris'])[0:2], ['Iris-setosa', 'Iris-setosa'])\n \n+    def test_table_to_frame_object_dtype(self):\n+        from Orange.data.pandas_compat import table_to_frame\n+\n+        domain = Domain([], metas=[ContinuousVariable(\"a\", number_of_decimals=0)])\n+        table = Table.from_numpy(\n+            domain, np.empty((10, 0)), metas=np.ones((10, 1), dtype=object)\n+        )\n+\n+        df = table_to_frame(table, include_metas=True)\n+        self.assertEqual([\"a\"], df.columns)\n+        np.testing.assert_array_equal(df[\"a\"].values, np.ones((10,)))\n+\n     def test_table_to_frame_nans(self):\n         from Orange.data.pandas_compat import table_to_frame\n         domain = Domain(\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3986.0, "instance_id": "biolab__orange3-3986", "issue_numbers": 0, "base_commit": "a818c1d6a21ea5b17613e3e1d4e42aa4a9790685", "patch": "diff --git a/Orange/widgets/data/owconcatenate.py b/Orange/widgets/data/owconcatenate.py\nindex 88a8b5f27..3bb1eb2e9 100644\n--- a/Orange/widgets/data/owconcatenate.py\n+++ b/Orange/widgets/data/owconcatenate.py\n@@ -20,7 +20,7 @@ from Orange.widgets.settings import Setting\n from Orange.widgets.utils.annotated_data import add_columns\n from Orange.widgets.utils.sql import check_sql_input\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n-from Orange.widgets.widget import Input, Output\n+from Orange.widgets.widget import Input, Output, Msg\n \n \n class OWConcatenate(widget.OWWidget):\n@@ -40,6 +40,9 @@ class OWConcatenate(widget.OWWidget):\n     class Outputs:\n         data = Output(\"Data\", Orange.data.Table)\n \n+    class Error(widget.OWWidget.Error):\n+        bow_concatenation = Msg(\"Inputs must be of the same type.\")\n+\n     merge_type: int\n     append_source_column: bool\n     source_column_role: int\n@@ -151,7 +154,22 @@ class OWConcatenate(widget.OWWidget):\n \n     def handleNewSignals(self):\n         self.mergebox.setDisabled(self.primary_data is not None)\n-        self.unconditional_apply()\n+        if self.incompatible_types():\n+            self.Error.bow_concatenation()\n+        else:\n+            self.Error.bow_concatenation.clear()\n+            self.unconditional_apply()\n+\n+    def incompatible_types(self):\n+        types_ = set()\n+        if self.primary_data is not None:\n+            types_.add(type(self.primary_data))\n+        for key in self.more_data:\n+            types_.add(type(self.more_data[key]))\n+        if len(types_) > 1:\n+            return True\n+\n+        return False\n \n     def apply(self):\n         tables, domain, source_var = [], None, None\n@@ -196,8 +214,12 @@ class OWConcatenate(widget.OWWidget):\n         self.Outputs.data.send(data)\n \n     def _merge_type_changed(self, ):\n-        if self.primary_data is None and self.more_data:\n-            self.apply()\n+        if self.incompatible_types():\n+            self.Error.bow_concatenation()\n+        else:\n+            self.Error.bow_concatenation.clear()\n+            if self.primary_data is None and self.more_data:\n+                self.apply()\n \n     def _source_changed(self):\n         self.apply()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owconcatenate.py b/Orange/widgets/data/tests/test_owconcatenate.py\nindex 85e4a4ae7..26e532708 100644\n--- a/Orange/widgets/data/tests/test_owconcatenate.py\n+++ b/Orange/widgets/data/tests/test_owconcatenate.py\n@@ -1,5 +1,6 @@\n # Test methods with long descriptive names can omit docstrings\n # pylint: disable=missing-docstring\n+# pylint: disable=abstract-method\n import unittest\n from unittest.mock import patch\n \n@@ -17,6 +18,10 @@ from Orange.widgets.tests.base import WidgetTest\n \n class TestOWConcatenate(WidgetTest):\n \n+    class DummyTable(Table):\n+\n+        pass\n+\n     def setUp(self):\n         self.widget = self.create_widget(OWConcatenate)\n         self.iris = Table(\"iris\")\n@@ -117,6 +122,17 @@ class TestOWConcatenate(WidgetTest):\n             self.send_signal(self.widget.Inputs.primary_data, self.iris)\n             apply.assert_called()\n \n+    def test_type_compatibility(self):\n+        # result is on the Output for compatible types\n+        self.send_signal(self.widget.Inputs.primary_data, self.iris)\n+        self.send_signal(self.widget.Inputs.additional_data, self.iris)\n+        self.assertIsNotNone(self.widget.Outputs.data)\n+        self.assertFalse(self.widget.Error.bow_concatenation.is_shown())\n+        # test incompatible type error\n+        self.send_signal(self.widget.Inputs.primary_data, self.iris)\n+        self.send_signal(self.widget.Inputs.additional_data, self.DummyTable())\n+        self.assertTrue(self.widget.Error.bow_concatenation.is_shown())\n+\n \n class TestTools(unittest.TestCase):\n     def test_domain_intersect(self):\n@@ -166,3 +182,7 @@ class TestTools(unittest.TestCase):\n         self.assertSequenceEqual(res.attributes, domain1.attributes)\n         self.assertSequenceEqual(res.class_vars, domain1.class_vars)\n         self.assertSequenceEqual(res.metas, domain1.metas)\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4207.0, "instance_id": "biolab__orange3-4207", "issue_numbers": 0, "base_commit": "5abc0a229b66b32a740804b9da138b46ffc255d2", "patch": "diff --git a/Orange/preprocess/fss.py b/Orange/preprocess/fss.py\nindex e6e3620cf..b892508bd 100644\n--- a/Orange/preprocess/fss.py\n+++ b/Orange/preprocess/fss.py\n@@ -91,8 +91,9 @@ class SelectBestFeatures(Reprable):\n         return data.transform(domain)\n \n     def score_only_nice_features(self, data, method):\n+        # dtype must be defined because array can be empty\n         mask = np.array([isinstance(a, method.feature_type)\n-                         for a in data.domain.attributes])\n+                         for a in data.domain.attributes], dtype=np.bool)\n         features = [f for f in data.domain.attributes\n                     if isinstance(f, method.feature_type)]\n         scores = [method(data, f) for f in features]\n.", "test_patch": "diff --git a/Orange/preprocess/tests/test_fss.py b/Orange/preprocess/tests/test_fss.py\nnew file mode 100644\nindex 000000000..14c5c3fdc\n--- /dev/null\n+++ b/Orange/preprocess/tests/test_fss.py\n@@ -0,0 +1,36 @@\n+import unittest\n+from unittest.mock import Mock\n+\n+import numpy as np\n+\n+from Orange.data import Domain, Table, DiscreteVariable, ContinuousVariable\n+from Orange.preprocess import fss\n+\n+\n+class SelectBestFeaturesTest(unittest.TestCase):\n+    def test_no_nice_features(self):\n+        method = Mock()\n+        method.feature_type = DiscreteVariable\n+        selector = fss.SelectBestFeatures(method, 5)\n+\n+        domain = Domain([])\n+        data = Table.from_numpy(domain, np.zeros((100, 0)))\n+        selection = selector.score_only_nice_features(data, method)\n+        self.assertEqual(selection.size, 0)\n+        method.assert_not_called()\n+\n+        domain = Domain([ContinuousVariable(\"x\")])\n+        data = Table.from_numpy(domain, np.zeros((100, 1)))\n+        selector.decreasing = True\n+        selection = selector.score_only_nice_features(data, method)\n+        np.testing.assert_equal(selection, [float('-inf')])\n+        method.assert_not_called()\n+\n+        selector.decreasing = False\n+        selection = selector.score_only_nice_features(data, method)\n+        np.testing.assert_equal(selection, [float('inf')])\n+        method.assert_not_called()\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4502.0, "instance_id": "biolab__orange3-4502", "issue_numbers": 0, "base_commit": "9541a292c32883fcf173c2c3eeb68b92a2b827fd", "patch": "diff --git a/Orange/widgets/data/owpurgedomain.py b/Orange/widgets/data/owpurgedomain.py\nindex 6aabce248..7e65d3357 100644\n--- a/Orange/widgets/data/owpurgedomain.py\n+++ b/Orange/widgets/data/owpurgedomain.py\n@@ -5,6 +5,7 @@ from Orange.widgets import gui, widget\n from Orange.widgets.settings import Setting\n from Orange.widgets.utils.sql import check_sql_input\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n \n \n@@ -100,11 +101,16 @@ class OWPurgeDomain(widget.OWWidget):\n         gui.auto_send(self.buttonsArea, self, \"autoSend\")\n         gui.rubber(self.controlArea)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n     @Inputs.data\n     @check_sql_input\n     def setData(self, dataset):\n         if dataset is not None:\n             self.data = dataset\n+            self.info.set_input_summary(len(dataset),\n+                                        format_summary_details(dataset))\n             self.unconditional_commit()\n         else:\n             self.removedAttrs = \"-\"\n@@ -117,6 +123,8 @@ class OWPurgeDomain(widget.OWWidget):\n             self.reducedMetas = \"-\"\n             self.Outputs.data.send(None)\n             self.data = None\n+            self.info.set_input_summary(self.info.NoInput)\n+            self.info.set_output_summary(self.info.NoOutput)\n \n     def optionsChanged(self):\n         self.commit()\n@@ -149,6 +157,8 @@ class OWPurgeDomain(widget.OWWidget):\n         self.removedMetas = meta_res['removed']\n         self.reducedMetas = meta_res['reduced']\n \n+        self.info.set_output_summary(len(cleaned),\n+                                     format_summary_details(cleaned))\n         self.Outputs.data.send(cleaned)\n \n     def send_report(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpurgedomain.py b/Orange/widgets/data/tests/test_owpurgedomain.py\nnew file mode 100644\nindex 000000000..dae381883\n--- /dev/null\n+++ b/Orange/widgets/data/tests/test_owpurgedomain.py\n@@ -0,0 +1,32 @@\n+# pylint: disable=unsubscriptable-object\n+from unittest.mock import Mock\n+\n+from Orange.data import Table\n+from Orange.widgets.data.owpurgedomain import OWPurgeDomain\n+from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.utils.state_summary import format_summary_details\n+\n+\n+class TestOWPurgeDomain(WidgetTest):\n+    def setUp(self):\n+        self.widget = self.create_widget(OWPurgeDomain)\n+        self.iris = Table(\"iris\")\n+\n+    def test_summary(self):\n+        \"\"\"Check if the status bar is updated when data is received\"\"\"\n+        data = self.iris\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4421.0, "instance_id": "biolab__orange3-4421", "issue_numbers": 0, "base_commit": "e57202073b6fcfd0e2986cd30e9b4358d1318081", "patch": "diff --git a/Orange/widgets/settings.py b/Orange/widgets/settings.py\nindex c50997f77..5947c52e6 100644\n--- a/Orange/widgets/settings.py\n+++ b/Orange/widgets/settings.py\n@@ -66,9 +66,10 @@ class DomainContextHandler(ContextHandler):\n \n     MATCH_VALUES_NONE, MATCH_VALUES_CLASS, MATCH_VALUES_ALL = range(3)\n \n-    def __init__(self, *, match_values=0, **kwargs):\n+    def __init__(self, *, match_values=0, first_match=True, **kwargs):\n         super().__init__()\n         self.match_values = match_values\n+        self.first_match = first_match\n \n         for name in kwargs:\n             warnings.warn(\n@@ -81,7 +82,8 @@ class DomainContextHandler(ContextHandler):\n         warnings.warn(\n             \"Storing variables as strings in settings is deprecated.\\n\"\n             \"Support for this will be dropped in Orange 3.26.\\n\"\n-            f\"Change {setting.name} to store an instance of `Variable`.\")\n+            f\"Change {setting.name} to store an instance of `Variable`.\",\n+            stacklevel=9)\n \n     def encode_domain(self, domain):\n         \"\"\"\n@@ -208,9 +210,6 @@ class DomainContextHandler(ContextHandler):\n                 metas.get(attr_name, -1) == attr_type)\n \n     def match(self, context, domain, attrs, metas):\n-        if (attrs, metas) == (context.attributes, context.metas):\n-            return self.PERFECT_MATCH\n-\n         matches = []\n         try:\n             for setting, data, _ in \\\n@@ -234,9 +233,11 @@ class DomainContextHandler(ContextHandler):\n         except IncompatibleContext:\n             return self.NO_MATCH\n \n+        if self.first_match:\n+            return 1  # Change to self.MATCH after releasing orange-widget-base\n+\n         matches.append((0, 0))\n         matched, available = [sum(m) for m in zip(*matches)]\n-\n         return matched / available if available else 0.1\n \n     def match_list(self, setting, value, context, attrs, metas):\n.", "test_patch": "diff --git a/Orange/widgets/tests/test_domain_context_handler.py b/Orange/widgets/tests/test_domain_context_handler.py\nindex bf39eb6e3..627f10fbf 100644\n--- a/Orange/widgets/tests/test_domain_context_handler.py\n+++ b/Orange/widgets/tests/test_domain_context_handler.py\n@@ -68,11 +68,6 @@ class TestDomainContextHandler(TestCase):\n         self.assertEqual(encoded_metas,\n                          {'c2': Continuous - 100, 'd4': list('jkl')})\n \n-    def test_match_returns_2_on_perfect_match(self):\n-        context = Mock(\n-            attributes=self.args[1], metas=self.args[2], values={})\n-        self.assertEqual(2., self.handler.match(context, *self.args))\n-\n     def test_match_returns_1_if_everything_matches(self):\n         self.handler.bind(SimpleWidget)\n \n@@ -100,11 +95,11 @@ class TestDomainContextHandler(TestCase):\n         ))\n         self.assertEqual(1., self.handler.match(context, *self.args))\n \n-    def test_match_returns_point_1_when_nothing_to_match(self):\n+    def test_match_when_nothing_to_match(self):\n         self.handler.bind(SimpleWidget)\n \n         context = Mock(values={})\n-        self.assertEqual(0.1, self.handler.match(context, *self.args))\n+        self.assertEqual(1, self.handler.match(context, *self.args))\n \n     def test_match_returns_zero_on_incompatible_context(self):\n         self.handler.bind(SimpleWidget)\n@@ -137,7 +132,7 @@ class TestDomainContextHandler(TestCase):\n             with_metas=[('d1', Discrete), ('d2', Discrete)]\n         ))\n         self.handler.global_contexts = \\\n-            [Mock(values={}), context, Mock(values={})]\n+            [context, Mock(values={})]\n \n         widget = SimpleWidget()\n         self.handler.initialize(widget)\n@@ -154,6 +149,28 @@ class TestDomainContextHandler(TestCase):\n                                              ('d2', Discrete)])\n \n     def test_open_context_with_imperfect_match(self):\n+        self.handler.bind(SimpleWidget)\n+        context = self.create_context(None, dict(\n+            text=('u', -2),\n+            with_metas=[('d1', Discrete), ('d1', Continuous),\n+                        ('c1', Continuous), ('c1', Discrete)]\n+        ))\n+        self.handler.global_contexts = \\\n+            [context, Mock(values={})]\n+\n+        widget = SimpleWidget()\n+        self.handler.initialize(widget)\n+        self.handler.open_context(widget, self.args[0])\n+\n+        context = widget.current_context\n+        self.assertEqual(context.attributes, self.args[1])\n+        self.assertEqual(context.metas, self.args[2])\n+\n+        self.assertEqual(widget.text, 'u')\n+        self.assertEqual(widget.with_metas, [('d1', Discrete),\n+                                             ('c1', Continuous)])\n+\n+    def test_open_context_not_first_match(self):\n         self.handler.bind(SimpleWidget)\n         context = self.create_context(None, dict(\n             text=('u', -2),\n@@ -162,6 +179,7 @@ class TestDomainContextHandler(TestCase):\n         ))\n         self.handler.global_contexts = \\\n             [Mock(values={}), context, Mock(values={})]\n+        self.handler.first_match = False\n \n         widget = SimpleWidget()\n         self.handler.initialize(widget)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4535.0, "instance_id": "biolab__orange3-4535", "issue_numbers": 0, "base_commit": "d61803f7181e7ad525d4bb1dd71ca500bb41617e", "patch": "diff --git a/Orange/widgets/utils/colorpalettes.py b/Orange/widgets/utils/colorpalettes.py\nindex fbbb61456..a2cb3c244 100644\n--- a/Orange/widgets/utils/colorpalettes.py\n+++ b/Orange/widgets/utils/colorpalettes.py\n@@ -7,6 +7,7 @@ import numpy as np\n from AnyQt.QtCore import Qt\n from AnyQt.QtGui import QImage, QPixmap, QColor, QIcon\n \n+from Orange.data import Variable, DiscreteVariable, ContinuousVariable\n from Orange.util import Enum, hex_to_color, color_to_hex\n \n NAN_COLOR = (128, 128, 128)\n@@ -559,20 +560,23 @@ def get_default_curve_colors(n):\n def patch_variable_colors():\n     # This function patches Variable with properties and private attributes:\n     # pylint: disable=protected-access\n-    from Orange.data import Variable, DiscreteVariable, ContinuousVariable\n-\n     def get_colors(var):\n         return var._colors\n \n     def set_colors(var, colors):\n         var._colors = colors\n+        if isinstance(var._colors, np.ndarray):\n+            var._colors.flags.writeable = False\n         var._palette = None\n+        if \"palette\" in var.attributes:\n+            del var.attributes[\"palette\"]\n+\n+    def continuous_set_colors(var, colors):\n+        set_colors(var, colors)\n         var.attributes[\"colors\"] = [\n             color_to_hex(color) if isinstance(color, (Sequence, np.ndarray))\n             else color\n             for color in colors]\n-        if \"palette\" in var.attributes:\n-            del var.attributes[\"palette\"]\n \n     def get_palette(var):\n         return var._palette\n@@ -616,28 +620,45 @@ def patch_variable_colors():\n         return var._palette\n \n     def discrete_get_colors(var):\n-        if var._colors is None or len(var._colors) < len(var.values):\n+        def retrieve_colors():\n             if var._palette is not None or \"palette\" in var.attributes:\n-                var._colors = var.palette.palette[:len(var.values)]\n-            else:\n-                var._colors = np.empty((0, 3), dtype=object)\n+                palette = var.palette.palette\n+                if len(palette) >= nvalues:\n+                    return palette[:nvalues]\n+\n             colors = var.attributes.get(\"colors\")\n-            if colors:\n-                try:\n-                    var._colors = np.vstack(\n-                        ([hex_to_color(color) for color in colors],\n-                         var._colors[len(colors):]))\n+            if isinstance(colors, list) and len(colors) == nvalues:\n+                try:  # catch errors in hex_to_color due to malformed files\n+                    return np.array([hex_to_color(color) for color in colors])\n                 except ValueError:\n                     pass\n-            if len(var._colors) < len(var.values):\n-                var._colors = LimitedDiscretePalette(len(var.values)).palette\n-            var._colors.flags.writeable = False\n+\n+            palette = LimitedDiscretePalette(nvalues).palette\n+            if isinstance(colors, dict):\n+                try:  # catch errors in hex_to_color due to malformed files\n+                    proposed = [value in colors and hex_to_color(colors[value])\n+                                for value in var.values]\n+                except ValueError:\n+                    pass\n+                else:\n+                    used = set(colors.values())\n+                    available = (color for color in palette\n+                                 if color_to_hex(color) not in used)\n+                    return np.array(\n+                        [color or next(available) for color in proposed])\n+\n+            return palette\n+\n+        nvalues = len(var.values)\n+        if var._colors is None or len(var._colors) != nvalues:\n+            set_colors(var, retrieve_colors())\n         return var._colors\n \n     def discrete_set_colors(var, colors):\n-        colors = colors.copy()\n-        colors.flags.writeable = False\n-        set_colors(var, colors)\n+        set_colors(var, np.array(colors))\n+        var.attributes[\"colors\"] = \\\n+            {value: color_to_hex(color)\n+             for value, color in zip(var.values, colors)}\n \n     def discrete_get_palette(var):\n         if var._palette is None:\n@@ -658,5 +679,5 @@ def patch_variable_colors():\n     DiscreteVariable.colors = property(discrete_get_colors, discrete_set_colors)\n     DiscreteVariable.palette = property(discrete_get_palette, set_palette)\n \n-    ContinuousVariable.colors = property(continuous_get_colors, set_colors)\n+    ContinuousVariable.colors = property(continuous_get_colors, continuous_set_colors)\n     ContinuousVariable.palette = property(continuous_get_palette, set_palette)\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_colorpalettes.py b/Orange/widgets/utils/tests/test_colorpalettes.py\nindex 8967d7b1b..9e763ccd1 100644\n--- a/Orange/widgets/utils/tests/test_colorpalettes.py\n+++ b/Orange/widgets/utils/tests/test_colorpalettes.py\n@@ -7,6 +7,7 @@ from AnyQt.QtCore import Qt\n from AnyQt.QtGui import QImage, QColor, QIcon\n \n from orangewidget.tests.base import GuiTest\n+from Orange.util import color_to_hex\n from Orange.data import DiscreteVariable, ContinuousVariable, Variable\n # pylint: disable=wildcard-import,unused-wildcard-import\n from Orange.widgets.utils.colorpalettes import *\n@@ -520,12 +521,16 @@ class PatchedVariableTest(unittest.TestCase):\n         colors = [Mock(), Mock()]\n         palette = Mock()\n         var.colors = colors\n+        # set_color for variable does not set this attribute; derived methods do\n+        var.attributes[\"colors\"] = colors\n         var.palette = palette\n         self.assertIsNone(var.colors)\n         self.assertTrue(\"palette\" in var.attributes)\n         self.assertFalse(\"colors\" in var.attributes)\n \n         var.colors = colors\n+        # set_color for variable does not set this attribute; derived methods do\n+        var.attributes[\"colors\"] = colors\n         self.assertIsNone(var.palette)\n         self.assertTrue(\"colors\" in var.attributes)\n         self.assertFalse(\"palette\" in var.attributes)\n@@ -540,13 +545,19 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n \n         var.colors = np.arange(6).reshape((2, 3))\n         np.testing.assert_almost_equal(var.colors, [[0, 1, 2], [3, 4, 5]])\n-        self.assertEqual(var.attributes[\"colors\"], [\"#000102\", \"#030405\"])\n+        self.assertEqual(var.attributes[\"colors\"],\n+                         {\"F\": \"#000102\", \"M\": \"#030405\"})\n         self.assertFalse(var.colors.flags.writeable)\n         with self.assertRaises(ValueError):\n             var.colors[0] = [42, 41, 40]\n \n         var = DiscreteVariable.make(\"x\", values=(\"A\", \"B\"))\n-        var.attributes[\"colors\"] = ['#0a0b0c', '#0d0e0f']\n+        var.attributes[\"colors\"] = {\"A\": \"#0a0b0c\", \"B\": \"#0d0e0f\"}\n+        np.testing.assert_almost_equal(var.colors, [[10, 11, 12], [13, 14, 15]])\n+\n+        # Backward compatibility with list-like attributes\n+        var = DiscreteVariable.make(\"x\", values=(\"A\", \"B\"))\n+        var.attributes[\"colors\"] = [\"#0a0b0c\", \"#0d0e0f\"]\n         np.testing.assert_almost_equal(var.colors, [[10, 11, 12], [13, 14, 15]])\n \n         # Test ncolors adapts to nvalues\n@@ -557,6 +568,14 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n         var.add_value('k')\n         self.assertEqual(len(var.colors), 4)\n \n+        # Missing colors are retrieved from palette\n+        var = DiscreteVariable.make(\"x\", values=(\"A\", \"B\", \"C\"))\n+        palette = LimitedDiscretePalette(3).palette\n+        var.attributes[\"colors\"] = {\"C\": color_to_hex(palette[0]),\n+                                    \"B\": \"#0D0E0F\"}\n+        np.testing.assert_almost_equal(var.colors,\n+                                       [palette[1], [13, 14, 15], palette[0]])\n+\n     def test_colors_fallback_to_palette(self):\n         var = DiscreteVariable.make(\"a\", values=(\"F\", \"M\"))\n         var.palette = Dark2Colors\n@@ -618,6 +637,12 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n         palette = var.palette\n         np.testing.assert_equal(palette.palette, [[10, 11, 12], [13, 14, 15]])\n \n+    def test_ignore_malfformed_atrtibutes(self):\n+        var = DiscreteVariable(\"a\", values=(\"M\", \"F\"))\n+        var.attributes[\"colors\"] = {\"F\": \"foo\", \"M\": \"bar\"}\n+        palette = var.palette\n+        np.testing.assert_equal(palette.palette,\n+                                LimitedDiscretePalette(2).palette)\n \n class PatchedContinuousVariableTest(unittest.TestCase):\n     def test_colors(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5190.0, "instance_id": "biolab__orange3-5190", "issue_numbers": 0, "base_commit": "2e4803d4b6fa0a0daf044d4a3d5b6511553cac53", "patch": "diff --git a/Orange/data/domain.py b/Orange/data/domain.py\nindex 35e5a0dc7..f3988a5ad 100644\n--- a/Orange/data/domain.py\n+++ b/Orange/data/domain.py\n@@ -1,3 +1,4 @@\n+import itertools\n import warnings\n \n from math import log\n@@ -245,14 +246,13 @@ class Domain:\n     def metas(self):\n         return self._metas\n \n-    @deprecated(\"len(Domain.variables)\")\n     def __len__(self):\n         \"\"\"The number of variables (features and class attributes).\n \n         The current behavior returns the length of only features and\n         class attributes. In the near future, it will include the\n         length of metas, too, and __iter__ will act accordingly.\"\"\"\n-        return len(self._variables)\n+        return len(self._variables) + len(self._metas)\n \n     def __bool__(self):\n         warnings.warn(\n@@ -308,18 +308,11 @@ class Domain:\n         \"\"\"\n         return item in self._indices or self._get_equivalent(item) is not None\n \n-    @deprecated(\"Domain.variables\")\n     def __iter__(self):\n         \"\"\"\n         Return an iterator through variables (features and class attributes).\n-\n-        The current behaviour is confusing, as `x in domain` returns True\n-        for meta variables, but iter(domain) does not yield them.\n-        This will be consolidated eventually (in 3.12?), the code that\n-        currently iterates over domain should iterate over domain.variables\n-        instead.\n         \"\"\"\n-        return iter(self._variables)\n+        return itertools.chain(self._variables, self._metas)\n \n     def __str__(self):\n         \"\"\"\n.", "test_patch": "diff --git a/Orange/tests/test_domain.py b/Orange/tests/test_domain.py\nindex db8f846de..73386a01a 100644\n--- a/Orange/tests/test_domain.py\n+++ b/Orange/tests/test_domain.py\n@@ -1,6 +1,5 @@\n # Test methods with long descriptive names can omit docstrings\n # pylint: disable=missing-docstring\n-import warnings\n from time import time\n from numbers import Real\n from itertools import starmap, chain\n@@ -15,7 +14,6 @@ from Orange.data import (\n from Orange.data.domain import filter_visible\n from Orange.preprocess import Continuize, Impute\n from Orange.tests.base import create_pickling_tests\n-from Orange.util import OrangeDeprecationWarning\n \n \n def create_domain(*ss):\n@@ -272,21 +270,14 @@ class TestDomainInit(unittest.TestCase):\n             [] in d\n \n     def test_iter(self):\n-        with warnings.catch_warnings(record=True):\n-            warnings.simplefilter(\"error\")\n-\n-            d = Domain((age, gender, income), metas=(ssn,))\n-            with self.assertRaises(OrangeDeprecationWarning):\n-                list(d)\n-\n-            warnings.simplefilter(\"ignore\")\n-            self.assertEqual([var for var in d], [age, gender, income])\n+        d = Domain((age, gender, income), metas=(ssn,))\n+        self.assertEqual(list(d), [age, gender, income, ssn])\n \n-            d = Domain((age, ), metas=(ssn,))\n-            self.assertEqual([var for var in d], [age])\n+        d = Domain((age, ), metas=(ssn,))\n+        self.assertEqual(list(d), [age, ssn])\n \n-            d = Domain((), metas=(ssn,))\n-            self.assertEqual([var for var in d], [])\n+        d = Domain((), metas=(ssn,))\n+        self.assertEqual(list(d), [ssn])\n \n     def test_str(self):\n         cases = (\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4271.0, "instance_id": "biolab__orange3-4271", "issue_numbers": 0, "base_commit": "a20b32f3561e4c98e6dcaa99ca939f7ceb1e9973", "patch": "diff --git a/Orange/widgets/data/owselectcolumns.py b/Orange/widgets/data/owselectcolumns.py\nindex 9e673d257..8b54eaf3e 100644\n--- a/Orange/widgets/data/owselectcolumns.py\n+++ b/Orange/widgets/data/owselectcolumns.py\n@@ -5,7 +5,7 @@ from AnyQt.QtWidgets import QWidget, QGridLayout\n from AnyQt.QtWidgets import QListView\n from AnyQt.QtCore import (\n     Qt, QTimer, QSortFilterProxyModel, QItemSelection, QItemSelectionModel,\n-    QMimeData\n+    QMimeData, QAbstractItemModel\n )\n \n from Orange.widgets import gui, widget\n@@ -411,12 +411,20 @@ class OWSelectAttributes(widget.OWWidget):\n             rows = [model.mapToSource(r) for r in rows]\n         return [r.row() for r in rows]\n \n-    def move_rows(self, view, rows, offset):\n-        model = view.model()\n-        newrows = [min(max(0, row + offset), len(model) - 1) for row in rows]\n+    def move_rows(self, view: QListView, offset: int, roles=(Qt.EditRole,)):\n+        rows = [idx.row() for idx in view.selectionModel().selectedRows()]\n+        model = view.model()  # type: QAbstractItemModel\n+        rowcount = model.rowCount()\n+        newrows = [min(max(0, row + offset), rowcount - 1) for row in rows]\n+\n+        def itemData(index):\n+            return {role: model.data(index, role) for role in roles}\n \n         for row, newrow in sorted(zip(rows, newrows), reverse=offset > 0):\n-            model[row], model[newrow] = model[newrow], model[row]\n+            d1 = itemData(model.index(row, 0))\n+            d2 = itemData(model.index(newrow, 0))\n+            model.setItemData(model.index(row, 0), d2)\n+            model.setItemData(model.index(newrow, 0), d1)\n \n         selection = QItemSelection()\n         for nrow in newrows:\n@@ -427,13 +435,11 @@ class OWSelectAttributes(widget.OWWidget):\n \n         self.commit()\n \n-    def move_up(self, view):\n-        selected = self.selected_rows(view)\n-        self.move_rows(view, selected, -1)\n+    def move_up(self, view: QListView):\n+        self.move_rows(view, -1)\n \n-    def move_down(self, view):\n-        selected = self.selected_rows(view)\n-        self.move_rows(view, selected, 1)\n+    def move_down(self, view: QListView):\n+        self.move_rows(view, 1)\n \n     def move_selected(self, view):\n         if self.selected_rows(view):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectcolumns.py b/Orange/widgets/data/tests/test_owselectcolumns.py\nindex 718678035..d9d6aed27 100644\n--- a/Orange/widgets/data/tests/test_owselectcolumns.py\n+++ b/Orange/widgets/data/tests/test_owselectcolumns.py\n@@ -363,3 +363,26 @@ class TestOWSelectAttributes(WidgetTest):\n         mime.setProperty(\"_items\", variables)\n         return QDragEnterEvent(QPoint(0, 0), Qt.MoveAction, mime,\n                                Qt.NoButton, Qt.NoModifier)\n+\n+    def test_move_rows(self):\n+        data = Table(\"iris\")[:5]\n+        w = self.widget\n+        self.send_signal(w.Inputs.data, data)\n+        view = w.used_attrs_view\n+        model = view.model()\n+        selmodel = view.selectionModel()\n+        midx = model.index(1, 0)\n+        selmodel.select(midx, selmodel.ClearAndSelect)\n+\n+        w.move_up(view)\n+        d1 = self.get_output(w.Outputs.data, w)\n+        self.assertEqual(\n+            d1.domain.attributes,\n+            data.domain.attributes[:2][::-1] + data.domain.attributes[2:]\n+        )\n+        w.move_down(view)\n+        d1 = self.get_output(w.Outputs.data, w)\n+        self.assertEqual(\n+            d1.domain.attributes,\n+            data.domain.attributes\n+        )\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3545.0, "instance_id": "biolab__orange3-3545", "issue_numbers": 0, "base_commit": "2ca2558b943bac5b09d282a6a876065e74fe425c", "patch": "diff --git a/Orange/widgets/data/owsave.py b/Orange/widgets/data/owsave.py\nindex fd5212b7e..37ba1b3dc 100644\n--- a/Orange/widgets/data/owsave.py\n+++ b/Orange/widgets/data/owsave.py\n@@ -185,11 +185,11 @@ class OWSave(widget.OWWidget):\n \n     @staticmethod\n     def _replace_extension(filename, extension):\n-        if filename.endswith(extension):  # it may contain dots before extension\n-            return filename\n-        last_fn = None\n-        while last_fn != filename:\n-            last_fn, filename = filename, os.path.splitext(filename)[0]\n+        known_extensions = map(OWSave._extension_from_filter, OWSave.filters)\n+        for known_ext in sorted(known_extensions, key=len, reverse=True):\n+            if filename.endswith(known_ext):\n+                filename = filename[:-len(known_ext)]\n+                break\n         return filename + extension\n \n     @staticmethod\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owsave.py b/Orange/widgets/data/tests/test_owsave.py\nindex be33324bc..9b6b31766 100644\n--- a/Orange/widgets/data/tests/test_owsave.py\n+++ b/Orange/widgets/data/tests/test_owsave.py\n@@ -402,20 +402,23 @@ class TestFunctionalOWSave(WidgetTest):\n class TestOWSaveUtils(unittest.TestCase):\n     def test_replace_extension(self):\n         replace = OWSave._replace_extension\n-        fname = \"/bing.bada.boom/foo.bar.baz\"\n-        self.assertEqual(replace(fname, \".baz\"), fname)\n-        self.assertEqual(replace(fname, \".bar.baz\"), fname)\n-        self.assertEqual(replace(fname, \".txt\"), \"/bing.bada.boom/foo.txt\")\n+        fname = \"/bing.bada.boom/foo.1942.tab\"\n+        self.assertEqual(\n+            replace(fname, \".tab\"), \"/bing.bada.boom/foo.1942.tab\")\n+        self.assertEqual(\n+            replace(fname, \".tab.gz\"), \"/bing.bada.boom/foo.1942.tab.gz\")\n+        self.assertEqual(\n+            replace(fname, \".xlsx\"), \"/bing.bada.boom/foo.1942.xlsx\")\n \n-        fname = \"foo.bar.baz\"\n-        self.assertEqual(replace(fname, \".baz\"), fname)\n-        self.assertEqual(replace(fname, \".bar.baz\"), fname)\n-        self.assertEqual(replace(fname, \".txt\"), \"foo.txt\")\n-        self.assertEqual(replace(fname, \".bar.txt\"), \"foo.bar.txt\")\n+        fname = \"foo.tab.gz\"\n+        self.assertEqual(replace(fname, \".tab\"), \"foo.tab\")\n+        self.assertEqual(replace(fname, \".tab.gz\"), \"foo.tab.gz\")\n+        self.assertEqual(replace(fname, \".csv\"), \"foo.csv\")\n+        self.assertEqual(replace(fname, \".csv.gz\"), \"foo.csv.gz\")\n \n         fname = \"/bing.bada.boom/foo\"\n-        self.assertEqual(replace(fname, \".baz\"), fname + \".baz\")\n-        self.assertEqual(replace(fname, \".bar.baz\"), fname + \".bar.baz\")\n+        self.assertEqual(replace(fname, \".tab\"), fname + \".tab\")\n+        self.assertEqual(replace(fname, \".tab.gz\"), fname + \".tab.gz\")\n \n     def test_extension_from_filter(self):\n         self.assertEqual(\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4432.0, "instance_id": "biolab__orange3-4432", "issue_numbers": 0, "base_commit": "8d6dafa3baecd6e9a4873c52e2f2e42d438aceb1", "patch": "diff --git a/Orange/preprocess/remove.py b/Orange/preprocess/remove.py\nindex 7ae17376a..52a9bd5ef 100644\n--- a/Orange/preprocess/remove.py\n+++ b/Orange/preprocess/remove.py\n@@ -2,7 +2,7 @@ from collections import namedtuple\n \n import numpy as np\n \n-from Orange.data import Domain, DiscreteVariable, Table\n+from Orange.data import Domain, DiscreteVariable\n from Orange.preprocess.transformation import Lookup\n from Orange.statistics.util import nanunique\n from .preprocess import Preprocess\n@@ -238,7 +238,10 @@ def remove_unused_values(var, data):\n     if len(unique) == len(var.values):\n         return var\n     used_values = [var.values[i] for i in unique]\n-    return DiscreteVariable(var.name, values=used_values, sparse=var.sparse)\n+    translation_table = np.array([np.NaN] * len(var.values))\n+    translation_table[unique] = range(len(used_values))\n+    return DiscreteVariable(var.name, values=used_values, sparse=var.sparse,\n+                            compute_value=Lookup(var, translation_table))\n \n \n def sort_var_values(var):\n.", "test_patch": "diff --git a/Orange/tests/test_remove.py b/Orange/tests/test_remove.py\nindex cf5ccc9dd..92f8dbb47 100644\n--- a/Orange/tests/test_remove.py\n+++ b/Orange/tests/test_remove.py\n@@ -6,7 +6,7 @@ import unittest\n import numpy as np\n \n from Orange.data import Table\n-from Orange.preprocess import Remove\n+from Orange.preprocess import Remove, discretize\n from Orange.tests import test_filename\n \n \n@@ -160,3 +160,16 @@ class TestRemover(unittest.TestCase):\n         cleaned = remover(data)\n         np.testing.assert_array_equal(cleaned.Y[:50], 0)\n         np.testing.assert_array_equal(cleaned.Y[50:], 1)\n+\n+    def test_remove_mapping_after_compute_value(self):\n+        housing = Table(\"housing\")\n+        method = discretize.EqualFreq(n=3)\n+        discretizer = discretize.DomainDiscretizer(\n+            discretize_class=True, method=method)\n+        domain = discretizer(housing)\n+        data = housing.transform(domain)\n+        val12 = np.nonzero(data.Y > 0)[0]\n+        data = data[val12]\n+        remover = Remove(class_flags=Remove.RemoveUnusedValues)\n+        cleaned = remover(data)\n+        np.testing.assert_equal(cleaned.Y, data.Y - 1)\ndiff --git a/Orange/widgets/data/tests/test_owselectrows.py b/Orange/widgets/data/tests/test_owselectrows.py\nindex c26fed71d..9d7cad92d 100644\n--- a/Orange/widgets/data/tests/test_owselectrows.py\n+++ b/Orange/widgets/data/tests/test_owselectrows.py\n@@ -10,6 +10,7 @@ import numpy as np\n \n from Orange.data import (\n     Table, ContinuousVariable, StringVariable, DiscreteVariable, Domain)\n+from Orange.preprocess import discretize\n from Orange.widgets.data.owselectrows import (\n     OWSelectRows, FilterDiscreteType, SelectRowsContextHandler)\n from Orange.widgets.tests.base import WidgetTest, datasets\n@@ -312,6 +313,21 @@ and remove test_support_old_settings and this test.\n Basically, revert this commit.\n \"\"\")\n \n+    def test_purge_discretized(self):\n+        housing = Table(\"housing\")\n+        method = discretize.EqualFreq(n=3)\n+        discretizer = discretize.DomainDiscretizer(\n+            discretize_class=True, method=method)\n+        domain = discretizer(housing)\n+        data = housing.transform(domain)\n+        widget = self.widget_with_context(domain, [[\"MEDV\", 2, (2, 3)]])\n+        widget.purge_classes = True\n+        self.send_signal(widget.Inputs.data, data)\n+        out = self.get_output(widget.Outputs.matching_data)\n+        expected = data.Y[(data.Y == 1) + (data.Y == 2)]\n+        expected = (expected == 2).astype(float)\n+        np.testing.assert_equal(out.Y, expected)\n+\n     def widget_with_context(self, domain, conditions):\n         ch = SelectRowsContextHandler()\n         context = ch.new_context(domain, *ch.encode_domain(domain))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4457.0, "instance_id": "biolab__orange3-4457", "issue_numbers": 0, "base_commit": "26d9382a074dd65549d090d6c372936903e2ed25", "patch": "diff --git a/Orange/widgets/data/owrank.py b/Orange/widgets/data/owrank.py\nindex edbf5ffb9..d84d3e79f 100644\n--- a/Orange/widgets/data/owrank.py\n+++ b/Orange/widgets/data/owrank.py\n@@ -395,7 +395,7 @@ class OWRank(OWWidget):\n     def get_scorer_scores(self, scorer):\n         try:\n             scores = scorer.scorer.score_data(self.data).T\n-        except ValueError:\n+        except (ValueError, TypeError):\n             log.error(\"%s doesn't work on this data\", scorer.name)\n             scores = np.full((len(self.data.domain.attributes), 1), np.nan)\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owrank.py b/Orange/widgets/data/tests/test_owrank.py\nindex 050ee3a0e..7a3dba35b 100644\n--- a/Orange/widgets/data/tests/test_owrank.py\n+++ b/Orange/widgets/data/tests/test_owrank.py\n@@ -247,6 +247,24 @@ class TestOWRank(WidgetTest):\n         self.assertEqual(self.get_output(self.widget.Outputs.scores).X.shape,\n                          (len(self.iris.domain.variables), 8))\n \n+    def test_no_class_data_learner_class_reg(self):\n+        \"\"\"\n+        Check workflow with learners that can be both classifier\n+        or regressor and data have no class variable. This test should not\n+        fail.\n+        \"\"\"\n+        data = Table.from_table(Domain(self.iris.domain.variables), self.iris)\n+        random_forest = RandomForestLearner()\n+        self.assertIsNone(data.domain.class_var)\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        with patch(\"Orange.widgets.data.owrank.log.error\") as log:\n+            self.send_signal(self.widget.Inputs.scorer, random_forest, 1)\n+            log.assert_called()\n+\n+        self.assertEqual(self.get_output(self.widget.Outputs.scores).X.shape,\n+                         (len(self.iris.domain.variables), 1))\n+\n     def test_scores_sorting(self):\n         \"\"\"Check clicking on header column orders scores in a different way\"\"\"\n         self.send_signal(self.widget.Inputs.data, self.iris)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": NaN, "instance_id": "biolab__orange3-None", "issue_numbers": 0, "base_commit": "0bd637d0f4b4948412bb001f037ad5f1ed8212b4", "patch": "diff --git a/Orange/data/io_base.py b/Orange/data/io_base.py\nindex 6b74e72a9..6a6d18920 100644\n--- a/Orange/data/io_base.py\n+++ b/Orange/data/io_base.py\n@@ -169,17 +169,27 @@ class _TableHeader:\n              e.g. d#sex,c#age,cC#IQ\n         \"\"\"\n \n-        def is_flag(x):\n-            return bool(cls._type_from_flag([x])[0] and\n-                        _RE_TYPES.match(cls._type_from_flag([x])[0]) or\n-                        Flags.RE_ALL.match(cls._flag_from_flag([x])[0]))\n-\n-        flags, names = zip(*[i.split(cls.HEADER1_FLAG_SEP, 1)\n-                             if cls.HEADER1_FLAG_SEP in i and\n-                             is_flag(i.split(cls.HEADER1_FLAG_SEP)[0])\n-                             else ('', i)\n-                             for i in headers[0]])\n-        names = list(names)\n+        roles = \"\".join([f for f in Flags.ALL.values() if len(f) == 1])  # cimw\n+        types = \"\".join([t for t in flatten(getattr(vartype, 'TYPE_HEADERS')\n+                                            for vartype in Variable.registry.values())\n+                         if len(t) == 1]).upper()  # CNDST\n+\n+        res = ('^(?:('\n+               f'[{roles}{types}]|'\n+               f'(?:[{roles}][{types}])|'\n+               f'(?:[{types}][{roles}])'\n+               ')#)?(.*)')\n+\n+        header1_re = re.compile(res)\n+\n+        flags = []\n+        names = []\n+        for i in headers[0]:\n+            m = header1_re.match(i)\n+            f, n = m.group(1), m.group(2)\n+            flags.append('' if f is None else f)\n+            names.append(n)\n+\n         return names, cls._type_from_flag(flags), cls._flag_from_flag(flags)\n \n     @classmethod\n.", "test_patch": "diff --git a/Orange/data/tests/test_io_base.py b/Orange/data/tests/test_io_base.py\nindex ba272c4d6..ed28f6b1f 100644\n--- a/Orange/data/tests/test_io_base.py\n+++ b/Orange/data/tests/test_io_base.py\n@@ -70,6 +70,16 @@ class TestTableHeader(InitTestData):\n         self.assertListEqual(types, types_)\n         self.assertListEqual(flags, flags_)\n \n+    def test_get_header_data_1_hashes(self):\n+        names, types, flags = _TableHeader.create_header_data(\n+            [[\"Some long text#and here\", \"vd#Invalid spec\", \"C#Valid spec\"]])\n+        names_ = [\"Some long text#and here\", \"vd#Invalid spec\", \"Valid spec\"]\n+        types_ = [\"\", \"\", \"c\"]\n+        flags_ = [\"\", \"\", \"\"]\n+        self.assertListEqual(names, names_)\n+        self.assertListEqual(types, types_)\n+        self.assertListEqual(flags, flags_)\n+\n     def test_get_header_data_3(self):\n         names, types, flags = _TableHeader.create_header_data(self.header3[:3])\n         self.assertListEqual(names, [\"a\", \"b\", \"c\", \"d\", \"w\", \"e\", \"f\", \"g\"])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4379.0, "instance_id": "biolab__orange3-4379", "issue_numbers": 0, "base_commit": "f5c74dead56dbbdfe160e96fb740d7bcb94ef221", "patch": "diff --git a/Orange/widgets/data/owcontinuize.py b/Orange/widgets/data/owcontinuize.py\nindex 3c52148af..5573d81eb 100644\n--- a/Orange/widgets/data/owcontinuize.py\n+++ b/Orange/widgets/data/owcontinuize.py\n@@ -34,9 +34,12 @@ class OWContinuize(widget.OWWidget):\n     buttons_area_orientation = Qt.Vertical\n     resizing_enabled = False\n \n+    # continuous treats\n+    Leave, NormalizeBySpan, NormalizeBySD = range(3)\n+\n     multinomial_treatment = Setting(0)\n     zero_based = Setting(1)\n-    continuous_treatment = Setting(0)\n+    continuous_treatment = Setting(Leave)\n     class_treatment = Setting(0)\n \n     transform_class = Setting(False)\n@@ -107,6 +110,7 @@ class OWContinuize(widget.OWWidget):\n     @check_sql_input\n     def setData(self, data):\n         self.data = data\n+        self.enable_normalization()\n         if data is None:\n             self.info.set_input_summary(self.info.NoInput)\n             self.info.set_output_summary(self.info.NoOutput)\n@@ -115,6 +119,15 @@ class OWContinuize(widget.OWWidget):\n             self.info.set_input_summary(len(data))\n             self.unconditional_commit()\n \n+    def enable_normalization(self):\n+        enable = not (self.data and self.data.is_sparse())\n+        if not enable and self.continuous_treatment in (self.NormalizeBySpan,\n+                                                        self.NormalizeBySD):\n+            self.continuous_treatment = self.Leave\n+        buttons = self.controls.continuous_treatment.buttons\n+        buttons[self.NormalizeBySpan].setEnabled(enable)\n+        buttons[self.NormalizeBySD].setEnabled(enable)\n+\n     def constructContinuizer(self):\n         conzer = DomainContinuizer(\n             zero_based=self.zero_based,\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcontinuize.py b/Orange/widgets/data/tests/test_owcontinuize.py\nindex b7cb8a929..dfbe71abd 100644\n--- a/Orange/widgets/data/tests/test_owcontinuize.py\n+++ b/Orange/widgets/data/tests/test_owcontinuize.py\n@@ -110,6 +110,45 @@ class TestOWContinuize(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, table)\n         self.widget.unconditional_commit()\n \n+    def test_disable_normalize_sparse(self):\n+        def assert_enabled(enabled):\n+            buttons[BySpan].click()\n+            buttons[BySD].click()\n+            self.assertTrue(buttons[Leave].isEnabled())\n+            self.assertEqual(buttons[BySpan].isEnabled(), enabled)\n+            self.assertEqual(buttons[BySD].isEnabled(), enabled)\n+\n+        w = self.widget\n+        Leave, BySpan, BySD = w.Leave, w.NormalizeBySpan, w.NormalizeBySD\n+        buttons = w.controls.continuous_treatment.buttons\n+        iris = Table(\"iris\")\n+        sparse_iris = iris.to_sparse()\n+\n+        # input dense\n+        self.send_signal(w.Inputs.data, iris)\n+        assert_enabled(True)\n+        self.assertEqual(w.continuous_treatment, BySD)\n+\n+        # input sparse\n+        self.send_signal(w.Inputs.data, sparse_iris)\n+        assert_enabled(False)\n+        self.assertEqual(w.continuous_treatment, Leave)\n+\n+        self.widget.continuous_treatment = BySpan\n+        self.assertRaises(ValueError, w.commit)\n+\n+        # remove data\n+        self.send_signal(w.Inputs.data, None)\n+        assert_enabled(True)\n+\n+        # input sparse\n+        self.send_signal(w.Inputs.data, sparse_iris)\n+        assert_enabled(False)\n+\n+        # input dense\n+        self.send_signal(w.Inputs.data, iris)\n+        assert_enabled(True)\n+\n \n class TestOWContinuizeUtils(unittest.TestCase):\n     def test_dummy_coding_zero_based(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4512.0, "instance_id": "biolab__orange3-4512", "issue_numbers": 0, "base_commit": "6071575075ceeb2b0d4aefdee420a1b7dd28bcdc", "patch": "diff --git a/Orange/widgets/data/owdatasets.py b/Orange/widgets/data/owdatasets.py\nindex 59e7b0232..0d2828c6e 100644\n--- a/Orange/widgets/data/owdatasets.py\n+++ b/Orange/widgets/data/owdatasets.py\n@@ -28,6 +28,7 @@ from Orange.misc.environ import data_dir\n from Orange.widgets import settings, gui\n from Orange.widgets.utils.signals import Output\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import OWWidget, Msg\n \n \n@@ -232,6 +233,8 @@ class OWDataSets(OWWidget):\n         self.splitter.addWidget(self.view)\n         self.splitter.addWidget(box)\n \n+        self.info.set_output_summary(self.info.NoOutput)\n+\n         self.splitter.setSizes([300, 200])\n         self.splitter.splitterMoved.connect(\n             lambda:\n@@ -535,9 +538,12 @@ class OWDataSets(OWWidget):\n     def load_and_output(self, path):\n         if path is None:\n             self.Outputs.data.send(None)\n+            self.info.set_output_summary(self.info.NoOutput)\n         else:\n             data = self.load_data(path)\n             self.Outputs.data.send(data)\n+            self.info.set_output_summary(len(data),\n+                                         format_summary_details(data))\n \n         self.current_output = path\n         self.__update_cached_state()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasets.py b/Orange/widgets/data/tests/test_owdatasets.py\nindex 1c004ce81..c485b17d9 100644\n--- a/Orange/widgets/data/tests/test_owdatasets.py\n+++ b/Orange/widgets/data/tests/test_owdatasets.py\n@@ -7,6 +7,7 @@ from AnyQt.QtCore import QItemSelectionModel\n \n from Orange.widgets.data.owdatasets import OWDataSets\n from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWDataSets(WidgetTest):\n@@ -75,6 +76,24 @@ class TestOWDataSets(WidgetTest):\n         self.wait_until_stop_blocking(w)\n         self.assertEqual(w.view.model().rowCount(), 2)\n \n+    @patch(\"Orange.widgets.data.owdatasets.OWDataSets.list_remote\",\n+           Mock(return_value={('core', 'iris.tab'): {}}))\n+    @patch(\"Orange.widgets.data.owdatasets.OWDataSets.list_local\",\n+           Mock(return_value={}))\n+    @patch(\"Orange.widgets.data.owdatasets.ensure_local\",\n+           Mock(return_value=\"iris.tab\"))\n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        widget = self.create_widget(OWDataSets)\n+        output_sum = widget.info.set_output_summary = Mock()\n+        self.wait_until_stop_blocking(widget)\n+        # select the only dataset\n+        sel_type = QItemSelectionModel.ClearAndSelect | QItemSelectionModel.Rows\n+        widget.view.selectionModel().select(widget.view.model().index(0, 0), sel_type)\n+        widget.commit()\n+        output = self.get_output(widget.Outputs.data, widget)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4379.0, "instance_id": "biolab__orange3-4379", "issue_numbers": 0, "base_commit": "9a4da3df7653165017f39b3f642b414ae8cfc6d6", "patch": "diff --git a/Orange/widgets/data/owcontinuize.py b/Orange/widgets/data/owcontinuize.py\nindex 3c52148af..5573d81eb 100644\n--- a/Orange/widgets/data/owcontinuize.py\n+++ b/Orange/widgets/data/owcontinuize.py\n@@ -34,9 +34,12 @@ class OWContinuize(widget.OWWidget):\n     buttons_area_orientation = Qt.Vertical\n     resizing_enabled = False\n \n+    # continuous treats\n+    Leave, NormalizeBySpan, NormalizeBySD = range(3)\n+\n     multinomial_treatment = Setting(0)\n     zero_based = Setting(1)\n-    continuous_treatment = Setting(0)\n+    continuous_treatment = Setting(Leave)\n     class_treatment = Setting(0)\n \n     transform_class = Setting(False)\n@@ -107,6 +110,7 @@ class OWContinuize(widget.OWWidget):\n     @check_sql_input\n     def setData(self, data):\n         self.data = data\n+        self.enable_normalization()\n         if data is None:\n             self.info.set_input_summary(self.info.NoInput)\n             self.info.set_output_summary(self.info.NoOutput)\n@@ -115,6 +119,15 @@ class OWContinuize(widget.OWWidget):\n             self.info.set_input_summary(len(data))\n             self.unconditional_commit()\n \n+    def enable_normalization(self):\n+        enable = not (self.data and self.data.is_sparse())\n+        if not enable and self.continuous_treatment in (self.NormalizeBySpan,\n+                                                        self.NormalizeBySD):\n+            self.continuous_treatment = self.Leave\n+        buttons = self.controls.continuous_treatment.buttons\n+        buttons[self.NormalizeBySpan].setEnabled(enable)\n+        buttons[self.NormalizeBySD].setEnabled(enable)\n+\n     def constructContinuizer(self):\n         conzer = DomainContinuizer(\n             zero_based=self.zero_based,\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcontinuize.py b/Orange/widgets/data/tests/test_owcontinuize.py\nindex b7cb8a929..dfbe71abd 100644\n--- a/Orange/widgets/data/tests/test_owcontinuize.py\n+++ b/Orange/widgets/data/tests/test_owcontinuize.py\n@@ -110,6 +110,45 @@ class TestOWContinuize(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, table)\n         self.widget.unconditional_commit()\n \n+    def test_disable_normalize_sparse(self):\n+        def assert_enabled(enabled):\n+            buttons[BySpan].click()\n+            buttons[BySD].click()\n+            self.assertTrue(buttons[Leave].isEnabled())\n+            self.assertEqual(buttons[BySpan].isEnabled(), enabled)\n+            self.assertEqual(buttons[BySD].isEnabled(), enabled)\n+\n+        w = self.widget\n+        Leave, BySpan, BySD = w.Leave, w.NormalizeBySpan, w.NormalizeBySD\n+        buttons = w.controls.continuous_treatment.buttons\n+        iris = Table(\"iris\")\n+        sparse_iris = iris.to_sparse()\n+\n+        # input dense\n+        self.send_signal(w.Inputs.data, iris)\n+        assert_enabled(True)\n+        self.assertEqual(w.continuous_treatment, BySD)\n+\n+        # input sparse\n+        self.send_signal(w.Inputs.data, sparse_iris)\n+        assert_enabled(False)\n+        self.assertEqual(w.continuous_treatment, Leave)\n+\n+        self.widget.continuous_treatment = BySpan\n+        self.assertRaises(ValueError, w.commit)\n+\n+        # remove data\n+        self.send_signal(w.Inputs.data, None)\n+        assert_enabled(True)\n+\n+        # input sparse\n+        self.send_signal(w.Inputs.data, sparse_iris)\n+        assert_enabled(False)\n+\n+        # input dense\n+        self.send_signal(w.Inputs.data, iris)\n+        assert_enabled(True)\n+\n \n class TestOWContinuizeUtils(unittest.TestCase):\n     def test_dummy_coding_zero_based(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4966.0, "instance_id": "biolab__orange3-4966", "issue_numbers": 0, "base_commit": "ea86e5269e28aee2865cf91032ebbff6007a9d18", "patch": "diff --git a/Orange/widgets/utils/save/owsavebase.py b/Orange/widgets/utils/save/owsavebase.py\nindex 4b43f3637..ed527207b 100644\n--- a/Orange/widgets/utils/save/owsavebase.py\n+++ b/Orange/widgets/utils/save/owsavebase.py\n@@ -122,23 +122,21 @@ class OWSaveBase(widget.OWWidget, openclass=True):\n         \"\"\"\n         Compute absolute path from `stored_path` from settings.\n \n-        Auto save is disabled unless stored_path is relative and exists.\n+        Absolute stored path is used only if it exists.\n+        Auto save is disabled unless stored_path is relative.\n         \"\"\"\n         workflow_dir = self.workflowEnv().get(\"basedir\")\n         if os.path.isabs(self.stored_path):\n-            path = self.stored_path\n-            self.auto_save = False\n+            if os.path.exists(self.stored_path):\n+                self.auto_save = False\n+                return self.stored_path\n         elif workflow_dir:\n-            path = os.path.join(workflow_dir, self.stored_path)\n-        else:\n-            path = None\n+            return os.path.normpath(\n+                os.path.join(workflow_dir, self.stored_path))\n \n-        if path and os.path.exists(path):\n-            return path\n-        else:\n-            self.stored_path = workflow_dir or _userhome\n-            self.auto_save = False\n-            return self.stored_path\n+        self.stored_path = workflow_dir or _userhome\n+        self.auto_save = False\n+        return self.stored_path\n \n     @property\n     def filename(self):\n.", "test_patch": "diff --git a/Orange/widgets/utils/save/tests/test_owsavebase.py b/Orange/widgets/utils/save/tests/test_owsavebase.py\nindex 3b352a9e2..cadb637a6 100644\n--- a/Orange/widgets/utils/save/tests/test_owsavebase.py\n+++ b/Orange/widgets/utils/save/tests/test_owsavebase.py\n@@ -103,7 +103,8 @@ class TestOWSaveBaseWithWriters(WidgetTest):\n             b = b.replace(\"\\\\\", \"/\")\n         self.assertEqual(a.rstrip(\"/\"), b.rstrip(\"/\"))\n \n-    @patch(\"os.path.exists\", lambda name: name == \"/home/u/orange/a/b\")\n+    @patch(\"os.path.exists\",\n+           lambda name: name in [\"/home/u/orange/a/b\", \"/foo/bar\"])\n     def test_open_moved_workflow(self):\n         \"\"\"Stored relative paths are properly changed on load\"\"\"\n         home = _userhome\n@@ -128,6 +129,15 @@ class TestOWSaveBaseWithWriters(WidgetTest):\n             self.assertPathEqual(w.filename, home_c_foo)\n             self.assertFalse(w.auto_save)\n \n+            w = self.create_widget(\n+                self.OWSaveMockWriter,\n+                stored_settings=dict(stored_path=\"/foo/bar\",\n+                                     stored_name=\"c.foo\",\n+                                     auto_save=True))\n+            self.assertPathEqual(w.last_dir, \"/foo/bar\")\n+            self.assertPathEqual(w.filename, \"/foo/bar/c.foo\")\n+            self.assertFalse(w.auto_save)\n+\n             w = self.create_widget(\n                 self.OWSaveMockWriter,\n                 stored_settings=dict(stored_path=\".\",\n@@ -162,9 +172,9 @@ class TestOWSaveBaseWithWriters(WidgetTest):\n                 stored_settings=dict(stored_path=\"a/d\",\n                                      stored_name=\"c.foo\",\n                                      auto_save=True))\n-            self.assertPathEqual(w.last_dir, \"/home/u/orange/\")\n-            self.assertPathEqual(w.filename, \"/home/u/orange/c.foo\")\n-            self.assertFalse(w.auto_save)\n+            self.assertPathEqual(w.last_dir, \"/home/u/orange/a/d\")\n+            self.assertPathEqual(w.filename, \"/home/u/orange/a/d/c.foo\")\n+            self.assertTrue(w.auto_save)\n \n             w = self.create_widget(\n                 self.OWSaveMockWriter,\n@@ -182,7 +192,7 @@ class TestOWSaveBaseWithWriters(WidgetTest):\n                                      auto_save=True))\n             self.assertPathEqual(w.last_dir, \"/home/u/orange/\")\n             self.assertPathEqual(w.filename, \"/home/u/orange/c.foo\")\n-            self.assertFalse(w.auto_save)\n+            self.assertTrue(w.auto_save)\n \n             w = self.create_widget(\n                 self.OWSaveMockWriter,\n@@ -191,7 +201,7 @@ class TestOWSaveBaseWithWriters(WidgetTest):\n                                      auto_save=True))\n             self.assertPathEqual(w.last_dir, \"/home/u/orange/\")\n             self.assertPathEqual(w.filename, \"/home/u/orange/c.foo\")\n-            self.assertFalse(w.auto_save)\n+            self.assertTrue(w.auto_save)\n \n     def test_move_workflow(self):\n         \"\"\"Widget correctly stores relative paths\"\"\"\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5990.0, "instance_id": "biolab__orange3-5990", "issue_numbers": 0, "base_commit": "6aaad1c92dc042cfe0ad6c72e5afd15ecf8aea4a", "patch": "diff --git a/Orange/data/util.py b/Orange/data/util.py\nindex 111f469bb..55e5fa512 100644\n--- a/Orange/data/util.py\n+++ b/Orange/data/util.py\n@@ -213,8 +213,31 @@ def get_unique_names(names, proposed, equal_numbers=True):\n         return get_unique_names(names, [proposed])[0]\n     indices = {name: get_indices(names, name) for name in proposed}\n     indices = {name: max(ind) + 1 for name, ind in indices.items() if ind}\n+\n+    duplicated_proposed = {name for name, count in Counter(proposed).items()\n+                           if count > 1}\n+    if duplicated_proposed:\n+        # This could be merged with the code below, but it would make it slower\n+        # because it can't be done within list comprehension\n+        if equal_numbers:\n+            max_index = max(indices.values(), default=1)\n+            indices = {name: max_index\n+                       for name in chain(indices, duplicated_proposed)}\n+        else:\n+            indices.update({name: 1\n+                            for name in duplicated_proposed - set(indices)})\n+        names = []\n+        for name in proposed:\n+            if name in indices:\n+                names.append(f\"{name} ({indices[name]})\")\n+                indices[name] += 1\n+            else:\n+                names.append(name)\n+        return names\n+\n     if not (set(proposed) & set(names) or indices):\n         return proposed\n+\n     if equal_numbers:\n         max_index = max(indices.values())\n         return [f\"{name} ({max_index})\" for name in proposed]\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_util.py b/Orange/data/tests/test_util.py\nindex 4ea05b2ef..50b39cf3e 100644\n--- a/Orange/data/tests/test_util.py\n+++ b/Orange/data/tests/test_util.py\n@@ -120,6 +120,47 @@ class TestGetUniqueNames(unittest.TestCase):\n             [\"foo (1)\", \"bar (1)\", \"baz (4)\"]\n         )\n \n+    def test_get_unique_names_duplicated_proposals(self):\n+        names = [\"foo\", \"bar\", \"baz\", \"baz (3)\"]\n+\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\", \"boo\", \"boo\"]),\n+            ['foo (1)', 'boo (1)', 'boo (2)']\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\", \"boo\", \"boo\", \"baz\"]),\n+            ['foo (4)', 'boo (4)', 'boo (5)', 'baz (4)']\n+        )\n+        self.assertEqual(\n+            get_unique_names([], [\"foo\", \"boo\", \"boo\", \"baz\"]),\n+            ['foo', 'boo (1)', 'boo (2)', 'baz']\n+        )\n+        self.assertEqual(\n+            get_unique_names([\"foo\", \"bong\"], [\"foo\", \"boo\", \"boo\", \"baz\"]),\n+            ['foo (1)', 'boo (1)', 'boo (2)', 'baz']\n+        )\n+\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\", \"boo\", \"boo\"],\n+                             equal_numbers=False),\n+            ['foo (1)', 'boo (1)', 'boo (2)']\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\", \"boo\", \"boo\", \"baz\"],\n+                             equal_numbers=False),\n+            ['foo (1)', 'boo (1)', 'boo (2)', 'baz (4)']\n+        )\n+        self.assertEqual(\n+            get_unique_names([], [\"foo\", \"boo\", \"boo\", \"baz\"],\n+                             equal_numbers=False),\n+            ['foo', 'boo (1)', 'boo (2)', 'baz']\n+        )\n+        self.assertEqual(\n+            get_unique_names([\"foo\", \"bong\"], [\"foo\", \"boo\", \"boo\", \"baz\"],\n+                             equal_numbers=False),\n+            ['foo (1)', 'boo (1)', 'boo (2)', 'baz']\n+        )\n+\n     def test_get_unique_names_from_duplicates(self):\n         self.assertEqual(\n             get_unique_names_duplicates([\"foo\", \"bar\", \"baz\"]),\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4669.0, "instance_id": "biolab__orange3-4669", "issue_numbers": 0, "base_commit": "c8ab8975fd93cecd22f5eb45f9749f21bd6a8639", "patch": "diff --git a/Orange/widgets/data/owcolor.py b/Orange/widgets/data/owcolor.py\nindex 0381cf128..2515ad1ed 100644\n--- a/Orange/widgets/data/owcolor.py\n+++ b/Orange/widgets/data/owcolor.py\n@@ -7,6 +7,7 @@ from AnyQt.QtGui import QColor, QFont, QBrush\n from AnyQt.QtWidgets import QHeaderView, QColorDialog, QTableView, QComboBox\n \n import Orange\n+from Orange.preprocess.transformation import Identity\n from Orange.util import color_to_hex\n from Orange.widgets import widget, settings, gui\n from Orange.widgets.gui import HorizontalGridDelegate\n@@ -82,7 +83,8 @@ class DiscAttrDesc(AttrDesc):\n         self.new_values[i] = value\n \n     def create_variable(self):\n-        new_var = self.var.copy(name=self.name, values=self.values)\n+        new_var = self.var.copy(name=self.name, values=self.values,\n+                                compute_value=Identity(self.var))\n         new_var.colors = np.asarray(self.colors)\n         return new_var\n \n@@ -114,7 +116,8 @@ class ContAttrDesc(AttrDesc):\n         self.new_palette_name = palette_name\n \n     def create_variable(self):\n-        new_var = self.var.copy(name=self.name)\n+        new_var = self.var.copy(name=self.name,\n+                                compute_value=Identity(self.var))\n         new_var.attributes[\"palette\"] = self.palette_name\n         return new_var\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcolor.py b/Orange/widgets/data/tests/test_owcolor.py\nindex 8f133ff75..afbb0c597 100644\n--- a/Orange/widgets/data/tests/test_owcolor.py\n+++ b/Orange/widgets/data/tests/test_owcolor.py\n@@ -8,6 +8,7 @@ from AnyQt.QtCore import Qt, QSize, QRect\n from AnyQt.QtGui import QBrush\n \n from Orange.data import Table, ContinuousVariable, DiscreteVariable, Domain\n+from Orange.preprocess.transformation import Identity\n from Orange.util import color_to_hex\n from Orange.widgets.utils import colorpalettes\n from Orange.widgets.utils.state_summary import format_summary_details\n@@ -58,11 +59,15 @@ class DiscAttrTest(unittest.TestCase):\n         self.assertEqual(var.name, \"z\")\n         self.assertEqual(var.values, (\"a\", \"d\", \"c\"))\n         np.testing.assert_equal(var.colors, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+        self.assertIsInstance(var.compute_value, Identity)\n+        self.assertIs(var.compute_value.variable, desc.var)\n \n         palette = desc.var.attributes[\"palette\"] = object()\n         var = desc.create_variable()\n         self.assertIs(desc.var.attributes[\"palette\"], palette)\n         self.assertFalse(hasattr(var.attributes, \"palette\"))\n+        self.assertIsInstance(var.compute_value, Identity)\n+        self.assertIs(var.compute_value.variable, desc.var)\n \n \n class ContAttrDesc(unittest.TestCase):\n@@ -89,11 +94,15 @@ class ContAttrDesc(unittest.TestCase):\n         self.assertIsInstance(var, ContinuousVariable)\n         self.assertEqual(var.name, \"z\")\n         self.assertEqual(var.palette.name, palette_name)\n+        self.assertIsInstance(var.compute_value, Identity)\n+        self.assertIs(var.compute_value.variable, desc.var)\n \n         colors = desc.var.attributes[\"colors\"] = object()\n         var = desc.create_variable()\n         self.assertIs(desc.var.attributes[\"colors\"], colors)\n         self.assertFalse(hasattr(var.attributes, \"colors\"))\n+        self.assertIsInstance(var.compute_value, Identity)\n+        self.assertIs(var.compute_value.variable, desc.var)\n \n \n class BaseTestColorTableModel:\n@@ -121,7 +130,6 @@ class BaseTestColorTableModel:\n         index = self.model.index(2, 0)\n         self.assertEqual(data(index, Qt.DisplayRole), self.descs[2].name)\n \n-\n     def test_set_data(self):\n         emit = Mock()\n         try:\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4413.0, "instance_id": "biolab__orange3-4413", "issue_numbers": 0, "base_commit": "cb6679d6719d74dd088540f8d520d4492bf6fd2e", "patch": "diff --git a/Orange/widgets/data/owtranspose.py b/Orange/widgets/data/owtranspose.py\nindex 36da76154..f334bd6a4 100644\n--- a/Orange/widgets/data/owtranspose.py\n+++ b/Orange/widgets/data/owtranspose.py\n@@ -3,6 +3,7 @@ from Orange.widgets.settings import (Setting, ContextSetting,\n                                      DomainContextHandler)\n from Orange.widgets.utils.itemmodels import DomainModel\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import OWWidget, Msg\n from Orange.widgets import gui\n from Orange.widgets.widget import Input, Output\n@@ -71,8 +72,8 @@ class OWTranspose(OWWidget):\n         self.apply_button = gui.auto_apply(self.controlArea, self, box=False, commit=self.apply)\n         self.apply_button.button.setAutoDefault(False)\n \n-        self.info.set_output_summary(self.info.NoInput)\n         self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n \n         self.set_controls()\n \n@@ -93,7 +94,7 @@ class OWTranspose(OWWidget):\n             self.closeContext()\n         self.data = data\n         if data:\n-            self.info.set_input_summary(len(data))\n+            self.info.set_input_summary(len(data), format_summary_details(data))\n         else:\n             self.info.set_input_summary(self.info.NoInput)\n         self.set_controls()\n@@ -126,11 +127,12 @@ class OWTranspose(OWWidget):\n                         self.Warning.duplicate_names(variable)\n                 if self.data.domain.has_discrete_attributes():\n                     self.Warning.discrete_attrs()\n-                self.info.set_output_summary(len(transposed))\n+                self.info.set_output_summary(len(transposed),\n+                                             format_summary_details(transposed))\n             except ValueError as e:\n                 self.Error.value_error(e)\n         else:\n-            self.info.set_output_summary(self.info.NoInput)\n+            self.info.set_output_summary(self.info.NoOutput)\n         self.Outputs.data.send(transposed)\n \n     def send_report(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owtranspose.py b/Orange/widgets/data/tests/test_owtranspose.py\nindex 4b31e6a70..d553c65e4 100644\n--- a/Orange/widgets/data/tests/test_owtranspose.py\n+++ b/Orange/widgets/data/tests/test_owtranspose.py\n@@ -9,8 +9,8 @@ import numpy as np\n from Orange.data import Table\n from Orange.widgets.data.owtranspose import OWTranspose\n from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.tests import test_filename\n-from orangewidget.widget import StateInfo\n \n \n class TestOWTranspose(WidgetTest):\n@@ -179,9 +179,10 @@ class TestOWTranspose(WidgetTest):\n \n         data = Table(\"iris\")\n         self.send_signal(self.widget.Inputs.data, data)\n-        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n         output = self.get_output(self.widget.Outputs.data)\n-        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n \n         input_sum.reset_mock()\n         output_sum.reset_mock()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5990.0, "instance_id": "biolab__orange3-5990", "issue_numbers": 0, "base_commit": "25ba55a848a003c9e8aa122d8840879128a670d4", "patch": "diff --git a/Orange/data/util.py b/Orange/data/util.py\nindex 111f469bb..55e5fa512 100644\n--- a/Orange/data/util.py\n+++ b/Orange/data/util.py\n@@ -213,8 +213,31 @@ def get_unique_names(names, proposed, equal_numbers=True):\n         return get_unique_names(names, [proposed])[0]\n     indices = {name: get_indices(names, name) for name in proposed}\n     indices = {name: max(ind) + 1 for name, ind in indices.items() if ind}\n+\n+    duplicated_proposed = {name for name, count in Counter(proposed).items()\n+                           if count > 1}\n+    if duplicated_proposed:\n+        # This could be merged with the code below, but it would make it slower\n+        # because it can't be done within list comprehension\n+        if equal_numbers:\n+            max_index = max(indices.values(), default=1)\n+            indices = {name: max_index\n+                       for name in chain(indices, duplicated_proposed)}\n+        else:\n+            indices.update({name: 1\n+                            for name in duplicated_proposed - set(indices)})\n+        names = []\n+        for name in proposed:\n+            if name in indices:\n+                names.append(f\"{name} ({indices[name]})\")\n+                indices[name] += 1\n+            else:\n+                names.append(name)\n+        return names\n+\n     if not (set(proposed) & set(names) or indices):\n         return proposed\n+\n     if equal_numbers:\n         max_index = max(indices.values())\n         return [f\"{name} ({max_index})\" for name in proposed]\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_util.py b/Orange/data/tests/test_util.py\nindex 4ea05b2ef..50b39cf3e 100644\n--- a/Orange/data/tests/test_util.py\n+++ b/Orange/data/tests/test_util.py\n@@ -120,6 +120,47 @@ class TestGetUniqueNames(unittest.TestCase):\n             [\"foo (1)\", \"bar (1)\", \"baz (4)\"]\n         )\n \n+    def test_get_unique_names_duplicated_proposals(self):\n+        names = [\"foo\", \"bar\", \"baz\", \"baz (3)\"]\n+\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\", \"boo\", \"boo\"]),\n+            ['foo (1)', 'boo (1)', 'boo (2)']\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\", \"boo\", \"boo\", \"baz\"]),\n+            ['foo (4)', 'boo (4)', 'boo (5)', 'baz (4)']\n+        )\n+        self.assertEqual(\n+            get_unique_names([], [\"foo\", \"boo\", \"boo\", \"baz\"]),\n+            ['foo', 'boo (1)', 'boo (2)', 'baz']\n+        )\n+        self.assertEqual(\n+            get_unique_names([\"foo\", \"bong\"], [\"foo\", \"boo\", \"boo\", \"baz\"]),\n+            ['foo (1)', 'boo (1)', 'boo (2)', 'baz']\n+        )\n+\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\", \"boo\", \"boo\"],\n+                             equal_numbers=False),\n+            ['foo (1)', 'boo (1)', 'boo (2)']\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\", \"boo\", \"boo\", \"baz\"],\n+                             equal_numbers=False),\n+            ['foo (1)', 'boo (1)', 'boo (2)', 'baz (4)']\n+        )\n+        self.assertEqual(\n+            get_unique_names([], [\"foo\", \"boo\", \"boo\", \"baz\"],\n+                             equal_numbers=False),\n+            ['foo', 'boo (1)', 'boo (2)', 'baz']\n+        )\n+        self.assertEqual(\n+            get_unique_names([\"foo\", \"bong\"], [\"foo\", \"boo\", \"boo\", \"baz\"],\n+                             equal_numbers=False),\n+            ['foo (1)', 'boo (1)', 'boo (2)', 'baz']\n+        )\n+\n     def test_get_unique_names_from_duplicates(self):\n         self.assertEqual(\n             get_unique_names_duplicates([\"foo\", \"bar\", \"baz\"]),\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4830.0, "instance_id": "biolab__orange3-4830", "issue_numbers": 0, "base_commit": "f1ea98146272cef3c45a8e311aff3cafa08805bc", "patch": "diff --git a/Orange/widgets/data/owselectrows.py b/Orange/widgets/data/owselectrows.py\nindex 2b07394d8..2bf036435 100644\n--- a/Orange/widgets/data/owselectrows.py\n+++ b/Orange/widgets/data/owselectrows.py\n@@ -62,8 +62,13 @@ class SelectRowsContextHandler(DomainContextHandler):\n                     values = [QLocale().toDouble(v)[0] for v in values]\n                 elif isinstance(attr, DiscreteVariable):\n                     values = [attr.values[i - 1] if i else \"\" for i in values]\n-                encoded.append(\n-                    (attr.name, context.attributes.get(attr.name), op, values))\n+                encoded.append((\n+                    attr.name,\n+                    context.attributes.get(attr.name)\n+                    or context.metas.get(attr.name),\n+                    op,\n+                    values\n+                ))\n         return encoded\n \n     def decode_setting(self, setting, value, domain=None):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectrows.py b/Orange/widgets/data/tests/test_owselectrows.py\nindex a69e3ba92..2ec939698 100644\n--- a/Orange/widgets/data/tests/test_owselectrows.py\n+++ b/Orange/widgets/data/tests/test_owselectrows.py\n@@ -518,6 +518,36 @@ Basically, revert this commit.\n         expected = (expected == 2).astype(float)\n         np.testing.assert_equal(out.Y, expected)\n \n+    def test_meta_setting(self):\n+        \"\"\"\n+        Test if all conditions from all segments (attributes, class, meta)\n+        stores correctly\n+        \"\"\"\n+        data = Table(\"iris\")\n+        data = Table.from_table(\n+            Domain(\n+                data.domain.attributes[:3],\n+                data.domain.class_var,\n+                data.domain.attributes[3:]\n+            ), data)\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        vars_ = [\n+            data.domain.metas[0],\n+            data.domain.attributes[0],\n+            data.domain.class_var\n+        ]\n+        cond = [0, 0, 0]\n+        val = [(0, ), (0, ), (1, )]\n+        conds = list(zip(vars_, cond, val))\n+\n+        self.widget.conditions = conds\n+        self.assertListEqual([c[0] for c in self.widget.conditions], vars_)\n+\n+        # when sending new-same data conditions are restored from the context\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.assertListEqual([c[0] for c in self.widget.conditions], vars_)\n+\n     def widget_with_context(self, domain, conditions):\n         ch = SelectRowsContextHandler()\n         context = ch.new_context(domain, *ch.encode_domain(domain))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6878.0, "instance_id": "biolab__orange3-6878", "issue_numbers": 0, "base_commit": "dc7b9b25e2058d4f66b9ca98f977d2bfa3d6b14f", "patch": "diff --git a/Orange/preprocess/discretize.py b/Orange/preprocess/discretize.py\nindex d9642efa5..ab5062c53 100644\n--- a/Orange/preprocess/discretize.py\n+++ b/Orange/preprocess/discretize.py\n@@ -97,7 +97,7 @@ class Discretizer(Transformation):\n         if ndigits is None or len(points) == 1:\n             try:\n                 values = cls._get_labels(var.str_val, points)\n-            except ValueError:\n+            except ValueError:  # points would create identical formatted thresholds\n                 pass\n             else:\n                 if len(values) == len(set(values)):\n@@ -108,7 +108,9 @@ class Discretizer(Transformation):\n                         int(-np.log10(mindiff)))\n         maxdigits = np.finfo(npoints.dtype).precision + 2\n         for digits in range(mindigits, maxdigits + 1):\n-            npoints = np.round(points, digits)\n+            # ensure that builtin round is used for compatibility with float formatting\n+            # de-numpyize points p (otherwise np.floats use numpy's round)\n+            npoints = [round(float(p), digits) for p in points]\n             if len(npoints) == len(set(npoints)):\n                 def fmt_fixed(val):\n                     # We break the loop, pylint: disable=cell-var-from-loop\n.", "test_patch": "diff --git a/Orange/preprocess/tests/test_discretize.py b/Orange/preprocess/tests/test_discretize.py\nindex de30dd1ba..9730ff8d9 100644\n--- a/Orange/preprocess/tests/test_discretize.py\n+++ b/Orange/preprocess/tests/test_discretize.py\n@@ -1233,6 +1233,28 @@ class TestDiscretizer(unittest.TestCase):\n                                   '\u2265 2.1000000003'])\n         self.assertIsInstance(to_sql, BinSql)\n \n+    def test_get_discretized_values_round_builtin_vs_numpy(self):\n+        x = ContinuousVariable(\"x\", number_of_decimals=0)\n+        points, values, _ \\\n+            = Discretizer._get_discretized_values(x,\n+                                                  np.array([2.3455,\n+                                                            2.346]))\n+        np.testing.assert_equal(points,\n+                                [2.345, 2.346])\n+        self.assertEqual(values, ['< 2.345',\n+                                  '2.345 - 2.346',\n+                                  '\u2265 2.346'])\n+\n+        points, values, _ \\\n+            = Discretizer._get_discretized_values(x,\n+                                                  np.array([2.1345,\n+                                                            2.135]))\n+        np.testing.assert_equal(points,\n+                                [2.1345, 2.135])\n+        self.assertEqual(values, ['< 2.1345',\n+                                  '2.1345 - 2.135',\n+                                  '\u2265 2.135'])\n+\n     def test_get_discretized_values_with_ndigits(self):\n         x = ContinuousVariable(\"x\")\n         apoints = [1, 2, 3, 4]\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5411.0, "instance_id": "biolab__orange3-5411", "issue_numbers": 0, "base_commit": "01843a5c3e96a426c38e23e7cd94cc69dc80beec", "patch": "diff --git a/Orange/preprocess/discretize.py b/Orange/preprocess/discretize.py\nindex f16a3f812..1502b97f0 100644\n--- a/Orange/preprocess/discretize.py\n+++ b/Orange/preprocess/discretize.py\n@@ -320,8 +320,11 @@ def decimal_binnings(\n         nbins = np.round((mx_ - mn_) / width)\n         if min_bins <= nbins <= max_bins \\\n                 and (not bins or bins[-1].nbins != nbins):\n-            bin_def = BinDefinition(mn_ + width * np.arange(nbins + 1),\n-                                    label_fmt, None, width)\n+            bins_ = mn_ + width * np.arange(nbins + 1)\n+            # to prevent values on the edge of the bin fall in the wrong bin\n+            # due to precision error on decimals that are not precise\n+            bins_ = np.around(bins_, decimals=np.finfo(bins_.dtype).precision)\n+            bin_def = BinDefinition(bins_, label_fmt, None, width)\n             bins.append(bin_def)\n     return bins\n \n.", "test_patch": "diff --git a/Orange/tests/test_discretize.py b/Orange/tests/test_discretize.py\nindex 1b938f825..119ac8c86 100644\n--- a/Orange/tests/test_discretize.py\n+++ b/Orange/tests/test_discretize.py\n@@ -8,7 +8,7 @@ from unittest import TestCase\n import numpy as np\n import scipy.sparse as sp\n \n-from Orange.preprocess import discretize, Discretize\n+from Orange.preprocess import discretize, Discretize, decimal_binnings\n from Orange import data\n from Orange.data import Table, Instance, Domain, ContinuousVariable, DiscreteVariable\n \n@@ -95,6 +95,34 @@ class TestEqualWidth(TestCase):\n         self.assertEqual(dvar.compute_value.points, [])\n \n \n+class TestBinning(TestCase):\n+    def test_decimal_binnings(self):\n+        values = np.array([\n+            -0.2, -0.2, -0.6, 1.0, 0.2, -0.6, 0.6, 1.0, 0.4, -0.5, -0.4, -0.4,\n+            -0.6, 0.6, 0.75, 0.4, -0.2, 0.2, 0.0, 0.0, -1.0, -0.6, -0.2, -0.6,\n+        ])\n+        binning = decimal_binnings(values, factors=[0.2, 0.25, 0.5])\n+        self.assertEqual(len(binning), 3)\n+\n+        np.testing.assert_array_equal(\n+            binning[0].thresholds,\n+            [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1]\n+        )\n+        self.assertEqual(binning[0].width, 0.2)\n+\n+        np.testing.assert_array_equal(\n+            binning[1].thresholds,\n+            [-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1]\n+        )\n+        self.assertEqual(binning[1].width, 0.25)\n+\n+        np.testing.assert_array_equal(\n+            binning[2].thresholds,\n+            [-1, -0.5, 0, 0.5, 1]\n+        )\n+        self.assertEqual(binning[2].width, 0.5)\n+\n+\n # noinspection PyPep8Naming\n class TestEntropyMDL(TestCase):\n     def test_entropy_with_two_values(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4722.0, "instance_id": "biolab__orange3-4722", "issue_numbers": 0, "base_commit": "cda4a0075fb171923923292c6fb901dd1e2840ec", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex a2a4b848f..ddcd666a2 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -1770,6 +1770,7 @@ class OWEditDomain(widget.OWWidget):\n     _domain_change_store = settings.ContextSetting({})\n     _selected_item = settings.ContextSetting(None)  # type: Optional[Tuple[str, int]]\n     _merge_dialog_settings = settings.ContextSetting({})\n+    output_table_name = settings.ContextSetting(\"\")\n \n     want_control_area = False\n \n@@ -1809,6 +1810,10 @@ class OWEditDomain(widget.OWWidget):\n \n         box.layout().addWidget(self._editor)\n \n+        self.le_output_name = gui.lineEdit(\n+            self.mainArea, self, \"output_table_name\", \"Output table name: \",\n+            box=True, orientation=Qt.Horizontal)\n+\n         bbox = QDialogButtonBox()\n         bbox.setStyleSheet(\n             \"button-layout: {:d};\".format(QDialogButtonBox.MacLayout))\n@@ -1856,10 +1861,12 @@ class OWEditDomain(widget.OWWidget):\n             self.info.set_input_summary(len(data),\n                                         format_summary_details(data))\n             self.setup_model(data)\n+            self.le_output_name.setPlaceholderText(data.name)\n             self.openContext(self.data)\n             self._editor.set_merge_context(self._merge_dialog_settings)\n             self._restore()\n         else:\n+            self.le_output_name.setPlaceholderText(\"\")\n             self.info.set_input_summary(self.info.NoInput)\n \n         self.commit()\n@@ -2054,7 +2061,8 @@ class OWEditDomain(widget.OWWidget):\n                     model.data(midx, TransformRole))\n \n         state = [state(i) for i in range(model.rowCount())]\n-        if all(tr is None or not tr for _, tr in state):\n+        if all(tr is None or not tr for _, tr in state) \\\n+                and self.output_table_name in (\"\", data.name):\n             self.Outputs.data.send(data)\n             self.info.set_output_summary(len(data),\n                                          format_summary_details(data))\n@@ -2090,6 +2098,8 @@ class OWEditDomain(widget.OWWidget):\n         Ys = [v for v in Ys if v.is_primitive()]\n         domain = Orange.data.Domain(Xs, Ys, Ms)\n         new_data = data.transform(domain)\n+        if self.output_table_name:\n+            new_data.name = self.output_table_name\n         self.Outputs.data.send(new_data)\n         self.info.set_output_summary(len(new_data),\n                                      format_summary_details(new_data))\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex e37cc5e23..a8ed3fe45 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -171,6 +171,11 @@ class TestOWEditDomain(WidgetTest):\n         np.testing.assert_array_equal(output.Y, self.iris.Y)\n         self.assertEqual(output.domain, self.iris.domain)\n \n+        self.widget.output_table_name = \"Iris 2\"\n+        self.widget.commit()\n+        output = self.get_output(self.widget.Outputs.data)\n+        self.assertEqual(output.name, \"Iris 2\")\n+\n     def test_input_from_owcolor(self):\n         \"\"\"Check widget's data sent from OWColor widget\"\"\"\n         owcolor = self.create_widget(OWColor)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4281.0, "instance_id": "biolab__orange3-4281", "issue_numbers": 0, "base_commit": "ea0146b4cffedfe34e939a848f99dbad3ae7776a", "patch": "diff --git a/Orange/widgets/data/owtable.py b/Orange/widgets/data/owtable.py\nindex d42689aa6..05c78808a 100644\n--- a/Orange/widgets/data/owtable.py\n+++ b/Orange/widgets/data/owtable.py\n@@ -519,20 +519,17 @@ class OWDataTable(OWWidget):\n             if current is not None:\n                 # pylint: disable=protected-access\n                 self.set_info(current._input_slot.summary)\n-        else:\n-            self.__pending_selected_rows = None\n-            self.__pending_selected_cols = None\n \n         self.tabs.tabBar().setVisible(self.tabs.count() > 1)\n         self.openContext(data)\n \n-        if self.__pending_selected_rows is not None:\n+        if data and self.__pending_selected_rows is not None:\n             self.selected_rows = self.__pending_selected_rows\n             self.__pending_selected_rows = None\n         else:\n             self.selected_rows = []\n \n-        if self.__pending_selected_cols is not None:\n+        if data and self.__pending_selected_cols is not None:\n             self.selected_cols = self.__pending_selected_cols\n             self.__pending_selected_cols = None\n         else:\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owtable.py b/Orange/widgets/data/tests/test_owtable.py\nindex 2feaf4a0e..e4de2e9b6 100644\n--- a/Orange/widgets/data/tests/test_owtable.py\n+++ b/Orange/widgets/data/tests/test_owtable.py\n@@ -66,6 +66,15 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin):\n             self.send_signal(self.widget.Inputs.data, self.data)\n             commit.assert_called()\n \n+    def test_pending_selection(self):\n+        widget = self.create_widget(OWDataTable, stored_settings=dict(\n+            selected_rows=[5, 6, 7, 8, 9],\n+            selected_cols=list(range(len(self.data.domain)))))\n+        self.send_signal(widget.Inputs.data, None, 1)\n+        self.send_signal(widget.Inputs.data, self.data, 1)\n+        output = self.get_output(widget.Outputs.selected_data)\n+        self.assertEqual(5, len(output))\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5412.0, "instance_id": "biolab__orange3-5412", "issue_numbers": 0, "base_commit": "ce6222e95a7b80b5f18c8285f184785e820b73e3", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex 8510678dd..1a952bcd0 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -13,7 +13,8 @@ from itertools import chain\n \n from os import path, remove\n from tempfile import NamedTemporaryFile\n-from urllib.parse import urlparse, urlsplit, urlunsplit, unquote as urlunquote\n+from urllib.parse import urlparse, urlsplit, urlunsplit, \\\n+    unquote as urlunquote, quote\n from urllib.request import urlopen, Request\n from pathlib import Path\n \n@@ -405,6 +406,7 @@ class UrlReader(FileFormat):\n         filename = filename.strip()\n         if not urlparse(filename).scheme:\n             filename = 'http://' + filename\n+        filename = quote(filename, safe=\"/:\")\n         super().__init__(filename)\n \n     @staticmethod\n.", "test_patch": "diff --git a/Orange/tests/test_url_reader.py b/Orange/tests/test_url_reader.py\nindex 87b3c1d73..c40bf26a2 100644\n--- a/Orange/tests/test_url_reader.py\n+++ b/Orange/tests/test_url_reader.py\n@@ -17,3 +17,14 @@ class TestUrlReader(unittest.TestCase):\n             \"http://datasets.biolab.si/core/philadelphia-crime.csv.xz\"\n         ).read()\n         self.assertEqual(9666, len(data))\n+\n+    def test_special_characters(self):\n+        # TO-DO - replace this file with a more appropriate one (e.g. .csv)\n+        #  and change the assertion accordingly\n+        path = \"http://file.biolab.si/text-semantics/data/elektrotehniski-\" \\\n+               \"vestnik-clanki/detektiranje-utrdb-v-\u0161ahu-.txt\"\n+        self.assertRaises(OSError, UrlReader(path).read)\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6101.0, "instance_id": "biolab__orange3-6101", "issue_numbers": 0, "base_commit": "1afa5ef5c6b6bae13641d3082894b61528493500", "patch": "diff --git a/Orange/widgets/evaluate/owconfusionmatrix.py b/Orange/widgets/evaluate/owconfusionmatrix.py\nindex 3f28eb3ea..8716ee812 100644\n--- a/Orange/widgets/evaluate/owconfusionmatrix.py\n+++ b/Orange/widgets/evaluate/owconfusionmatrix.py\n@@ -99,7 +99,13 @@ class OWConfusionMatrix(widget.OWWidget):\n \n     quantities = [\"Number of instances\",\n                   \"Proportion of predicted\",\n-                  \"Proportion of actual\"]\n+                  \"Proportion of actual\",\n+                  \"Sum of probabilities\"]\n+    qu_tooltips = [\"Number of correctly and incorrectly classified instances\",\n+                   \"Proportion of predicted\",\n+                   \"Proportion of actual\",\n+                   \"Number of instances, distributed across columns \"\n+                   \"according to predicted probabilities\"]\n \n     settings_version = 1\n     settingsHandler = ClassValuesContextHandler()\n@@ -149,8 +155,8 @@ class OWConfusionMatrix(widget.OWWidget):\n \n         sbox = gui.hBox(box)\n         gui.rubber(sbox)\n-        gui.comboBox(sbox, self, \"selected_quantity\",\n-                     items=self.quantities, label=\"Show: \",\n+        gui.comboBox(sbox, self, \"selected_quantity\", label=\"Show: \",\n+                     items=self.quantities, tooltips=self.qu_tooltips,\n                      orientation=Qt.Horizontal, callback=self._update)\n \n         self.tablemodel = QStandardItemModel(self)\n@@ -445,9 +451,22 @@ class OWConfusionMatrix(widget.OWWidget):\n \n         # Update the displayed confusion matrix\n         if self.results is not None and self.selected_learner:\n-            cmatrix = confusion_matrix(self.results, self.selected_learner[0])\n-            colsum = cmatrix.sum(axis=0)\n-            rowsum = cmatrix.sum(axis=1)\n+            learner_index = self.selected_learner[0]\n+            if self.selected_quantity != 3:\n+                cmatrix = confusion_matrix(self.results, learner_index)\n+                colsum = cmatrix.sum(axis=0)\n+                rowsum = cmatrix.sum(axis=1)\n+\n+            else:\n+                probabilities = self.results.probabilities[learner_index]\n+                n = probabilities.shape[1]\n+                cmatrix = np.zeros((n, n), dtype=float)\n+                for index in np.unique(self.results.actual).astype(int):\n+                    mask = self.results.actual == index\n+                    cmatrix[index] = np.sum(probabilities[mask], axis=0)\n+                colsum = cmatrix.sum(axis=0)\n+                rowsum = cmatrix.sum(axis=1)\n+\n             n = len(cmatrix)\n             diag = np.diag_indices(n)\n \n@@ -457,14 +476,18 @@ class OWConfusionMatrix(widget.OWWidget):\n                 normalized = cmatrix.astype(int)\n                 formatstr = \"{}\"\n                 div = np.array([colors.max()])\n-            else:\n-                if self.selected_quantity == 1:\n-                    normalized = 100 * cmatrix / colsum\n-                    div = colors.max(axis=0)\n-                else:\n-                    normalized = 100 * cmatrix / rowsum[:, np.newaxis]\n-                    div = colors.max(axis=1)[:, np.newaxis]\n+            elif self.selected_quantity == 1:\n+                normalized = 100 * cmatrix / colsum\n+                div = colors.max(axis=0)\n+                formatstr = \"{:2.1f} %\"\n+            elif self.selected_quantity == 2:\n+                normalized = 100 * cmatrix / rowsum[:, np.newaxis]\n+                div = colors.max(axis=1)[:, np.newaxis]\n                 formatstr = \"{:2.1f} %\"\n+            elif self.selected_quantity == 3:\n+                normalized = cmatrix\n+                formatstr = \"{:2.1f}\"\n+                div = np.array([colors.max()])\n             div[div == 0] = 1\n             colors /= div\n             maxval = normalized[diag].max()\n@@ -496,6 +519,7 @@ class OWConfusionMatrix(widget.OWWidget):\n             bold_font.setBold(True)\n \n             def _sum_item(value, border=\"\"):\n+                value = int(round(value))\n                 item = QStandardItem()\n                 item.setData(value, Qt.DisplayRole)\n                 item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)\n@@ -506,9 +530,9 @@ class OWConfusionMatrix(widget.OWWidget):\n                 return item\n \n             for i in range(n):\n-                self._set_item(n + 2, i + 2, _sum_item(int(colsum[i]), \"t\"))\n-                self._set_item(i + 2, n + 2, _sum_item(int(rowsum[i]), \"l\"))\n-            self._set_item(n + 2, n + 2, _sum_item(int(rowsum.sum())))\n+                self._set_item(n + 2, i + 2, _sum_item(colsum[i], \"t\"))\n+                self._set_item(i + 2, n + 2, _sum_item(rowsum[i], \"l\"))\n+            self._set_item(n + 2, n + 2, _sum_item(rowsum.sum()))\n \n     def send_report(self):\n         \"\"\"Send report\"\"\"\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owconfusionmatrix.py b/Orange/widgets/evaluate/tests/test_owconfusionmatrix.py\nindex 1261e03ef..82939cd84 100644\n--- a/Orange/widgets/evaluate/tests/test_owconfusionmatrix.py\n+++ b/Orange/widgets/evaluate/tests/test_owconfusionmatrix.py\n@@ -9,7 +9,7 @@ from Orange.evaluation.testing import CrossValidation, TestOnTrainingData, \\\n     ShuffleSplit, Results\n from Orange.widgets.evaluate.owconfusionmatrix import OWConfusionMatrix\n from Orange.widgets.tests.base import WidgetTest, WidgetOutputsTestMixin\n-from Orange.widgets.tests.utils import possible_duplicate_table\n+from Orange.widgets.tests.utils import possible_duplicate_table, simulate\n \n \n class TestOWConfusionMatrix(WidgetTest, WidgetOutputsTestMixin):\n@@ -153,6 +153,40 @@ class TestOWConfusionMatrix(WidgetTest, WidgetOutputsTestMixin):\n                           'p(Iris-setosa) (1)', 'p(Iris-versicolor) (1)',\n                           'p(Iris-virginica) (1)'})\n \n+    def test_sum_of_probabilities(self):\n+        results: Results = self.results_1_iris\n+        self.send_signal(self.widget.Inputs.evaluation_results, results)\n+\n+        model = self.widget.tablemodel\n+        n = model.rowCount() - 3\n+        matrix = np.zeros((n, n))\n+        probabilities = results.probabilities[0]\n+        for label_index in np.unique(results.actual).astype(int):\n+            mask = results.actual == label_index\n+            prob_sum = np.sum(probabilities[mask], axis=0)\n+            matrix[label_index] = prob_sum\n+        colsum = matrix.sum(axis=0)\n+        rowsum = matrix.sum(axis=1)\n+\n+        simulate.combobox_activate_index(\n+            self.widget.controls.selected_quantity, 3)\n+        # matrix\n+        for i in range(n):\n+            for j in range(n):\n+                value = model.data(model.index(i + 2, j + 2))\n+                self.assertAlmostEqual(float(value), matrix[i, j], 1)\n+        # rowsum\n+        for i in range(n):\n+            value = model.data(model.index(i + 2, n + 2))\n+            self.assertAlmostEqual(float(value), rowsum[i], 0)\n+        # colsum\n+        for i in range(n):\n+            value = model.data(model.index(n + 2, i + 2))\n+            self.assertAlmostEqual(float(value), colsum[i], 0)\n+        # total\n+        value = model.data(model.index(n + 2, n + 2))\n+        self.assertAlmostEqual(float(value), colsum.sum(), 0)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4456.0, "instance_id": "biolab__orange3-4456", "issue_numbers": 0, "base_commit": "0ec94d456d240801dce6d688154a8ee77dcbb7eb", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex 015437d08..c13a35075 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -39,6 +39,7 @@ from Orange.preprocess.transformation import Transformation, Identity, Lookup\n from Orange.widgets import widget, gui, settings\n from Orange.widgets.utils import itemmodels\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n \n ndarray = np.ndarray  # pylint: disable=invalid-name\n@@ -1606,6 +1607,9 @@ class OWEditDomain(widget.OWWidget):\n         mainlayout.addWidget(bbox)\n         self.variables_view.setFocus(Qt.NoFocusReason)  # initial focus\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n     @Inputs.data\n     def set_data(self, data):\n         \"\"\"Set input dataset.\"\"\"\n@@ -1614,9 +1618,13 @@ class OWEditDomain(widget.OWWidget):\n         self.data = data\n \n         if self.data is not None:\n+            self.info.set_input_summary(len(data),\n+                                        format_summary_details(data))\n             self.setup_model(data)\n             self.openContext(self.data)\n             self._restore()\n+        else:\n+            self.info.set_input_summary(self.info.NoInput)\n \n         self.commit()\n \n@@ -1796,6 +1804,7 @@ class OWEditDomain(widget.OWWidget):\n         data = self.data\n         if data is None:\n             self.Outputs.data.send(None)\n+            self.info.set_output_summary(self.info.NoOutput)\n             return\n         model = self.variables_model\n \n@@ -1808,6 +1817,8 @@ class OWEditDomain(widget.OWWidget):\n         state = [state(i) for i in range(model.rowCount())]\n         if all(tr is None or not tr for _, tr in state):\n             self.Outputs.data.send(data)\n+            self.info.set_output_summary(len(data),\n+                                         format_summary_details(data))\n             return\n \n         output_vars = []\n@@ -1824,6 +1835,7 @@ class OWEditDomain(widget.OWWidget):\n         if len(output_vars) != len({v.name for v in output_vars}):\n             self.Error.duplicate_var_name()\n             self.Outputs.data.send(None)\n+            self.info.set_output_summary(self.info.NoOutput)\n             return\n \n         domain = data.domain\n@@ -1840,6 +1852,8 @@ class OWEditDomain(widget.OWWidget):\n         domain = Orange.data.Domain(Xs, Ys, Ms)\n         new_data = data.transform(domain)\n         self.Outputs.data.send(new_data)\n+        self.info.set_output_summary(len(new_data),\n+                                     format_summary_details(new_data))\n \n     def sizeHint(self):\n         sh = super().sizeHint()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex 79c0d29f7..51ff26c2a 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -3,6 +3,7 @@\n import pickle\n from itertools import product\n from unittest import TestCase\n+from unittest.mock import Mock\n \n import numpy as np\n from numpy.testing import assert_array_equal\n@@ -35,6 +36,7 @@ from Orange.widgets.data.oweditdomain import (\n from Orange.widgets.data.owcolor import OWColor, ColorRole\n from Orange.widgets.tests.base import WidgetTest, GuiTest\n from Orange.tests import test_filename, assert_array_nanequal\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n MArray = np.ma.MaskedArray\n \n@@ -244,6 +246,45 @@ class TestOWEditDomain(WidgetTest):\n         tr = model.data(model.index(4), TransformRole)\n         self.assertEqual(tr, [AsString(), Rename(\"Z\")])\n \n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        data = Table(\"iris\")\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+\n+        def enter_text(widget, text):\n+            # type: (QLineEdit, str) -> None\n+            widget.selectAll()\n+            QTest.keyClick(widget, Qt.Key_Delete)\n+            QTest.keyClicks(widget, text)\n+            QTest.keyClick(widget, Qt.Key_Return)\n+\n+        editor = self.widget.findChild(ContinuousVariableEditor)\n+        enter_text(editor.name_edit, \"sepal height\")\n+        self.widget.commit()\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+        output_sum.reset_mock()\n+        enter_text(editor.name_edit, \"sepal width\")\n+        self.widget.commit()\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n \n class TestEditors(GuiTest):\n     def test_variable_editor(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4601.0, "instance_id": "biolab__orange3-4601", "issue_numbers": 0, "base_commit": "afdb6d7bcf9ef48e1735e9bc3d78d9e7ace4780f", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex a3630671a..567d8b578 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -2527,8 +2527,16 @@ def make_dict_mapper(\n def time_parse(values: Sequence[str], name=\"__\"):\n     tvar = Orange.data.TimeVariable(name)\n     parse_time = ftry(tvar.parse, ValueError, np.nan)\n-    values = [parse_time(v) for v in values]\n-    return tvar, values\n+    _values = [parse_time(v) for v in values]\n+    if np.all(np.isnan(_values)):\n+        # try parsing it with pandas (like in transform)\n+        dti = pd.to_datetime(values, errors=\"coerce\")\n+        _values = datetime_to_epoch(dti)\n+        date_only = getattr(dti, \"_is_dates_only\", False)\n+        if np.all(dti != pd.NaT):\n+            tvar.have_date = True\n+            tvar.have_time = not date_only\n+    return tvar, _values\n \n \n as_string = np.frompyfunc(str, 1, 1)\n@@ -2734,17 +2742,23 @@ class ToContinuousTransform(Transformation):\n             raise TypeError\n \n \n+def datetime_to_epoch(dti: pd.DatetimeIndex) -> np.ndarray:\n+    \"\"\"Convert datetime to epoch\"\"\"\n+    data = dti.values.astype(\"M8[us]\")\n+    mask = np.isnat(data)\n+    data = data.astype(float) / 1e6\n+    data[mask] = np.nan\n+    return data\n+\n+\n class ReparseTimeTransform(Transformation):\n     \"\"\"\n     Re-parse the column's string repr as datetime.\n     \"\"\"\n     def transform(self, c):\n         c = column_str_repr(self.variable, c)\n-        c = pd.to_datetime(c, errors=\"coerce\").values.astype(\"M8[us]\")\n-        mask = np.isnat(c)\n-        orangecol = c.astype(float) / 1e6\n-        orangecol[mask] = np.nan\n-        return orangecol\n+        c = pd.to_datetime(c, errors=\"coerce\")\n+        return datetime_to_epoch(c)\n \n \n class LookupMappingTransform(Transformation):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex 36482b09e..4ef398bf3 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -8,6 +8,7 @@ from unittest.mock import Mock, patch\n \n import numpy as np\n from numpy.testing import assert_array_equal\n+import pandas as pd\n \n from AnyQt.QtCore import QItemSelectionModel, Qt, QItemSelection\n from AnyQt.QtWidgets import QAction, QComboBox, QLineEdit, \\\n@@ -33,7 +34,7 @@ from Orange.widgets.data.oweditdomain import (\n     table_column_data, ReinterpretVariableEditor, CategoricalVector,\n     VariableEditDelegate, TransformRole,\n     RealVector, TimeVector, StringVector, make_dict_mapper, DictMissingConst,\n-    LookupMappingTransform, as_float_or_nan, column_str_repr,\n+    LookupMappingTransform, as_float_or_nan, column_str_repr, time_parse,\n     GroupItemsDialog)\n from Orange.widgets.data.owcolor import OWColor, ColorRole\n from Orange.widgets.tests.base import WidgetTest, GuiTest\n@@ -917,6 +918,19 @@ class TestUtils(TestCase):\n         d = column_str_repr(v, np.array([0., np.nan, 1.0]))\n         assert_array_equal(d, [\"00:00:00\", \"?\", \"00:00:01\"])\n \n+    def test_time_parse(self):\n+        \"\"\"parsing additional datetimes by pandas\"\"\"\n+        date = [\"1/22/20\", \"1/23/20\", \"1/24/20\"]\n+        # we use privet method, check if still exists\n+        assert hasattr(pd.DatetimeIndex, '_is_dates_only')\n+\n+        tval, values = time_parse(date)\n+\n+        self.assertTrue(tval.have_date)\n+        self.assertFalse(tval.have_time)\n+        self.assertListEqual(list(values),\n+                             [1579651200.0, 1579737600.0, 1579824000.0])\n+\n \n class TestLookupMappingTransform(TestCase):\n     def setUp(self) -> None:\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4921.0, "instance_id": "biolab__orange3-4921", "issue_numbers": 0, "base_commit": "29c053c65d0d289578907bcd5f9fc8d65d8df26b", "patch": "diff --git a/Orange/widgets/data/owcsvimport.py b/Orange/widgets/data/owcsvimport.py\nindex 078adca1c..70689067d 100644\n--- a/Orange/widgets/data/owcsvimport.py\n+++ b/Orange/widgets/data/owcsvimport.py\n@@ -1101,9 +1101,7 @@ def _open(path, mode, encoding=None):\n         arh = zipfile.ZipFile(path, 'r')\n         filelist = arh.infolist()\n         if len(filelist) == 1:\n-            filename = filelist[0]\n-            zinfo = arh.getinfo(filename)\n-            f = arh.open(zinfo.filename, 'r')\n+            f = arh.open(filelist[0], 'r')\n             if 't' in mode:\n                 f = io.TextIOWrapper(f, encoding=encoding)\n             return f\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcsvimport.py b/Orange/widgets/data/tests/test_owcsvimport.py\nindex b64bf7835..6335263b6 100644\n--- a/Orange/widgets/data/tests/test_owcsvimport.py\n+++ b/Orange/widgets/data/tests/test_owcsvimport.py\n@@ -1,4 +1,4 @@\n-# pylint: disable=no-self-use\n+# pylint: disable=no-self-use,protected-access\n import unittest\n from unittest import mock\n from contextlib import ExitStack\n@@ -306,6 +306,51 @@ class TestUtils(unittest.TestCase):\n         df = owcsvimport.load_csv(io.BytesIO(contents), opts)\n         assert_array_equal(df.values, np.array([[3.21, 3.37], [4.13, 1000.142]]))\n \n+    def test_open_compressed(self):\n+        content = 'abc'\n+        for ext in [\"txt\", \"gz\", \"bz2\", \"xz\", \"zip\"]:\n+            with named_file('', suffix=f\".{ext}\") as fname:\n+                with _open_write(fname, \"wt\", encoding=\"ascii\") as f:\n+                    f.write(content)\n+                f.close()\n+\n+                with owcsvimport._open(fname, \"rt\", encoding=\"ascii\") as f:\n+                    self.assertEqual(content, f.read())\n+\n+\n+def _open_write(path, mode, encoding=None):\n+    # pylint: disable=import-outside-toplevel\n+    if mode not in {'w', 'wb', 'wt'}:\n+        raise ValueError('r')\n+    _, ext = os.path.splitext(path)\n+    ext = ext.lower()\n+    if ext == \".gz\":\n+        import gzip\n+        return gzip.open(path, mode, encoding=encoding)\n+    elif ext == \".bz2\":\n+        import bz2\n+        return bz2.open(path, mode, encoding=encoding)\n+    elif ext == \".xz\":\n+        import lzma\n+        return lzma.open(path, mode, encoding=encoding)\n+    elif ext == \".zip\":\n+        import zipfile\n+        arh = zipfile.ZipFile(path, 'w')\n+        filename, _ = os.path.splitext(os.path.basename(path))\n+        f = arh.open(filename, mode=\"w\")\n+        f_close = f.close\n+        # patch the f.close to also close the main archive file\n+\n+        def close_():\n+            f_close()\n+            arh.close()\n+        f.close = close_\n+        if 't' in mode:\n+            f = io.TextIOWrapper(f, encoding=encoding)\n+        return f\n+    else:\n+        return open(path, mode, encoding=encoding)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5652.0, "instance_id": "biolab__orange3-5652", "issue_numbers": 0, "base_commit": "ae9213d58a40f316c495ae24382851b84d16255c", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 52bbed150..788c06394 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -348,6 +348,15 @@ def table_from_frame(df, *, force_nominal=False):\n \n \n def table_from_frames(xdf, ydf, mdf):\n+    if not (xdf.index.equals(ydf.index) and xdf.index.equals(mdf.index)):\n+        raise ValueError(\n+            \"Indexes not equal. Make sure that all three dataframes have equal index\"\n+        )\n+\n+    # drop index from x and y - it makes sure that index if not range will be\n+    # placed in metas\n+    xdf = xdf.reset_index(drop=True)\n+    ydf = ydf.reset_index(drop=True)\n     dfs = xdf, ydf, mdf\n \n     if not all(df.shape[0] == xdf.shape[0] for df in dfs):\n@@ -361,12 +370,11 @@ def table_from_frames(xdf, ydf, mdf):\n     XYM = (xXYM[0], yXYM[1], mXYM[2])\n     domain = Domain(xDomain.attributes, yDomain.class_vars, mDomain.metas)\n \n-    indexes = [df.index for df in dfs]\n     ids = [\n-        int(x[2:])\n-        if str(x).startswith(\"_o\") and x[2:].isdigit() and x == y == m\n+        int(idx[2:])\n+        if str(idx).startswith(\"_o\") and idx[2:].isdigit()\n         else Table.new_id()\n-        for x, y, m in zip(*indexes)\n+        for idx in mdf.index\n     ]\n \n     attributes = {}\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 1f4bd4cc0..4eb7371fc 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -476,6 +476,39 @@ class TestPandasCompat(unittest.TestCase):\n         self.assertEqual(y.columns[0], d.class_var.name)\n         self.assertListEqual(m.columns.tolist(), [a.name for a in d.metas])\n \n+    def test_table_from_frames_same_index(self):\n+        \"\"\"\n+        Test that index column is placed in metas. Function should fail\n+        with ValueError when indexes are different\n+        \"\"\"\n+        index = np.array([\"a\", \"b\"])\n+        x = pd.DataFrame(\n+            [[1, 2, 3], [4, 5, 6]], columns=[\"x1\", \"x2\", \"x3\"], index=index\n+        )\n+        y = pd.DataFrame([[5], [6]], columns=[\"y\"], index=index)\n+        m = pd.DataFrame([[1, 2], [4, 5]], columns=[\"m1\", \"m2\"], index=index)\n+        new_table = Table.from_pandas_dfs(x, y, m)\n+\n+        # index should be placed in metas\n+        np.testing.assert_array_equal(x, new_table.X)\n+        np.testing.assert_array_equal(y.values.flatten(), new_table.Y)\n+        np.testing.assert_array_equal(\n+            np.hstack((index[:, None], m.values.astype(\"object\"))), new_table.metas\n+        )\n+        d = new_table.domain\n+        self.assertListEqual(x.columns.tolist(), [a.name for a in d.attributes])\n+        self.assertEqual(y.columns[0], d.class_var.name)\n+        self.assertListEqual([\"index\"] + m.columns.tolist(), [a.name for a in d.metas])\n+\n+        index2 = np.array([\"a\", \"c\"])\n+        x = pd.DataFrame(\n+            [[1, 2, 3], [4, 5, 6]], columns=[\"x1\", \"x2\", \"x3\"], index=index\n+        )\n+        y = pd.DataFrame([[5], [6]], columns=[\"y\"], index=index2)\n+        m = pd.DataFrame([[1, 2], [4, 5]], columns=[\"m1\", \"m2\"], index=index)\n+        with self.assertRaises(ValueError):\n+            Table.from_pandas_dfs(x, y, m)\n+\n \n class TestTablePandas(unittest.TestCase):\n     def setUp(self):\n@@ -612,7 +645,7 @@ class TestTablePandas(unittest.TestCase):\n         table3 = df3.to_orange_table()\n \n         self.assertEqual(len(table2), len(table3))\n-        self.assertFalse(any(table3.W))\n+        self.assertEqual(0, table3.W.size)\n         self.assertEqual(self.table.attributes, table3.attributes)\n \n         d1 = table2.domain\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4709.0, "instance_id": "biolab__orange3-4709", "issue_numbers": 0, "base_commit": "4683447130dddafa7e8ecf320bae7cf85ceb44b4", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex 5bbb09b26..879d754b3 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -11,6 +11,8 @@ from AnyQt.QtCore import (\n     Qt, QSize, QRect, QRectF, QPoint, QLocale,\n     QModelIndex, QAbstractTableModel, QSortFilterProxyModel, pyqtSignal, QTimer)\n \n+from orangewidget.report import plural\n+\n import Orange\n from Orange.evaluation import Results\n from Orange.base import Model\n@@ -293,19 +295,29 @@ class OWPredictions(OWWidget):\n             self.Warning.wrong_targets.clear()\n \n     def _update_info(self):\n-        n_predictors = len(self.predictors)\n-        if not self.data and not n_predictors:\n+        if not self.data and not self.predictors:\n             self.info.set_input_summary(self.info.NoInput)\n             return\n \n-        n_valid = len(self._non_errored_predictors())\n         summary = str(len(self.data)) if self.data else \"0\"\n-        details = f\"{len(self.data)} instances\" if self.data else \"No data\"\n-        details += f\"\\n{n_predictors} models\" if n_predictors else \"No models\"\n-        if n_valid != n_predictors:\n-            details += f\" ({n_predictors - n_valid} failed)\"\n+        details = self._get_details()\n         self.info.set_input_summary(summary, details)\n \n+    def _get_details(self):\n+        n_predictors = len(self.predictors)\n+        if self.data:\n+            details = plural(\"{number} instance{s}\", len(self.data))\n+        else:\n+            details = \"No data\"\n+        if n_predictors:\n+            n_valid = len(self._non_errored_predictors())\n+            details += plural(\"\\n{number} model{s}\", n_predictors)\n+            if n_valid != n_predictors:\n+                details += plural(\" ({number} failed)\", n_predictors - n_valid)\n+        else:\n+            details += \"\\nNo models\"\n+        return details\n+\n     def _invalidate_predictions(self):\n         for inputid, pred in list(self.predictors.items()):\n             self.predictors[inputid] = pred._replace(results=None)\n@@ -560,10 +572,12 @@ class OWPredictions(OWWidget):\n     def send_report(self):\n         def merge_data_with_predictions():\n             data_model = self.dataview.model()\n-            predictions_model = self.predictionsview.model()\n+            predictions_view = self.predictionsview\n+            predictions_model = predictions_view.model()\n \n             # use ItemDelegate to style prediction values\n-            style = lambda x: self.predictionsview.itemDelegate().displayText(x, QLocale())\n+            delegates = [predictions_view.itemDelegateForColumn(i)\n+                         for i in range(predictions_model.columnCount())]\n \n             # iterate only over visible columns of data's QTableView\n             iter_data_cols = list(filter(lambda x: not self.dataview.isColumnHidden(x),\n@@ -579,13 +593,15 @@ class OWPredictions(OWWidget):\n             # print data & predictions\n             for i in range(data_model.rowCount()):\n                 yield [data_model.headerData(i, Qt.Vertical, Qt.DisplayRole)] + \\\n-                      [style(predictions_model.data(predictions_model.index(i, j)))\n-                       for j in range(predictions_model.columnCount())] + \\\n+                      [delegate.displayText(\n+                          predictions_model.data(predictions_model.index(i, j)),\n+                          QLocale())\n+                       for j, delegate in enumerate(delegates)] + \\\n                       [data_model.data(data_model.index(i, j))\n                        for j in iter_data_cols]\n \n         if self.data:\n-            text = self.infolabel.text().replace('\\n', '<br>')\n+            text = self._get_details().replace('\\n', '<br>')\n             if self.selected_classes:\n                 text += '<br>Showing probabilities for: '\n                 text += ', '. join([self.class_values[i]\n@@ -594,6 +610,8 @@ class OWPredictions(OWWidget):\n             self.report_table(\"Data & Predictions\", merge_data_with_predictions(),\n                               header_rows=1, header_columns=1)\n \n+            self.report_table(\"Scores\", self.score_table.view)\n+\n     def resizeEvent(self, event):\n         super().resizeEvent(event)\n         self._update_splitter()\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex 2bf0ec31e..f746ea27c 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -412,6 +412,8 @@ class TestOWPredictions(WidgetTest):\n         colors = self.widget._get_colors()\n         self.assertEqual(3, len(colors))\n \n+        self.widget.send_report()  # just a quick check that it doesn't crash\n+\n \n if __name__ == \"__main__\":\n     import unittest\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6862.0, "instance_id": "biolab__orange3-6862", "issue_numbers": 0, "base_commit": "09df730fdec7230f6994971d7de241a6b784e23b", "patch": "diff --git a/Orange/data/io_base.py b/Orange/data/io_base.py\nindex 914d1d337..6b74e72a9 100644\n--- a/Orange/data/io_base.py\n+++ b/Orange/data/io_base.py\n@@ -170,7 +170,8 @@ class _TableHeader:\n         \"\"\"\n \n         def is_flag(x):\n-            return bool(Flags.RE_ALL.match(cls._type_from_flag([x])[0]) or\n+            return bool(cls._type_from_flag([x])[0] and\n+                        _RE_TYPES.match(cls._type_from_flag([x])[0]) or\n                         Flags.RE_ALL.match(cls._flag_from_flag([x])[0]))\n \n         flags, names = zip(*[i.split(cls.HEADER1_FLAG_SEP, 1)\n.", "test_patch": "diff --git a/Orange/data/tests/test_io_base.py b/Orange/data/tests/test_io_base.py\nindex 737e353de..ba272c4d6 100644\n--- a/Orange/data/tests/test_io_base.py\n+++ b/Orange/data/tests/test_io_base.py\n@@ -23,6 +23,13 @@ class InitTestData(unittest.TestCase):\n                              [\"red\", \"0.5\", \"0.0\", \"0.0\", \"aa\", \"a\"],\n                              [\"red\", \"0.1\", \"1.0\", \"1.0\", \"b\", \"b\"],\n                              [\"green\", \"0.0\", \"2.0\", \"2.0\", \"c\", \"c\"]]\n+        cls.header1_flags2 = [[\"D#a1\", \"D#a2\", \"cD#a3\", \"C#a4\", \"S#a5\",\n+                               \"mS#a6\", \"T#a7\", \"mT#a8\", \"T#a9\"],\n+                              [\"\", \"0\", \"\", \"0\", \"a\", \"a\",\n+                               \"2024-01-01\", \"2024-01-01\", \"\"],\n+                              [\"\", \"1\", \"\", \"1\", \"b\", \"b\",\n+                               \"2024-01-01\", \"2024-01-01\", \"\"],\n+                              [\"green\", \"0.0\", \"2.0\", \"2.0\", \"c\", \"c\"]]\n         cls.header3 = [[\"a\", \"b\", \"c\", \"d\", \"w\", \"e\", \"f\", \"g\"],\n                        [\"d\", \"c\", \"c\", \"c\", \"c\", \"d\", \"s\", \"yes no\"],\n                        [\"meta\", \"class\", \"meta\", \"\", \"weight\", \"i\", \"\", \"\"],\n@@ -53,6 +60,16 @@ class TestTableHeader(InitTestData):\n         self.assertListEqual(types, [\"\", \"c\", \"\", \"\", \"\", \"\"])\n         self.assertListEqual(flags, [\"m\", \"c\", \"m\", \"\", \"i\", \"\"])\n \n+    def test_get_header_data_1_flags2(self):\n+        names, types, flags = _TableHeader.create_header_data(\n+            self.header1_flags2[:1])\n+        names_ = [\"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\", \"a7\", \"a8\", \"a9\"]\n+        types_ = [\"d\", \"d\", \"d\", \"c\", \"s\", \"s\", \"t\", \"t\", \"t\"]\n+        flags_ = [\"\", \"\", \"c\", \"\", \"\", \"m\", \"\", \"m\", \"\"]\n+        self.assertListEqual(names, names_)\n+        self.assertListEqual(types, types_)\n+        self.assertListEqual(flags, flags_)\n+\n     def test_get_header_data_3(self):\n         names, types, flags = _TableHeader.create_header_data(self.header3[:3])\n         self.assertListEqual(names, [\"a\", \"b\", \"c\", \"d\", \"w\", \"e\", \"f\", \"g\"])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4120.0, "instance_id": "biolab__orange3-4120", "issue_numbers": 0, "base_commit": "1fb5f8a3ae6218751e4dbd2bf88fbcc61157b851", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 40fd50afd..e333118b7 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -26,6 +26,8 @@ MISSING_VALUES = {np.nan, \"?\", \"nan\", \".\", \"\", \"NA\", \"~\", None}\n \n DISCRETE_MAX_VALUES = 3  # == 2 + nan\n MAX_NUM_OF_DECIMALS = 5\n+# the variable with more than 100 different values should not be StringVariable\n+DISCRETE_MAX_ALLOWED_VALUES = 100\n \n \n def make_variable(cls, compute_value, *args):\n@@ -63,7 +65,8 @@ def is_discrete_values(values):\n     unique = set()\n     for i in values:\n         unique.add(i)\n-        if len(unique) > max_values:\n+        if (len(unique) > max_values or\n+                len(unique) > DISCRETE_MAX_ALLOWED_VALUES):\n             return False\n \n     # Strip NaN from unique\ndiff --git a/Orange/widgets/data/owfile.py b/Orange/widgets/data/owfile.py\nindex 4f91f1761..ed127c088 100644\n--- a/Orange/widgets/data/owfile.py\n+++ b/Orange/widgets/data/owfile.py\n@@ -1,5 +1,6 @@\n import os\n import logging\n+from itertools import chain\n from warnings import catch_warnings\n from urllib.parse import urlparse\n from typing import List\n@@ -123,6 +124,8 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n         file_too_big = widget.Msg(\"The file is too large to load automatically.\"\n                                   \" Press Reload to load.\")\n         load_warning = widget.Msg(\"Read warning:\\n{}\")\n+        performance_warning = widget.Msg(\n+            \"Categorical variables with >100 values may decrease performance.\")\n \n     class Error(widget.OWWidget.Error):\n         file_not_found = widget.Msg(\"File not found.\")\n@@ -468,7 +471,13 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n         self.domain_editor.reset_domain()\n         self.apply_domain_edit()\n \n+    def _inspect_discrete_variables(self, domain):\n+        for var in chain(domain.variables, domain.metas):\n+            if var.is_discrete and len(var.values) > 100:\n+                self.Warning.performance_warning()\n+\n     def apply_domain_edit(self):\n+        self.Warning.performance_warning.clear()\n         if self.data is None:\n             table = None\n         else:\n@@ -481,6 +490,7 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n                 table.name = self.data.name\n                 table.ids = np.array(self.data.ids)\n                 table.attributes = getattr(self.data, 'attributes', {})\n+                self._inspect_discrete_variables(domain)\n \n         self.Outputs.data.send(table)\n         self.apply_button.setEnabled(False)\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_io.py b/Orange/data/tests/test_io.py\nnew file mode 100644\nindex 000000000..ad0c34281\n--- /dev/null\n+++ b/Orange/data/tests/test_io.py\n@@ -0,0 +1,70 @@\n+import unittest\n+import numpy as np\n+\n+from Orange.data import ContinuousVariable, DiscreteVariable, StringVariable\n+from Orange.data.io import guess_data_type\n+\n+\n+class TestTableFilters(unittest.TestCase):\n+\n+    def test_guess_data_type_continuous(self):\n+        # should be ContinuousVariable\n+        valuemap, values, coltype = guess_data_type(list(range(1, 100)))\n+        self.assertEqual(ContinuousVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal(np.array(list(range(1, 100))), values)\n+\n+        valuemap, values, coltype = guess_data_type([1, 2, 3, 1, 2, 3])\n+        self.assertEqual(ContinuousVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal([1, 2, 3, 1, 2, 3], values)\n+\n+        valuemap, values, coltype = guess_data_type(\n+            [\"1\", \"2\", \"3\", \"1\", \"2\", \"3\"])\n+        self.assertEqual(ContinuousVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal([1, 2, 3, 1, 2, 3], values)\n+\n+    def test_guess_data_type_discrete(self):\n+        # should be DiscreteVariable\n+        valuemap, values, coltype = guess_data_type([1, 2, 1, 2])\n+        self.assertEqual(DiscreteVariable, coltype)\n+        self.assertEqual([1, 2], valuemap)\n+        np.testing.assert_array_equal([1, 2, 1, 2], values)\n+\n+        valuemap, values, coltype = guess_data_type([\"1\", \"2\", \"1\", \"2\", \"a\"])\n+        self.assertEqual(DiscreteVariable, coltype)\n+        self.assertEqual([\"1\", \"2\", \"a\"], valuemap)\n+        np.testing.assert_array_equal(['1', '2', '1', '2', 'a'], values)\n+\n+        # just below the threshold for string variable\n+        in_values = list(map(lambda x: str(x) + \"a\", range(24))) + [\"a\"] * 76\n+        valuemap, values, coltype = guess_data_type(in_values)\n+        self.assertEqual(DiscreteVariable, coltype)\n+        self.assertEqual(sorted(set(in_values)), valuemap)\n+        np.testing.assert_array_equal(in_values, values)\n+\n+    def test_guess_data_type_string(self):\n+        # should be StringVariable\n+        # too many different values for discrete\n+        in_values = list(map(lambda x: str(x) + \"a\", range(90)))\n+        valuemap, values, coltype = guess_data_type(in_values)\n+        self.assertEqual(StringVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal(in_values, values)\n+\n+        # more than len(values)**0.7\n+        in_values = list(map(lambda x: str(x) + \"a\", range(25))) + [\"a\"] * 75\n+        valuemap, values, coltype = guess_data_type(in_values)\n+        self.assertEqual(StringVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal(in_values, values)\n+\n+        # more than 100 different values - exactly 101\n+        # this is the case when len(values)**0.7 rule would vote for the\n+        # DiscreteVariable\n+        in_values = list(map(lambda x: str(x) + \"a\", range(100))) + [\"a\"] * 999\n+        valuemap, values, coltype = guess_data_type(in_values)\n+        self.assertEqual(StringVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal(in_values, values)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5105.0, "instance_id": "biolab__orange3-5105", "issue_numbers": 0, "base_commit": "4dbbdde45c1d0a6b1a606e32d18d96f100d07e16", "patch": "diff --git a/Orange/widgets/data/owselectcolumns.py b/Orange/widgets/data/owselectcolumns.py\nindex 4e7abd40c..af11f3668 100644\n--- a/Orange/widgets/data/owselectcolumns.py\n+++ b/Orange/widgets/data/owselectcolumns.py\n@@ -1,5 +1,5 @@\n from functools import partial\n-from typing import Optional\n+from typing import Optional, Dict, Tuple\n \n from AnyQt.QtWidgets import QWidget, QGridLayout\n from AnyQt.QtWidgets import QListView\n@@ -8,6 +8,7 @@ from AnyQt.QtCore import (\n     QMimeData, QAbstractItemModel\n )\n \n+from Orange.data import Domain, Variable\n from Orange.widgets import gui, widget\n from Orange.widgets.settings import (\n     ContextSetting, Setting, DomainContextHandler\n@@ -167,6 +168,7 @@ class OWSelectAttributes(widget.OWWidget):\n     settingsHandler = SelectAttributesDomainContextHandler(first_match=False)\n     domain_role_hints = ContextSetting({})\n     use_input_features = Setting(False)\n+    select_new_features = Setting(True)\n     auto_commit = Setting(True)\n \n     class Warning(widget.OWWidget.Warning):\n@@ -286,7 +288,7 @@ class OWSelectAttributes(widget.OWWidget):\n         self.down_class_button = gui.button(bbox, self, \"Down\",\n                                             callback=partial(self.move_down, self.class_attrs_view))\n \n-        bbox = gui.vBox(self.controlArea, addToLayout=False, margin=0)\n+        bbox = gui.vBox(self.controlArea, addToLayout=False)\n         layout.addWidget(bbox, 2, 1, 1, 1)\n         self.up_meta_button = gui.button(bbox, self, \"Up\",\n                                          callback=partial(self.move_up, self.meta_attrs_view))\n@@ -297,8 +299,14 @@ class OWSelectAttributes(widget.OWWidget):\n         self.down_meta_button = gui.button(bbox, self, \"Down\",\n                                            callback=partial(self.move_down, self.meta_attrs_view))\n \n+        bbox = gui.vBox(self.controlArea, \"Additional settings\", addToLayout=False)\n+        gui.checkBox(\n+            bbox, self, \"select_new_features\", \"Automatically select additional/new features\"\n+        )\n+        layout.addWidget(bbox, 3, 0, 1, 3)\n+\n         autobox = gui.auto_send(None, self, \"auto_commit\")\n-        layout.addWidget(autobox, 3, 0, 1, 3)\n+        layout.addWidget(autobox, 4, 0, 1, 3)\n         reset = gui.button(None, self, \"Reset\", callback=self.reset, width=120)\n         autobox.layout().insertWidget(0, reset)\n         autobox.layout().insertStretch(1, 20)\n@@ -370,19 +378,50 @@ class OWSelectAttributes(widget.OWWidget):\n             ]\n             return sorted(selected_attrs, key=lambda attr: domain_hints[attr][1])\n \n-        domain = data.domain\n-        domain_hints = {}\n-        domain_hints.update(self._hints_from_seq(\"attribute\", domain.attributes))\n-        domain_hints.update(self._hints_from_seq(\"meta\", domain.metas))\n-        domain_hints.update(self._hints_from_seq(\"class\", domain.class_vars))\n-        domain_hints.update(self.domain_role_hints)\n-\n+        domain_hints = self.restore_hints(data.domain)\n         self.used_attrs[:] = attrs_for_role(\"attribute\")\n         self.class_attrs[:] = attrs_for_role(\"class\")\n         self.meta_attrs[:] = attrs_for_role(\"meta\")\n         self.available_attrs[:] = attrs_for_role(\"available\")\n         self.info.set_input_summary(len(data), format_summary_details(data))\n \n+    def restore_hints(self, domain: Domain) -> Dict[Variable, Tuple[str, int]]:\n+        \"\"\"\n+        Define hints for selected/unselected features.\n+        Rules:\n+        - if context available, restore new features based on checked/unchecked\n+          select_new_features, context hint should be took into account\n+        - in no context, restore features based on the domain (as selected)\n+\n+        Parameters\n+        ----------\n+        domain\n+            Data domain\n+\n+        Returns\n+        -------\n+        Dictionary with hints about order and model in which each feature\n+        should appear\n+        \"\"\"\n+        domain_hints = {}\n+        if self.select_new_features or len(self.domain_role_hints) == 0:\n+            # select_new_features selected or no context - restore based on domain\n+            domain_hints.update(\n+                self._hints_from_seq(\"attribute\", domain.attributes)\n+            )\n+            domain_hints.update(self._hints_from_seq(\"meta\", domain.metas))\n+            domain_hints.update(\n+                self._hints_from_seq(\"class\", domain.class_vars)\n+            )\n+        else:\n+            # if context restored and select_new_features unselected - restore\n+            # new features as available\n+            d = domain.attributes + domain.metas + domain.class_vars\n+            domain_hints.update(self._hints_from_seq(\"available\", d))\n+\n+        domain_hints.update(self.domain_role_hints)\n+        return domain_hints\n+\n     def update_domain_role_hints(self):\n         \"\"\" Update the domain hints to be stored in the widgets settings.\n         \"\"\"\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectcolumns.py b/Orange/widgets/data/tests/test_owselectcolumns.py\nindex 5a7e87cf7..21bb0a9c9 100644\n--- a/Orange/widgets/data/tests/test_owselectcolumns.py\n+++ b/Orange/widgets/data/tests/test_owselectcolumns.py\n@@ -1,4 +1,5 @@\n # pylint: disable=unsubscriptable-object\n+import unittest\n from unittest import TestCase\n from unittest.mock import Mock\n \n@@ -411,3 +412,88 @@ class TestOWSelectAttributes(WidgetTest):\n             data.Y\n         )\n         self.send_signal(self.widget.Inputs.data, data1)\n+\n+    def test_select_new_features(self):\n+        \"\"\"\n+        When select_new_features checked new attributes must appear in one of\n+        selected columns. Test with fist make context remember attributes of\n+        reduced domain and then testing with full domain. Features in missing\n+        in reduced domain must appears as seleceted.\n+        \"\"\"\n+        data = Table(\"iris\")\n+        domain = data.domain\n+\n+        # data with one feature missing\n+        new_domain = Domain(\n+            domain.attributes[:-1], domain.class_var, domain.metas\n+        )\n+        new_data = Table.from_table(new_domain, data)\n+\n+        # make context remember features in reduced domain\n+        self.send_signal(self.widget.Inputs.data, new_data)\n+        output = self.get_output(self.widget.Outputs.data)\n+\n+        self.assertTupleEqual(\n+            new_data.domain.attributes, output.domain.attributes\n+        )\n+        self.assertTupleEqual(new_data.domain.metas, output.domain.metas)\n+        self.assertEqual(new_data.domain.class_var, output.domain.class_var)\n+\n+        # send full domain\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+\n+        # if select_new_features checked all new features goes in the selected\n+        # features columns - domain equal original\n+        self.assertTrue(self.widget.select_new_features)\n+        self.assertTupleEqual(data.domain.attributes, output.domain.attributes)\n+        self.assertTupleEqual(data.domain.metas, output.domain.metas)\n+        self.assertEqual(data.domain.class_var, output.domain.class_var)\n+\n+    def test_unselect_new_features(self):\n+        \"\"\"\n+        When select_new_features not checked new attributes must appear in one\n+        available attributes column. Test with fist make context remember\n+        attributes of reduced domain and then testing with full domain.\n+        Features in missing in reduced domain must appears as not seleceted.\n+        \"\"\"\n+        data = Table(\"iris\")\n+        domain = data.domain\n+\n+        # data with one feature missing\n+        new_domain = Domain(\n+            domain.attributes[:-1], domain.class_var, domain.metas\n+        )\n+        new_data = Table.from_table(new_domain, data)\n+\n+        # make context remember features in reduced domain\n+        self.send_signal(self.widget.Inputs.data, new_data)\n+        # unselect select_new_features\n+        self.widget.controls.select_new_features.click()\n+        self.assertFalse(self.widget.select_new_features)\n+        output = self.get_output(self.widget.Outputs.data)\n+\n+        self.assertTupleEqual(\n+            new_data.domain.attributes, output.domain.attributes\n+        )\n+        self.assertTupleEqual(new_data.domain.metas, output.domain.metas)\n+        self.assertEqual(new_data.domain.class_var, output.domain.class_var)\n+\n+        # send full domain\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+\n+        # if select_new_features not checked all new features goes in the\n+        # available attributes column\n+        self.assertFalse(self.widget.select_new_features)\n+        self.assertTupleEqual(new_domain.attributes, output.domain.attributes)\n+        self.assertTupleEqual(new_domain.metas, output.domain.metas)\n+        self.assertEqual(new_domain.class_var, output.domain.class_var)\n+        # test if new attribute was added to unselected attributes\n+        self.assertEqual(\n+            domain.attributes[-1], list(self.widget.available_attrs)[0]\n+        )\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5884.0, "instance_id": "biolab__orange3-5884", "issue_numbers": 0, "base_commit": "7e7567adafef7401048a45f115a0df9dddc49800", "patch": "diff --git a/Orange/widgets/visualize/utils/customizableplot.py b/Orange/widgets/visualize/utils/customizableplot.py\nindex 6eb874ef2..e0c982478 100644\n--- a/Orange/widgets/visualize/utils/customizableplot.py\n+++ b/Orange/widgets/visualize/utils/customizableplot.py\n@@ -27,7 +27,7 @@ def available_font_families() -> List:\n     \"\"\"\n     if not QApplication.instance():\n         _ = QApplication(sys.argv)\n-    fonts = QFontDatabase().families()\n+    fonts = QFontDatabase.families()\n     default = default_font_family()\n \n     defaults = [default]\n.", "test_patch": "diff --git a/Orange/widgets/visualize/utils/tests/test_customizableplot.py b/Orange/widgets/visualize/utils/tests/test_customizableplot.py\nindex 5863ced5f..c3566e264 100644\n--- a/Orange/widgets/visualize/utils/tests/test_customizableplot.py\n+++ b/Orange/widgets/visualize/utils/tests/test_customizableplot.py\n@@ -12,13 +12,13 @@ class TestFonts(unittest.TestCase):\n             font.return_value.family = Mock(return_value=\"mock regular\")\n \n             db.return_value = Mock()\n-            db.return_value.families = Mock(\n+            db.families = Mock(\n                 return_value=[\"a\", \".d\", \"e\", \".b\", \"mock regular\", \"c\"])\n             self.assertEqual(customizableplot.available_font_families(),\n                              [\"mock regular\", \"\", \"a\", \".b\", \"c\", \".d\", \"e\"])\n \n             db.return_value = Mock()\n-            db.return_value.families = Mock(\n+            db.families = Mock(\n                 return_value=[\"a\", \".d\", \"e\", \".b\", \"mock regular\",\n                               \"mock bold\", \"mock italic\", \"c\", \"mock semi\"])\n             self.assertEqual(customizableplot.available_font_families(),\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5006.0, "instance_id": "biolab__orange3-5006", "issue_numbers": 0, "base_commit": "0969864a4242b9694e11514a63f192d263477b83", "patch": "diff --git a/Orange/widgets/data/owneighbors.py b/Orange/widgets/data/owneighbors.py\nindex 574566ae9..9b4d0375e 100644\n--- a/Orange/widgets/data/owneighbors.py\n+++ b/Orange/widgets/data/owneighbors.py\n@@ -182,6 +182,7 @@ class OWNeighbors(OWWidget):\n         if data.domain.metas:\n             data_metas = np.hstack((data.metas[indices], data_metas))\n         neighbors = Table(domain, data.X[indices], data.Y[indices], data_metas)\n+        neighbors.ids = data.ids[indices]\n         neighbors.attributes = self.data.attributes\n         return neighbors\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owneighbors.py b/Orange/widgets/data/tests/test_owneighbors.py\nindex e8615ddf3..fc71ecdaf 100644\n--- a/Orange/widgets/data/tests/test_owneighbors.py\n+++ b/Orange/widgets/data/tests/test_owneighbors.py\n@@ -54,11 +54,14 @@ class TestOWNeighbors(WidgetTest):\n         \"\"\"Check if neighbors are on the output after apply\"\"\"\n         widget = self.widget\n         self.assertIsNone(self.get_output(\"Neighbors\"))\n-        self.send_signal(widget.Inputs.data, self.iris)\n-        self.send_signal(widget.Inputs.reference, self.iris[:10])\n+        self.send_signals(((widget.Inputs.data, self.iris),\n+                           (widget.Inputs.reference, self.iris[:10])))\n         widget.apply_button.button.click()\n         self.assertIsNotNone(self.get_output(\"Neighbors\"))\n         self.assertIsInstance(self.get_output(\"Neighbors\"), Table)\n+        self.assertTrue(all([i in self.iris.ids for i in\n+                             self.get_output(widget.Outputs.data).ids])\n+                        )\n \n     def test_settings(self):\n         \"\"\"Check neighbors for various distance metrics\"\"\"\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6441.0, "instance_id": "biolab__orange3-6441", "issue_numbers": 0, "base_commit": "e35d172474c25b207ee16647194d4e45a0779068", "patch": "diff --git a/Orange/widgets/gui.py b/Orange/widgets/gui.py\nindex 75b458965..ebae96e3a 100644\n--- a/Orange/widgets/gui.py\n+++ b/Orange/widgets/gui.py\n@@ -503,14 +503,14 @@ class CallBackListView(ControlledCallback):\n         if isinstance(self.view.model(), QSortFilterProxyModel):\n             selection = self.view.model().mapSelectionToSource(selection)\n         values = [i.row() for i in selection.indexes()]\n-        if values:\n-            # FIXME: irrespective of PyListModel check, this might/should always\n-            # callback with values!\n-            if isinstance(self.model, PyListModel):\n-                values = [self.model[i] for i in values]\n-            if self.view.selectionMode() == self.view.SingleSelection:\n-                values = values[0]\n-            self.acyclic_setattr(values)\n+\n+        # set attribute's values\n+        if isinstance(self.model, PyListModel):\n+            values = [self.model[i] for i in values]\n+        if self.view.selectionMode() == self.view.SingleSelection:\n+            assert len(values) <= 1\n+            values = values[0] if values else None\n+        self.acyclic_setattr(values)\n \n \n class CallBackListBox:\n.", "test_patch": "diff --git a/Orange/widgets/tests/test_gui.py b/Orange/widgets/tests/test_gui.py\nindex 1d7d46b73..6c385b7e9 100644\n--- a/Orange/widgets/tests/test_gui.py\n+++ b/Orange/widgets/tests/test_gui.py\n@@ -1,3 +1,4 @@\n+import unittest\n from unittest.mock import patch\n \n import numpy as np\n@@ -55,6 +56,10 @@ class TestListModel(GuiTest):\n         view.setCurrentIndex(self.attrs.index(1, 0))\n         self.assertEqual(widget.foo, [b])\n \n+        # unselect all\n+        sel_model.clear()\n+        self.assertEqual(widget.foo, [])\n+\n     def test_select_callfront(self):\n         widget = self.widget\n         view = self.view\n@@ -129,3 +134,7 @@ class TestRankModel(GuiTest):\n         test_array = np.array([\"Bertha\", \"daniela\", \"ann\", \"Cecilia\"])\n         assert_equal(func(test_array, Qt.AscendingOrder), [2, 0, 3, 1])\n         assert_equal(func(test_array, Qt.DescendingOrder), [1, 3, 0, 2])\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4501.0, "instance_id": "biolab__orange3-4501", "issue_numbers": 0, "base_commit": "9541a292c32883fcf173c2c3eeb68b92a2b827fd", "patch": "diff --git a/Orange/widgets/data/owcolor.py b/Orange/widgets/data/owcolor.py\nindex 8e184dc37..ed3d86023 100644\n--- a/Orange/widgets/data/owcolor.py\n+++ b/Orange/widgets/data/owcolor.py\n@@ -12,6 +12,7 @@ from Orange.widgets import widget, settings, gui\n from Orange.widgets.gui import HorizontalGridDelegate\n from Orange.widgets.utils import itemmodels, colorpalettes\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n from orangewidget.settings import IncompatibleContext\n \n@@ -458,6 +459,9 @@ class OWColor(widget.OWWidget):\n         box.button.setFixedWidth(180)\n         box.layout().insertStretch(0)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n     @staticmethod\n     def sizeHint():  # pragma: no cover\n         return QSize(500, 570)\n@@ -469,8 +473,10 @@ class OWColor(widget.OWWidget):\n         self.cont_descs = []\n         if data is None:\n             self.data = self.domain = None\n+            self.info.set_input_summary(self.info.NoInput)\n         else:\n             self.data = data\n+            self.info.set_input_summary(len(data), format_summary_details(data))\n             for var in chain(data.domain.variables, data.domain.metas):\n                 if var.is_discrete:\n                     self.disc_descs.append(DiscAttrDesc(var))\n@@ -498,6 +504,7 @@ class OWColor(widget.OWWidget):\n \n         if self.data is None:\n             self.Outputs.data.send(None)\n+            self.info.set_output_summary(self.info.NoOutput)\n             return\n \n         disc_dict = {desc.var.name: desc for desc in self.disc_descs}\n@@ -507,6 +514,8 @@ class OWColor(widget.OWWidget):\n         new_domain = Orange.data.Domain(\n             make(dom.attributes), make(dom.class_vars), make(dom.metas))\n         new_data = self.data.transform(new_domain)\n+        self.info.set_output_summary(len(new_data),\n+                                     format_summary_details(new_data))\n         self.Outputs.data.send(new_data)\n \n     def send_report(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcolor.py b/Orange/widgets/data/tests/test_owcolor.py\nindex 3feb5727a..58ffc7770 100644\n--- a/Orange/widgets/data/tests/test_owcolor.py\n+++ b/Orange/widgets/data/tests/test_owcolor.py\n@@ -1,5 +1,5 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring, protected-access\n+# pylint: disable=missing-docstring, protected-access,unsubscriptable-object\n import unittest\n from unittest.mock import patch, Mock\n \n@@ -10,6 +10,7 @@ from AnyQt.QtGui import QBrush\n from Orange.data import Table, ContinuousVariable, DiscreteVariable, Domain\n from Orange.util import color_to_hex\n from Orange.widgets.utils import colorpalettes\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.data import owcolor\n from Orange.widgets.data.owcolor import ColorRole\n from Orange.widgets.tests.base import WidgetTest\n@@ -483,6 +484,25 @@ class TestOWColor(WidgetTest):\n     def test_string_variables(self):\n         self.send_signal(self.widget.Inputs.data, Table(\"zoo\"))\n \n+    def test_summary(self):\n+        \"\"\"Check if the status bar is updated when data is received\"\"\"\n+        data = self.iris\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4255.0, "instance_id": "biolab__orange3-4255", "issue_numbers": 0, "base_commit": "3eb28ee3f0c5feb7c4b23b5b4399c15cc86d79bb", "patch": "diff --git a/Orange/widgets/unsupervised/owpca.py b/Orange/widgets/unsupervised/owpca.py\nindex 5b9220d4a..8bd69c900 100644\n--- a/Orange/widgets/unsupervised/owpca.py\n+++ b/Orange/widgets/unsupervised/owpca.py\n@@ -31,6 +31,7 @@ class OWPCA(widget.OWWidget):\n \n     class Outputs:\n         transformed_data = Output(\"Transformed Data\", Table, replaces=[\"Transformed data\"])\n+        data = Output(\"Data\", Table, default=True)\n         components = Output(\"Components\", Table)\n         pca = Output(\"PCA\", PCA, dynamic=False)\n \n@@ -180,6 +181,7 @@ class OWPCA(widget.OWWidget):\n \n     def clear_outputs(self):\n         self.Outputs.transformed_data.send(None)\n+        self.Outputs.data.send(None)\n         self.Outputs.components.send(None)\n         self.Outputs.pca.send(self._pca_projector)\n \n@@ -286,7 +288,7 @@ class OWPCA(widget.OWWidget):\n         axis.setTicks([[(i, str(i)) for i in range(1, p + 1, d)]])\n \n     def commit(self):\n-        transformed = components = None\n+        transformed = data = components = None\n         if self._pca is not None:\n             if self._transformed is None:\n                 # Compute the full transform (MAX_COMPONENTS components) once.\n@@ -311,9 +313,18 @@ class OWPCA(widget.OWWidget):\n                                metas=metas)\n             components.name = 'components'\n \n+            data_dom = Domain(\n+                self.data.domain.attributes,\n+                self.data.domain.class_vars,\n+                self.data.domain.metas + domain.attributes)\n+            data = Table.from_numpy(\n+                data_dom, self.data.X, self.data.Y,\n+                numpy.hstack((self.data.metas, transformed.X)))\n+\n         self._pca_projector.component = self.ncomponents\n         self.Outputs.transformed_data.send(transformed)\n         self.Outputs.components.send(components)\n+        self.Outputs.data.send(data)\n         self.Outputs.pca.send(self._pca_projector)\n \n     def send_report(self):\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owpca.py b/Orange/widgets/unsupervised/tests/test_owpca.py\nindex 2220ddb6c..e6f36b6e0 100644\n--- a/Orange/widgets/unsupervised/tests/test_owpca.py\n+++ b/Orange/widgets/unsupervised/tests/test_owpca.py\n@@ -220,6 +220,28 @@ class TestOWPCA(WidgetTest):\n         invalidate.assert_not_called()\n         self.assertEqual(widget.ncomponents, 0)\n \n+    def test_output_data(self):\n+        widget = self.widget\n+        widget.ncomponents = 2\n+        domain = Domain(self.iris.domain.attributes[:3],\n+                        self.iris.domain.class_var,\n+                        self.iris.domain.attributes[3:])\n+        iris = self.iris.transform(domain)\n+        self.send_signal(widget.Inputs.data, iris)\n+        output = self.get_output(widget.Outputs.data)\n+        outdom = output.domain\n+        self.assertEqual(domain.attributes, outdom.attributes)\n+        self.assertEqual(domain.class_var, outdom.class_var)\n+        self.assertEqual(domain.metas, outdom.metas[:1])\n+        self.assertEqual(len(outdom.metas), 3)\n+        np.testing.assert_equal(iris.X, output.X)\n+        np.testing.assert_equal(iris.Y, output.Y)\n+        np.testing.assert_equal(iris.metas[:, 0], output.metas[:, 0])\n+\n+        trans = self.get_output(widget.Outputs.transformed_data)\n+        self.assertEqual(trans.domain.attributes, outdom.metas[1:])\n+        np.testing.assert_equal(trans.X, output.metas[:, 1:])\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6462.0, "instance_id": "biolab__orange3-6462", "issue_numbers": 0, "base_commit": "c1c55e49f3b66e592edacf796a8ba867d8a9c6e1", "patch": "diff --git a/Orange/widgets/data/owdatasets.py b/Orange/widgets/data/owdatasets.py\nindex 91b309882..d46a37b12 100644\n--- a/Orange/widgets/data/owdatasets.py\n+++ b/Orange/widgets/data/owdatasets.py\n@@ -204,6 +204,7 @@ class OWDataSets(OWWidget):\n \n     #: Selected dataset id\n     selected_id = settings.Setting(None)   # type: Optional[str]\n+    language = settings.Setting(DEFAULT_LANG)\n \n     #: main area splitter state\n     splitter_state = settings.Setting(b'')  # type: bytes\n@@ -236,7 +237,11 @@ class OWDataSets(OWWidget):\n         layout.addSpacing(20)\n         layout.addWidget(QLabel(\"Show data sets in \"))\n         lang_combo = self.language_combo = QComboBox()\n-        lang_combo.addItems([self.DEFAULT_LANG, self.ALL_LANGUAGES])\n+        languages = [self.DEFAULT_LANG, self.ALL_LANGUAGES]\n+        if self.language is not None and self.language not in languages:\n+            languages.insert(1, self.language)\n+        lang_combo.addItems(languages)\n+        lang_combo.setCurrentText(self.language)\n         lang_combo.activated.connect(self._on_language_changed)\n         layout.addWidget(lang_combo)\n         self.mainArea.layout().addLayout(layout)\n@@ -353,7 +358,10 @@ class OWDataSets(OWWidget):\n         combo = self.language_combo\n         current_language = combo.currentText()\n         allkeys = set(self.allinfo_local) | set(self.allinfo_remote)\n-        languages = sorted({self._parse_info(key).language for key in allkeys})\n+        languages = {self._parse_info(key).language for key in allkeys}\n+        if self.language is not None:\n+            languages.add(self.language)\n+        languages = sorted(languages)\n         combo.clear()\n         if self.DEFAULT_LANG not in languages:\n             combo.addItem(self.DEFAULT_LANG)\n@@ -408,10 +416,10 @@ class OWDataSets(OWWidget):\n     def _on_language_changed(self):\n         combo = self.language_combo\n         if combo.currentIndex() == combo.count() - 1:\n-            language = None\n+            self.language = None\n         else:\n-            language = combo.currentText()\n-        self.view.model().setLanguage(language)\n+            self.language = combo.currentText()\n+        self.view.model().setLanguage(self.language)\n \n     @Slot(object)\n     def __set_index(self, f):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasets.py b/Orange/widgets/data/tests/test_owdatasets.py\nindex 8faa5f623..90cb78ec3 100644\n--- a/Orange/widgets/data/tests/test_owdatasets.py\n+++ b/Orange/widgets/data/tests/test_owdatasets.py\n@@ -62,6 +62,27 @@ class TestOWDataSets(WidgetTest):\n         model.setLanguage(None)\n         self.assertEqual(model.rowCount(), 2)\n \n+    @patch(\"Orange.widgets.data.owdatasets.list_remote\",\n+           Mock(return_value={('core', 'foo.tab'): {\"language\": \"English\"},\n+                              ('core', 'bar.tab'): {\"language\": \"Sloven\u0161\u010dina\"}}))\n+    @patch(\"Orange.widgets.data.owdatasets.list_local\",\n+           Mock(return_value={}))\n+    def test_remember_language(self):\n+        w = self.create_widget(OWDataSets)  # type: OWDataSets\n+        self.wait_until_stop_blocking(w)\n+        w.language_combo.setCurrentText(\"Sloven\u0161\u010dina\")\n+        w.language_combo.activated.emit(w.language_combo.currentIndex())\n+        settings = w.settingsHandler.pack_data(w)\n+\n+        w2 = self.create_widget(OWDataSets, stored_settings=settings)\n+        self.wait_until_stop_blocking(w2)\n+        self.assertEqual(w2.language_combo.currentText(), \"Sloven\u0161\u010dina\")\n+\n+        settings[\"language\"] = \"Klingon\"\n+        w2 = self.create_widget(OWDataSets, stored_settings=settings)\n+        self.wait_until_stop_blocking(w2)\n+        self.assertEqual(w2.language_combo.currentText(), \"Klingon\")\n+\n     @patch(\"Orange.widgets.data.owdatasets.list_remote\",\n            Mock(return_value={('core', 'iris.tab'): {}}))\n     @patch(\"Orange.widgets.data.owdatasets.list_local\",\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5823.0, "instance_id": "biolab__orange3-5823", "issue_numbers": 0, "base_commit": "da56001d999583d34222217997918c6e76ea5003", "patch": "diff --git a/Orange/widgets/data/owgroupby.py b/Orange/widgets/data/owgroupby.py\nindex 07821aec2..ad160b55f 100644\n--- a/Orange/widgets/data/owgroupby.py\n+++ b/Orange/widgets/data/owgroupby.py\n@@ -443,9 +443,14 @@ class OWGroupBy(OWWidget, ConcurrentWidgetMixin):\n             if data\n             else {}\n         )\n+        default_aggregations = self.aggregations.copy()\n \n         self.openContext(self.data)\n \n+        # restore aggregations\n+        self.aggregations.update({k: v for k, v in default_aggregations.items()\n+                                  if k not in self.aggregations})\n+\n         # update selections in widgets and re-plot\n         self.agg_table_model.set_domain(data.domain if data else None)\n         self._set_gb_selection()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owgroupby.py b/Orange/widgets/data/tests/test_owgroupby.py\nindex 4356622ac..b2c6c2c6d 100644\n--- a/Orange/widgets/data/tests/test_owgroupby.py\n+++ b/Orange/widgets/data/tests/test_owgroupby.py\n@@ -20,7 +20,7 @@ from Orange.widgets.data.owgroupby import OWGroupBy\n from Orange.widgets.tests.base import WidgetTest\n \n \n-class TestOWGropBy(WidgetTest):\n+class TestOWGroupBy(WidgetTest):\n     def setUp(self) -> None:\n         self.widget = self.create_widget(OWGroupBy)\n         self.iris = Table(\"iris\")\n@@ -46,6 +46,14 @@ class TestOWGropBy(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, None)\n         self.assertIsNone(self.get_output(self.widget.Outputs.data))\n \n+    def test_data_domain_changed(self):\n+        self.send_signal(self.widget.Inputs.data, self.iris[:, -2:])\n+        self.assert_aggregations_equal([\"Mean\", \"Concatenate\"])\n+\n+        self.send_signal(self.widget.Inputs.data, self.iris[:, -3:])\n+        self.assert_aggregations_equal([\"Mean\", \"Mean\", \"Concatenate\"])\n+        self.select_table_rows(self.widget.agg_table_view, [0])\n+\n     @staticmethod\n     def _set_selection(view: QListView, indices: List[int]):\n         view.clearSelection()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4636.0, "instance_id": "biolab__orange3-4636", "issue_numbers": 0, "base_commit": "db4e7ce12ef37464e732ee9670207d2d04f7389c", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex 567d8b578..a2a4b848f 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -680,7 +680,8 @@ class GroupItemsDialog(QDialog):\n     DEFAULT_LABEL = \"other\"\n \n     def __init__(\n-            self, variable: Categorical, data: Union[np.ndarray, List],\n+            self, variable: Categorical,\n+            data: Union[np.ndarray, List, MArray],\n             selected_attributes: List[str], dialog_settings: Dict[str, Any],\n             parent: QWidget = None, flags: Qt.WindowFlags = Qt.Dialog, **kwargs\n     ) -> None:\n@@ -814,10 +815,18 @@ class GroupItemsDialog(QDialog):\n         -------\n         List of attributes' to be merged names\n         \"\"\"\n-        counts = Counter(self.data)\n         if self.selected_radio.isChecked():\n             return self.selected_attributes\n-        elif self.n_values_radio.isChecked():\n+\n+        if isinstance(self.data, MArray):\n+            non_nan = self.data[~self.data.mask]\n+        elif isinstance(self.data, np.ndarray):\n+            non_nan = self.data[~np.isnan(self.data)]\n+        else:  # list\n+            non_nan = [x for x in self.data if x is not None]\n+\n+        counts = Counter(non_nan)\n+        if self.n_values_radio.isChecked():\n             keep_values = self.n_values_spin.value()\n             values = counts.most_common()[keep_values:]\n             indices = [i for i, _ in values]\n@@ -828,6 +837,8 @@ class GroupItemsDialog(QDialog):\n             n_all = sum(counts.values())\n             indices = [v for v, c in counts.most_common()\n                        if c / n_all * 100 < self.frequent_rel_spin.value()]\n+\n+        indices = np.array(indices, dtype=int)  # indices must be ints\n         return np.array(self.variable.categories)[indices].tolist()\n \n     def get_merged_value_name(self) -> str:\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex 4ef398bf3..e37cc5e23 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -1026,6 +1026,40 @@ class TestGroupLessFrequentItemsDialog(GuiTest):\n         dialog.n_values_spin.setValue(3)\n         self.assertListEqual(dialog.get_merge_attributes(), [])\n \n+    def test_group_less_frequent_missing(self):\n+        \"\"\"\n+        Widget gives MaskedArray to GroupItemsDialog which can have missing\n+        values.\n+        gh-4599\n+        \"\"\"\n+        def _test_correctness():\n+            dialog.frequent_abs_radio.setChecked(True)\n+            dialog.frequent_abs_spin.setValue(3)\n+            self.assertListEqual(dialog.get_merge_attributes(), [\"b\", \"c\"])\n+\n+            dialog.frequent_rel_radio.setChecked(True)\n+            dialog.frequent_rel_spin.setValue(50)\n+            self.assertListEqual(dialog.get_merge_attributes(), [\"b\", \"c\"])\n+\n+            dialog.n_values_radio.setChecked(True)\n+            dialog.n_values_spin.setValue(1)\n+            self.assertListEqual(dialog.get_merge_attributes(), [\"b\", \"c\"])\n+\n+        # masked array\n+        data_masked = np.ma.array(\n+            [0, 0, np.nan, 0, 1, 1, 2], mask=[0, 0, 1, 0, 0, 0, 0]\n+        )\n+        dialog = GroupItemsDialog(self.v, data_masked, [], {})\n+        _test_correctness()\n+\n+        data_array = np.array([0, 0, np.nan, 0, 1, 1, 2])\n+        dialog = GroupItemsDialog(self.v, data_array, [], {})\n+        _test_correctness()\n+\n+        data_list = [0, 0, None, 0, 1, 1, 2]\n+        dialog = GroupItemsDialog(self.v, data_list, [], {})\n+        _test_correctness()\n+\n \n if __name__ == '__main__':\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6063.0, "instance_id": "biolab__orange3-6063", "issue_numbers": 0, "base_commit": "55a2955454b9e0bc657c8802ed78b70926e2437f", "patch": "diff --git a/Orange/widgets/data/owfeatureconstructor.py b/Orange/widgets/data/owfeatureconstructor.py\nindex 674f1d0fe..ecd1b3864 100644\n--- a/Orange/widgets/data/owfeatureconstructor.py\n+++ b/Orange/widgets/data/owfeatureconstructor.py\n@@ -1271,7 +1271,7 @@ class FeatureFunc:\n     def extract_column(self, table: Table, var: Variable):\n         data, _ = table.get_column_view(var)\n         if var.is_string:\n-            return list(map(var.str_val, data))\n+            return data\n         elif var.is_discrete and not self.use_values:\n             values = np.array([*var.values, None], dtype=object)\n             idx = data.astype(int)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeatureconstructor.py b/Orange/widgets/data/tests/test_owfeatureconstructor.py\nindex 237b4908a..f56d39e70 100644\n--- a/Orange/widgets/data/tests/test_owfeatureconstructor.py\n+++ b/Orange/widgets/data/tests/test_owfeatureconstructor.py\n@@ -21,7 +21,7 @@ from Orange.widgets.data.owfeatureconstructor import (\n     DiscreteDescriptor, ContinuousDescriptor, StringDescriptor,\n     construct_variables, OWFeatureConstructor,\n     FeatureEditor, DiscreteFeatureEditor, FeatureConstructorHandler,\n-    DateTimeDescriptor)\n+    DateTimeDescriptor, StringFeatureEditor)\n \n from Orange.widgets.data.owfeatureconstructor import (\n     freevars, validate_exp, FeatureFunc\n@@ -420,6 +420,20 @@ class OWFeatureConstructorTests(WidgetTest):\n         self.wait_until_finished(self.widget)\n         self.assertTrue(self.widget.Error.more_values_needed.is_shown())\n \n+    def test_missing_strings(self):\n+        domain = Domain([], metas=[StringVariable(\"S1\")])\n+        data = Table.from_list(domain, [[\"A\"], [\"B\"], [None]])\n+        self.widget.setData(data)\n+\n+        editor = StringFeatureEditor()\n+        editor.nameedit.setText(\"S2\")\n+        editor.expressionedit.setText(\"S1 + S1\")\n+        self.widget.addFeature(editor.editorData())\n+        self.widget.apply()\n+        output = self.get_output(self.widget.Outputs.data)\n+        np.testing.assert_equal(output.metas,\n+                                [[\"A\", \"AA\"], [\"B\", \"BB\"], [\"\", \"\"]])\n+\n     @patch(\"Orange.widgets.data.owfeatureconstructor.QMessageBox\")\n     def test_fix_values(self, msgbox):\n         w = self.widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3957.0, "instance_id": "biolab__orange3-3957", "issue_numbers": 0, "base_commit": "545cbb3fc48b8b410f27ba5d09f8e6deb0012bea", "patch": "diff --git a/Orange/widgets/visualize/owmosaic.py b/Orange/widgets/visualize/owmosaic.py\nindex a6c07800b..ec16bc9e0 100644\n--- a/Orange/widgets/visualize/owmosaic.py\n+++ b/Orange/widgets/visualize/owmosaic.py\n@@ -317,6 +317,7 @@ class OWMosaicDisplay(OWWidget):\n         self.discrete_data = None\n         self.subset_data = None\n         self.subset_indices = None\n+        self.__pending_selection = None\n \n         self.color_data = None\n \n@@ -442,6 +443,7 @@ class OWMosaicDisplay(OWWidget):\n \n         self.init_combos(self.data)\n         self.openContext(self.data)\n+        self.__pending_selection = self.selection\n \n     @Inputs.data_subset\n     def set_subset_data(self, data):\n@@ -475,6 +477,11 @@ class OWMosaicDisplay(OWWidget):\n     def reset_graph(self):\n         self.clear_selection()\n         self.update_graph()\n+        if self.__pending_selection is not None:\n+            self.selection = self.__pending_selection\n+            self.__pending_selection = None\n+            self.update_selection_rects()\n+            self.send_selection()\n \n     def set_color_data(self):\n         if self.data is None:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owmosaic.py b/Orange/widgets/visualize/tests/test_owmosaic.py\nindex b9aaa08c5..345c54578 100644\n--- a/Orange/widgets/visualize/tests/test_owmosaic.py\n+++ b/Orange/widgets/visualize/tests/test_owmosaic.py\n@@ -144,6 +144,24 @@ class TestOWMosaicDisplay(WidgetTest, WidgetOutputsTestMixin):\n         self.assertEqual(call_args[0].name, data.domain[0].name)\n         self.assertEqual(call_args[1].name, data.domain[2].name)\n \n+    def test_selection_setting(self):\n+        widget = self.widget\n+        data = Table(\"iris.tab\")\n+        self.send_signal(widget.Inputs.data, data)\n+\n+        widget.select_area(\n+            1,\n+            QMouseEvent(QEvent.MouseButtonPress, QPoint(), Qt.LeftButton,\n+                        Qt.LeftButton, Qt.KeyboardModifiers()))\n+\n+        self.send_signal(widget.Inputs.data, None)\n+        self.assertFalse(bool(widget.selection))\n+        self.assertIsNone(self.get_output(widget.Outputs.selected_data))\n+\n+        self.send_signal(widget.Inputs.data, data)\n+        self.assertEqual(widget.selection, {1})\n+        self.assertIsNotNone(self.get_output(widget.Outputs.selected_data))\n+\n \n # Derive from WidgetTest to simplify creation of the Mosaic widget, although\n # we are actually testing the MosaicVizRank dialog and not the widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5788.0, "instance_id": "biolab__orange3-5788", "issue_numbers": 0, "base_commit": "5984653865c15ee097219bf32015f7c7a1009943", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex 1a952bcd0..069316139 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -406,7 +406,13 @@ class UrlReader(FileFormat):\n         filename = filename.strip()\n         if not urlparse(filename).scheme:\n             filename = 'http://' + filename\n-        filename = quote(filename, safe=\"/:\")\n+\n+        # Fully support URL with query or fragment like http://filename.txt?a=1&b=2#c=3\n+        def quote_byte(b):\n+            return chr(b) if b < 0x80 else '%{:02X}'.format(b)\n+\n+        filename = ''.join(map(quote_byte, filename.encode(\"utf-8\")))\n+\n         super().__init__(filename)\n \n     @staticmethod\n.", "test_patch": "diff --git a/Orange/tests/test_url_reader.py b/Orange/tests/test_url_reader.py\nindex c40bf26a2..2d3bb5907 100644\n--- a/Orange/tests/test_url_reader.py\n+++ b/Orange/tests/test_url_reader.py\n@@ -25,6 +25,19 @@ class TestUrlReader(unittest.TestCase):\n                \"vestnik-clanki/detektiranje-utrdb-v-\u0161ahu-.txt\"\n         self.assertRaises(OSError, UrlReader(path).read)\n \n+    def test_base_url_with_query(self):\n+        data = UrlReader(\"https://datasets.biolab.si/core/grades.xlsx?a=1&b=2\").read()\n+        self.assertEqual(16, len(data))\n+\n+    def test_url_with_fragment(self):\n+        data = UrlReader(\"https://datasets.biolab.si/core/grades.xlsx#tab=1\").read()\n+        self.assertEqual(16, len(data))\n+\n+    def test_special_characters_with_query_and_fragment(self):\n+        path = \"http://file.biolab.si/text-semantics/data/elektrotehniski-\" \\\n+               \"vestnik-clanki/detektiranje-utrdb-v-\u0161ahu-.txt?a=1&b=2#c=3\"\n+        self.assertRaises(OSError, UrlReader(path).read)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5637.0, "instance_id": "biolab__orange3-5637", "issue_numbers": 0, "base_commit": "97bf91e2a6c1e6aefdd3ff11cb7f6b012bd89c32", "patch": "diff --git a/Orange/widgets/data/owfeatureconstructor.py b/Orange/widgets/data/owfeatureconstructor.py\nindex 15603de48..a7fee87df 100644\n--- a/Orange/widgets/data/owfeatureconstructor.py\n+++ b/Orange/widgets/data/owfeatureconstructor.py\n@@ -678,6 +678,7 @@ class OWFeatureConstructor(OWWidget):\n         self.closeContext()\n \n         self.data = data\n+        self.expressions_with_values = False\n \n         if self.data is not None:\n             descriptors = list(self.descriptors)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeatureconstructor.py b/Orange/widgets/data/tests/test_owfeatureconstructor.py\nindex 88775d1a9..111477375 100644\n--- a/Orange/widgets/data/tests/test_owfeatureconstructor.py\n+++ b/Orange/widgets/data/tests/test_owfeatureconstructor.py\n@@ -377,7 +377,6 @@ class OWFeatureConstructorTests(WidgetTest):\n         self.widget.apply()\n         self.assertTrue(self.widget.Error.more_values_needed.is_shown())\n \n-\n     @patch(\"Orange.widgets.data.owfeatureconstructor.QMessageBox\")\n     def test_fix_values(self, msgbox):\n         w = self.widget\n@@ -423,7 +422,7 @@ class OWFeatureConstructorTests(WidgetTest):\n         domain = Domain(v)\n         data = Table.from_numpy(domain, [[1, 3.14]])\n \n-        settings = {\n+        settings_w_discrete = {\n             \"context_settings\":\n             [Context(\n                 attributes=dict(Ana=1, Cilka=2), metas={},\n@@ -435,7 +434,7 @@ class OWFeatureConstructorTests(WidgetTest):\n                     currentIndex=0)\n              )]\n         }\n-        widget = self.create_widget(OWFeatureConstructor, settings)\n+        widget = self.create_widget(OWFeatureConstructor, settings_w_discrete)\n         self.send_signal(widget.Inputs.data, data)\n         self.assertTrue(widget.expressions_with_values)\n         self.assertFalse(widget.fix_button.isHidden())\n@@ -443,7 +442,7 @@ class OWFeatureConstructorTests(WidgetTest):\n         np.testing.assert_almost_equal(out.X, [[1, 3.14, 4]])\n         np.testing.assert_equal(out.metas, [[\"1X\"]])\n \n-        settings = {\n+        settings_no_discrete = {\n             \"context_settings\":\n             [Context(\n                 attributes=dict(Ana=1, Cilka=2), metas={},\n@@ -454,13 +453,49 @@ class OWFeatureConstructorTests(WidgetTest):\n                     currentIndex=0)\n              )]\n         }\n-        widget = self.create_widget(OWFeatureConstructor, settings)\n+        widget = self.create_widget(OWFeatureConstructor, settings_no_discrete)\n         self.send_signal(widget.Inputs.data, data)\n         self.assertFalse(widget.expressions_with_values)\n         self.assertTrue(widget.fix_button.isHidden())\n         out = self.get_output(widget.Outputs.data)\n         np.testing.assert_almost_equal(out.X, [[1, 3.14, 3]])\n \n+        widget = self.create_widget(OWFeatureConstructor, settings_w_discrete)\n+        self.send_signal(widget.Inputs.data, data)\n+        self.assertTrue(widget.expressions_with_values)\n+        self.assertFalse(widget.fix_button.isHidden())\n+        self.send_signal(widget.Inputs.data, None)\n+        self.assertFalse(widget.expressions_with_values)\n+        self.assertTrue(widget.fix_button.isHidden())\n+\n+    def test_report(self):\n+        settings = {\n+            \"context_settings\":\n+                [Context(\n+                    attributes=dict(x=2, y=2, z=2), metas={},\n+                    values=dict(\n+                        descriptors=[\n+                            ContinuousDescriptor(\"a\", \"x + 2\", 1),\n+                            DiscreteDescriptor(\"b\", \"x < 3\", (), False),\n+                            DiscreteDescriptor(\"c\", \"x > 15\", (), True),\n+                            DiscreteDescriptor(\"d\", \"y > x\", (\"foo\", \"bar\"), False),\n+                            DiscreteDescriptor(\"e\", \"x ** 2 + y == 5\", (\"foo\", \"bar\"), True),\n+                            StringDescriptor(\"f\", \"str(x)\"),\n+                            DateTimeDescriptor(\"g\", \"z\")\n+                        ],\n+                        currentIndex=0)\n+                )]\n+        }\n+\n+        w = self.create_widget(OWFeatureConstructor, settings)\n+        v = [ContinuousVariable(name) for name in \"xyz\"]\n+        domain = Domain(v, [])\n+        self.send_signal(w.Inputs.data, Table.from_numpy(domain, [[0, 1, 2]]))\n+        w.report_items = Mock()\n+        w.send_report()\n+        args = w.report_items.call_args[0][1]\n+        self.assertEqual(list(args), list(\"abcdefg\"))\n+\n \n class TestFeatureEditor(unittest.TestCase):\n     def test_has_functions(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5975.0, "instance_id": "biolab__orange3-5975", "issue_numbers": 0, "base_commit": "06fbfc194adcccefe6ce64f3c3721a913fd9a1ab", "patch": "diff --git a/Orange/widgets/data/owfeatureconstructor.py b/Orange/widgets/data/owfeatureconstructor.py\nindex 059929a63..cf745a139 100644\n--- a/Orange/widgets/data/owfeatureconstructor.py\n+++ b/Orange/widgets/data/owfeatureconstructor.py\n@@ -1213,6 +1213,8 @@ class FeatureFunc:\n             idx = data.astype(int)\n             idx[~np.isfinite(data)] = len(values) - 1\n             return values[idx].tolist()\n+        elif var.is_time:  # time always needs Values due to str(val) formatting\n+            return Value._as_values(var, data.tolist())  # pylint: disable=protected-access\n         elif not self.use_values:\n             return data.tolist()\n         else:\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeatureconstructor.py b/Orange/widgets/data/tests/test_owfeatureconstructor.py\nindex 111477375..0f708411f 100644\n--- a/Orange/widgets/data/tests/test_owfeatureconstructor.py\n+++ b/Orange/widgets/data/tests/test_owfeatureconstructor.py\n@@ -305,6 +305,12 @@ class FeatureFuncTest(unittest.TestCase):\n         self.assertTrue(np.all(np.isnan(r)))\n         self.assertTrue(np.isnan(f(data2[0])))\n \n+    def test_time_str(self):\n+        data = Table.from_numpy(Domain([TimeVariable(\"T\", have_date=True)]), [[0], [0]])\n+        f = FeatureFunc(\"str(T)\", [(\"T\", data.domain[0])])\n+        c = f(data)\n+        self.assertEqual(c, [\"1970-01-01\", \"1970-01-01\"])\n+\n     def test_invalid_expression_variable(self):\n         iris = Table(\"iris\")\n         f = FeatureFunc(\"1 / petal_length\",\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3166.0, "instance_id": "biolab__orange3-3166", "issue_numbers": 0, "base_commit": "1012e20d37adf37e6d9a9645cac4d713e1817a3b", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex ee5ad6f7b..e48a8a3a2 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1365,18 +1365,16 @@ class Table(MutableSequence, Storage):\n             if len(rr):\n                 stats = np.vstack(tuple(rr))\n         else:\n-            columns = [self.domain.index(c) for c in columns]\n             nattrs = len(self.domain.attributes)\n-            Xs = any(0 <= c < nattrs for c in columns) and fast_stats(self.X, W)\n-            Ys = any(c >= nattrs for c in columns) and fast_stats(self._Y, W)\n-            ms = any(c < 0 for c in columns) and fast_stats(self.metas, W)\n             for column in columns:\n-                if 0 <= column < nattrs:\n-                    stats.append(Xs[column, :])\n-                elif column >= nattrs:\n-                    stats.append(Ys[column - nattrs, :])\n+                c = self.domain.index(column)\n+                if 0 <= c < nattrs:\n+                    S = fast_stats(self.X[:, [c]], W and W[:, [c]])\n+                elif c >= nattrs:\n+                    S = fast_stats(self._Y[:, [c-nattrs]], W and W[:, [c-nattrs]])\n                 else:\n-                    stats.append(ms[-1 - column])\n+                    S = fast_stats(self.metas[:, [-1-c]], W and W[:, [-1-c]])\n+                stats.append(S[0])\n         return stats\n \n     def _compute_distributions(self, columns=None):\n.", "test_patch": "diff --git a/Orange/tests/test_basic_stats.py b/Orange/tests/test_basic_stats.py\nindex a2a2ff302..3b5ec1879 100644\n--- a/Orange/tests/test_basic_stats.py\n+++ b/Orange/tests/test_basic_stats.py\n@@ -2,6 +2,10 @@\n # pylint: disable=missing-docstring\n from unittest import TestCase\n \n+import time\n+\n+import numpy as np\n+\n from Orange.data import Table\n from Orange.statistics.basic_stats import DomainBasicStats, BasicStats\n \n@@ -24,6 +28,15 @@ class TestDomainBasicStats(TestCase):\n         self.assertStatsEqual(domain_stats.stats,\n                               attr_stats + class_var_stats + meta_stats)\n \n+    def test_speed(self):\n+        n, m = 10, 10000\n+        data = Table.from_numpy(None, np.random.rand(n, m))\n+        start = time.time()\n+        for i in range(m):\n+            BasicStats(data, i)\n+        elapsed = time.time() - start\n+        self.assertLess(elapsed, 10.0)\n+\n     def assertStatsEqual(self, stats1, stats2):\n         self.assertEqual(len(stats1), len(stats2))\n         for stat1, stat2 in zip(stats1, stats2):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4473.0, "instance_id": "biolab__orange3-4473", "issue_numbers": 0, "base_commit": "15595f1beebe2d947692acd414aa51fac0597069", "patch": "diff --git a/Orange/widgets/data/owrank.py b/Orange/widgets/data/owrank.py\nindex d84d3e79f..511cd51bd 100644\n--- a/Orange/widgets/data/owrank.py\n+++ b/Orange/widgets/data/owrank.py\n@@ -34,6 +34,7 @@ from Orange.widgets.settings import (DomainContextHandler, Setting,\n from Orange.widgets.utils.itemmodels import PyTableModel\n from Orange.widgets.utils.sql import check_sql_input\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import (\n     OWWidget, Msg, Input, Output, AttributeList\n )\n@@ -293,6 +294,9 @@ class OWRank(OWWidget):\n \n         gui.auto_send(selMethBox, self, \"auto_apply\", box=False)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n         self.resize(690, 500)\n \n     def switchProblemType(self, index):\n@@ -325,6 +329,8 @@ class OWRank(OWWidget):\n         self.switchProblemType(ProblemType.CLASSIFICATION)\n         if self.data is not None:\n             domain = self.data.domain\n+            self.info.set_input_summary(len(self.data),\n+                                        format_summary_details(self.data))\n \n             if domain.has_discrete_class:\n                 problem_type = ProblemType.CLASSIFICATION\n@@ -346,6 +352,8 @@ class OWRank(OWWidget):\n                 max((a.name for a in domain.attributes), key=len))\n \n             self.selectionMethod = OWRank.SelectNBest\n+        else:\n+            self.info.set_input_summary(self.info.NoInput)\n \n         self.openContext(data)\n         self.selectButtons.button(self.selectionMethod).setChecked(True)\n@@ -536,6 +544,7 @@ class OWRank(OWWidget):\n             self.Outputs.reduced_data.send(None)\n             self.Outputs.features.send(None)\n             self.out_domain_desc = None\n+            self.info.set_output_summary(self.info.NoOutput)\n         else:\n             reduced_domain = Domain(\n                 selected_attrs, self.data.domain.class_var, self.data.domain.metas)\n@@ -543,6 +552,8 @@ class OWRank(OWWidget):\n             self.Outputs.reduced_data.send(data)\n             self.Outputs.features.send(AttributeList(selected_attrs))\n             self.out_domain_desc = report.describe_domain(data.domain)\n+            self.info.set_output_summary(len(data),\n+                                         format_summary_details(data))\n \n     def create_scores_table(self, labels):\n         model_list = self.ranksModel.tolist()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owrank.py b/Orange/widgets/data/tests/test_owrank.py\nindex 7a3dba35b..7ab5686b5 100644\n--- a/Orange/widgets/data/tests/test_owrank.py\n+++ b/Orange/widgets/data/tests/test_owrank.py\n@@ -1,6 +1,7 @@\n+# pylint: disable=unsubscriptable-object\n import warnings\n import unittest\n-from unittest.mock import patch\n+from unittest.mock import patch, Mock\n \n import numpy as np\n from sklearn.exceptions import ConvergenceWarning\n@@ -17,6 +18,7 @@ from Orange.projection import PCA\n from Orange.widgets.data.owrank import OWRank, ProblemType, CLS_SCORES, REG_SCORES\n from Orange.widgets.tests.base import WidgetTest, datasets\n from Orange.widgets.widget import AttributeList\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWRank(WidgetTest):\n@@ -405,6 +407,26 @@ class TestOWRank(WidgetTest):\n \n         self.assertEqual(len(output), len(self.iris))\n \n+    def test_summary(self):\n+        \"\"\"Check if the status bar is updated when data is received\"\"\"\n+        data = self.iris\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.reduced_data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5245.0, "instance_id": "biolab__orange3-5245", "issue_numbers": 0, "base_commit": "a2a009c959c3925571356e6a6d7a4aab1166215d", "patch": "diff --git a/Orange/widgets/data/owfile.py b/Orange/widgets/data/owfile.py\nindex 470cca0e9..31f6ee147 100644\n--- a/Orange/widgets/data/owfile.py\n+++ b/Orange/widgets/data/owfile.py\n@@ -1,7 +1,6 @@\n import os\n import logging\n from itertools import chain\n-from warnings import catch_warnings\n from urllib.parse import urlparse\n from typing import List\n \n@@ -13,6 +12,7 @@ from AnyQt.QtCore import Qt, QTimer, QSize\n \n from Orange.data.table import Table, get_sample_datasets_dir\n from Orange.data.io import FileFormat, UrlReader, class_from_qualified_name\n+from Orange.util import log_warnings\n from Orange.widgets import widget, gui\n from Orange.widgets.settings import Setting, ContextSetting, \\\n     PerfectDomainContextHandler, SettingProvider\n@@ -366,7 +366,7 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n         except Exception:\n             return self.Error.sheet_error\n \n-        with catch_warnings(record=True) as warnings:\n+        with log_warnings() as warnings:\n             try:\n                 data = self.reader.read()\n             except Exception as ex:\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfile.py b/Orange/widgets/data/tests/test_owfile.py\nindex 28a71a7de..a3c4a14d4 100644\n--- a/Orange/widgets/data/tests/test_owfile.py\n+++ b/Orange/widgets/data/tests/test_owfile.py\n@@ -1,7 +1,8 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n+# pylint: disable=missing-docstring,protected-access\n from os import path, remove, getcwd\n from os.path import dirname\n+import unittest\n from unittest.mock import Mock, patch\n import pickle\n import tempfile\n@@ -648,8 +649,30 @@ a\n         self.widget._get_reader = lambda: reader\n         self.widget.last_path = lambda: \"foo\"\n         self.widget._update_sheet_combo = Mock()\n+\n+        # Warning must be caught by unit tests, but not the widget\n+        with self.assertWarns(UserWarning):\n+            self.widget._try_load()\n+            self.assertFalse(self.widget.Warning.load_warning.is_shown())\n+\n+\n+    @patch(\"os.path.exists\", new=lambda _: True)\n+    def test_warning_from_this_thread(self):\n+        WARNING_MSG = \"warning from this thread\"\n+\n+        def read():\n+            warnings.warn(WARNING_MSG)\n+            return Table(TITANIC_PATH)\n+\n+        reader = Mock()\n+        reader.read = read\n+        self.widget._get_reader = lambda: reader\n+        self.widget.last_path = lambda: \"foo\"\n+        self.widget._update_sheet_combo = Mock()\n+\n         self.widget._try_load()\n-        self.assertFalse(self.widget.Warning.load_warning.is_shown())\n+        self.assertTrue(self.widget.Warning.load_warning.is_shown())\n+        self.assertIn(WARNING_MSG, str(self.widget.Warning.load_warning))\n \n \n if __name__ == \"__main__\":\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5807.0, "instance_id": "biolab__orange3-5807", "issue_numbers": 0, "base_commit": "31305bc90402c46c0a517a3791becde399ec4bb3", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 9cefb1f2b..6fd95fd35 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1465,9 +1465,10 @@ class Table(Sequence, Storage):\n         \"\"\"\n \n         def is_view(x):\n-            # Sparse matrices don't have views like numpy arrays. Since indexing on\n-            # them creates copies in constructor we can skip this check here.\n-            return not sp.issparse(x) and x.base is not None\n+            if not sp.issparse(x):\n+                return x.base is not None\n+            else:\n+                return x.data.base is not None\n \n         if is_view(self._X):\n             self._X = self._X.copy()\n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex f82c9921a..7963a45bb 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -495,9 +495,13 @@ class TableTestCase(unittest.TestCase):\n         self.assertNotEqual(id(t.metas), id(copy.metas))\n \n         # ensure that copied sparse arrays do not share data\n+        # and that both are unlockable\n         with t.unlocked():\n             t.X[0, 0] = 42\n         self.assertEqual(copy.X[0, 0], 5.1)\n+        with copy.unlocked():\n+            copy.X[0, 0] = 43\n+        self.assertEqual(t.X[0, 0], 42)\n \n     def test_concatenate(self):\n         d1 = data.Domain(\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5309.0, "instance_id": "biolab__orange3-5309", "issue_numbers": 0, "base_commit": "4d25f831677fb82b33872805727635726140c59e", "patch": "diff --git a/Orange/data/io_base.py b/Orange/data/io_base.py\nindex 22d1b1611..8149ec962 100644\n--- a/Orange/data/io_base.py\n+++ b/Orange/data/io_base.py\n@@ -61,6 +61,9 @@ class Flags:\n                         except SyntaxError:\n                             # If parsing failed, treat value as string\n                             pass\n+                    # map True and False to booleans\n+                    if v in (\"True\", \"False\"):\n+                        v = {\"True\": True, \"False\": False}[v]\n                     self.attributes[k] = v\n                 else:\n                     setattr(self, flag, True)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex 57f92634a..e9a386289 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -217,6 +217,30 @@ class TestOWEditDomain(WidgetTest):\n         t2 = self.get_output(self.widget.Outputs.data)\n         self.assertEqual(t2.domain[\"a\"].attributes[\"list\"], [1, 2, 4])\n \n+    def test_annotation_bool(self):\n+        \"\"\"Check if bool labels remain bool\"\"\"\n+        a = ContinuousVariable(\"a\")\n+        a.attributes[\"hidden\"] = True\n+        d = Domain([a])\n+        t = Table.from_domain(d)\n+\n+        self.send_signal(self.widget.Inputs.data, t)\n+\n+        assert isinstance(self.widget, OWEditDomain)\n+        # select first variable\n+        idx = self.widget.domain_view.model().index(0)\n+        self.widget.domain_view.setCurrentIndex(idx)\n+\n+        # change first attribute value\n+        editor = self.widget.findChild(ContinuousVariableEditor)\n+        assert isinstance(editor, ContinuousVariableEditor)\n+        idx = editor.labels_model.index(0, 1)\n+        editor.labels_model.setData(idx, \"False\", Qt.EditRole)\n+\n+        self.widget.commit()\n+        t2 = self.get_output(self.widget.Outputs.data)\n+        self.assertFalse(t2.domain[\"a\"].attributes[\"hidden\"])\n+\n     def test_duplicate_names(self):\n         \"\"\"\n         Tests if widget shows error when duplicate name is entered.\n@@ -277,8 +301,6 @@ class TestOWEditDomain(WidgetTest):\n         self.assertIsNone(out1.compute_value)\n         self.assertIsNone(out2.compute_value)\n \n-\n-\n     def test_time_variable_preservation(self):\n         \"\"\"Test if time variables preserve format specific attributes\"\"\"\n         table = Table(test_filename(\"datasets/cyber-security-breaches.tab\"))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4900.0, "instance_id": "biolab__orange3-4900", "issue_numbers": 0, "base_commit": "c11ec5efada3f52315b3939c66e8896a0d73f3ec", "patch": "diff --git a/Orange/widgets/unsupervised/owpca.py b/Orange/widgets/unsupervised/owpca.py\nindex f03b52167..6aced939b 100644\n--- a/Orange/widgets/unsupervised/owpca.py\n+++ b/Orange/widgets/unsupervised/owpca.py\n@@ -116,6 +116,8 @@ class OWPCA(widget.OWWidget):\n         self.clear()\n         self.information()\n         self.data = None\n+        if not data:\n+            self.clear_outputs()\n         if isinstance(data, SqlTable):\n             if data.approx_len() < AUTO_DL_LIMIT:\n                 data = Table(data)\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owpca.py b/Orange/widgets/unsupervised/tests/test_owpca.py\nindex 01afae171..55ced0798 100644\n--- a/Orange/widgets/unsupervised/tests/test_owpca.py\n+++ b/Orange/widgets/unsupervised/tests/test_owpca.py\n@@ -248,6 +248,10 @@ class TestOWPCA(WidgetTest):\n         self.assertEqual(trans.domain.attributes, outdom.metas[1:])\n         np.testing.assert_equal(trans.X, output.metas[:, 1:])\n \n+        self.send_signal(widget.Inputs.data, None)\n+        output = self.get_output(widget.Outputs.data)\n+        self.assertIsNone(output)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5857.0, "instance_id": "biolab__orange3-5857", "issue_numbers": 0, "base_commit": "b7515c1c72cfbd3765726f4c9730bb1ee5407b30", "patch": "diff --git a/Orange/widgets/unsupervised/owsom.py b/Orange/widgets/unsupervised/owsom.py\nindex 65cdda50f..f29d774cd 100644\n--- a/Orange/widgets/unsupervised/owsom.py\n+++ b/Orange/widgets/unsupervised/owsom.py\n@@ -14,6 +14,7 @@ from AnyQt.QtWidgets import \\\n     QGraphicsPathItem\n \n from Orange.data import Table, Domain\n+from Orange.data.util import array_equal\n from Orange.preprocess import decimal_binnings, time_binnings\n from Orange.projection.som import SOM\n \n@@ -330,12 +331,10 @@ class OWSOM(OWWidget):\n             elif missing > 1:\n                 self.Warning.missing_values(missing, \"s\", \"are\")\n \n-        self.stop_optimization_and_wait()\n-\n+        cont_x = self.cont_x.copy() if self.cont_x is not None else None\n+        self.data = self.cont_x = None\n         self.closeContext()\n-        self.clear()\n-        self.Error.clear()\n-        self.Warning.clear()\n+        self.clear_messages()\n \n         if data is not None:\n             attrs = data.domain.attributes\n@@ -345,6 +344,12 @@ class OWSOM(OWWidget):\n             else:\n                 prepare_data()\n \n+        invalidated = cont_x is None or self.cont_x is None \\\n+            or not array_equal(cont_x, self.cont_x)\n+        if invalidated:\n+            self.stop_optimization_and_wait()\n+            self.clear()\n+\n         if self.data is not None:\n             self.controls.attr_color.model().set_domain(data.domain)\n             self.attr_color = data.domain.class_var\n@@ -353,11 +358,13 @@ class OWSOM(OWWidget):\n         self.openContext(self.data)\n         self.set_color_bins()\n         self.create_legend()\n-        self.recompute_dimensions()\n-        self.start_som()\n+        if invalidated:\n+            self.recompute_dimensions()\n+            self.start_som()\n+        else:\n+            self._redraw()\n \n     def clear(self):\n-        self.data = self.cont_x = None\n         self.cells = self.member_data = None\n         self.attr_color = None\n         self.colors = self.thresholds = self.bin_labels = None\n@@ -366,8 +373,6 @@ class OWSOM(OWWidget):\n             self.elements = None\n         self.clear_selection()\n         self.controls.attr_color.model().set_domain(None)\n-        self.Warning.clear()\n-        self.Error.clear()\n \n     def recompute_dimensions(self):\n         if not self.auto_dimension or self.cont_x is None:\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owsom.py b/Orange/widgets/unsupervised/tests/test_owsom.py\nindex 7d6630b38..d37e83eac 100644\n--- a/Orange/widgets/unsupervised/tests/test_owsom.py\n+++ b/Orange/widgets/unsupervised/tests/test_owsom.py\n@@ -549,6 +549,42 @@ class TestOWSOM(WidgetTest):\n         self.assertIsNone(self.get_output(widget.Outputs.selected_data))\n         self.assertIsNone(self.get_output(widget.Outputs.annotated_data))\n \n+    def test_invalidated(self):\n+        heart = Table(\"heart_disease\")\n+        self.widget._recompute_som = Mock()\n+\n+        # New data - replot\n+        self.send_signal(self.widget.Inputs.data, heart)\n+        self.widget._recompute_som.assert_called_once()\n+\n+        # Same data - no replot\n+        self.widget._recompute_som.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, heart)\n+        self.widget._recompute_som.assert_not_called()\n+\n+        # Same data.X - no replot\n+        domain = heart.domain\n+        domain = Domain(domain.attributes, metas=domain.class_vars)\n+        heart_with_metas = self.iris.transform(domain)\n+        self.widget._recompute_som.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, heart_with_metas)\n+        self.widget._recompute_som.assert_not_called()\n+\n+        # Different data, same set of cont. vars - no replot\n+        attrs = [a for a in heart.domain.attributes if a.is_continuous]\n+        domain = Domain(attrs)\n+        heart_with_cont_features = self.iris.transform(domain)\n+        self.widget._recompute_som.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, heart_with_cont_features)\n+        self.widget._recompute_som.assert_not_called()\n+\n+        # Different data.X - replot\n+        domain = Domain(heart.domain.attributes[:5])\n+        heart_with_less_features = heart.transform(domain)\n+        self.widget._recompute_som.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, heart_with_less_features)\n+        self.widget._recompute_som.assert_called_once()\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6425.0, "instance_id": "biolab__orange3-6425", "issue_numbers": 0, "base_commit": "3cc58b4a6c4a9120c74a9664f45465e913c2e635", "patch": "diff --git a/Orange/widgets/data/owneighbors.py b/Orange/widgets/data/owneighbors.py\nindex 62d98a95c..ecf99fc5b 100644\n--- a/Orange/widgets/data/owneighbors.py\n+++ b/Orange/widgets/data/owneighbors.py\n@@ -153,7 +153,12 @@ class OWNeighbors(OWWidget):\n         up_to = len(dist) - np.sum(inrefs)\n         if self.limit_neighbors and self.n_neighbors < up_to:\n             up_to = self.n_neighbors\n-        return np.argpartition(dist, up_to - 1)[:up_to]\n+        # get indexes of N neighbours in unsorted order - faster than argsort\n+        idx = np.argpartition(dist, up_to - 1)[:up_to]\n+        # sort selected N neighbours according to distances\n+        sorted_subset_idx = np.argsort(dist[idx])\n+        # map sorted indexes back to original index space\n+        return idx[sorted_subset_idx]\n \n     def _data_with_similarity(self, indices):\n         domain = self.data.domain\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owneighbors.py b/Orange/widgets/data/tests/test_owneighbors.py\nindex ce6442852..e66f5337b 100644\n--- a/Orange/widgets/data/tests/test_owneighbors.py\n+++ b/Orange/widgets/data/tests/test_owneighbors.py\n@@ -452,6 +452,25 @@ class TestOWNeighbors(WidgetTest):\n         self.send_signal(self.widget.Inputs.reference, data[0:1])\n         self.assertIsInstance(self.get_output(self.widget.Outputs.data), Table2)\n \n+    def test_order_by_distance(self):\n+        domain = Domain([ContinuousVariable(x) for x in \"ab\"])\n+        reference = Table.from_numpy(domain, [[1, 0]])\n+        data = Table.from_numpy(domain, [[1, 0.1], [2, 0], [1, 0], [0, 0.1], [0.1, 0]])\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.send_signal(self.widget.Inputs.reference, reference)\n+\n+        output = self.get_output(self.widget.Outputs.data)\n+        expected = [[1, 0], [1, 0.1], [0.1, 0], [2, 0], [0, 0.1]]\n+        np.testing.assert_array_equal(output.X, expected)\n+        dst = output.get_column(\"distance\").tolist()\n+        self.assertTrue(dst == sorted(dst))  # check distance in ascending order\n+\n+        # test on bigger set\n+        self.send_signal(self.widget.Inputs.data, self.iris)\n+        self.send_signal(self.widget.Inputs.reference, self.iris[:1])\n+        dst = self.get_output(self.widget.Outputs.data).get_column(\"distance\").tolist()\n+        self.assertTrue(dst == sorted(dst))  # check distance in ascending order\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6917.0, "instance_id": "biolab__orange3-6917", "issue_numbers": 0, "base_commit": "e42b9b1bc822cf7fb2eeeac4eeff167799fb4113", "patch": "diff --git a/Orange/widgets/model/owcalibratedlearner.py b/Orange/widgets/model/owcalibratedlearner.py\nindex 7b4009573..8723015ca 100644\n--- a/Orange/widgets/model/owcalibratedlearner.py\n+++ b/Orange/widgets/model/owcalibratedlearner.py\n@@ -1,3 +1,5 @@\n+import copy\n+\n from Orange.classification import CalibratedLearner, ThresholdLearner, \\\n     NaiveBayesLearner\n from Orange.data import Table\n@@ -65,7 +67,6 @@ class OWCalibratedLearner(OWBaseLearner):\n         self.learner = self.model = None\n \n     def _set_default_name(self):\n-\n         if self.base_learner is None:\n             self.set_default_learner_name(\"\")\n         else:\n@@ -80,10 +81,6 @@ class OWCalibratedLearner(OWBaseLearner):\n         self.apply()\n \n     def create_learner(self):\n-        class IdentityWrapper(Learner):\n-            def fit_storage(self, data):\n-                return self.base_learner.fit_storage(data)\n-\n         if self.base_learner is None:\n             return None\n         learner = self.base_learner\n@@ -93,10 +90,11 @@ class OWCalibratedLearner(OWBaseLearner):\n         if self.threshold != self.NoThresholdOptimization:\n             learner = ThresholdLearner(learner,\n                                        self.ThresholdMap[self.threshold])\n+        if learner is self.base_learner:\n+            learner = copy.deepcopy(learner)\n         if self.preprocessors:\n-            if learner is self.base_learner:\n-                learner = IdentityWrapper()\n             learner.preprocessors = (self.preprocessors, )\n+        assert learner is not self.base_learner\n         return learner\n \n     def get_learner_parameters(self):\n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owcalibratedlearner.py b/Orange/widgets/model/tests/test_owcalibratedlearner.py\nindex 27dcf378b..2058d73db 100644\n--- a/Orange/widgets/model/tests/test_owcalibratedlearner.py\n+++ b/Orange/widgets/model/tests/test_owcalibratedlearner.py\n@@ -95,7 +95,7 @@ class TestOWCalibratedLearner(WidgetTest, WidgetLearnerTestMixin):\n         widget.calibration = widget.NoCalibration\n         widget.threshold = widget.NoThresholdOptimization\n         learner = self.widget.create_learner()\n-        self.assertIs(learner, self.widget.base_learner)\n+        self.assertIsNot(learner, self.widget.base_learner)\n \n         widget.calibration = widget.SigmoidCalibration\n         widget.threshold = widget.OptimizeF1\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6170.0, "instance_id": "biolab__orange3-6170", "issue_numbers": 0, "base_commit": "50234469b4e42343e767bd1bdbdb1f9b7c642299", "patch": "diff --git a/Orange/widgets/unsupervised/owdistances.py b/Orange/widgets/unsupervised/owdistances.py\nindex f75fb2f93..a7882a057 100644\n--- a/Orange/widgets/unsupervised/owdistances.py\n+++ b/Orange/widgets/unsupervised/owdistances.py\n@@ -185,8 +185,8 @@ class OWDistances(OWWidget, ConcurrentWidgetMixin):\n \n         def _check_tractability():\n             if metric is distance.Mahalanobis:\n-                if self.axis == 1:\n-                    # when computing distances by columns, we want < 100 rows\n+                if self.axis == 0:\n+                    # when computing distances by columns, we want < 1000 rows\n                     if len(data) > 1000:\n                         self.Error.data_too_large_for_mahalanobis(\"rows\")\n                         return False\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owdistances.py b/Orange/widgets/unsupervised/tests/test_owdistances.py\nindex a642c26fa..6fd5b0541 100644\n--- a/Orange/widgets/unsupervised/tests/test_owdistances.py\n+++ b/Orange/widgets/unsupervised/tests/test_owdistances.py\n@@ -214,15 +214,17 @@ class TestOWDistances(WidgetTest):\n \n         # by columns -- cannot handle too many rows\n         self.send_signal(self.widget.Inputs.data, bigrows)\n-        assert_error_shown()\n-        axis_buttons[0].click()\n         assert_no_error()\n-        axis_buttons[1].click()\n+        axis_buttons[0].click()\n         assert_error_shown()\n+        axis_buttons[1].click()\n+        assert_no_error()\n \n         self.send_signal(self.widget.Inputs.data, bigcols)\n-        assert_no_error()\n+        assert_error_shown()\n         axis_buttons[0].click()\n+        assert_no_error()\n+        axis_buttons[1].click()\n         assert_error_shown()\n \n         self.send_signal(widget.Inputs.data, self.iris)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4912.0, "instance_id": "biolab__orange3-4912", "issue_numbers": 0, "base_commit": "56cc38c333a80f95c30c308a4b65cf77ccf076b1", "patch": "diff --git a/Orange/widgets/data/owselectrows.py b/Orange/widgets/data/owselectrows.py\nindex 124b55ce6..8abb49f47 100644\n--- a/Orange/widgets/data/owselectrows.py\n+++ b/Orange/widgets/data/owselectrows.py\n@@ -554,7 +554,7 @@ class OWSelectRows(widget.OWWidget):\n                     invalidate_datetime()\n \n                 datetime_format = (var.have_date, var.have_time)\n-                column = self.data[:, var_idx]\n+                column = self.data.get_column_view(var_idx)[0]\n                 w = DateTimeWidget(self, column, datetime_format)\n                 w.set_datetime(lc[0])\n                 box.controls = [w]\n@@ -951,11 +951,10 @@ class DateTimeWidget(QDateTimeEdit):\n             return datetime(1970, 1, 1, tzinfo=timezone.utc) + \\\n                        timedelta(seconds=int(timestamp))\n \n-        item_list = [item for items in list(column) for item in items]\n         min_datetime = convert_timestamp(\n-            np.nanmin(item_list)).strftime(convert_format)\n+            np.nanmin(column)).strftime(convert_format)\n         max_datetime = convert_timestamp(\n-            np.nanmax(item_list)).strftime(convert_format)\n+            np.nanmax(column)).strftime(convert_format)\n         return min_datetime, max_datetime\n \n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectrows.py b/Orange/widgets/data/tests/test_owselectrows.py\nindex adf1187ab..17f3cc6ec 100644\n--- a/Orange/widgets/data/tests/test_owselectrows.py\n+++ b/Orange/widgets/data/tests/test_owselectrows.py\n@@ -10,7 +10,7 @@ from AnyQt.QtWidgets import QLineEdit, QComboBox\n \n from Orange.data import (\n     Table, Variable, ContinuousVariable, StringVariable, DiscreteVariable,\n-    Domain)\n+    Domain, TimeVariable)\n from Orange.preprocess import discretize\n from Orange.widgets.data import owselectrows\n from Orange.widgets.data.owselectrows import (\n@@ -59,6 +59,18 @@ DFValues = {\n     FilterDiscreteType.IsDefined: [],\n }\n \n+TFValues = {\n+    FilterContinuous.Equal: [QDate(2013, 5, 5)],\n+    FilterContinuous.NotEqual: [QDate(2013, 5, 5)],\n+    FilterContinuous.Less: [QDate(2013, 5, 5)],\n+    FilterContinuous.LessEqual: [QDate(2013, 5, 5)],\n+    FilterContinuous.Greater: [QDate(2013, 5, 5)],\n+    FilterContinuous.GreaterEqual: [QDate(2013, 5, 5)],\n+    FilterContinuous.Between: [QDate(2013, 5, 5), QDate(2015, 5, 5)],\n+    FilterContinuous.Outside: [QDate(2013, 5, 5), QDate(2015, 5, 5)],\n+    FilterContinuous.IsDefined: [],\n+}\n+\n \n class TestOWSelectRows(WidgetTest):\n     def setUp(self):\n@@ -75,6 +87,17 @@ class TestOWSelectRows(WidgetTest):\n             self.widget.conditions_changed()\n             self.widget.unconditional_commit()\n \n+        # continuous var in metas\n+        iris = Table.from_table(\n+            Domain([], metas=[iris.domain.attributes[0]]), iris\n+        )\n+        self.widget.set_data(iris)\n+        for i, (op, _) in enumerate(OWSelectRows.Operators[ContinuousVariable]):\n+            self.widget.remove_all()\n+            self.widget.add_row(iris.domain.metas[0], i, CFValues[op])\n+            self.widget.conditions_changed()\n+            self.widget.unconditional_commit()\n+\n     def test_filter_str(self):\n         zoo = Table(\"zoo\")[::5]\n         self.widget.auto_commit = False\n@@ -96,6 +119,39 @@ class TestOWSelectRows(WidgetTest):\n             self.widget.conditions_changed()\n             self.widget.unconditional_commit()\n \n+        # discrete var in metas\n+        lenses = Table.from_table(\n+            Domain([], metas=[lenses.domain.attributes[0]]), lenses\n+        )\n+        self.widget.set_data(lenses)\n+        for i, (op, _) in enumerate(OWSelectRows.Operators[DiscreteVariable]):\n+            self.widget.remove_all()\n+            self.widget.add_row(lenses.domain.metas[0], i, DFValues[op])\n+            self.widget.conditions_changed()\n+            self.widget.unconditional_commit()\n+\n+    def test_filter_time(self):\n+        data = Table(test_filename(\"datasets/cyber-security-breaches.tab\"))\n+        self.widget.auto_commit = False\n+        self.widget.set_data(data)\n+\n+        for i, (op, _) in enumerate(OWSelectRows.Operators[TimeVariable]):\n+            self.widget.remove_all()\n+            self.widget.add_row(data.domain[\"breach_start\"], i, TFValues[op])\n+            self.widget.conditions_changed()\n+            self.widget.unconditional_commit()\n+\n+        # time var in metas\n+        data = Table.from_table(\n+            Domain([], metas=[data.domain[\"breach_start\"]]), data\n+        )\n+        self.widget.set_data(data)\n+        for i, (op, _) in enumerate(OWSelectRows.Operators[TimeVariable]):\n+            self.widget.remove_all()\n+            self.widget.add_row(data.domain.metas[0], i, TFValues[op])\n+            self.widget.conditions_changed()\n+            self.widget.unconditional_commit()\n+\n     @override_locale(QLocale.C)  # Locale with decimal point\n     def test_continuous_filter_with_c_locale(self):\n         iris = Table(\"iris\")[:5]\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": NaN, "instance_id": "ERROR", "issue_numbers": 0, "base_commit": NaN, "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex 567d8b578..a2a4b848f 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -680,7 +680,8 @@ class GroupItemsDialog(QDialog):\n     DEFAULT_LABEL = \"other\"\n \n     def __init__(\n-            self, variable: Categorical, data: Union[np.ndarray, List],\n+            self, variable: Categorical,\n+            data: Union[np.ndarray, List, MArray],\n             selected_attributes: List[str], dialog_settings: Dict[str, Any],\n             parent: QWidget = None, flags: Qt.WindowFlags = Qt.Dialog, **kwargs\n     ) -> None:\n@@ -814,10 +815,18 @@ class GroupItemsDialog(QDialog):\n         -------\n         List of attributes' to be merged names\n         \"\"\"\n-        counts = Counter(self.data)\n         if self.selected_radio.isChecked():\n             return self.selected_attributes\n-        elif self.n_values_radio.isChecked():\n+\n+        if isinstance(self.data, MArray):\n+            non_nan = self.data[~self.data.mask]\n+        elif isinstance(self.data, np.ndarray):\n+            non_nan = self.data[~np.isnan(self.data)]\n+        else:  # list\n+            non_nan = [x for x in self.data if x is not None]\n+\n+        counts = Counter(non_nan)\n+        if self.n_values_radio.isChecked():\n             keep_values = self.n_values_spin.value()\n             values = counts.most_common()[keep_values:]\n             indices = [i for i, _ in values]\n@@ -828,6 +837,8 @@ class GroupItemsDialog(QDialog):\n             n_all = sum(counts.values())\n             indices = [v for v, c in counts.most_common()\n                        if c / n_all * 100 < self.frequent_rel_spin.value()]\n+\n+        indices = np.array(indices, dtype=int)  # indices must be ints\n         return np.array(self.variable.categories)[indices].tolist()\n \n     def get_merged_value_name(self) -> str:\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex 4ef398bf3..e37cc5e23 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -1026,6 +1026,40 @@ class TestGroupLessFrequentItemsDialog(GuiTest):\n         dialog.n_values_spin.setValue(3)\n         self.assertListEqual(dialog.get_merge_attributes(), [])\n \n+    def test_group_less_frequent_missing(self):\n+        \"\"\"\n+        Widget gives MaskedArray to GroupItemsDialog which can have missing\n+        values.\n+        gh-4599\n+        \"\"\"\n+        def _test_correctness():\n+            dialog.frequent_abs_radio.setChecked(True)\n+            dialog.frequent_abs_spin.setValue(3)\n+            self.assertListEqual(dialog.get_merge_attributes(), [\"b\", \"c\"])\n+\n+            dialog.frequent_rel_radio.setChecked(True)\n+            dialog.frequent_rel_spin.setValue(50)\n+            self.assertListEqual(dialog.get_merge_attributes(), [\"b\", \"c\"])\n+\n+            dialog.n_values_radio.setChecked(True)\n+            dialog.n_values_spin.setValue(1)\n+            self.assertListEqual(dialog.get_merge_attributes(), [\"b\", \"c\"])\n+\n+        # masked array\n+        data_masked = np.ma.array(\n+            [0, 0, np.nan, 0, 1, 1, 2], mask=[0, 0, 1, 0, 0, 0, 0]\n+        )\n+        dialog = GroupItemsDialog(self.v, data_masked, [], {})\n+        _test_correctness()\n+\n+        data_array = np.array([0, 0, np.nan, 0, 1, 1, 2])\n+        dialog = GroupItemsDialog(self.v, data_array, [], {})\n+        _test_correctness()\n+\n+        data_list = [0, 0, None, 0, 1, 1, 2]\n+        dialog = GroupItemsDialog(self.v, data_list, [], {})\n+        _test_correctness()\n+\n \n if __name__ == '__main__':\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5671.0, "instance_id": "biolab__orange3-5671", "issue_numbers": 0, "base_commit": "d23e0d1ab4adf31339f7faaca2b307c3d41d18d4", "patch": "diff --git a/Orange/widgets/data/owtable.py b/Orange/widgets/data/owtable.py\nindex f8fa6b302..87fc04ba5 100644\n--- a/Orange/widgets/data/owtable.py\n+++ b/Orange/widgets/data/owtable.py\n@@ -593,7 +593,7 @@ class OWDataTable(OWWidget):\n \n     def _on_show_variable_labels_changed(self):\n         \"\"\"The variable labels (var.attribues) visibility was changed.\"\"\"\n-        for slot in self._inputs.values():\n+        for slot in self._inputs:\n             self._update_variable_labels(slot.view)\n \n     def _on_distribution_color_changed(self):\n@@ -619,7 +619,7 @@ class OWDataTable(OWWidget):\n             tab.reset()\n \n     def _on_select_rows_changed(self):\n-        for slot in self._inputs.values():\n+        for slot in self._inputs:\n             selection_model = slot.view.selectionModel()\n             selection_model.setSelectBlocks(not self.select_rows)\n             if self.select_rows:\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owtable.py b/Orange/widgets/data/tests/test_owtable.py\nindex 9c01ee2ca..10d682c53 100644\n--- a/Orange/widgets/data/tests/test_owtable.py\n+++ b/Orange/widgets/data/tests/test_owtable.py\n@@ -60,7 +60,7 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n \n     def _select_data(self):\n         self.widget.selected_cols = list(range(len(self.data.domain.variables)))\n-        self.widget.selected_rows = list(range(0, len(self.data.domain.variables), 10))\n+        self.widget.selected_rows = list(range(0, len(self.data), 10))\n         self.widget.set_selection()\n         return self.widget.selected_rows\n \n@@ -168,6 +168,34 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n             w.grab()\n         w.controls.show_distributions.toggle()\n \n+    def test_whole_rows(self):\n+        w = self.widget\n+        self.send_signal(w.Inputs.data, self.data, 0)\n+        self.assertTrue(w.select_rows)  # default value\n+        with excepthook_catch():\n+            w.controls.select_rows.toggle()\n+        self.assertFalse(w.select_rows)\n+        w.selected_cols = [0, 1]\n+        w.selected_rows = [0, 1, 2, 3]\n+        w.set_selection()\n+        out = self.get_output(w.Outputs.selected_data)\n+        self.assertEqual(out.domain,\n+                         Domain([self.data.domain.attributes[0]], self.data.domain.class_var))\n+        with excepthook_catch():\n+            w.controls.select_rows.toggle()\n+        out = self.get_output(w.Outputs.selected_data)\n+        self.assertTrue(w.select_rows)\n+        self.assertEqual(out.domain,\n+                         self.data.domain)\n+\n+    def test_show_attribute_labels(self):\n+        w = self.widget\n+        self.send_signal(w.Inputs.data, self.data, 0)\n+        self.assertTrue(w.show_attribute_labels)  # default value\n+        with excepthook_catch():\n+            w.controls.show_attribute_labels.toggle()\n+        self.assertFalse(w.show_attribute_labels)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": NaN, "instance_id": "ERROR", "issue_numbers": 0, "base_commit": NaN, "patch": "diff --git a/Orange/widgets/model/owpls.py b/Orange/widgets/model/owpls.py\nindex 447caded1..cc1317c03 100644\n--- a/Orange/widgets/model/owpls.py\n+++ b/Orange/widgets/model/owpls.py\n@@ -71,7 +71,7 @@ class OWPLS(OWBaseLearner):\n         n_components = x_rotations.shape[1]\n \n         names = [f\"coef ({v.name})\" for v in self.model.domain.class_vars]\n-        names += [f\"Loading {i + 1}\" for i in range(n_components)]\n+        names += [f\"w*c {i + 1}\" for i in range(n_components)]\n         domain = Domain(\n             [ContinuousVariable(n) for n in names],\n             metas=[StringVariable(\"Variable name\"),\n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owpls.py b/Orange/widgets/model/tests/test_owpls.py\nindex 215b39ca9..8c0bede0f 100644\n--- a/Orange/widgets/model/tests/test_owpls.py\n+++ b/Orange/widgets/model/tests/test_owpls.py\n@@ -38,7 +38,7 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertEqual(coefsdata.Y.shape, (14, 0))\n         self.assertEqual(coefsdata.metas.shape, (14, 2))\n \n-        self.assertEqual([\"coef (MEDV)\", \"Loading 1\", \"Loading 2\"],\n+        self.assertEqual([\"coef (MEDV)\", \"w*c 1\", \"w*c 2\"],\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n                          [v.name for v in coefsdata.domain.metas])\n@@ -57,7 +57,7 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertEqual(coefsdata.Y.shape, (14, 0))\n         self.assertEqual(coefsdata.metas.shape, (14, 2))\n \n-        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"Loading 1\", \"Loading 2\"]\n+        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"w*c 1\", \"w*c 2\"]\n         self.assertEqual(attr_names,\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5995.0, "instance_id": "biolab__orange3-5995", "issue_numbers": 0, "base_commit": "67e96294f7122609541a1a6f10ea9b078e72384d", "patch": "diff --git a/Orange/widgets/data/owcreateinstance.py b/Orange/widgets/data/owcreateinstance.py\nindex d2fc8db97..53bb1e311 100644\n--- a/Orange/widgets/data/owcreateinstance.py\n+++ b/Orange/widgets/data/owcreateinstance.py\n@@ -16,6 +16,7 @@ from orangewidget.gui import Slider\n \n from Orange.data import DiscreteVariable, ContinuousVariable, \\\n     TimeVariable, Table, StringVariable, Variable, Domain\n+from Orange.data.util import get_unique_names\n from Orange.widgets import gui\n from Orange.widgets.utils.itemmodels import TableModel\n from Orange.widgets.settings import Setting\n@@ -646,12 +647,21 @@ class OWCreateInstance(OWWidget):\n                 data[:, var_name] = value\n         return data\n \n-    def _append_to_data(self, data: Table) -> Table:\n+    def _append_to_data(self, instance: Table) -> Table:\n         assert self.data\n-        assert len(data) == 1\n+        assert len(instance) == 1\n+        source_label = \"__source_widget\"\n \n-        var = DiscreteVariable(\"Source ID\", values=(self.data.name, data.name))\n-        data = Table.concatenate([self.data, data], axis=0)\n+        data = Table.concatenate([self.data, instance], axis=0)\n+        for var in self.data.domain.variables + self.data.domain.metas:\n+            if var.attributes.get(source_label) == OWCreateInstance:\n+                with data.unlocked():\n+                    data.get_column_view(var)[0][-1] = 1\n+                return data\n+\n+        name = get_unique_names(self.data.domain, \"Source ID\")\n+        var = DiscreteVariable(name, values=(self.data.name, instance.name))\n+        var.attributes[source_label] = OWCreateInstance\n         domain = Domain(data.domain.attributes, data.domain.class_vars,\n                         data.domain.metas + (var,))\n         data = data.transform(domain)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcreateinstance.py b/Orange/widgets/data/tests/test_owcreateinstance.py\nindex cb0b504f2..50584e7e6 100644\n--- a/Orange/widgets/data/tests/test_owcreateinstance.py\n+++ b/Orange/widgets/data/tests/test_owcreateinstance.py\n@@ -54,6 +54,8 @@ class TestOWCreateInstance(WidgetTest):\n         self.assertIn(\"Source ID\", [m.name for m in output.domain.metas])\n         self.assertTupleEqual(output.domain.metas[0].values,\n                               (\"iris\", \"created\"))\n+        self.assertDictEqual(output.domain.metas[0].attributes,\n+                             {\"__source_widget\": OWCreateInstance})\n \n     def _get_init_buttons(self, widget=None):\n         if not widget:\n@@ -213,6 +215,47 @@ class TestOWCreateInstance(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, data)\n         self.send_signal(self.widget.Inputs.reference, data)\n \n+    def test_cascade_widgets(self):\n+        self.send_signal(self.widget.Inputs.data, self.data)\n+        output = self.get_output(self.widget.Outputs.data)\n+\n+        widget = self.create_widget(OWCreateInstance)\n+        self.send_signal(widget.Inputs.data, output, widget=widget)\n+        output = self.get_output(widget.Outputs.data, widget=widget)\n+        self.assertEqual(len(output), 152)\n+        self.assertEqual(len(output.domain.metas), 1)\n+        self.assertEqual(output.domain.metas[0].name, \"Source ID\")\n+        self.assertTrue(all(output.metas[:150, 0] == 0))\n+        self.assertTrue(all(output.metas[150:, 0] == 1))\n+\n+    def test_cascade_widgets_attributes(self):\n+        data = self.data.copy()\n+        data.domain.attributes[0].attributes = \\\n+            {\"__source_widget\": OWCreateInstance}\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+        self.assertEqual(len(output), 151)\n+        self.assertEqual(len(output.domain.variables), 5)\n+        self.assertEqual(len(output.domain.metas), 0)\n+\n+    def test_cascade_widgets_class_vars(self):\n+        data = self.data.copy()\n+        data.domain.class_var.attributes = \\\n+            {\"__source_widget\": OWCreateInstance}\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+        self.assertEqual(len(output), 151)\n+        self.assertEqual(len(output.domain.variables), 5)\n+        self.assertEqual(len(output.domain.metas), 0)\n+\n+        domain = Domain(data.domain.variables[:3], data.domain.variables[3:])\n+        data = data.transform(domain)\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+        self.assertEqual(len(output), 151)\n+        self.assertEqual(len(output.domain.variables), 5)\n+        self.assertEqual(len(output.domain.metas), 0)\n+\n \n class TestDiscreteVariableEditor(GuiTest):\n     @classmethod\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5549.0, "instance_id": "biolab__orange3-5549", "issue_numbers": 0, "base_commit": "1d3c7286c7fd343156e73d84609d72b95bc304f6", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex 368e05947..5efd8033e 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -933,8 +933,9 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n             widget = self\n \n             class Timeout:\n-                # 0.5 - np.cos(np.arange(0.17, 1, 0.17) * np.pi) / 2\n-                factors = [0.07, 0.26, 0.52, 0.77, 0.95, 1]\n+                # 0.5 - np.cos(np.arange(0.17, 1, 0.09) * np.pi) / 2\n+                factors = [0.07, 0.16, 0.27, 0.41, 0.55,\n+                           0.68, 0.81, 0.9, 0.97, 1]\n \n                 def __init__(self):\n                     self._counter = 0\n@@ -959,7 +960,8 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n                 # If encountered any strange behaviour when updating sizes,\n                 # implement it with threads\n                 self.begin_resizing.emit()\n-                self.timer = QTimer(self.scatterplot_item, interval=50)\n+                interval = int(500 / len(Timeout.factors))\n+                self.timer = QTimer(self.scatterplot_item, interval=interval)\n                 self.timer.timeout.connect(Timeout())\n                 self.timer.start()\n             else:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplotbase.py b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\nindex f99738781..4c75b3d08 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n@@ -514,10 +514,10 @@ class TestOWScatterPlotBase(WidgetTest):\n         step_resizing.wait(200)\n         end_resizing.wait(200)\n         self.assertEqual(len(begin_resizing), 2)  # reset and update\n-        self.assertEqual(len(step_resizing), 5)\n+        self.assertEqual(len(step_resizing), 9)\n         self.assertEqual(len(end_resizing), 2)  # reset and update\n-        self.assertEqual(self.graph.scatterplot_item.setSize.call_count, 6)\n-        self._update_sizes_for_points(6)\n+        self.assertEqual(self.graph.scatterplot_item.setSize.call_count, 10)\n+        self._update_sizes_for_points(10)\n         self.graph.scatterplot_item.setSize.assert_called_once()\n \n     def _update_sizes_for_points(self, n: int):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5549.0, "instance_id": "biolab__orange3-5549", "issue_numbers": 0, "base_commit": "ea646b8b33a600082ed02f45921ccb2a4bff5822", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex 368e05947..5efd8033e 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -933,8 +933,9 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n             widget = self\n \n             class Timeout:\n-                # 0.5 - np.cos(np.arange(0.17, 1, 0.17) * np.pi) / 2\n-                factors = [0.07, 0.26, 0.52, 0.77, 0.95, 1]\n+                # 0.5 - np.cos(np.arange(0.17, 1, 0.09) * np.pi) / 2\n+                factors = [0.07, 0.16, 0.27, 0.41, 0.55,\n+                           0.68, 0.81, 0.9, 0.97, 1]\n \n                 def __init__(self):\n                     self._counter = 0\n@@ -959,7 +960,8 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n                 # If encountered any strange behaviour when updating sizes,\n                 # implement it with threads\n                 self.begin_resizing.emit()\n-                self.timer = QTimer(self.scatterplot_item, interval=50)\n+                interval = int(500 / len(Timeout.factors))\n+                self.timer = QTimer(self.scatterplot_item, interval=interval)\n                 self.timer.timeout.connect(Timeout())\n                 self.timer.start()\n             else:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplotbase.py b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\nindex f99738781..4c75b3d08 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n@@ -514,10 +514,10 @@ class TestOWScatterPlotBase(WidgetTest):\n         step_resizing.wait(200)\n         end_resizing.wait(200)\n         self.assertEqual(len(begin_resizing), 2)  # reset and update\n-        self.assertEqual(len(step_resizing), 5)\n+        self.assertEqual(len(step_resizing), 9)\n         self.assertEqual(len(end_resizing), 2)  # reset and update\n-        self.assertEqual(self.graph.scatterplot_item.setSize.call_count, 6)\n-        self._update_sizes_for_points(6)\n+        self.assertEqual(self.graph.scatterplot_item.setSize.call_count, 10)\n+        self._update_sizes_for_points(10)\n         self.graph.scatterplot_item.setSize.assert_called_once()\n \n     def _update_sizes_for_points(self, n: int):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5813.0, "instance_id": "biolab__orange3-5813", "issue_numbers": 0, "base_commit": "dfd2734de0586e7b92d1a0f7749e0926695f5a02", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex 470c92b80..99b6df1bd 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -65,6 +65,8 @@ class OWPredictions(OWWidget):\n         empty_data = Msg(\"Empty dataset\")\n         wrong_targets = Msg(\n             \"Some model(s) predict a different target (see more ...)\\n{}\")\n+        missing_targets = Msg(\"Instances with missing targets \"\n+                              \"are ignored while scoring.\")\n \n     class Error(OWWidget.Error):\n         predictor_failed = Msg(\"Some predictor(s) failed (see more ...)\\n{}\")\n@@ -291,19 +293,37 @@ class OWPredictions(OWWidget):\n                 continue\n             row = [QStandardItem(learner_name(pred.predictor)),\n                    QStandardItem(\"N/A\"), QStandardItem(\"N/A\")]\n+\n+            actual = results.actual\n+            predicted = results.predicted\n+            probabilities = results.probabilities\n+\n+            mask = numpy.isnan(results.actual)\n+            no_targets = mask.sum() == len(results.actual)\n+            results.actual = results.actual[~mask]\n+            results.predicted = results.predicted[:, ~mask]\n+            results.probabilities = results.probabilities[:, ~mask]\n+\n             for scorer in scorers:\n                 item = QStandardItem()\n-                try:\n-                    score = scorer_caller(scorer, results)()[0]\n-                    item.setText(f\"{score:.3f}\")\n-                except Exception as exc:  # pylint: disable=broad-except\n-                    item.setToolTip(str(exc))\n-                    # false pos.; pylint: disable=unsupported-membership-test\n-                    if scorer.name in self.score_table.shown_scores:\n-                        errors.append(str(exc))\n+                if no_targets:\n+                    item.setText(\"NA\")\n+                else:\n+                    try:\n+                        score = scorer_caller(scorer, results)()[0]\n+                        item.setText(f\"{score:.3f}\")\n+                    except Exception as exc:  # pylint: disable=broad-except\n+                        item.setToolTip(str(exc))\n+                        # false pos.; pylint: disable=unsupported-membership-test\n+                        if scorer.name in self.score_table.shown_scores:\n+                            errors.append(str(exc))\n                 row.append(item)\n             self.score_table.model.appendRow(row)\n \n+            results.actual = actual\n+            results.predicted = predicted\n+            results.probabilities = probabilities\n+\n         view = self.score_table.view\n         if model.rowCount():\n             view.setVisible(True)\n@@ -332,8 +352,12 @@ class OWPredictions(OWWidget):\n                              if isinstance(p.results, Results)\n                              and p.results.probabilities is None))\n             self.Warning.wrong_targets(inv_targets, shown=bool(inv_targets))\n+\n+            show_warning = numpy.isnan(self.data.Y).any() and self.predictors\n+            self.Warning.missing_targets(shown=show_warning)\n         else:\n             self.Warning.wrong_targets.clear()\n+            self.Warning.missing_targets.clear()\n \n     def _get_details(self):\n         details = \"Data:<br>\"\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex 71dc1e967..26fbfbfdd 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -11,6 +11,7 @@ from AnyQt.QtCore import QItemSelectionModel, QItemSelection, Qt\n from Orange.base import Model\n from Orange.classification import LogisticRegressionLearner\n from Orange.data.io import TabReader\n+from Orange.regression import LinearRegressionLearner\n from Orange.widgets.tests.base import WidgetTest\n from Orange.widgets.evaluate.owpredictions import (\n     OWPredictions, SharedSelectionModel, SharedSelectionStore, DataModel,\n@@ -33,6 +34,7 @@ class TestOWPredictions(WidgetTest):\n     def setUp(self):\n         self.widget = self.create_widget(OWPredictions)  # type: OWPredictions\n         self.iris = Table(\"iris\")\n+        self.housing = Table(\"housing\")\n \n     def test_rowCount_from_model(self):\n         \"\"\"Don't crash if the bottom row is visible\"\"\"\n@@ -519,6 +521,62 @@ class TestOWPredictions(WidgetTest):\n         self.send_signal(w.Inputs.predictors, p2, 2)\n         check_evres([\"P1\", \"P3\", \"P2\"])\n \n+    def test_missing_target_cls(self):\n+        mask = np.zeros(len(self.iris), dtype=bool)\n+        mask[::2] = True\n+        train_data = self.iris[~mask]\n+        predict_data = self.iris[mask]\n+        model = LogisticRegressionLearner()(train_data)\n+\n+        self.send_signal(self.widget.Inputs.predictors, model)\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertFalse(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        with predict_data.unlocked():\n+            predict_data.Y[0] = np.nan\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertTrue(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        with predict_data.unlocked():\n+            predict_data.Y[:] = np.nan\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertTrue(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.predictors, None)\n+        self.assertFalse(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+    def test_missing_target_reg(self):\n+        mask = np.zeros(len(self.housing), dtype=bool)\n+        mask[::2] = True\n+        train_data = self.housing[~mask]\n+        predict_data = self.housing[mask]\n+        model = LinearRegressionLearner()(train_data)\n+\n+        self.send_signal(self.widget.Inputs.predictors, model)\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertFalse(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        with predict_data.unlocked():\n+            predict_data.Y[0] = np.nan\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertTrue(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        with predict_data.unlocked():\n+            predict_data.Y[:] = np.nan\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertTrue(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.predictors, None)\n+        self.assertFalse(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n \n class SelectionModelTest(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5202.0, "instance_id": "biolab__orange3-5202", "issue_numbers": 0, "base_commit": "b8d3d676f506f1c49e09028e4e38ef99ffebf9a8", "patch": "diff --git a/Orange/widgets/data/owpivot.py b/Orange/widgets/data/owpivot.py\nindex f35b19ab2..6787c3803 100644\n--- a/Orange/widgets/data/owpivot.py\n+++ b/Orange/widgets/data/owpivot.py\n@@ -14,7 +14,7 @@ from AnyQt.QtWidgets import (QTableView, QSizePolicy, QHeaderView,\n                              QGridLayout)\n \n from Orange.data import (Table, DiscreteVariable, Variable, Domain,\n-                         ContinuousVariable)\n+                         ContinuousVariable, TimeVariable)\n from Orange.data.domain import filter_visible\n from Orange.data.util import get_unique_names_duplicates, get_unique_names\n from Orange.data.filter import FilterContinuous, FilterDiscrete, Values\n@@ -67,6 +67,7 @@ class Pivot:\n     AnyVarFunctions = (Count_defined,)\n     ContVarFunctions = (Sum, Mean, Min, Max, Mode, Median, Var)\n     DiscVarFunctions = (Majority,)\n+    TimeVarFunctions = (Mean, Min, Max, Mode, Median)\n \n     class Tables:\n         table = None  # type: Table\n@@ -195,7 +196,12 @@ class Pivot:\n             if fun in self.DiscVarFunctions:\n                 attrs.append(DiscreteVariable(name, var.values))\n             else:\n-                attrs.append(ContinuousVariable(name))\n+                if isinstance(var, TimeVariable) and \\\n+                        fun in self.TimeVarFunctions:\n+                    attrs.append(TimeVariable(name, have_date=var.have_date,\n+                                              have_time=var.have_time))\n+                else:\n+                    attrs.append(ContinuousVariable(name))\n         args = (var_indep_funs, var_dep_funs, attrs)\n         for t, var in ((\"table\", None), (\"total_h\", self._col_var),\n                        (\"total_v\", self._row_var), (\"total\", self._total_var)):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpivot.py b/Orange/widgets/data/tests/test_owpivot.py\nindex 4d12d05eb..1d9ab780f 100644\n--- a/Orange/widgets/data/tests/test_owpivot.py\n+++ b/Orange/widgets/data/tests/test_owpivot.py\n@@ -10,7 +10,8 @@ from AnyQt.QtCore import Qt, QPoint\n from AnyQt.QtTest import QTest\n \n from Orange.data import (Table, Domain, ContinuousVariable as Cv,\n-                         StringVariable as sv, DiscreteVariable as Dv)\n+                         StringVariable as sv, DiscreteVariable as Dv,\n+                         TimeVariable as Tv)\n from Orange.widgets.data.owpivot import (OWPivot, Pivot,\n                                          AggregationFunctionsEnum)\n from Orange.widgets.tests.base import WidgetTest\n@@ -68,6 +69,16 @@ class TestOWPivot(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, None)\n         self.assertIsNone(self.get_output(self.widget.Outputs.grouped_data))\n \n+    def test_output_grouped_data_time_var(self):\n+        domain = Domain([Dv(\"d1\", (\"a\", \"b\")), Tv(\"t1\", have_date=1)])\n+        X = np.array([[0, 1e9], [0, 1e8], [1, 2e8], [1, np.nan]])\n+        data = Table(domain, X)\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.agg_checkboxes[Pivot.Functions.Mean.value].click()\n+        grouped = self.get_output(self.widget.Outputs.grouped_data)\n+        str_grouped = \"[[a, 2, 1987-06-06],\\n [b, 2, 1976-05-03]]\"\n+        self.assertEqual(str(grouped), str_grouped)\n+\n     def test_output_filtered_data(self):\n         self.agg_checkboxes[Pivot.Functions.Sum.value].click()\n         self.send_signal(self.widget.Inputs.data, self.iris)\n@@ -333,6 +344,18 @@ class TestPivot(unittest.TestCase):\n              [1, 2, 1, 1, 1, 1, 2, 1, 7, 7, 7, 7, 7, 7, 0]])\n         self.assert_table_equal(group_tab, Table(Domain(domain[:2] + atts), X))\n \n+    def test_group_table_time_var(self):\n+        domain = Domain([Dv(\"d1\", (\"a\", \"b\")), Tv(\"t1\", have_date=1)])\n+        X = np.array([[0, 1e9], [0, 1e8], [1, 2e8], [1, np.nan]])\n+        table = Table(domain, X)\n+        pivot = Pivot(table, Pivot.Functions, domain[0], val_var=domain[1])\n+        str_grouped = \\\n+            \"[[a, 2, 2, a, 2, 1.1e+09, 1987-06-06, 1973-03-03, \" \\\n+            \"2001-09-09, 1973-03-03, 1987-06-06, 2.025e+17],\\n \" \\\n+            \"[b, 2, 2, b, 1, 2e+08, 1976-05-03, 1976-05-03, \" \\\n+            \"1976-05-03, 1976-05-03, 1976-05-03, 0]]\"\n+        self.assertEqual(str(pivot.group_table), str_grouped)\n+\n     def test_group_table_metas(self):\n         domain = Domain([Dv(\"d1\", (\"a\", \"b\")), Cv(\"c1\"),\n                          Dv(\"d2\", (\"a\", \"b\")), Cv(\"c2\")])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6811.0, "instance_id": "biolab__orange3-6811", "issue_numbers": 0, "base_commit": "92b7be2fc911f5bebd2bdc2f874cbdfee931ae55", "patch": "diff --git a/Orange/widgets/model/owpls.py b/Orange/widgets/model/owpls.py\nindex 69e1ba587..f3f548966 100644\n--- a/Orange/widgets/model/owpls.py\n+++ b/Orange/widgets/model/owpls.py\n@@ -33,6 +33,7 @@ class OWPLS(OWBaseLearner):\n \n     n_components = Setting(2)\n     max_iter = Setting(500)\n+    scale = Setting(True)\n \n     def add_main_layout(self):\n         optimization_box = gui.vBox(\n@@ -48,6 +49,9 @@ class OWPLS(OWBaseLearner):\n             alignment=Qt.AlignRight, controlWidth=100,\n             callback=self.settings_changed,\n             checkCallback=self.settings_changed)\n+        gui.checkBox(optimization_box, self, \"scale\",\n+                     \"Scale features and target\",\n+                     callback=self.settings_changed)\n \n     def update_model(self):\n         super().update_model()\n@@ -63,6 +67,7 @@ class OWPLS(OWBaseLearner):\n         self.Outputs.components.send(components)\n \n     def _create_output_coeffs_loadings(self) -> Table:\n+        intercept = self.model.intercept.T[None, :]\n         coefficients = self.model.coefficients.T\n         _, y_loadings = self.model.loadings\n         x_rotations, _ = self.model.rotations\n@@ -71,6 +76,7 @@ class OWPLS(OWBaseLearner):\n         n_components = x_rotations.shape[1]\n \n         names = [f\"coef ({v.name})\" for v in self.model.domain.class_vars]\n+        names += [f\"coef/X_sd ({v.name})\" for v in self.model.domain.class_vars]\n         names += [f\"w*c {i + 1}\" for i in range(n_components)]\n         domain = Domain(\n             [ContinuousVariable(n) for n in names],\n@@ -78,12 +84,25 @@ class OWPLS(OWBaseLearner):\n                    DiscreteVariable(\"Variable role\", (\"Feature\", \"Target\"))]\n         )\n \n-        X = np.vstack((np.hstack((coefficients, x_rotations)),\n-                       np.full((n_targets, n_targets + n_components), np.nan)))\n-        X[-n_targets:, n_targets:] = y_loadings\n-\n-        M = np.array([[v.name for v in self.model.domain.variables],\n-                      [0] * n_features + [1] * n_targets],\n+        data = self.model.data_to_model_domain(self.data)\n+        x_std = np.std(data.X, axis=0)\n+        coeffs_x_std = coefficients.T / x_std\n+        X_features = np.hstack((coefficients,\n+                                coeffs_x_std.T,\n+                                x_rotations))\n+        X_targets = np.hstack((np.full((n_targets, n_targets), np.nan),\n+                               np.full((n_targets, n_targets), np.nan),\n+                               y_loadings))\n+\n+        coeffs = coeffs_x_std * np.mean(data.X, axis=0)\n+        X_intercepts = np.hstack((intercept,\n+                                  intercept - coeffs.sum(),\n+                                  np.full((1, n_components), np.nan)))\n+        X = np.vstack((X_features, X_targets, X_intercepts))\n+\n+        variables = self.model.domain.variables\n+        M = np.array([[v.name for v in variables] + [\"intercept\"],\n+                      [0] * n_features + [1] * n_targets + [np.nan]],\n                      dtype=object).T\n \n         table = Table.from_numpy(domain, X=X, metas=M)\n@@ -133,6 +152,7 @@ class OWPLS(OWBaseLearner):\n     def create_learner(self):\n         common_args = {'preprocessors': self.preprocessors}\n         return PLSRegressionLearner(n_components=self.n_components,\n+                                    scale=self.scale,\n                                     max_iter=self.max_iter,\n                                     **common_args)\n \n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owpls.py b/Orange/widgets/model/tests/test_owpls.py\nindex 137915636..c0055a90e 100644\n--- a/Orange/widgets/model/tests/test_owpls.py\n+++ b/Orange/widgets/model/tests/test_owpls.py\n@@ -34,41 +34,50 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.send_signal(self.widget.Inputs.data, self._data)\n         coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n         self.assertEqual(coefsdata.name, \"Coefficients and Loadings\")\n-        self.assertEqual(coefsdata.X.shape, (14, 3))\n-        self.assertEqual(coefsdata.Y.shape, (14, 0))\n-        self.assertEqual(coefsdata.metas.shape, (14, 2))\n+        self.assertEqual(coefsdata.X.shape, (15, 4))\n+        self.assertEqual(coefsdata.Y.shape, (15, 0))\n+        self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n-        self.assertEqual([\"coef (MEDV)\", \"w*c 1\", \"w*c 2\"],\n+        self.assertEqual([\"coef (MEDV)\", \"coef/X_sd (MEDV)\", \"w*c 1\", \"w*c 2\"],\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n                          [v.name for v in coefsdata.domain.metas])\n-        metas = [v.name for v in self._data.domain.variables]\n+        metas = [v.name for v in self._data.domain.variables] + [\"intercept\"]\n         self.assertTrue((coefsdata.metas[:, 0] == metas).all())\n-        self.assertTrue((coefsdata.metas[:-1, 1] == 0).all())\n-        self.assertTrue((coefsdata.metas[-1, 1] == 1))\n-        self.assertAlmostEqual(coefsdata.X[0, 1], 0.237, 3)\n-        self.assertAlmostEqual(coefsdata.X[13, 1], -0.304, 3)\n+        self.assertTrue((coefsdata.metas[:-2, 1] == 0).all())\n+        self.assertTrue((coefsdata.metas[-2, 1] == 1))\n+        self.assertTrue(np.isnan(coefsdata.metas[-1, 1]))\n+        self.assertAlmostEqual(coefsdata.X[0, 2], 0.237, 3)\n+        self.assertAlmostEqual(coefsdata.X[13, 2], -0.304, 3)\n+        self.assertAlmostEqual(coefsdata.X[-1, 0], 22.5, 1)\n+        self.assertTrue(np.isnan(coefsdata.X[-1, 2:]).all())\n \n     def test_output_coefsdata_multi_target(self):\n         self.send_signal(self.widget.Inputs.data, self._data_multi_target)\n         coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n         self.assertEqual(coefsdata.name, \"Coefficients and Loadings\")\n-        self.assertEqual(coefsdata.X.shape, (14, 4))\n-        self.assertEqual(coefsdata.Y.shape, (14, 0))\n-        self.assertEqual(coefsdata.metas.shape, (14, 2))\n+        self.assertEqual(coefsdata.X.shape, (15, 6))\n+        self.assertEqual(coefsdata.Y.shape, (15, 0))\n+        self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n-        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"w*c 1\", \"w*c 2\"]\n+        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"coef/X_sd (MEDV)\",\n+                      \"coef/X_sd (CRIM)\", \"w*c 1\", \"w*c 2\"]\n         self.assertEqual(attr_names,\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n                          [v.name for v in coefsdata.domain.metas])\n         metas = [v.name for v in self._data_multi_target.domain.variables]\n+        metas += [\"intercept\"]\n         self.assertTrue((coefsdata.metas[:, 0] == metas).all())\n-        self.assertTrue((coefsdata.metas[:-2, 1] == 0).all())\n-        self.assertTrue((coefsdata.metas[-2:, 1] == 1).all())\n-        self.assertAlmostEqual(coefsdata.X[0, 2], -0.198, 3)\n-        self.assertAlmostEqual(coefsdata.X[12, 2], -0.288, 3)\n-        self.assertAlmostEqual(coefsdata.X[13, 2], 0.243, 3)\n+        self.assertTrue((coefsdata.metas[:-3, 1] == 0).all())\n+        self.assertTrue((coefsdata.metas[-2:-1, 1] == 1).all())\n+        self.assertTrue(np.isnan(coefsdata.metas[-1, 1]))\n+        self.assertAlmostEqual(coefsdata.X[0, 4], -0.198, 3)\n+        self.assertAlmostEqual(coefsdata.X[12, 4], -0.288, 3)\n+        self.assertAlmostEqual(coefsdata.X[13, 4], 0.243, 3)\n+        self.assertAlmostEqual(coefsdata.X[-1, 0], 22.5, 1)\n+        self.assertAlmostEqual(coefsdata.X[-1, 1], 3.6, 1)\n+        self.assertTrue(np.isnan(coefsdata.X[-1, 4:]).all())\n \n     def test_output_data(self):\n         self.send_signal(self.widget.Inputs.data, self._data)\n@@ -129,6 +138,14 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.send_signal(self.widget.Inputs.data, data)\n         self.assertIsNone(self.get_output(self.widget.Outputs.data))\n \n+    def test_scale(self):\n+        self.widget.auto_apply = True\n+        self.send_signal(self.widget.Inputs.data, self._data)\n+        output1 = self.get_output(self.widget.Outputs.data)\n+        self.widget.controls.scale.setChecked(False)\n+        output2 = self.get_output(self.widget.Outputs.data)\n+        self.assertTrue(abs(output1.metas[0, 1] - output2.metas[0, 1]) > 100)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6811.0, "instance_id": "biolab__orange3-6811", "issue_numbers": 0, "base_commit": "f68cc2c15360f7e2aa0500a6b719b85adf02f57c", "patch": "diff --git a/Orange/widgets/model/owpls.py b/Orange/widgets/model/owpls.py\nindex c397e882d..f3f548966 100644\n--- a/Orange/widgets/model/owpls.py\n+++ b/Orange/widgets/model/owpls.py\n@@ -67,7 +67,7 @@ class OWPLS(OWBaseLearner):\n         self.Outputs.components.send(components)\n \n     def _create_output_coeffs_loadings(self) -> Table:\n-        intercept = self.model.intercept\n+        intercept = self.model.intercept.T[None, :]\n         coefficients = self.model.coefficients.T\n         _, y_loadings = self.model.loadings\n         x_rotations, _ = self.model.rotations\n@@ -76,6 +76,7 @@ class OWPLS(OWBaseLearner):\n         n_components = x_rotations.shape[1]\n \n         names = [f\"coef ({v.name})\" for v in self.model.domain.class_vars]\n+        names += [f\"coef/X_sd ({v.name})\" for v in self.model.domain.class_vars]\n         names += [f\"w*c {i + 1}\" for i in range(n_components)]\n         domain = Domain(\n             [ContinuousVariable(n) for n in names],\n@@ -83,12 +84,24 @@ class OWPLS(OWBaseLearner):\n                    DiscreteVariable(\"Variable role\", (\"Feature\", \"Target\"))]\n         )\n \n-        X = np.vstack((np.hstack((coefficients, x_rotations)),\n-                       np.full((n_targets + 1, n_targets + n_components), np.nan)))\n-        X[-n_targets - 1: -1, n_targets:] = y_loadings\n-        X[-1, :n_targets] = intercept\n-\n-        M = np.array([[v.name for v in self.model.domain.variables] + [\"intercept\"],\n+        data = self.model.data_to_model_domain(self.data)\n+        x_std = np.std(data.X, axis=0)\n+        coeffs_x_std = coefficients.T / x_std\n+        X_features = np.hstack((coefficients,\n+                                coeffs_x_std.T,\n+                                x_rotations))\n+        X_targets = np.hstack((np.full((n_targets, n_targets), np.nan),\n+                               np.full((n_targets, n_targets), np.nan),\n+                               y_loadings))\n+\n+        coeffs = coeffs_x_std * np.mean(data.X, axis=0)\n+        X_intercepts = np.hstack((intercept,\n+                                  intercept - coeffs.sum(),\n+                                  np.full((1, n_components), np.nan)))\n+        X = np.vstack((X_features, X_targets, X_intercepts))\n+\n+        variables = self.model.domain.variables\n+        M = np.array([[v.name for v in variables] + [\"intercept\"],\n                       [0] * n_features + [1] * n_targets + [np.nan]],\n                      dtype=object).T\n \n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owpls.py b/Orange/widgets/model/tests/test_owpls.py\nindex a3e787831..c0055a90e 100644\n--- a/Orange/widgets/model/tests/test_owpls.py\n+++ b/Orange/widgets/model/tests/test_owpls.py\n@@ -34,11 +34,11 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.send_signal(self.widget.Inputs.data, self._data)\n         coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n         self.assertEqual(coefsdata.name, \"Coefficients and Loadings\")\n-        self.assertEqual(coefsdata.X.shape, (15, 3))\n+        self.assertEqual(coefsdata.X.shape, (15, 4))\n         self.assertEqual(coefsdata.Y.shape, (15, 0))\n         self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n-        self.assertEqual([\"coef (MEDV)\", \"w*c 1\", \"w*c 2\"],\n+        self.assertEqual([\"coef (MEDV)\", \"coef/X_sd (MEDV)\", \"w*c 1\", \"w*c 2\"],\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n                          [v.name for v in coefsdata.domain.metas])\n@@ -47,20 +47,21 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertTrue((coefsdata.metas[:-2, 1] == 0).all())\n         self.assertTrue((coefsdata.metas[-2, 1] == 1))\n         self.assertTrue(np.isnan(coefsdata.metas[-1, 1]))\n-        self.assertAlmostEqual(coefsdata.X[0, 1], 0.237, 3)\n-        self.assertAlmostEqual(coefsdata.X[13, 1], -0.304, 3)\n+        self.assertAlmostEqual(coefsdata.X[0, 2], 0.237, 3)\n+        self.assertAlmostEqual(coefsdata.X[13, 2], -0.304, 3)\n         self.assertAlmostEqual(coefsdata.X[-1, 0], 22.5, 1)\n-        self.assertTrue(np.isnan(coefsdata.X[-1, 1:]).all())\n+        self.assertTrue(np.isnan(coefsdata.X[-1, 2:]).all())\n \n     def test_output_coefsdata_multi_target(self):\n         self.send_signal(self.widget.Inputs.data, self._data_multi_target)\n         coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n         self.assertEqual(coefsdata.name, \"Coefficients and Loadings\")\n-        self.assertEqual(coefsdata.X.shape, (15, 4))\n+        self.assertEqual(coefsdata.X.shape, (15, 6))\n         self.assertEqual(coefsdata.Y.shape, (15, 0))\n         self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n-        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"w*c 1\", \"w*c 2\"]\n+        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"coef/X_sd (MEDV)\",\n+                      \"coef/X_sd (CRIM)\", \"w*c 1\", \"w*c 2\"]\n         self.assertEqual(attr_names,\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n@@ -71,12 +72,12 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertTrue((coefsdata.metas[:-3, 1] == 0).all())\n         self.assertTrue((coefsdata.metas[-2:-1, 1] == 1).all())\n         self.assertTrue(np.isnan(coefsdata.metas[-1, 1]))\n-        self.assertAlmostEqual(coefsdata.X[0, 2], -0.198, 3)\n-        self.assertAlmostEqual(coefsdata.X[12, 2], -0.288, 3)\n-        self.assertAlmostEqual(coefsdata.X[13, 2], 0.243, 3)\n+        self.assertAlmostEqual(coefsdata.X[0, 4], -0.198, 3)\n+        self.assertAlmostEqual(coefsdata.X[12, 4], -0.288, 3)\n+        self.assertAlmostEqual(coefsdata.X[13, 4], 0.243, 3)\n         self.assertAlmostEqual(coefsdata.X[-1, 0], 22.5, 1)\n         self.assertAlmostEqual(coefsdata.X[-1, 1], 3.6, 1)\n-        self.assertTrue(np.isnan(coefsdata.X[-1, 2:]).all())\n+        self.assertTrue(np.isnan(coefsdata.X[-1, 4:]).all())\n \n     def test_output_data(self):\n         self.send_signal(self.widget.Inputs.data, self._data)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6259.0, "instance_id": "biolab__orange3-6259", "issue_numbers": 0, "base_commit": "8b4b20b6498350edd34460cb68b89fb301cf130b", "patch": "diff --git a/Orange/widgets/data/owfile.py b/Orange/widgets/data/owfile.py\nindex fb3ae2dda..35fc2691b 100644\n--- a/Orange/widgets/data/owfile.py\n+++ b/Orange/widgets/data/owfile.py\n@@ -28,6 +28,8 @@ from Orange.widgets.utils.filedialogs import RecentPathsWComboMixin, \\\n     open_filename_dialog, stored_recent_paths_prepend\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n from Orange.widgets.widget import Output, Msg\n+from Orange.widgets.utils.combobox import TextEditCombo\n+\n \n # Backward compatibility: class RecentPath used to be defined in this module,\n # and it is used in saved (pickled) settings. It must be imported into the\n@@ -232,13 +234,12 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n         rb_button = gui.appendRadioButton(vbox, \"URL:\", addToLayout=False)\n         layout.addWidget(rb_button, 3, 0, Qt.AlignVCenter)\n \n-        self.url_combo = url_combo = QComboBox()\n+        self.url_combo = url_combo = TextEditCombo()\n         url_model = NamedURLModel(self.sheet_names)\n         url_model.wrap(self.recent_urls)\n         url_combo.setLineEdit(LineEditSelectOnFocus())\n         url_combo.setModel(url_model)\n         url_combo.setSizePolicy(Policy.Ignored, Policy.Fixed)\n-        url_combo.setEditable(True)\n         url_combo.setInsertPolicy(url_combo.InsertAtTop)\n         url_edit = url_combo.lineEdit()\n         margins = url_edit.textMargins()\n@@ -343,14 +344,19 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n                 self.load_data()\n \n     def _url_set(self):\n+        index = self.url_combo.currentIndex()\n         url = self.url_combo.currentText()\n-        pos = self.recent_urls.index(url)\n         url = url.strip()\n \n         if not urlparse(url).scheme:\n             url = 'http://' + url\n-            self.url_combo.setItemText(pos, url)\n-            self.recent_urls[pos] = url\n+            self.url_combo.setItemText(index, url)\n+\n+        if index != 0:\n+            model = self.url_combo.model()\n+            root = self.url_combo.rootModelIndex()\n+            model.moveRow(root, index, root, 0)\n+            assert self.url_combo.currentIndex() == 0\n \n         self.source = self.URL\n         self.load_data()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfile.py b/Orange/widgets/data/tests/test_owfile.py\nindex 264723c7c..1426c44d1 100644\n--- a/Orange/widgets/data/tests/test_owfile.py\n+++ b/Orange/widgets/data/tests/test_owfile.py\n@@ -14,6 +14,7 @@ import scipy.sparse as sp\n \n from AnyQt.QtCore import QMimeData, QPoint, Qt, QUrl, QPointF\n from AnyQt.QtGui import QDragEnterEvent, QDropEvent\n+from AnyQt.QtTest import QTest\n from AnyQt.QtWidgets import QComboBox\n \n import Orange\n@@ -713,6 +714,24 @@ a\n         self.assertTrue(self.widget.Warning.load_warning.is_shown())\n         self.assertIn(WARNING_MSG, str(self.widget.Warning.load_warning))\n \n+    def test_recent_url_serialization(self):\n+        with patch.object(self.widget, \"load_data\", lambda: None):\n+            self.widget.url_combo.insertItem(0, \"https://example.com/test.tab\")\n+            self.widget.url_combo.insertItem(1, \"https://example.com/test1.tab\")\n+            self.widget.source = OWFile.URL\n+            s = self.widget.settingsHandler.pack_data(self.widget)\n+            self.assertEqual(s[\"recent_urls\"],\n+                             [\"https://example.com/test.tab\",\n+                              \"https://example.com/test1.tab\"])\n+            self.widget.url_combo.lineEdit().clear()\n+            QTest.keyClicks(self.widget.url_combo, \"https://example.com/test1.tab\")\n+            QTest.keyClick(self.widget.url_combo, Qt.Key_Enter)\n+            # must move the entered url to first position\n+            s = self.widget.settingsHandler.pack_data(self.widget)\n+            self.assertEqual(s[\"recent_urls\"],\n+                             [\"https://example.com/test1.tab\",\n+                              \"https://example.com/test.tab\"])\n+\n \n class TestOWFileDropHandler(unittest.TestCase):\n     def test_canDropUrl(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5936.0, "instance_id": "biolab__orange3-5936", "issue_numbers": 0, "base_commit": "66e24de6617ea06b2b36bdb11e20f7f12800aa14", "patch": "diff --git a/Orange/widgets/data/owfeaturestatistics.py b/Orange/widgets/data/owfeaturestatistics.py\nindex e8a4639be..116b8aabc 100644\n--- a/Orange/widgets/data/owfeaturestatistics.py\n+++ b/Orange/widgets/data/owfeaturestatistics.py\n@@ -851,16 +851,17 @@ class OWFeatureStatistics(widget.OWWidget):\n     def commit(self):\n         if not self.selected_vars:\n             self.Outputs.reduced_data.send(None)\n+        else:\n+            # Send a table with only selected columns to output\n+            self.Outputs.reduced_data.send(self.data[:, self.selected_vars])\n+\n+        if not self.data:\n             self.Outputs.statistics.send(None)\n             return\n \n-        # Send a table with only selected columns to output\n-        variables = self.selected_vars\n-        self.Outputs.reduced_data.send(self.data[:, variables])\n-\n         # Send the statistics of the selected variables to ouput\n-        labels, data = self.model.get_statistics_matrix(variables, return_labels=True)\n-        var_names = np.atleast_2d([var.name for var in variables]).T\n+        labels, data = self.model.get_statistics_matrix(return_labels=True)\n+        var_names = np.atleast_2d([var.name for var in self.model.variables]).T\n         domain = Domain(\n             attributes=[ContinuousVariable(name) for name in labels],\n             metas=[StringVariable('Feature')]\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeaturestatistics.py b/Orange/widgets/data/tests/test_owfeaturestatistics.py\nindex f59566a86..e02f78f64 100644\n--- a/Orange/widgets/data/tests/test_owfeaturestatistics.py\n+++ b/Orange/widgets/data/tests/test_owfeaturestatistics.py\n@@ -325,7 +325,7 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, self.data)\n         self.select_rows = partial(select_rows, widget=self.widget)\n \n-    def test_changing_data_updates_ouput(self):\n+    def test_changing_data_updates_output(self):\n         # Test behaviour of widget when auto commit is OFF\n         self.widget.auto_commit = False\n \n@@ -334,33 +334,27 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n         self.select_rows([0])\n         # By default, nothing should be sent since auto commit is off\n         self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n-        self.assertIsNone(self.get_output(self.widget.Outputs.statistics))\n         # When we commit, the data should be on the output\n         self.widget.unconditional_commit()\n         self.assertIsNotNone(self.get_output(self.widget.Outputs.reduced_data))\n-        self.assertIsNotNone(self.get_output(self.widget.Outputs.statistics))\n \n         # Send some new data\n         iris = Table('iris')\n         self.send_signal(self.widget.Inputs.data, iris)\n         # By default, there should be nothing on the output\n         self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n-        self.assertIsNone(self.get_output(self.widget.Outputs.statistics))\n         # Nothing should change after commit, since we haven't selected any rows\n         self.widget.unconditional_commit()\n         self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n-        self.assertIsNone(self.get_output(self.widget.Outputs.statistics))\n \n         # Now let's switch back to the original data, where we selected row 0\n         self.send_signal(self.widget.Inputs.data, self.data)\n         # Again, since auto commit is off, nothing should be on the output\n         self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n-        self.assertIsNone(self.get_output(self.widget.Outputs.statistics))\n         # Since the row selection is saved into context settings, the appropriate\n         # thing should be sent to output\n         self.widget.unconditional_commit()\n         self.assertIsNotNone(self.get_output(self.widget.Outputs.reduced_data))\n-        self.assertIsNotNone(self.get_output(self.widget.Outputs.statistics))\n \n     def test_changing_data_updates_output_with_autocommit(self):\n         # Test behaviour of widget when auto commit is ON\n@@ -371,20 +365,17 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n         self.select_rows([0])\n         # Selecting rows should send data to output\n         self.assertIsNotNone(self.get_output(self.widget.Outputs.reduced_data))\n-        self.assertIsNotNone(self.get_output(self.widget.Outputs.statistics))\n \n         # Send some new data\n         iris = Table('iris')\n         self.send_signal(self.widget.Inputs.data, iris)\n         # Don't select anything, so the outputs should be empty\n         self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n-        self.assertIsNone(self.get_output(self.widget.Outputs.statistics))\n \n         # Now let's switch back to the original data, where we had selected row 0,\n         # we expect that to be sent to output\n         self.send_signal(self.widget.Inputs.data, self.data)\n         self.assertIsNotNone(self.get_output(self.widget.Outputs.reduced_data))\n-        self.assertIsNotNone(self.get_output(self.widget.Outputs.statistics))\n \n     def test_sends_single_attribute_table_to_output(self):\n         # Check if selecting a single attribute row\n@@ -453,12 +444,32 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n         self.select_rows([0])\n         self.widget.unconditional_commit()\n         self.assertIsNotNone(self.get_output(self.widget.Outputs.reduced_data))\n-        self.assertIsNotNone(self.get_output(self.widget.Outputs.statistics))\n \n         self.widget.table_view.clearSelection()\n         self.widget.unconditional_commit()\n         self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n-        self.assertIsNone(self.get_output(self.widget.Outputs.statistics))\n+\n+    def test_output_combinations(self):\n+        domain = self.data.domain\n+        # No selection -> reduced_data is not output, statistics is present\n+        self.widget.unconditional_commit()\n+        self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n+        self.assertEqual(len(self.get_output(self.widget.Outputs.statistics)),\n+                         self.widget.model.rowCount())\n+\n+        # Has selection -> all outputs present\n+        self.select_rows([0, 1])\n+        self.widget.unconditional_commit()\n+        outp = self.get_output(self.widget.Outputs.reduced_data)\n+        self.assertEqual(len(outp), len(self.data))\n+        self.assertEqual(len(outp.domain.variables), 2)\n+        self.assertEqual(len(self.get_output(self.widget.Outputs.statistics)),\n+                         self.widget.model.rowCount())\n+\n+        # No data -> no output\n+        self.send_signal(self.widget.Inputs.data, None)\n+        self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n+        self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n \n \n class TestFeatureStatisticsUI(WidgetTest):\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6811.0, "instance_id": "biolab__orange3-6811", "issue_numbers": 0, "base_commit": "dc5e00ec70a7e5450173a5697f8c179d30b266ec", "patch": "diff --git a/Orange/widgets/model/owpls.py b/Orange/widgets/model/owpls.py\nindex 69e1ba587..c05c0ee86 100644\n--- a/Orange/widgets/model/owpls.py\n+++ b/Orange/widgets/model/owpls.py\n@@ -33,6 +33,7 @@ class OWPLS(OWBaseLearner):\n \n     n_components = Setting(2)\n     max_iter = Setting(500)\n+    scale = Setting(True)\n \n     def add_main_layout(self):\n         optimization_box = gui.vBox(\n@@ -48,6 +49,9 @@ class OWPLS(OWBaseLearner):\n             alignment=Qt.AlignRight, controlWidth=100,\n             callback=self.settings_changed,\n             checkCallback=self.settings_changed)\n+        gui.checkBox(optimization_box, self, \"scale\",\n+                     \"Scale features and target\",\n+                     callback=self.settings_changed)\n \n     def update_model(self):\n         super().update_model()\n@@ -133,6 +137,7 @@ class OWPLS(OWBaseLearner):\n     def create_learner(self):\n         common_args = {'preprocessors': self.preprocessors}\n         return PLSRegressionLearner(n_components=self.n_components,\n+                                    scale=self.scale,\n                                     max_iter=self.max_iter,\n                                     **common_args)\n \n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owpls.py b/Orange/widgets/model/tests/test_owpls.py\nindex 137915636..f627e360e 100644\n--- a/Orange/widgets/model/tests/test_owpls.py\n+++ b/Orange/widgets/model/tests/test_owpls.py\n@@ -129,6 +129,14 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.send_signal(self.widget.Inputs.data, data)\n         self.assertIsNone(self.get_output(self.widget.Outputs.data))\n \n+    def test_scale(self):\n+        self.widget.auto_apply = True\n+        self.send_signal(self.widget.Inputs.data, self._data)\n+        output1 = self.get_output(self.widget.Outputs.data)\n+        self.widget.controls.scale.setChecked(False)\n+        output2 = self.get_output(self.widget.Outputs.data)\n+        self.assertTrue(abs(output1.metas[0, 1] - output2.metas[0, 1]) > 100)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6887.0, "instance_id": "biolab__orange3-6887", "issue_numbers": 0, "base_commit": "6c742f75b95cee79c48855700459e7c4d82428da", "patch": "diff --git a/Orange/widgets/unsupervised/owhierarchicalclustering.py b/Orange/widgets/unsupervised/owhierarchicalclustering.py\nindex f71cc12ba..dd73e5a70 100644\n--- a/Orange/widgets/unsupervised/owhierarchicalclustering.py\n+++ b/Orange/widgets/unsupervised/owhierarchicalclustering.py\n@@ -240,6 +240,9 @@ class OWHierarchicalClustering(widget.OWWidget):\n             Msg(\"Subset data refers to a different table\")\n         pruning_disables_colors = \\\n             Msg(\"Pruned cluster doesn't show colors and indicate subset\")\n+        many_clusters = \\\n+            Msg(\"Variables with too many values may \"\n+                \"degrade the performance of downstream widgets.\")\n \n     #: Stored (manual) selection state (from a saved workflow) to restore.\n     __pending_selection_restore = None  # type: Optional[SelectionState]\n@@ -361,7 +364,7 @@ class OWHierarchicalClustering(widget.OWWidget):\n             2, 0\n         )\n         self.top_n_spin = gui.spin(\n-            self.selection_box, self, \"top_n\", 1, 20,\n+            self.selection_box, self, \"top_n\", 1, 1000,\n             controlWidth=spin_width, alignment=Qt.AlignRight,\n             callback=self._top_n_changed, addToLayout=False)\n         self.top_n_spin.lineEdit().returnPressed.connect(self._top_n_return)\n@@ -766,6 +769,7 @@ class OWHierarchicalClustering(widget.OWWidget):\n     @gui.deferred\n     def commit(self):\n         items = getattr(self.matrix, \"items\", self.items)\n+        self.Warning.many_clusters.clear()\n         if not items:\n             self.Outputs.selected_data.send(None)\n             self.Outputs.annotated_data.send(None)\n@@ -778,6 +782,8 @@ class OWHierarchicalClustering(widget.OWWidget):\n \n         maps = [indices[node.value.first:node.value.last]\n                 for node in selection]\n+        if len(maps) > 20:\n+            self.Warning.many_clusters()\n \n         selected_indices = list(chain(*maps))\n \n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py b/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py\nindex c0b977b53..baca8198e 100644\n--- a/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py\n+++ b/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py\n@@ -207,3 +207,22 @@ class TestOWHierarchicalClustering(WidgetTest, WidgetOutputsTestMixin):\n         annotated = [(a.name, a.attributes['cluster']) for a in o.domain.attributes]\n         self.assertEqual(annotated, [('sepal length', 1), ('petal width', 2),\n                                      ('sepal width', 3), ('petal length', 3)])\n+\n+    def test_many_values_warning(self):\n+        w = self.widget\n+\n+        self.send_signal(self.widget.Inputs.distances, self.distances)\n+        w.top_n = 21\n+        w.selection_box.buttons[2].click()\n+        self.assertTrue(w.Warning.many_clusters.is_shown())\n+\n+        w.top_n = 20\n+        w.selection_box.buttons[2].click()\n+        self.assertFalse(w.Warning.many_clusters.is_shown())\n+\n+        w.top_n = 21\n+        w.selection_box.buttons[2].click()\n+        self.assertTrue(w.Warning.many_clusters.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.distances, None)\n+        self.assertFalse(w.Warning.many_clusters.is_shown())\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6536.0, "instance_id": "biolab__orange3-6536", "issue_numbers": 0, "base_commit": "80f3cc952fb33f2ff1d4aa61b7725bd63247c885", "patch": "diff --git a/Orange/widgets/unsupervised/owpca.py b/Orange/widgets/unsupervised/owpca.py\nindex 29611146f..9cc833230 100644\n--- a/Orange/widgets/unsupervised/owpca.py\n+++ b/Orange/widgets/unsupervised/owpca.py\n@@ -5,13 +5,15 @@ from AnyQt.QtWidgets import QFormLayout\n from AnyQt.QtCore import Qt\n \n from orangewidget.report import bool_str\n+from orangewidget.settings import Setting\n \n from Orange.data import Table, Domain, StringVariable, ContinuousVariable\n from Orange.data.util import get_unique_names\n from Orange.data.sql.table import SqlTable, AUTO_DL_LIMIT\n from Orange.preprocess import preprocess\n from Orange.projection import PCA\n-from Orange.widgets import widget, gui, settings\n+from Orange.widgets import widget, gui\n+from Orange.widgets.utils.annotated_data import add_columns\n from Orange.widgets.utils.concurrent import ConcurrentWidgetMixin\n from Orange.widgets.utils.slidergraph import SliderGraph\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n@@ -38,12 +40,12 @@ class OWPCA(widget.OWWidget, ConcurrentWidgetMixin):\n         components = Output(\"Components\", Table)\n         pca = Output(\"PCA\", PCA, dynamic=False)\n \n-    ncomponents = settings.Setting(2)\n-    variance_covered = settings.Setting(100)\n-    auto_commit = settings.Setting(True)\n-    normalize = settings.Setting(True)\n-    maxp = settings.Setting(20)\n-    axis_labels = settings.Setting(10)\n+    ncomponents = Setting(2)\n+    variance_covered = Setting(100)\n+    auto_commit = Setting(True)\n+    normalize = Setting(True)\n+    maxp = Setting(20)\n+    axis_labels = Setting(10)\n \n     graph_name = \"plot.plotItem\"  # QGraphicsView (pg.PlotWidget -> SliderGraph)\n \n@@ -222,8 +224,7 @@ class OWPCA(widget.OWWidget, ConcurrentWidgetMixin):\n         self._update_axis()\n \n     def _on_cut_changed(self, components):\n-        if components == self.ncomponents \\\n-                or self.ncomponents == 0:\n+        if self.ncomponents in (components, 0):\n             return\n \n         self.ncomponents = components\n@@ -333,9 +334,9 @@ class OWPCA(widget.OWWidget, ConcurrentWidgetMixin):\n             proposed = [a.name for a in self._pca.orig_domain.attributes]\n             meta_name = get_unique_names(proposed, 'components')\n             meta_vars = [StringVariable(name=meta_name)]\n-            metas = numpy.array([['PC{}'.format(i + 1)\n-                                  for i in range(self.ncomponents)]],\n-                                dtype=object).T\n+            metas = numpy.array(\n+                [[f\"PC{i + 1}\"for i in range(self.ncomponents)]], dtype=object\n+            ).T\n             if self._variance_ratio is not None:\n                 variance_name = get_unique_names(proposed, \"variance\")\n                 meta_vars.append(ContinuousVariable(variance_name))\n@@ -351,14 +352,8 @@ class OWPCA(widget.OWWidget, ConcurrentWidgetMixin):\n                                metas=metas)\n             components.name = 'components'\n \n-            data_dom = Domain(\n-                self.data.domain.attributes,\n-                self.data.domain.class_vars,\n-                self.data.domain.metas + domain.attributes)\n-            data = Table.from_numpy(\n-                data_dom, self.data.X, self.data.Y,\n-                numpy.hstack((self.data.metas, transformed.X)),\n-                ids=self.data.ids)\n+            data_dom = add_columns(self.data.domain, metas=domain.attributes)\n+            data = self.data.transform(data_dom)\n \n         self.Outputs.transformed_data.send(transformed)\n         self.Outputs.components.send(components)\n@@ -371,7 +366,7 @@ class OWPCA(widget.OWWidget, ConcurrentWidgetMixin):\n         self.report_items((\n             (\"Normalize data\", bool_str(self.normalize)),\n             (\"Selected components\", self.ncomponents),\n-            (\"Explained variance\", \"{:.3f} %\".format(self.variance_covered))\n+            (\"Explained variance\", f\"{self.variance_covered:.3f} %\")\n         ))\n         self.report_plot()\n \n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owpca.py b/Orange/widgets/unsupervised/tests/test_owpca.py\nindex 993871980..afb2ab41f 100644\n--- a/Orange/widgets/unsupervised/tests/test_owpca.py\n+++ b/Orange/widgets/unsupervised/tests/test_owpca.py\n@@ -4,6 +4,8 @@ import unittest\n from unittest.mock import patch, Mock\n \n import numpy as np\n+from sklearn.utils import check_random_state\n+from sklearn.utils.extmath import svd_flip\n \n from Orange.data import Table, Domain, ContinuousVariable, TimeVariable\n from Orange.preprocess import preprocess\n@@ -11,8 +13,6 @@ from Orange.widgets.tests.base import WidgetTest\n from Orange.widgets.tests.utils import table_dense_sparse, possible_duplicate_table\n from Orange.widgets.unsupervised.owpca import OWPCA\n from Orange.tests import test_filename\n-from sklearn.utils import check_random_state\n-from sklearn.utils.extmath import svd_flip\n \n \n class TestOWPCA(WidgetTest):\n@@ -63,19 +63,19 @@ class TestOWPCA(WidgetTest):\n             self.widget._setup_plot()  # pylint: disable=protected-access\n \n     def test_migrate_settings_limits_components(self):\n-        settings = dict(ncomponents=10)\n+        settings = {\"ncomponents\": 10}\n         OWPCA.migrate_settings(settings, 0)\n         self.assertEqual(settings['ncomponents'], 10)\n-        settings = dict(ncomponents=101)\n+        settings = {\"ncomponents\": 101}\n         OWPCA.migrate_settings(settings, 0)\n         self.assertEqual(settings['ncomponents'], 100)\n \n     def test_migrate_settings_changes_variance_covered_to_int(self):\n-        settings = dict(variance_covered=17.5)\n+        settings = {\"variance_covered\": 17.5}\n         OWPCA.migrate_settings(settings, 0)\n         self.assertEqual(settings[\"variance_covered\"], 17)\n \n-        settings = dict(variance_covered=float('nan'))\n+        settings = {\"variance_covered\": float('nan')}\n         OWPCA.migrate_settings(settings, 0)\n         self.assertEqual(settings[\"variance_covered\"], 100)\n \n@@ -277,6 +277,21 @@ class TestOWPCA(WidgetTest):\n         output = self.get_output(widget.Outputs.data)\n         self.assertIsNone(output)\n \n+    def test_table_subclass(self):\n+        \"\"\"\n+        When input table is instance of Table's subclass (e.g. Corpus) resulting\n+        tables should also be an instance subclasses\n+        \"\"\"\n+        class TableSub(Table):  # pylint: disable=abstract-method\n+            pass\n+\n+        table_subclass = TableSub(self.iris)\n+        self.send_signal(self.widget.Inputs.data, table_subclass)\n+        data_out = self.get_output(self.widget.Outputs.data)\n+        trans_data_out = self.get_output(self.widget.Outputs.transformed_data)\n+        self.assertIsInstance(data_out, TableSub)\n+        self.assertIsInstance(trans_data_out, TableSub)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6270.0, "instance_id": "biolab__orange3-6270", "issue_numbers": 0, "base_commit": "e75f21c34be369c9c13303ae4aac95a7afda8d19", "patch": "diff --git a/Orange/widgets/visualize/owbarplot.py b/Orange/widgets/visualize/owbarplot.py\nindex 9d9e9dcac..45ec95ead 100644\n--- a/Orange/widgets/visualize/owbarplot.py\n+++ b/Orange/widgets/visualize/owbarplot.py\n@@ -572,7 +572,10 @@ class OWBarPlot(OWWidget):\n         elif not self.annot_var:\n             return []\n         elif self.annot_var == self.enumeration:\n-            return np.arange(1, len(self.data) + 1)[self.grouped_indices]\n+            return [\n+                str(x)\n+                for x in np.arange(1, len(self.data) + 1)[self.grouped_indices]\n+            ]\n         else:\n             return [self.annot_var.str_val(row[self.annot_var])\n                     for row in self.grouped_data]\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owbarplot.py b/Orange/widgets/visualize/tests/test_owbarplot.py\nindex 0ff75962a..f3294b3bb 100644\n--- a/Orange/widgets/visualize/tests/test_owbarplot.py\n+++ b/Orange/widgets/visualize/tests/test_owbarplot.py\n@@ -137,6 +137,21 @@ class TestOWBarPlot(WidgetTest, WidgetOutputsTestMixin):\n         self.assertFalse(group_axis.isVisible())\n         self.assertFalse(annot_axis.isVisible())\n \n+    def test_annotate_by_enumeration(self):\n+        widget = self.widget\n+\n+        self.send_signal(widget.Inputs.data, self.data)\n+        combo = widget.controls.annot_var\n+        for i in range(combo.count()):\n+            try:\n+                simulate.combobox_activate_index(combo, i)\n+            except AssertionError:  # skip disabled items\n+                pass\n+            else:\n+                labels = widget.get_labels()\n+                self.assertTrue(not labels\n+                                or all(isinstance(x, str) for x in labels))\n+\n     def test_datasets(self):\n         controls = self.widget.controls\n         for ds in datasets.datasets():\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5972.0, "instance_id": "biolab__orange3-5972", "issue_numbers": 0, "base_commit": "41999e5ca78a3aaf60c0610c0bb567bfd4498ff9", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex ad3d0923e..3ed1f3414 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -267,10 +267,16 @@ class OWPredictions(OWWidget):\n             self.target_class = self.TARGET_AVERAGE\n         else:\n             self.shown_probs = self.NO_PROBS\n+            model = prob_combo.model()\n+            for v in (self.DATA_PROBS, self.BOTH_PROBS):\n+                item = model.item(v)\n+                item.setFlags(item.flags() & ~Qt.ItemIsEnabled)\n \n     def _update_control_visibility(self):\n         for widget in self._prob_controls:\n-            widget.setVisible(self.is_discrete_class)\n+            widget.setVisible(self.is_discrete_class\n+                              or any(slot.predictor.domain.has_discrete_class\n+                                     for slot in self.predictors))\n \n         for widget in self._target_controls:\n             widget.setVisible(self.is_discrete_class and self.show_scores)\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex d12f85449..5be547582 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -39,6 +39,7 @@ class TestOWPredictions(WidgetTest):\n     def setUp(self):\n         self.widget = self.create_widget(OWPredictions)  # type: OWPredictions\n         self.iris = Table(\"iris\")\n+        self.iris_classless = self.iris.transform(Domain(self.iris.domain.attributes, []))\n         self.housing = Table(\"housing\")\n \n     def test_rowCount_from_model(self):\n@@ -624,12 +625,12 @@ class TestOWPredictions(WidgetTest):\n     def _mock_predictors(self):\n         def pred(values):\n             slot = Mock()\n-            slot.predictor.domain.class_var = DiscreteVariable(\"c\", tuple(values))\n+            slot.predictor.domain = Domain([], DiscreteVariable(\"c\", tuple(values)))\n             return slot\n \n         def predc():\n             slot = Mock()\n-            slot.predictor.domain.class_var = ContinuousVariable(\"c\")\n+            slot.predictor.domain = Domain([], ContinuousVariable(\"c\"))\n             return slot\n \n         widget = self.widget\n@@ -746,16 +747,32 @@ class TestOWPredictions(WidgetTest):\n \n         widget.data = Table.from_list(Domain([], ContinuousVariable(\"c\")), [])\n \n+        # only regression\n+        all_predictors = widget.predictors\n+        widget.predictors = [widget.predictors[-1]]\n         widget._update_control_visibility()\n         self.assertTrue(widget.controls.shown_probs.isHidden())\n         self.assertTrue(widget.controls.target_class.isHidden())\n \n+        # regression and classification\n+        widget.predictors = all_predictors\n+        widget._update_control_visibility()\n+        self.assertFalse(widget.controls.shown_probs.isHidden())\n+        self.assertTrue(widget.controls.target_class.isHidden())\n+\n         widget._set_class_values()\n         self.assertEqual(widget.class_values, list(\"abcde\"))\n \n         widget._set_target_combos()\n         self.assertEqual(widget.shown_probs, widget.NO_PROBS)\n \n+        def is_enabled(prob_item):\n+            return widget.controls.shown_probs.model().item(prob_item).flags() & Qt.ItemIsEnabled\n+        self.assertTrue(is_enabled(widget.NO_PROBS))\n+        self.assertTrue(is_enabled(widget.MODEL_PROBS))\n+        self.assertFalse(is_enabled(widget.DATA_PROBS))\n+        self.assertFalse(is_enabled(widget.BOTH_PROBS))\n+\n     def test_delegate_ranges(self):\n         widget = self.widget\n \n@@ -816,7 +833,6 @@ class TestOWPredictions(WidgetTest):\n         delegate = widget.predictionsview.itemDelegateForColumn(2)\n         self.assertIsInstance(delegate, ClassificationItemDelegate)\n \n-\n     class _Scorer(TargetScore):\n         # pylint: disable=arguments-differ\n         def compute_score(self, _, target, **__):\n@@ -940,6 +956,37 @@ class TestOWPredictions(WidgetTest):\n             out.metas,\n             np.hstack([pred.results.predicted.T for pred in widget.predictors]))\n \n+    def test_classless(self):\n+        widget = self.widget\n+        iris012 = self.iris\n+        purge = Remove(class_flags=Remove.RemoveUnusedValues)\n+        iris01 = purge(iris012[:100])\n+        iris12 = purge(iris012[50:])\n+\n+        bayes01 = NaiveBayesLearner()(iris01)\n+        bayes12 = NaiveBayesLearner()(iris12)\n+        bayes012 = NaiveBayesLearner()(iris012)\n+\n+        self.send_signal(widget.Inputs.data, self.iris_classless)\n+        self.send_signal(widget.Inputs.predictors, bayes01, 0)\n+        self.send_signal(widget.Inputs.predictors, bayes12, 1)\n+        self.send_signal(widget.Inputs.predictors, bayes012, 2)\n+\n+        for i, pred in enumerate(widget.predictors):\n+            p = pred.results.unmapped_probabilities\n+            p[0] = 10 + 100 * i + np.arange(p.shape[1])\n+            pred.results.unmapped_predicted[:] = i\n+\n+        widget.shown_probs = widget.NO_PROBS\n+        widget._commit_predictions()\n+        out = self.get_output(widget.Outputs.predictions)\n+        self.assertEqual(list(out.metas[0]), [0, 1, 2])\n+\n+        widget.shown_probs = widget.MODEL_PROBS\n+        widget._commit_predictions()\n+        out = self.get_output(widget.Outputs.predictions)\n+        self.assertEqual(list(out.metas[0]), [0, 10, 11, 1, 110, 111, 2, 210, 211, 212])\n+\n     @patch(\"Orange.widgets.evaluate.owpredictions.usable_scorers\",\n            Mock(return_value=[_Scorer]))\n     def test_change_target(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6450.0, "instance_id": "biolab__orange3-6450", "issue_numbers": 0, "base_commit": "e35d172474c25b207ee16647194d4e45a0779068", "patch": "diff --git a/Orange/widgets/data/owcorrelations.py b/Orange/widgets/data/owcorrelations.py\nindex 1b4d5f301..4779ad8a8 100644\n--- a/Orange/widgets/data/owcorrelations.py\n+++ b/Orange/widgets/data/owcorrelations.py\n@@ -393,18 +393,24 @@ class OWCorrelations(OWWidget):\n             self.Outputs.correlations.send(None)\n             return\n \n-        attrs = [ContinuousVariable(\"Correlation\"), ContinuousVariable(\"FDR\")]\n+        attrs = [ContinuousVariable(\"Correlation\"),\n+                 ContinuousVariable(\"uncorrected p\"),\n+                 ContinuousVariable(\"FDR\")]\n         metas = [StringVariable(\"Feature 1\"), StringVariable(\"Feature 2\")]\n         domain = Domain(attrs, metas=metas)\n         model = self.vizrank.rank_model\n-        x = np.array([[float(model.data(model.index(row, 0), role))\n-                       for role in (Qt.DisplayRole, CorrelationRank.PValRole)]\n-                      for row in range(model.rowCount())])\n-        x[:, 1] = FDR(list(x[:, 1]))\n+        count = model.rowCount()\n+        index = model.index\n+        corr = np.array([float(index(row, 0).data())\n+                         for row in range(count)])\n+        p = np.array([index(row, 0).data(CorrelationRank.PValRole)\n+                      for row in range(count)])\n+        fdr = FDR(p)\n+        x = np.vstack((corr, p, fdr)).T\n         # pylint: disable=protected-access\n-        m = np.array([[a.name for a in model.data(model.index(row, 0),\n-                                                  CorrelationRank._AttrRole)]\n-                      for row in range(model.rowCount())], dtype=object)\n+        m = np.array([[a.name\n+                       for a in index(row, 0).data(CorrelationRank._AttrRole)]\n+                      for row in range(count)], dtype=object)\n         corr_table = Table(domain, x, metas=m)\n         corr_table.name = \"Correlations\"\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcorrelations.py b/Orange/widgets/data/tests/test_owcorrelations.py\nindex 650213686..f8b31b157 100644\n--- a/Orange/widgets/data/tests/test_owcorrelations.py\n+++ b/Orange/widgets/data/tests/test_owcorrelations.py\n@@ -158,10 +158,14 @@ class TestOWCorrelations(WidgetTest):\n         self.assertIsInstance(correlations, Table)\n         self.assertEqual(len(correlations), 6)\n         self.assertEqual(len(correlations.domain.metas), 2)\n-        self.assertListEqual([\"Correlation\", \"FDR\"],\n+        self.assertListEqual([\"Correlation\", \"uncorrected p\", \"FDR\"],\n                              [m.name for m in correlations.domain.attributes])\n-        array = np.array([[0.963, 0], [0.872, 0], [0.818, 0], [-0.421, 0],\n-                          [-0.357, 0.000009], [-0.109, 0.1827652]])\n+        array = np.array([[0.963, 0, 0],\n+                          [0.872, 0, 0],\n+                          [0.818, 0, 0],\n+                          [-0.421, 0, 0],\n+                          [-0.357, 7.52e-6, 0.000009],\n+                          [-0.109, 0.1827652, 0.1827652]])\n         npt.assert_almost_equal(correlations.X, array)\n \n     def test_input_changed(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6656.0, "instance_id": "biolab__orange3-6656", "issue_numbers": 0, "base_commit": "bf2219dd4bb07532889eab830207205c934832a9", "patch": "diff --git a/Orange/widgets/data/owcorrelations.py b/Orange/widgets/data/owcorrelations.py\nindex 4779ad8a8..b1e969228 100644\n--- a/Orange/widgets/data/owcorrelations.py\n+++ b/Orange/widgets/data/owcorrelations.py\n@@ -70,7 +70,7 @@ class KMeansCorrelationHeuristic:\n         :return: generator of attributes grouped by cluster\n         \"\"\"\n         data = Normalize()(self.data).X.T\n-        kmeans = KMeans(n_clusters=self.n_clusters, random_state=0).fit(data)\n+        kmeans = KMeans(n_clusters=self.n_clusters, random_state=0, n_init=1).fit(data)\n         labels_attrs = sorted([(l, i) for i, l in enumerate(kmeans.labels_)])\n         return [Cluster(instances=list(pair[1] for pair in group),\n                         centroid=kmeans.cluster_centers_[l])\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcorrelations.py b/Orange/widgets/data/tests/test_owcorrelations.py\nindex f8b31b157..17b7bd4f9 100644\n--- a/Orange/widgets/data/tests/test_owcorrelations.py\n+++ b/Orange/widgets/data/tests/test_owcorrelations.py\n@@ -362,7 +362,7 @@ class TestKMeansCorrelationHeuristic(unittest.TestCase):\n         clusters = self.heuristic.get_clusters_of_attributes()\n         # results depend on scikit-learn k-means implementation\n         result = sorted([c.instances for c in clusters])\n-        self.assertListEqual([[0], [1, 2, 3, 4, 5, 6, 7], [8]],\n+        self.assertListEqual([[0, 3, 5], [1, 2, 6, 7], [4, 8]],\n                              result)\n \n     def test_get_states(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4302.0, "instance_id": "biolab__orange3-4302", "issue_numbers": 0, "base_commit": "a8e251ffbc87f0b5327bf289a6c44094961d4a0f", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex ce2d15737..c9111a837 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -395,6 +395,8 @@ class FileFormat(metaclass=FileFormatMeta):\n     # the sort order in file open/save combo boxes. Lower is better.\n     PRIORITY = 10000\n     OPTIONAL_TYPE_ANNOTATIONS = False\n+    SUPPORT_COMPRESSED = False\n+    SUPPORT_SPARSE_DATA = False\n \n     def __init__(self, filename):\n         \"\"\"\ndiff --git a/Orange/widgets/data/owsave.py b/Orange/widgets/data/owsave.py\nindex 3e347e4d4..ee73adfd0 100644\n--- a/Orange/widgets/data/owsave.py\n+++ b/Orange/widgets/data/owsave.py\n@@ -1,8 +1,8 @@\n import os.path\n \n from Orange.data.table import Table\n-from Orange.data.io import TabReader, CSVReader, PickleReader, ExcelReader, \\\n-    XlsReader\n+from Orange.data.io import \\\n+    TabReader, CSVReader, PickleReader, ExcelReader, XlsReader, FileFormat\n from Orange.widgets import gui, widget\n from Orange.widgets.widget import Input\n from Orange.widgets.settings import Setting\n@@ -22,14 +22,6 @@ class OWSave(OWSaveBase):\n \n     settings_version = 2\n \n-    writers = [TabReader, CSVReader, PickleReader, ExcelReader, XlsReader]\n-    filters = {\n-        **{f\"{w.DESCRIPTION} (*{w.EXTENSIONS[0]})\": w\n-           for w in writers},\n-        **{f\"Compressed {w.DESCRIPTION} (*{w.EXTENSIONS[0]}.gz)\": w\n-           for w in writers if w.SUPPORT_COMPRESSED}\n-    }\n-\n     class Inputs:\n         data = Input(\"Data\", Table)\n \n@@ -38,6 +30,8 @@ class OWSave(OWSaveBase):\n \n     add_type_annotations = Setting(True)\n \n+    builtin_order = [TabReader, CSVReader, PickleReader, ExcelReader, XlsReader]\n+\n     def __init__(self):\n         super().__init__(2)\n \n@@ -53,6 +47,21 @@ class OWSave(OWSaveBase):\n         self.grid.setRowMinimumHeight(1, 8)\n         self.adjustSize()\n \n+    @classmethod\n+    def get_filters(cls):\n+        writers = [format for format in FileFormat.formats\n+                   if getattr(format, 'write_file', None)\n+                   and getattr(format, \"EXTENSIONS\", None)]\n+        writers.sort(key=lambda writer: cls.builtin_order.index(writer)\n+                     if writer in cls.builtin_order else 99)\n+\n+        return {\n+            **{f\"{w.DESCRIPTION} (*{w.EXTENSIONS[0]})\": w\n+               for w in writers},\n+            **{f\"Compressed {w.DESCRIPTION} (*{w.EXTENSIONS[0]}.gz)\": w\n+               for w in writers if w.SUPPORT_COMPRESSED}\n+        }\n+\n     @Inputs.data\n     def dataset(self, data):\n         self.data = data\n@@ -137,7 +146,7 @@ class OWSave(OWSaveBase):\n         valid = self.valid_filters()\n         if self.data is None or not self.data.is_sparse() \\\n                 or (self.filter in valid\n-                    and valid[self.filter].SUPPORT_SPARSE_DATA):\n+                        and valid[self.filter].SUPPORT_SPARSE_DATA):\n             return self.filter\n         return next(iter(valid))\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owsave.py b/Orange/widgets/data/tests/test_owsave.py\nindex 3f59ac6e1..d09179a89 100644\n--- a/Orange/widgets/data/tests/test_owsave.py\n+++ b/Orange/widgets/data/tests/test_owsave.py\n@@ -8,7 +8,7 @@ import scipy.sparse as sp\n from AnyQt.QtWidgets import QFileDialog\n \n from Orange.data import Table\n-from Orange.data.io import TabReader, PickleReader, ExcelReader\n+from Orange.data.io import TabReader, PickleReader, ExcelReader, FileFormat\n from Orange.tests import named_file\n from Orange.widgets.data.owsave import OWSave, OWSaveBase\n from Orange.widgets.utils.save.tests.test_owsavebase import \\\n@@ -23,6 +23,15 @@ def _w(s):  # pylint: disable=invalid-name\n     return s.replace(\"/\", os.sep)\n \n \n+class MockFormat(FileFormat):\n+    EXTENSIONS = ('.mock',)\n+    DESCRIPTION = \"Mock file format\"\n+\n+    @staticmethod\n+    def write_file(filename, data):\n+        pass\n+\n+\n class OWSaveTestBase(WidgetTest, SaveWidgetsTestBaseMixin):\n     def setUp(self):\n         with open_widget_classes():\n@@ -285,7 +294,12 @@ class TestOWSave(OWSaveTestBase):\n         widget.data.X = sp.csr_matrix(widget.data.X)\n         self.assertTrue(\n             widget.get_filters()[widget.default_valid_filter()]\n-                .SUPPORT_SPARSE_DATA)\n+            .SUPPORT_SPARSE_DATA)\n+\n+    def test_add_on_writers(self):\n+        # test adding file formats after registering the widget\n+        self.assertIn(MockFormat, self.widget.valid_filters().values())\n+        # this test doesn't call it - test_save_uncompressed does\n \n     def test_send_report(self):\n         widget = self.widget\n@@ -387,12 +401,14 @@ class TestFunctionalOWSave(WidgetTest):\n \n                 self.send_signal(widget.Inputs.data, self.iris)\n                 widget.save_file_as()\n-                self.assertEqual(len(Table(filename)), 150)\n+                if hasattr(writer, \"read\"):\n+                    self.assertEqual(len(Table(filename)), 150)\n \n                 if writer.SUPPORT_SPARSE_DATA:\n                     self.send_signal(widget.Inputs.data, spiris)\n                     widget.save_file()\n-                    self.assertEqual(len(Table(filename)), 150)\n+                    if hasattr(writer, \"read\"):\n+                        self.assertEqual(len(Table(filename)), 150)\n \n \n @unittest.skipUnless(sys.platform == \"linux\", \"Tests for dialog on Linux\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5828.0, "instance_id": "biolab__orange3-5828", "issue_numbers": 0, "base_commit": "3516fc30c8e226983a562e7b17d005dd9ac86185", "patch": "diff --git a/Orange/widgets/visualize/owlinearprojection.py b/Orange/widgets/visualize/owlinearprojection.py\nindex 48fcdf888..f1c4f00e8 100644\n--- a/Orange/widgets/visualize/owlinearprojection.py\n+++ b/Orange/widgets/visualize/owlinearprojection.py\n@@ -329,7 +329,10 @@ class OWLinearProjection(OWAnchorProjectionWidget):\n \n     @property\n     def effective_data(self):\n-        return self.data.transform(Domain(self.effective_variables))\n+        cvs = None\n+        if self.placement == Placement.LDA:\n+            cvs = self.data.domain.class_vars\n+        return self.data.transform(Domain(self.effective_variables, cvs))\n \n     def __vizrank_set_attrs(self, attrs):\n         if not attrs:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owlinearprojection.py b/Orange/widgets/visualize/tests/test_owlinearprojection.py\nindex d936a3002..0c60b3da8 100644\n--- a/Orange/widgets/visualize/tests/test_owlinearprojection.py\n+++ b/Orange/widgets/visualize/tests/test_owlinearprojection.py\n@@ -85,6 +85,8 @@ class TestOWLinearProjection(WidgetTest, AnchorProjectionWidgetTestMixin,\n         self.send_signal(self.widget.Inputs.data, self.data)\n         self.widget.radio_placement.buttons[Placement.LDA].click()\n         self.assertTrue(buttons[Placement.LDA].isEnabled())\n+        output = self.get_output(self.widget.Outputs.components)\n+        self.assertTrue(output and len(output) == 2)\n         self.send_signal(self.widget.Inputs.data, Table(\"housing\"))\n         self.assertFalse(buttons[Placement.LDA].isEnabled())\n         self.send_signal(self.widget.Inputs.data, None)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4955.0, "instance_id": "biolab__orange3-4955", "issue_numbers": 0, "base_commit": "ac054bcdc24d57201a2ce916fba191b47948dbad", "patch": "diff --git a/Orange/widgets/visualize/owheatmap.py b/Orange/widgets/visualize/owheatmap.py\nindex caa30c24a..9d8daf79d 100644\n--- a/Orange/widgets/visualize/owheatmap.py\n+++ b/Orange/widgets/visualize/owheatmap.py\n@@ -796,12 +796,10 @@ class OWHeatMap(widget.OWWidget):\n                     matrix = Orange.distance.Euclidean(subset)\n \n                 if cluster is None:\n-                    assert len(matrix) < self.MaxClustering\n                     cluster = hierarchical.dist_matrix_clustering(\n                         matrix, linkage=hierarchical.WARD\n                     )\n                 if ordered and cluster_ord is None:\n-                    assert len(matrix) < self.MaxOrderedClustering\n                     cluster_ord = hierarchical.optimal_leaf_ordering(\n                         cluster, matrix,\n                     )\n@@ -833,12 +831,10 @@ class OWHeatMap(widget.OWWidget):\n \n                 if cluster is None:\n                     assert matrix is not None\n-                    assert len(matrix) < self.MaxClustering\n                     cluster = hierarchical.dist_matrix_clustering(\n                         matrix, linkage=hierarchical.WARD\n                     )\n                 if ordered and cluster_ord is None:\n-                    assert len(matrix) < self.MaxOrderedClustering\n                     cluster_ord = hierarchical.optimal_leaf_ordering(cluster, matrix)\n \n             col_groups.append(col._replace(cluster=cluster, cluster_ordered=cluster_ord))\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owheatmap.py b/Orange/widgets/visualize/tests/test_owheatmap.py\nindex 97369421f..28cd6e400 100644\n--- a/Orange/widgets/visualize/tests/test_owheatmap.py\n+++ b/Orange/widgets/visualize/tests/test_owheatmap.py\n@@ -62,13 +62,18 @@ class TestOWHeatMap(WidgetTest, WidgetOutputsTestMixin):\n \n     def test_information_message(self):\n         self.widget.set_row_clustering(Clustering.OrderedClustering)\n-        continuizer = Continuize()\n-        cont_titanic = continuizer(self.titanic)\n-        self.widget.MaxClustering = 1000\n-        self.send_signal(self.widget.Inputs.data, cont_titanic)\n+        self.widget.MaxClustering = 20\n+        self.widget.MaxOrderedClustering = 15\n+        data = self.brown_selected[:, :10]\n+        self.send_signal(self.widget.Inputs.data, data[:15])\n+        self.assertFalse(self.widget.Information.active)\n+        self.send_signal(self.widget.Inputs.data, data[:16])\n         self.assertTrue(self.widget.Information.active)\n-        self.send_signal(self.widget.Inputs.data, self.data)\n+        self.assertEqual(self.widget.row_clustering, Clustering.Clustering)\n+        self.send_signal(self.widget.Inputs.data, data[:20])\n         self.assertFalse(self.widget.Information.active)\n+        self.send_signal(self.widget.Inputs.data, data[:21])\n+        self.assertTrue(self.widget.Information.active)\n \n     def test_settings_changed(self):\n         self.send_signal(self.widget.Inputs.data, self.data)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5214.0, "instance_id": "biolab__orange3-5214", "issue_numbers": 0, "base_commit": "0d6da92c5428470844999e85cdaed0736b7c619a", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex aa54cebf6..54022573c 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -43,6 +43,9 @@ with warnings.catch_warnings():\n SELECTION_WIDTH = 5\n MAX_N_VALID_SIZE_ANIMATE = 1000\n \n+# maximum number of colors (including Other)\n+MAX_COLORS = 11\n+\n \n class LegendItem(PgLegendItem):\n     def __init__(self, size=None, offset=None, pen=None, brush=None):\n@@ -1189,7 +1192,9 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n             c_data = self.master.get_color_data()\n             if c_data is None:\n                 return\n-            mask = np.isfinite(self._filter_visible(c_data))\n+            visible_c_data = self._filter_visible(c_data)\n+            mask = np.bitwise_and(np.isfinite(visible_c_data),\n+                                  visible_c_data < MAX_COLORS - 1)\n             pens = self.scatterplot_item.data['pen']\n             rgb_data = [\n                 pen.color().getRgb()[:3] if pen is not None else (255, 255, 255)\ndiff --git a/Orange/widgets/visualize/utils/widget.py b/Orange/widgets/visualize/utils/widget.py\nindex 7ecf34e17..ff827cbb4 100644\n--- a/Orange/widgets/visualize/utils/widget.py\n+++ b/Orange/widgets/visualize/utils/widget.py\n@@ -25,12 +25,12 @@ from Orange.widgets.utils.annotated_data import (\n from Orange.widgets.utils.plot import OWPlotGUI\n from Orange.widgets.utils.sql import check_sql_input\n from Orange.widgets.utils.state_summary import format_summary_details\n-from Orange.widgets.visualize.owscatterplotgraph import OWScatterPlotBase\n+from Orange.widgets.visualize.owscatterplotgraph import (\n+    OWScatterPlotBase, MAX_COLORS\n+)\n from Orange.widgets.visualize.utils.component import OWGraphWithAnchors\n from Orange.widgets.widget import OWWidget, Input, Output, Msg\n \n-# maximum number of colors (including Other)\n-MAX_COLORS = 11\n \n # maximum number of shapes (including Other)\n MAX_SHAPES = len(OWScatterPlotBase.CurveSymbols) - 1\n \n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplotbase.py b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\nindex 3e32b3abf..dcb911da7 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n@@ -940,6 +940,46 @@ class TestOWScatterPlotBase(WidgetTest):\n         np.testing.assert_equal(y_data, y_data0)\n         np.testing.assert_equal(colors, colors0)\n \n+    @patch(\"Orange.widgets.visualize.owscatterplotgraph.MAX_COLORS\", 3)\n+    @patch(\"Orange.widgets.utils.classdensity.class_density_image\")\n+    def test_density_with_max_colors(self, class_density_image):\n+        graph = self.graph\n+        graph.reset_graph()\n+        graph.plot_widget.addItem = Mock()\n+        graph.plot_widget.removeItem = Mock()\n+\n+        graph.class_density = True\n+        d = np.arange(10, dtype=float) % 3\n+        self.master.get_color_data = lambda: d\n+\n+        # All colors known\n+        graph.update_colors()\n+        x_data, y_data, colors = class_density_image.call_args[0][5:]\n+        np.testing.assert_equal(x_data, np.arange(10)[d < 2])\n+        np.testing.assert_equal(y_data, np.arange(10)[d < 2])\n+        self.assertEqual(len(set(colors)), 2)\n+\n+        # Missing colors\n+        d[:3] = np.nan\n+        graph.update_colors()\n+        x_data, y_data, colors = class_density_image.call_args[0][5:]\n+        np.testing.assert_equal(x_data, np.arange(3, 10)[d[3:] < 2])\n+        np.testing.assert_equal(y_data, np.arange(3, 10)[d[3:] < 2])\n+        self.assertEqual(len(set(colors)), 2)\n+\n+        # Missing colors + only subsample plotted\n+        graph.set_sample_size(8)\n+        graph.reset_graph()\n+        x_data, y_data, colors = class_density_image.call_args[0][5:]\n+        visible_data = graph._filter_visible(d)\n+        d_known = np.bitwise_and(np.isfinite(visible_data),\n+                                  visible_data < 2)\n+        x_data0 = graph._filter_visible(np.arange(10))[d_known]\n+        y_data0 = graph._filter_visible(np.arange(10))[d_known]\n+        np.testing.assert_equal(x_data, x_data0)\n+        np.testing.assert_equal(y_data, y_data0)\n+        self.assertLessEqual(len(set(colors)), 2)\n+\n     def test_labels(self):\n         graph = self.graph\n         graph.reset_graph()\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5859.0, "instance_id": "biolab__orange3-5859", "issue_numbers": 0, "base_commit": "0cefc175f4e7facac38eba0bfd6b4c6ef1a29ddd", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex 7eb4c47a3..f2d435b18 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -687,7 +687,8 @@ class OWPredictions(OWWidget):\n         nanmask = numpy.isnan(self.data.get_column_view(self.class_var)[0])\n         data = self.data[~nanmask]\n         results = Results(data, store_data=True)\n-        results.folds = None\n+        results.folds = [...]\n+        results.models = numpy.array([[p.predictor for p in self.predictors]])\n         results.row_indices = numpy.arange(len(data))\n         results.actual = data.Y.ravel()\n         results.predicted = numpy.vstack(\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owcalibrationplot.py b/Orange/widgets/evaluate/tests/test_owcalibrationplot.py\nindex bfcb9cd91..9819e455b 100644\n--- a/Orange/widgets/evaluate/tests/test_owcalibrationplot.py\n+++ b/Orange/widgets/evaluate/tests/test_owcalibrationplot.py\n@@ -642,7 +642,7 @@ class TestOWCalibrationPlot(WidgetTest, EvaluateTest):\n     @patch(\"Orange.widgets.evaluate.owcalibrationplot.ThresholdClassifier\")\n     @patch(\"Orange.widgets.evaluate.owcalibrationplot.CalibratedLearner\")\n     def test_no_folds(self, *_):\n-        \"\"\"Warn about omitted points with nan probabiities\"\"\"\n+        \"\"\"Don't crash on malformed Results with folds=None\"\"\"\n         widget = self.widget\n \n         self.results.folds = None\ndiff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex 9273c6171..302e7f5b9 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -10,6 +10,7 @@ from AnyQt.QtCore import QItemSelectionModel, QItemSelection, Qt\n \n from Orange.base import Model\n from Orange.classification import LogisticRegressionLearner, NaiveBayesLearner\n+from Orange.classification.majority import ConstantModel\n from Orange.data.io import TabReader\n from Orange.evaluation.scoring import TargetScore\n from Orange.preprocess import Remove\n@@ -507,6 +508,9 @@ class TestOWPredictions(WidgetTest):\n         def check_evres(expected):\n             out = self.get_output(w.Outputs.evaluation_results)\n             self.assertSequenceEqual(out.learner_names, expected)\n+            self.assertEqual(out.folds, [...])\n+            self.assertEqual(out.models.shape, (1, len(out.learner_names)))\n+            self.assertIsInstance(out.models[0, 0], ConstantModel)\n \n         check_evres([\"P1\", \"P2\", \"P3\"])\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6144.0, "instance_id": "biolab__orange3-6144", "issue_numbers": 0, "base_commit": "1d10fb4fb37d4e3b48a6d62480243911876f7af7", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex 80bddde56..db81a89df 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -302,7 +302,10 @@ class AxisItem(AxisItem):\n             step = int(np.ceil(float(len(ticks)) / max_steps))\n             ticks = ticks[::step]\n \n-        spacing = min(b - a for a, b in zip(ticks[:-1], ticks[1:]))\n+        # In case of a single tick, `default` will inform tickStrings\n+        # about the appropriate scale.\n+        spacing = min((b - a for a, b in zip(ticks[:-1], ticks[1:])),\n+                      default=maxVal - minVal)\n         return [(spacing, ticks)]\n \n     def tickStrings(self, values, scale, spacing):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplot.py b/Orange/widgets/visualize/tests/test_owscatterplot.py\nindex 88802d632..51e2b39ad 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplot.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplot.py\n@@ -1130,6 +1130,10 @@ class TestOWScatterPlot(WidgetTest, ProjectionWidgetTestMixin,\n         with self.assertRaises(ValueError):\n             float(ticks[0])\n \n+        spacing, ticks = x_axis.tickValues(1581953776, 1582953776, 10)[0]\n+        self.assertEqual(spacing, 1582953776 - 1581953776)\n+        self.assertTrue(not ticks.size or 1581953776 <= ticks[0] <= 1582953776)\n+\n     def test_clear_plot(self):\n         self.widget.cb_class_density.setChecked(True)\n         self.send_signal(self.widget.Inputs.data, self.data)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6345.0, "instance_id": "biolab__orange3-6345", "issue_numbers": 0, "base_commit": "e9c129345a7f8247b5cd3fb4967b8d6bbd90189b", "patch": "diff --git a/Orange/widgets/unsupervised/owtsne.py b/Orange/widgets/unsupervised/owtsne.py\nindex ef9f3c31e..5bb8777ea 100644\n--- a/Orange/widgets/unsupervised/owtsne.py\n+++ b/Orange/widgets/unsupervised/owtsne.py\n@@ -305,6 +305,12 @@ class OWtSNE(OWDataProjectionWidget, ConcurrentWidgetMixin):\n         modified = Msg(\"The parameter settings have been changed. Press \"\n                        \"\\\"Start\\\" to rerun with the new settings.\")\n \n+    class Warning(OWDataProjectionWidget.Warning):\n+        consider_using_pca_preprocessing = Msg(\n+            \"The input data contains a large number of features, which may slow\"\n+            \" down t-SNE computation. Consider enabling PCA preprocessing.\"\n+        )\n+\n     class Error(OWDataProjectionWidget.Error):\n         not_enough_rows = Msg(\"Input data needs at least 2 rows\")\n         not_enough_cols = Msg(\"Input data needs at least 2 attributes\")\n@@ -383,6 +389,12 @@ class OWtSNE(OWDataProjectionWidget, ConcurrentWidgetMixin):\n         self.controls.pca_components.setEnabled(self.use_pca_preprocessing)\n         self._invalidate_pca_projection()\n \n+        should_warn_pca = False\n+        if self.data is not None and not self.use_pca_preprocessing:\n+            if len(self.data.domain.attributes) >= _MAX_PCA_COMPONENTS:\n+                should_warn_pca = True\n+        self.Warning.consider_using_pca_preprocessing(shown=should_warn_pca)\n+\n     def _multiscale_changed(self):\n         self.controls.perplexity.setDisabled(self.multiscale)\n         self._invalidate_affinities()\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owtsne.py b/Orange/widgets/unsupervised/tests/test_owtsne.py\nindex f99f29583..362c86dc4 100644\n--- a/Orange/widgets/unsupervised/tests/test_owtsne.py\n+++ b/Orange/widgets/unsupervised/tests/test_owtsne.py\n@@ -297,6 +297,14 @@ class TestOWtSNE(WidgetTest, ProjectionWidgetTestMixin, WidgetOutputsTestMixin):\n             \"The information message was not cleared on no data\"\n         )\n \n+        self.send_signal(self.widget.Inputs.data, self.data)\n+        self.wait_until_stop_blocking()\n+        self.assertFalse(\n+            self.widget.Information.modified.is_shown(),\n+            \"The modified info message should be hidden after the widget \"\n+            \"computes the embedding\"\n+        )\n+\n     def test_invalidation_flow(self):\n         # pylint: disable=protected-access\n         w = self.widget\n@@ -354,6 +362,71 @@ class TestOWtSNE(WidgetTest, ProjectionWidgetTestMixin, WidgetOutputsTestMixin):\n         # All of the inavalidation flags should have been cleared\n         self.assertFalse(w._invalidated)\n \n+    def test_pca_preprocessing_warning_with_large_number_of_features(self):\n+        self.assertFalse(\n+            self.widget.Warning.consider_using_pca_preprocessing.is_shown(),\n+            \"The PCA warning should be hidden by default\"\n+        )\n+\n+        self.widget.controls.use_pca_preprocessing.setChecked(False)\n+        self.assertFalse(\n+            self.widget.Warning.consider_using_pca_preprocessing.is_shown(),\n+            \"The PCA warning should be hidden even after toggling options if \"\n+            \"no data is on input\"\n+        )\n+\n+        # Setup data classes\n+        x_small = np.random.normal(0, 1, size=(50, 4))\n+        data_small = Table.from_numpy(Domain.from_numpy(x_small), x_small)\n+        x_large = np.random.normal(0, 1, size=(50, 250))\n+        data_large = Table.from_numpy(Domain.from_numpy(x_large), x_large)\n+\n+        # SMALL data with PCA preprocessing ENABLED\n+        self.send_signal(self.widget.Inputs.data, data_small)\n+        self.widget.controls.use_pca_preprocessing.setChecked(True)\n+        self.widget.run_button.click(), self.wait_until_stop_blocking()\n+        self.assertFalse(\n+            self.widget.Warning.consider_using_pca_preprocessing.is_shown(),\n+            \"The PCA warning should be hidden when PCA preprocessing enabled \"\n+            \"when the data has <50 features\"\n+        )\n+\n+        # SMALL data with PCA preprocessing DISABLED\n+        self.send_signal(self.widget.Inputs.data, data_small)\n+        self.widget.controls.use_pca_preprocessing.setChecked(False)\n+        self.widget.run_button.click(), self.wait_until_stop_blocking()\n+        self.assertFalse(\n+            self.widget.Warning.consider_using_pca_preprocessing.is_shown(),\n+            \"The PCA warning should be hidden with disabled PCA preprocessing \"\n+            \"when the data has <50 features\"\n+        )\n+\n+        # LARGE data with PCA preprocessing ENABLED\n+        self.send_signal(self.widget.Inputs.data, data_large)\n+        self.widget.controls.use_pca_preprocessing.setChecked(True)\n+        self.widget.run_button.click(), self.wait_until_stop_blocking()\n+        self.assertFalse(\n+            self.widget.Warning.consider_using_pca_preprocessing.is_shown(),\n+            \"The PCA warning should be hidden when PCA preprocessing enabled \"\n+            \"when has >50 features\"\n+        )\n+\n+        # LARGE data with PCA preprocessing DISABLED\n+        self.send_signal(self.widget.Inputs.data, data_large)\n+        self.widget.controls.use_pca_preprocessing.setChecked(False)\n+        self.widget.run_button.click(), self.wait_until_stop_blocking()\n+        self.assertTrue(\n+            self.widget.Warning.consider_using_pca_preprocessing.is_shown(),\n+            \"The PCA warning should be shown when PCA preprocessing disabled \"\n+            \"when the data has >50 features\"\n+        )\n+\n+        self.send_signal(self.widget.Inputs.data, None)\n+        self.assertFalse(\n+            self.widget.Information.modified.is_shown(),\n+            \"The PCA warning should be cleared when problematic data is removed\"\n+        )\n+\n \n class TestTSNERunner(unittest.TestCase):\n     @classmethod\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": NaN, "instance_id": "biolab__orange3-None", "issue_numbers": 0, "base_commit": "ad0a24ba6229886c4eaaa53c545f25746663f181", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex 64ad52e23..855df8c04 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -177,12 +177,12 @@ class TabDelimReader:\n \n class BasketReader():\n     re_name = re.compile(\"([^,=\\\\n]+)(=((\\d+\\.?)|(\\d*\\.\\d+)))?\")\n-    def prescan_file(self, filename):\n+    def prescan_file(self, file):\n         \"\"\"Return a list of attributes that appear in the file\"\"\"\n         names = set()\n         n_elements = 0\n         n_rows = 0\n-        for line in open(filename):\n+        for line in file:\n             items = set(mo.group(1).strip() for mo in self.re_name.finditer(line))\n             names.update(items)\n             n_elements += len(items)\n@@ -194,13 +194,19 @@ class BasketReader():\n         return Domain(attributes)\n \n     def read_file(self, filename):\n-        names, n_elements, n_rows = self.prescan_file(filename)\n+        with open(filename) as file:\n+            return self._read_file(file)\n+\n+    def _read_file(self, file):\n+        names, n_elements, n_rows = self.prescan_file(file)\n         domain = self.construct_domain(names)\n         data = np.ones(n_elements)\n         indices = np.empty(n_elements, dtype=int)\n         indptr = np.empty(n_rows+1, dtype=int)\n         indptr[0] = curptr = 0\n-        for row, line in enumerate(open(filename)):\n+\n+        file.seek(0)\n+        for row, line in enumerate(file):\n             items = {mo.group(1).strip(): float(mo.group(3) or 1)\n                      for mo in self.re_name.finditer(line)}\n             nextptr = curptr + len(items)\n.", "test_patch": "diff --git a/Orange/tests/test_basket_reader.py b/Orange/tests/test_basket_reader.py\nnew file mode 100644\nindex 000000000..1db81bd85\n--- /dev/null\n+++ b/Orange/tests/test_basket_reader.py\n@@ -0,0 +1,63 @@\n+import io\n+import unittest\n+\n+import numpy as np\n+\n+from Orange.data.io import BasketReader\n+\n+class TestBasketReader(unittest.TestCase):\n+    def test_read_variable_is_value_syntax(self):\n+        file = io.StringIO(\"\"\"a=1,b=2,c=3\"\"\")\n+        table = BasketReader()._read_file(file)\n+\n+        self.assertEqual(len(table.domain.variables), 3)\n+        self.assertEqual([\"a\", \"b\", \"c\"], list(map(lambda x:x.name, table.domain.variables)))\n+        np.testing.assert_almost_equal(table.X.todense(), np.array([[1,2,3]]))\n+\n+    def test_read_variable_only_syntax(self):\n+        file = io.StringIO(\"\"\"a,b,c,d,e\"\"\")\n+        table = BasketReader()._read_file(file)\n+        self.assertEqual(len(table.domain.variables), 5)\n+        np.testing.assert_almost_equal(table.X.todense(), np.array([[1,1,1,1,1]]))\n+\n+    def test_handles_spaces_between_variables(self):\n+        file = io.StringIO(\"\"\"a=1, b=2, c=3\"\"\")\n+        table = BasketReader()._read_file(file)\n+\n+        self.assertEqual(len(table.domain.variables), 3)\n+        np.testing.assert_almost_equal(table.X.todense(), np.array([[1,2,3]]))\n+\n+    def test_handles_duplicate_variables(self):\n+        file = io.StringIO(\"\"\"a=1, b=2, a=3\"\"\")\n+        table = BasketReader()._read_file(file)\n+\n+        self.assertEqual(len(table.domain.variables), 2)\n+        np.testing.assert_almost_equal(table.X.todense(), np.array([[3,2]]))\n+\n+    def test_variables_can_be_listed_in_any_order(self):\n+        file = io.StringIO(\"\"\"a=1, b=2\\na=1, b=4\"\"\")\n+        table = BasketReader()._read_file(file)\n+\n+        self.assertEqual(len(table.domain.variables), 2)\n+        np.testing.assert_almost_equal(table.X.todense(), np.array([[1,2], [1,4]]))\n+\n+    def test_variables_can_be_listed_in_any_order(self):\n+        file = io.StringIO(\"\"\"a=1, b=2\\na=1, b=4\"\"\")\n+        table = BasketReader()._read_file(file)\n+\n+        self.assertEqual(len(table.domain.variables), 2)\n+        np.testing.assert_almost_equal(table.X.todense(), np.array([[1,2], [1,4]]))\n+\n+    def test_variables_can_be_listed_in_any_order(self):\n+        file = io.StringIO(\"\"\"a,b\\nc,b,a\"\"\")\n+        table = BasketReader()._read_file(file)\n+\n+        self.assertEqual(len(table.domain.variables), 3)\n+        np.testing.assert_almost_equal(table.X.todense(), np.array([[1,1,0], [1,1,1]]))\n+\n+    def test_handles_unicode(self):\n+        file = io.StringIO(\"\"\"\u010d,\u0161,\u017e\"\"\")\n+        table = BasketReader()._read_file(file)\n+\n+        self.assertEqual(len(table.domain.variables), 3)\n+        np.testing.assert_almost_equal(table.X.todense(), np.array([[1,1,1]]))\n\\ No newline at end of file\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": NaN, "instance_id": "biolab__orange3-None", "issue_numbers": 0, "base_commit": "7ab9e3f651ac42b668bd2914421b038fd15618a7", "patch": "diff --git a/Orange/classification/__init__.py b/Orange/classification/__init__.py\nindex d367f9c81..fa57ebf00 100644\n--- a/Orange/classification/__init__.py\n+++ b/Orange/classification/__init__.py\n@@ -55,7 +55,7 @@ class Model:\n         elif isinstance(data, Orange_data.Instance):\n             if data.domain != self.domain:\n                 data = Orange_data.Instance(self.domain, data)\n-            prediction = self.predict(np.atleast_2d(data._values))\n+            prediction = self.predict(np.atleast_2d(data.x))\n         elif isinstance(data, Orange_data.Table):\n             if data.domain != self.domain:\n                 data = Orange_data.Table.from_table(self.domain, data)\n.", "test_patch": "diff --git a/Orange/tests/test_classification.py b/Orange/tests/test_classification.py\nindex da7ac21f7..cfa39fc6b 100644\n--- a/Orange/tests/test_classification.py\n+++ b/Orange/tests/test_classification.py\n@@ -5,6 +5,7 @@ from Orange import data\n import Orange.classification\r\n import Orange.classification.dummies as dummies\r\n import Orange.classification.majority as maj\r\n+import Orange.classification.naive_bayes as nb\r\n from Orange.data.io import BasketReader\r\n \r\n class MultiClassTest(unittest.TestCase):\r\n@@ -41,6 +42,15 @@ class MultiClassTest(unittest.TestCase):\n \r\n \r\n class ModelTest(unittest.TestCase):\r\n+\r\n+    def test_predict_single_instance(self):\r\n+        table = data.Table(\"iris\")\r\n+        learn = nb.BayesLearner()\r\n+        clf = learn(table)\r\n+        pred = []\r\n+        for row in table:\r\n+            pred.append(clf(row))\r\n+\r\n     def test_value_from_probs(self):\r\n         nrows = 100\r\n         ncols = 5\r\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3831.0, "instance_id": "biolab__orange3-3831", "issue_numbers": 0, "base_commit": "73d93ee69012f5651f7908a2961a03259e6195d3", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex a57156455..a4c2bcc32 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -82,7 +82,7 @@ def sparse_implicit_zero_weights(x, weights):\n def bincount(x, weights=None, max_val=None, minlength=0):\n     \"\"\"Return counts of values in array X.\n \n-    Works kind of like np.bincount(), except that it also supports floating\n+    Works kind of like np.bincount(), except that it also supports\n     arrays with nans.\n \n     Parameters\n@@ -132,8 +132,8 @@ def bincount(x, weights=None, max_val=None, minlength=0):\n \n         x = x.data\n \n-    x = np.asanyarray(x)\n-    if x.dtype.kind == 'f' and bn.anynan(x):\n+    x = np.asanyarray(x, dtype=float)\n+    if bn.anynan(x):\n         nonnan = ~np.isnan(x)\n         x = x[nonnan]\n         if weights is not None:\n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex d5442d789..d13b9503b 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -517,6 +517,13 @@ class TestBincount(unittest.TestCase):\n \n         np.testing.assert_equal(bincount(x)[1], expected)\n \n+    # object arrays cannot be converted to sparse, so test only for dense\n+    def test_count_nans_objectarray(self):\n+        x = np.array([0, 0, 1, 2, np.nan, 2], dtype=object)\n+        expected = 1\n+\n+        np.testing.assert_equal(bincount(x)[1], expected)\n+\n     @dense_sparse\n     def test_adds_empty_bins(self, array):\n         x = array([0, 1, 3, 5])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5269.0, "instance_id": "biolab__orange3-5269", "issue_numbers": 0, "base_commit": "9403704f5b98eb8c96e7fdf3d368fe2c428bd958", "patch": "diff --git a/Orange/preprocess/discretize.py b/Orange/preprocess/discretize.py\nindex 75656829f..e91763e5f 100644\n--- a/Orange/preprocess/discretize.py\n+++ b/Orange/preprocess/discretize.py\n@@ -147,6 +147,8 @@ class EqualFreq(Discretization):\n         else:\n             d = distribution.get_distribution(data, attribute)\n             points = _discretize.split_eq_freq(d, self.n)\n+            # np.unique handles cases in which differences are below precision\n+            points = list(np.unique(points))\n         return Discretizer.create_discretized_var(\n             data.domain[attribute], points)\n \n.", "test_patch": "diff --git a/Orange/tests/test_discretize.py b/Orange/tests/test_discretize.py\nindex f1c9b29bb..1b938f825 100644\n--- a/Orange/tests/test_discretize.py\n+++ b/Orange/tests/test_discretize.py\n@@ -1,6 +1,7 @@\n # Test methods with long descriptive names can omit docstrings\n # pylint: disable=missing-docstring\n \n+import sys\n import random\n from unittest import TestCase\n \n@@ -43,6 +44,26 @@ class TestEqualFreq(TestCase):\n         self.assertEqual(len(dvar.values), 4)\n         self.assertEqual(dvar.compute_value.points, [1.5, 2.5, 3.5])\n \n+    def test_below_precision(self):\n+        eps = sys.float_info.epsilon\n+\n+        # Test with n >= number of distinct values\n+        X = np.array([[1], [1 + eps], [1 + 2 * eps], [1 + 3 * eps]])\n+        # Test the test: check that these are indeed distinct values\n+        assert len(np.unique(X).flatten()) == 4\n+        table = data.Table.from_numpy(None, X)\n+        var = discretize.EqualFreq(n=4)(table, table.domain[0])\n+        points = var.compute_value.points\n+        self.assertEqual(len(np.unique(points)), len(points))\n+\n+        # Test with n < number of distinct values\n+        X = np.array([[1 + i * eps] for i in range(10)])\n+        # Test the test: check that these are indeed distinct values\n+        assert len(np.unique(X).flatten()) == 10\n+        table = data.Table.from_numpy(None, X)\n+        var = discretize.EqualFreq(n=8)(table, table.domain[0])\n+        points = var.compute_value.points\n+        self.assertEqual(len(np.unique(points)), len(points))\n \n # noinspection PyPep8Naming\n class TestEqualWidth(TestCase):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3831.0, "instance_id": "biolab__orange3-3831", "issue_numbers": 0, "base_commit": "bd10ccdded84e55a6a8f3647ec5fcfbbe11f2795", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex a57156455..a4c2bcc32 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -82,7 +82,7 @@ def sparse_implicit_zero_weights(x, weights):\n def bincount(x, weights=None, max_val=None, minlength=0):\n     \"\"\"Return counts of values in array X.\n \n-    Works kind of like np.bincount(), except that it also supports floating\n+    Works kind of like np.bincount(), except that it also supports\n     arrays with nans.\n \n     Parameters\n@@ -132,8 +132,8 @@ def bincount(x, weights=None, max_val=None, minlength=0):\n \n         x = x.data\n \n-    x = np.asanyarray(x)\n-    if x.dtype.kind == 'f' and bn.anynan(x):\n+    x = np.asanyarray(x, dtype=float)\n+    if bn.anynan(x):\n         nonnan = ~np.isnan(x)\n         x = x[nonnan]\n         if weights is not None:\n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex d5442d789..d13b9503b 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -517,6 +517,13 @@ class TestBincount(unittest.TestCase):\n \n         np.testing.assert_equal(bincount(x)[1], expected)\n \n+    # object arrays cannot be converted to sparse, so test only for dense\n+    def test_count_nans_objectarray(self):\n+        x = np.array([0, 0, 1, 2, np.nan, 2], dtype=object)\n+        expected = 1\n+\n+        np.testing.assert_equal(bincount(x)[1], expected)\n+\n     @dense_sparse\n     def test_adds_empty_bins(self, array):\n         x = array([0, 1, 3, 5])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4474.0, "instance_id": "biolab__orange3-4474", "issue_numbers": 0, "base_commit": "369d59fece258382b135c86c2f7d0fd49927beda", "patch": "diff --git a/Orange/widgets/utils/itemmodels.py b/Orange/widgets/utils/itemmodels.py\nindex cc94e18fb..9d15f776f 100644\n--- a/Orange/widgets/utils/itemmodels.py\n+++ b/Orange/widgets/utils/itemmodels.py\n@@ -281,7 +281,7 @@ class PyTableModel(AbstractSortTableModel):\n             start, stop, _ = _as_contiguous_range(i, len(self))\n             self.removeRows(start, stop - start)\n             self.beginInsertRows(QModelIndex(), start, start + len(value) - 1)\n-            self._table[start:start + len(value)] = value\n+            self._table[start:start] = value\n             self._rows = self._table_dim()[0]\n             self.endInsertRows()\n             self._update_column_count()\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_itemmodels.py b/Orange/widgets/utils/tests/test_itemmodels.py\nindex 15f6372ce..b716fe402 100644\n--- a/Orange/widgets/utils/tests/test_itemmodels.py\n+++ b/Orange/widgets/utils/tests/test_itemmodels.py\n@@ -124,6 +124,19 @@ class TestPyTableModel(unittest.TestCase):\n                         self.model.data(self.model.index(1, 0),\n                                         Qt.TextAlignmentRole))\n \n+    def test_set_iten_slice(self):\n+        self.model[:1] = [[10, 11], [12, 13], [14, 15]]\n+        self.assertEqual(list(self.model), [[10, 11], [12, 13], [14, 15], [2, 3]])\n+\n+        self.model[1:3] = []\n+        self.assertEqual(list(self.model), [[10, 11], [2, 3]])\n+\n+        self.model[:] = [[20, 21]]\n+        self.assertEqual(list(self.model), [[20, 21]])\n+\n+        self.model[1:] = [[10, 11], [2, 3]]\n+        self.assertEqual(list(self.model), [[20, 21], [10, 11], [2, 3]])\n+\n     def test_emits_column_changes_on_row_insert(self):\n         inserted = []\n         removed = []\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3833.0, "instance_id": "biolab__orange3-3833", "issue_numbers": 0, "base_commit": "73d93ee69012f5651f7908a2961a03259e6195d3", "patch": "diff --git a/Orange/clustering/dbscan.py b/Orange/clustering/dbscan.py\nindex d69bb019d..7481f1c34 100644\n--- a/Orange/clustering/dbscan.py\n+++ b/Orange/clustering/dbscan.py\n@@ -1,5 +1,5 @@\n import sklearn.cluster as skl_cluster\n-from numpy import ndarray\n+from numpy import ndarray, unique\n \n from Orange.data import Table, DiscreteVariable, Domain, Instance\n from Orange.projection import SklProjector, Projection\n@@ -38,11 +38,11 @@ class DBSCANModel(Projection):\n             if data.domain is not self.pre_domain:\n                 data = data.transform(self.pre_domain)\n             y = self.proj.fit_predict(data.X)\n-            vals = [-1] + list(self.proj.core_sample_indices_)\n+            vals, indices = unique(y, return_inverse=True)\n             c = DiscreteVariable(name='Core sample index',\n                                  values=[str(v) for v in vals])\n             domain = Domain([c])\n-            return Table(domain, y.reshape(len(y), 1))\n+            return Table(domain, indices.reshape(len(y), 1))\n \n         elif isinstance(data, Instance):\n             if data.domain is not self.pre_domain:\n.", "test_patch": "diff --git a/Orange/tests/test_clustering_dbscan.py b/Orange/tests/test_clustering_dbscan.py\nindex bf42775a7..5065fe248 100644\n--- a/Orange/tests/test_clustering_dbscan.py\n+++ b/Orange/tests/test_clustering_dbscan.py\n@@ -29,3 +29,19 @@ class TestDBSCAN(unittest.TestCase):\n         c = dbscan(self.iris)\n         X = self.iris.X[::20]\n         p = c(X)\n+\n+    def test_values(self):\n+        dbscan = DBSCAN(eps=1)  # it clusters data in two classes\n+        c = dbscan(self.iris)\n+        table = self.iris\n+        p = c(table)\n+\n+        self.assertEqual(2, len(p.domain[0].values))\n+        self.assertSetEqual({\"0\", \"1\"}, set(p.domain[0].values))\n+\n+        table.X[0] = [100, 100, 100, 100]  # we add a big outlier\n+\n+        p = c(table)\n+\n+        self.assertEqual(3, len(p.domain[0].values))\n+        self.assertSetEqual({\"-1\", \"0\", \"1\"}, set(p.domain[0].values))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4450.0, "instance_id": "biolab__orange3-4450", "issue_numbers": 0, "base_commit": "0956c9ccbf41908ece20682fae46635e81d4a0e4", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 7414c5d1a..da00fadb8 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -719,6 +719,8 @@ class DiscreteVariable(Variable):\n         \"\"\"\n         if not isinstance(s, str):\n             raise TypeError(\"values of DiscreteVariables must be strings\")\n+        if s in self._value_index:\n+            return\n         self._value_index[s] = len(self.values)\n         self.values.append(s)\n \n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex 3ae2ac503..fa7ac9499 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -209,6 +209,12 @@ class TestDiscreteVariable(VariableTest):\n         a = DiscreteVariable(\"foo\", values=[\"a\", \"b\", \"c\"])\n         self.assertRaises(TypeError, a.add_value, 42)\n \n+    def test_no_duplicated_values(self):\n+        a = DiscreteVariable(\"foo\", values=[\"a\", \"b\", \"c\"])\n+        a.add_value(\"b\")\n+        self.assertEqual(list(a.values), [\"a\", \"b\", \"c\"])\n+        self.assertEqual(list(a._value_index), [\"a\", \"b\", \"c\"])\n+\n     def test_unpickle(self):\n         d1 = DiscreteVariable(\"A\", values=[\"two\", \"one\"])\n         s = pickle.dumps(d1)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4266.0, "instance_id": "biolab__orange3-4266", "issue_numbers": 0, "base_commit": "3a2b007b5d8a1baec0b5e08e71af3816af58c2e1", "patch": "diff --git a/Orange/preprocess/preprocess.py b/Orange/preprocess/preprocess.py\nindex ed46ba931..97c63228a 100644\n--- a/Orange/preprocess/preprocess.py\n+++ b/Orange/preprocess/preprocess.py\n@@ -605,7 +605,8 @@ class RemoveSparse(Preprocess):\n                 sparsness = data.X.shape[0] - np.count_nonzero(data.X, axis=0)\n         else: # filter by nans\n             if sp.issparse(data.X):\n-                sparsness = np.sum(np.isnan(data.X.data), axis=0)\n+                data_csc = sp.csc_matrix(data.X)\n+                sparsness = [np.sum(np.isnan(data.X[:, i].data)) for i in range(data_csc.shape[1])]\n             else:\n                 sparsness = np.sum(np.isnan(data.X), axis=0)\n         att = [a for a, s in zip(data.domain.attributes, sparsness) if s <= tailored_threshold]\n.", "test_patch": "diff --git a/Orange/tests/test_preprocess.py b/Orange/tests/test_preprocess.py\nindex 65dc540c1..00858d327 100644\n--- a/Orange/tests/test_preprocess.py\n+++ b/Orange/tests/test_preprocess.py\n@@ -221,6 +221,8 @@ class TestRemoveSparse(unittest.TestCase):\n         self.data.X[:, 0] = 7\n         true_out = self.data[:, 0]\n         true_out.X = true_out.X.reshape(-1, 1)\n+        self.data.X = csr_matrix(self.data.X)\n+        true_out.X = csr_matrix(true_out.X)\n         out = RemoveSparse(False, False, 0.5)(self.data)\n         np.testing.assert_array_equal(out, true_out)\n \ndiff --git a/Orange/widgets/data/tests/test_owpreprocess.py b/Orange/widgets/data/tests/test_owpreprocess.py\nindex c67a84d52..c46a6bb9c 100644\n--- a/Orange/widgets/data/tests/test_owpreprocess.py\n+++ b/Orange/widgets/data/tests/test_owpreprocess.py\n@@ -290,12 +290,19 @@ class TestRemoveSparseEditor(WidgetTest):\n                                                \"useFixedThreshold\": False})\n \n         p = widget.createinstance(widget.parameters())\n+        widget.filterSettingsClicked()\n+        self.assertTrue(widget.percSpin.isEnabled())\n+        self.assertFalse(widget.fixedSpin.isEnabled())\n         self.assertIsInstance(p, RemoveSparse)\n         self.assertEqual(p.fixed_threshold, False)\n         self.assertEqual(p.filter_0, True)\n         self.assertEqual(p.threshold, 5)\n \n-        widget.setParameters({\"useFixedThreshold\" : True})\n+        widget.setParameters({\"useFixedThreshold\" : True,\n+                              \"fixedThresh\" : 30,\n+                              \"filter0\" : False})\n         p = widget.createinstance(widget.parameters())\n         self.assertIsInstance(p, RemoveSparse)\n         self.assertEqual(p.fixed_threshold, True)\n+        self.assertEqual(p.threshold, 30)\n+        self.assertFalse(p.filter_0)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3722.0, "instance_id": "biolab__orange3-3722", "issue_numbers": 0, "base_commit": "31a9c086f07e4e01e81ff1abb461739dc7e8565c", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex 57c38bbdc..7dc564901 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -361,7 +361,9 @@ def stats(X, weights=None, compute_variance=False):\n             X.shape[0] - non_zero,\n             non_zero))\n     else:\n-        nans = (~X.astype(bool)).sum(axis=0) if X.size else np.zeros(X.shape[1])\n+        X_str = X.astype(str)\n+        nans = ((X_str == \"nan\") | (X_str == \"\")).sum(axis=0) \\\n+            if X.size else np.zeros(X.shape[1])\n         return np.column_stack((\n             np.tile(np.inf, X.shape[1]),\n             np.tile(-np.inf, X.shape[1]),\n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex 59a04e9e2..1c0b4226c 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -118,13 +118,14 @@ class TestUtil(unittest.TestCase):\n \n     def test_stats_non_numeric(self):\n         X = np.array([\n-            ['', 'a', 'b'],\n-            ['a', '', 'b'],\n-            ['a', 'b', ''],\n+            [\"\", \"a\", np.nan, 0],\n+            [\"a\", \"\", np.nan, 1],\n+            [\"a\", \"b\", 0, 0],\n         ], dtype=object)\n         np.testing.assert_equal(stats(X), [[np.inf, -np.inf, 0, 0, 1, 2],\n                                            [np.inf, -np.inf, 0, 0, 1, 2],\n-                                           [np.inf, -np.inf, 0, 0, 1, 2]])\n+                                           [np.inf, -np.inf, 0, 0, 2, 1],\n+                                           [np.inf, -np.inf, 0, 0, 0, 3]])\n \n     def test_nanmin_nanmax(self):\n         warnings.filterwarnings(\"ignore\", r\".*All-NaN slice encountered.*\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4535.0, "instance_id": "biolab__orange3-4535", "issue_numbers": 0, "base_commit": "43c037a5c84f739977c570c400f82fbcf43e1dc9", "patch": "diff --git a/Orange/widgets/utils/colorpalettes.py b/Orange/widgets/utils/colorpalettes.py\nindex fbbb61456..0a0efc470 100644\n--- a/Orange/widgets/utils/colorpalettes.py\n+++ b/Orange/widgets/utils/colorpalettes.py\n@@ -7,6 +7,7 @@ import numpy as np\n from AnyQt.QtCore import Qt\n from AnyQt.QtGui import QImage, QPixmap, QColor, QIcon\n \n+from Orange.data import Variable, DiscreteVariable, ContinuousVariable\n from Orange.util import Enum, hex_to_color, color_to_hex\n \n NAN_COLOR = (128, 128, 128)\n@@ -559,20 +560,23 @@ def get_default_curve_colors(n):\n def patch_variable_colors():\n     # This function patches Variable with properties and private attributes:\n     # pylint: disable=protected-access\n-    from Orange.data import Variable, DiscreteVariable, ContinuousVariable\n-\n     def get_colors(var):\n         return var._colors\n \n     def set_colors(var, colors):\n         var._colors = colors\n+        if isinstance(var._colors, np.ndarray):\n+            var._colors.flags.writeable = False\n         var._palette = None\n+        if \"palette\" in var.attributes:\n+            del var.attributes[\"palette\"]\n+\n+    def continuous_set_colors(var, colors):\n+        set_colors(var, colors)\n         var.attributes[\"colors\"] = [\n             color_to_hex(color) if isinstance(color, (Sequence, np.ndarray))\n             else color\n             for color in colors]\n-        if \"palette\" in var.attributes:\n-            del var.attributes[\"palette\"]\n \n     def get_palette(var):\n         return var._palette\n@@ -616,28 +620,46 @@ def patch_variable_colors():\n         return var._palette\n \n     def discrete_get_colors(var):\n-        if var._colors is None or len(var._colors) < len(var.values):\n+        def retrieve_colors():\n             if var._palette is not None or \"palette\" in var.attributes:\n-                var._colors = var.palette.palette[:len(var.values)]\n-            else:\n-                var._colors = np.empty((0, 3), dtype=object)\n+                palette = var.palette.palette\n+                if len(palette) >= nvalues:\n+                    return palette[:nvalues]\n+\n             colors = var.attributes.get(\"colors\")\n-            if colors:\n-                try:\n-                    var._colors = np.vstack(\n-                        ([hex_to_color(color) for color in colors],\n-                         var._colors[len(colors):]))\n+            if isinstance(colors, list) and len(colors) == nvalues:\n+                try:  # catch errors in hex_to_color due to malformed files\n+                    return np.array([hex_to_color(color) for color in colors])\n+                except ValueError:\n+                    pass\n+\n+            palette = LimitedDiscretePalette(nvalues).palette\n+            if isinstance(colors, dict):\n+                try:  # catch errors in hex_to_color due to malformed files\n+                    proposed = [value in colors and hex_to_color(colors[value])\n+                                for value in var.values]\n                 except ValueError:\n                     pass\n-            if len(var._colors) < len(var.values):\n-                var._colors = LimitedDiscretePalette(len(var.values)).palette\n+                else:\n+                    used = set(colors.values())\n+                    available = (color for color in palette\n+                                 if color_to_hex(color) not in used)\n+                    return np.array(\n+                        [color or next(available) for color in proposed])\n+\n+            return palette\n+\n+        nvalues = len(var.values)\n+        if var._colors is None or len(var._colors) != nvalues:\n+            var._colors = retrieve_colors()\n             var._colors.flags.writeable = False\n         return var._colors\n \n     def discrete_set_colors(var, colors):\n-        colors = colors.copy()\n-        colors.flags.writeable = False\n-        set_colors(var, colors)\n+        set_colors(var, np.array(colors))\n+        var.attributes[\"colors\"] = \\\n+            {value: color_to_hex(color)\n+             for value, color in zip(var.values, colors)}\n \n     def discrete_get_palette(var):\n         if var._palette is None:\n@@ -658,5 +680,5 @@ def patch_variable_colors():\n     DiscreteVariable.colors = property(discrete_get_colors, discrete_set_colors)\n     DiscreteVariable.palette = property(discrete_get_palette, set_palette)\n \n-    ContinuousVariable.colors = property(continuous_get_colors, set_colors)\n+    ContinuousVariable.colors = property(continuous_get_colors, continuous_set_colors)\n     ContinuousVariable.palette = property(continuous_get_palette, set_palette)\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_colorpalettes.py b/Orange/widgets/utils/tests/test_colorpalettes.py\nindex 8967d7b1b..fe92a32d8 100644\n--- a/Orange/widgets/utils/tests/test_colorpalettes.py\n+++ b/Orange/widgets/utils/tests/test_colorpalettes.py\n@@ -7,6 +7,7 @@ from AnyQt.QtCore import Qt\n from AnyQt.QtGui import QImage, QColor, QIcon\n \n from orangewidget.tests.base import GuiTest\n+from Orange.util import color_to_hex\n from Orange.data import DiscreteVariable, ContinuousVariable, Variable\n # pylint: disable=wildcard-import,unused-wildcard-import\n from Orange.widgets.utils.colorpalettes import *\n@@ -520,12 +521,16 @@ class PatchedVariableTest(unittest.TestCase):\n         colors = [Mock(), Mock()]\n         palette = Mock()\n         var.colors = colors\n+        # set_color for variable does not set this attribute; derived methods do\n+        var.attributes[\"colors\"] = colors\n         var.palette = palette\n         self.assertIsNone(var.colors)\n         self.assertTrue(\"palette\" in var.attributes)\n         self.assertFalse(\"colors\" in var.attributes)\n \n         var.colors = colors\n+        # set_color for variable does not set this attribute; derived methods do\n+        var.attributes[\"colors\"] = colors\n         self.assertIsNone(var.palette)\n         self.assertTrue(\"colors\" in var.attributes)\n         self.assertFalse(\"palette\" in var.attributes)\n@@ -540,13 +545,19 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n \n         var.colors = np.arange(6).reshape((2, 3))\n         np.testing.assert_almost_equal(var.colors, [[0, 1, 2], [3, 4, 5]])\n-        self.assertEqual(var.attributes[\"colors\"], [\"#000102\", \"#030405\"])\n+        self.assertEqual(var.attributes[\"colors\"],\n+                         {\"F\": \"#000102\", \"M\": \"#030405\"})\n         self.assertFalse(var.colors.flags.writeable)\n         with self.assertRaises(ValueError):\n             var.colors[0] = [42, 41, 40]\n \n         var = DiscreteVariable.make(\"x\", values=(\"A\", \"B\"))\n-        var.attributes[\"colors\"] = ['#0a0b0c', '#0d0e0f']\n+        var.attributes[\"colors\"] = {\"A\": \"#0a0b0c\", \"B\": \"#0d0e0f\"}\n+        np.testing.assert_almost_equal(var.colors, [[10, 11, 12], [13, 14, 15]])\n+\n+        # Backward compatibility with list-like attributes\n+        var = DiscreteVariable.make(\"x\", values=(\"A\", \"B\"))\n+        var.attributes[\"colors\"] = [\"#0a0b0c\", \"#0d0e0f\"]\n         np.testing.assert_almost_equal(var.colors, [[10, 11, 12], [13, 14, 15]])\n \n         # Test ncolors adapts to nvalues\n@@ -557,6 +568,14 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n         var.add_value('k')\n         self.assertEqual(len(var.colors), 4)\n \n+        # Missing colors are retrieved from palette\n+        var = DiscreteVariable.make(\"x\", values=(\"A\", \"B\", \"C\"))\n+        palette = LimitedDiscretePalette(3).palette\n+        var.attributes[\"colors\"] = {\"C\": color_to_hex(palette[0]),\n+                                    \"B\": \"#0D0E0F\"}\n+        np.testing.assert_almost_equal(var.colors,\n+                                       [palette[1], [13, 14, 15], palette[0]])\n+\n     def test_colors_fallback_to_palette(self):\n         var = DiscreteVariable.make(\"a\", values=(\"F\", \"M\"))\n         var.palette = Dark2Colors\n@@ -564,6 +583,8 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n         self.assertEqual(len(colors), 2)\n         for color, palcol in zip(colors, Dark2Colors):\n             np.testing.assert_equal(color, palcol.getRgb()[:3])\n+        # the palette has to stay specified\n+        self.assertEqual(var.attributes[\"palette\"], var.palette.name)\n \n         var = DiscreteVariable.make(\"a\", values=[f\"{i}\" for i in range(40)])\n         var.palette = Dark2Colors\n@@ -571,6 +592,8 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n         self.assertEqual(len(colors), 40)\n         for color, palcol in zip(colors, LimitedDiscretePalette(40)):\n             np.testing.assert_equal(color, palcol.getRgb()[:3])\n+        # the palette has to stay specified\n+        self.assertEqual(var.attributes[\"palette\"], var.palette.name)\n \n     def test_colors_default(self):\n         var = DiscreteVariable.make(\"a\", values=(\"F\", \"M\"))\n@@ -618,6 +641,12 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n         palette = var.palette\n         np.testing.assert_equal(palette.palette, [[10, 11, 12], [13, 14, 15]])\n \n+    def test_ignore_malfformed_atrtibutes(self):\n+        var = DiscreteVariable(\"a\", values=(\"M\", \"F\"))\n+        var.attributes[\"colors\"] = {\"F\": \"foo\", \"M\": \"bar\"}\n+        palette = var.palette\n+        np.testing.assert_equal(palette.palette,\n+                                LimitedDiscretePalette(2).palette)\n \n class PatchedContinuousVariableTest(unittest.TestCase):\n     def test_colors(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4271.0, "instance_id": "biolab__orange3-4271", "issue_numbers": 0, "base_commit": "f0851e498debd436cb004bde52d0f80679052677", "patch": "diff --git a/Orange/widgets/data/owselectcolumns.py b/Orange/widgets/data/owselectcolumns.py\nindex 9e673d257..8b54eaf3e 100644\n--- a/Orange/widgets/data/owselectcolumns.py\n+++ b/Orange/widgets/data/owselectcolumns.py\n@@ -5,7 +5,7 @@ from AnyQt.QtWidgets import QWidget, QGridLayout\n from AnyQt.QtWidgets import QListView\n from AnyQt.QtCore import (\n     Qt, QTimer, QSortFilterProxyModel, QItemSelection, QItemSelectionModel,\n-    QMimeData\n+    QMimeData, QAbstractItemModel\n )\n \n from Orange.widgets import gui, widget\n@@ -411,12 +411,20 @@ class OWSelectAttributes(widget.OWWidget):\n             rows = [model.mapToSource(r) for r in rows]\n         return [r.row() for r in rows]\n \n-    def move_rows(self, view, rows, offset):\n-        model = view.model()\n-        newrows = [min(max(0, row + offset), len(model) - 1) for row in rows]\n+    def move_rows(self, view: QListView, offset: int, roles=(Qt.EditRole,)):\n+        rows = [idx.row() for idx in view.selectionModel().selectedRows()]\n+        model = view.model()  # type: QAbstractItemModel\n+        rowcount = model.rowCount()\n+        newrows = [min(max(0, row + offset), rowcount - 1) for row in rows]\n+\n+        def itemData(index):\n+            return {role: model.data(index, role) for role in roles}\n \n         for row, newrow in sorted(zip(rows, newrows), reverse=offset > 0):\n-            model[row], model[newrow] = model[newrow], model[row]\n+            d1 = itemData(model.index(row, 0))\n+            d2 = itemData(model.index(newrow, 0))\n+            model.setItemData(model.index(row, 0), d2)\n+            model.setItemData(model.index(newrow, 0), d1)\n \n         selection = QItemSelection()\n         for nrow in newrows:\n@@ -427,13 +435,11 @@ class OWSelectAttributes(widget.OWWidget):\n \n         self.commit()\n \n-    def move_up(self, view):\n-        selected = self.selected_rows(view)\n-        self.move_rows(view, selected, -1)\n+    def move_up(self, view: QListView):\n+        self.move_rows(view, -1)\n \n-    def move_down(self, view):\n-        selected = self.selected_rows(view)\n-        self.move_rows(view, selected, 1)\n+    def move_down(self, view: QListView):\n+        self.move_rows(view, 1)\n \n     def move_selected(self, view):\n         if self.selected_rows(view):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectcolumns.py b/Orange/widgets/data/tests/test_owselectcolumns.py\nindex 718678035..d9d6aed27 100644\n--- a/Orange/widgets/data/tests/test_owselectcolumns.py\n+++ b/Orange/widgets/data/tests/test_owselectcolumns.py\n@@ -363,3 +363,26 @@ class TestOWSelectAttributes(WidgetTest):\n         mime.setProperty(\"_items\", variables)\n         return QDragEnterEvent(QPoint(0, 0), Qt.MoveAction, mime,\n                                Qt.NoButton, Qt.NoModifier)\n+\n+    def test_move_rows(self):\n+        data = Table(\"iris\")[:5]\n+        w = self.widget\n+        self.send_signal(w.Inputs.data, data)\n+        view = w.used_attrs_view\n+        model = view.model()\n+        selmodel = view.selectionModel()\n+        midx = model.index(1, 0)\n+        selmodel.select(midx, selmodel.ClearAndSelect)\n+\n+        w.move_up(view)\n+        d1 = self.get_output(w.Outputs.data, w)\n+        self.assertEqual(\n+            d1.domain.attributes,\n+            data.domain.attributes[:2][::-1] + data.domain.attributes[2:]\n+        )\n+        w.move_down(view)\n+        d1 = self.get_output(w.Outputs.data, w)\n+        self.assertEqual(\n+            d1.domain.attributes,\n+            data.domain.attributes\n+        )\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4631.0, "instance_id": "biolab__orange3-4631", "issue_numbers": 0, "base_commit": "3f4c7866c7cadc75625654f155fd6b039c7d853f", "patch": "diff --git a/Orange/widgets/utils/itemmodels.py b/Orange/widgets/utils/itemmodels.py\nindex 9d15f776f..3bae2370c 100644\n--- a/Orange/widgets/utils/itemmodels.py\n+++ b/Orange/widgets/utils/itemmodels.py\n@@ -107,7 +107,9 @@ class PyTableModel(AbstractSortTableModel):\n         self._editable = editable\n         self._table = None\n         self._roleData = {}\n-        self.wrap(sequence or [])\n+        if sequence is None:\n+            sequence = []\n+        self.wrap(sequence)\n \n     def rowCount(self, parent=QModelIndex()):\n         return 0 if parent.isValid() else self._rows\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_itemmodels.py b/Orange/widgets/utils/tests/test_itemmodels.py\nindex b716fe402..7e9b6b6ef 100644\n--- a/Orange/widgets/utils/tests/test_itemmodels.py\n+++ b/Orange/widgets/utils/tests/test_itemmodels.py\n@@ -42,6 +42,14 @@ class TestPyTableModel(unittest.TestCase):\n         self.model = PyTableModel()\n         self.assertEqual(self.model.rowCount(), 0)\n \n+    def test_init_wrap_empty(self):\n+        # pylint: disable=protected-access\n+        t = []\n+        model = PyTableModel(t)\n+        self.assertIs(model._table, t)\n+        t.append([1, 2, 3])\n+        self.assertEqual(list(model), [[1, 2, 3]])\n+\n     def test_rowCount(self):\n         self.assertEqual(self.model.rowCount(), 2)\n         self.assertEqual(len(self.model), 2)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5083.0, "instance_id": "biolab__orange3-5083", "issue_numbers": 0, "base_commit": "6e8801088b0ecaaf63d9317635abb5c4e35dd37c", "patch": "diff --git a/Orange/preprocess/impute.py b/Orange/preprocess/impute.py\nindex ee9e4fc50..d774247f2 100644\n--- a/Orange/preprocess/impute.py\n+++ b/Orange/preprocess/impute.py\n@@ -160,19 +160,20 @@ class ReplaceUnknownsModel(Reprable):\n \n     def __call__(self, data):\n         if isinstance(data, Orange.data.Instance):\n-            column = np.array([float(data[self.variable])])\n-        else:\n-            column = np.array(data.get_column_view(self.variable)[0],\n-                              copy=True)\n+            data = Orange.data.Table.from_list(data.domain, [data])\n+        domain = data.domain\n+        column = np.array(data.get_column_view(self.variable)[0], copy=True)\n \n         mask = np.isnan(column)\n         if not np.any(mask):\n             return column\n \n-        if isinstance(data, Orange.data.Instance):\n-            predicted = self.model(data)\n-        else:\n-            predicted = self.model(data[mask])\n+        if domain.class_vars:\n+            # cannot have class var in domain (due to backmappers in model)\n+            data = data.transform(\n+                Orange.data.Domain(domain.attributes, None, domain.metas)\n+            )\n+        predicted = self.model(data[mask])\n         column[mask] = predicted\n         return column\n \n.", "test_patch": "diff --git a/Orange/tests/test_impute.py b/Orange/tests/test_impute.py\nindex 4dd6ff1d5..3b3ec9be3 100644\n--- a/Orange/tests/test_impute.py\n+++ b/Orange/tests/test_impute.py\n@@ -229,9 +229,12 @@ class TestModel(unittest.TestCase):\n         domain = data.Domain(\n             (data.DiscreteVariable(\"A\", values=(\"0\", \"1\", \"2\")),\n              data.ContinuousVariable(\"B\"),\n-             data.ContinuousVariable(\"C\"))\n+             data.ContinuousVariable(\"C\")),\n+            # the class is here to ensure the backmapper in model does not\n+            # run and raise exception\n+            data.DiscreteVariable(\"Z\", values=(\"P\", \"M\"))\n         )\n-        table = data.Table.from_numpy(domain, np.array(X))\n+        table = data.Table.from_numpy(domain, np.array(X), [0,] * 3)\n \n         v = impute.Model(MajorityLearner())(table, domain[0])\n         self.assertTrue(np.all(np.isfinite(v.compute_value(table))))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4512.0, "instance_id": "biolab__orange3-4512", "issue_numbers": 0, "base_commit": "7b57bbdd74a1aaf0f3875a45e1e33184eaa995ff", "patch": "diff --git a/Orange/widgets/data/owdatasets.py b/Orange/widgets/data/owdatasets.py\nindex 59e7b0232..0d2828c6e 100644\n--- a/Orange/widgets/data/owdatasets.py\n+++ b/Orange/widgets/data/owdatasets.py\n@@ -28,6 +28,7 @@ from Orange.misc.environ import data_dir\n from Orange.widgets import settings, gui\n from Orange.widgets.utils.signals import Output\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import OWWidget, Msg\n \n \n@@ -232,6 +233,8 @@ class OWDataSets(OWWidget):\n         self.splitter.addWidget(self.view)\n         self.splitter.addWidget(box)\n \n+        self.info.set_output_summary(self.info.NoOutput)\n+\n         self.splitter.setSizes([300, 200])\n         self.splitter.splitterMoved.connect(\n             lambda:\n@@ -535,9 +538,12 @@ class OWDataSets(OWWidget):\n     def load_and_output(self, path):\n         if path is None:\n             self.Outputs.data.send(None)\n+            self.info.set_output_summary(self.info.NoOutput)\n         else:\n             data = self.load_data(path)\n             self.Outputs.data.send(data)\n+            self.info.set_output_summary(len(data),\n+                                         format_summary_details(data))\n \n         self.current_output = path\n         self.__update_cached_state()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasets.py b/Orange/widgets/data/tests/test_owdatasets.py\nindex 1c004ce81..c485b17d9 100644\n--- a/Orange/widgets/data/tests/test_owdatasets.py\n+++ b/Orange/widgets/data/tests/test_owdatasets.py\n@@ -7,6 +7,7 @@ from AnyQt.QtCore import QItemSelectionModel\n \n from Orange.widgets.data.owdatasets import OWDataSets\n from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWDataSets(WidgetTest):\n@@ -75,6 +76,24 @@ class TestOWDataSets(WidgetTest):\n         self.wait_until_stop_blocking(w)\n         self.assertEqual(w.view.model().rowCount(), 2)\n \n+    @patch(\"Orange.widgets.data.owdatasets.OWDataSets.list_remote\",\n+           Mock(return_value={('core', 'iris.tab'): {}}))\n+    @patch(\"Orange.widgets.data.owdatasets.OWDataSets.list_local\",\n+           Mock(return_value={}))\n+    @patch(\"Orange.widgets.data.owdatasets.ensure_local\",\n+           Mock(return_value=\"iris.tab\"))\n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        widget = self.create_widget(OWDataSets)\n+        output_sum = widget.info.set_output_summary = Mock()\n+        self.wait_until_stop_blocking(widget)\n+        # select the only dataset\n+        sel_type = QItemSelectionModel.ClearAndSelect | QItemSelectionModel.Rows\n+        widget.view.selectionModel().select(widget.view.model().index(0, 0), sel_type)\n+        widget.commit()\n+        output = self.get_output(widget.Outputs.data, widget)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6670.0, "instance_id": "biolab__orange3-6670", "issue_numbers": 0, "base_commit": "ef3465d1f04bfdb9ed167d00d1a663e00fd9b2d3", "patch": "diff --git a/Orange/data/io_base.py b/Orange/data/io_base.py\nindex 521454f3e..914d1d337 100644\n--- a/Orange/data/io_base.py\n+++ b/Orange/data/io_base.py\n@@ -15,6 +15,7 @@ from fnmatch import fnmatch\n from glob import glob\n \n import numpy as np\n+import pandas\n \n from Orange.data import Table, Domain, Variable, DiscreteVariable, \\\n     StringVariable, ContinuousVariable, TimeVariable\n@@ -665,7 +666,7 @@ class _FileWriter:\n         elif var.is_discrete:\n             return lambda value: \"\" if isnan(value) else var.values[int(value)]\n         elif var.is_string:\n-            return lambda value: value\n+            return lambda value: \"\" if pandas.isnull(value) else value\n         else:\n             return var.repr_val\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_io.py b/Orange/data/tests/test_io.py\nindex 061d97661..01187f26b 100644\n--- a/Orange/data/tests/test_io.py\n+++ b/Orange/data/tests/test_io.py\n@@ -122,7 +122,7 @@ class TestWriters(unittest.TestCase):\n             self.domain,\n             np.array([[1, 0.5], [2, np.nan], [np.nan, 1.0625]]),\n             np.array([3, 1, 7]),\n-            np.array([\"foo bar baz\".split()]).T\n+            np.array([[\"foo\", \"bar\", np.nan]], dtype=object).T\n         )\n \n     def test_write_tab(self):\n@@ -137,7 +137,7 @@ continuous\\tstring\\tx y z\\tcontinuous\n class\\tmeta\\t\\t\n 3\\tfoo\\ty\\t0.500\n 1\\tbar\\tz\\t\n-7\\tbaz\\t\\t1.06250\"\"\".strip())\n+7\\t\\t\\t1.06250\"\"\".strip())\n         finally:\n             os.remove(fname)\n \n@@ -149,7 +149,8 @@ class\\tmeta\\t\\t\n             data = ExcelReader(fname).read()\n             np.testing.assert_equal(data.X, self.data.X)\n             np.testing.assert_equal(data.Y, self.data.Y)\n-            np.testing.assert_equal(data.metas, self.data.metas)\n+            np.testing.assert_equal(data.metas[:2], self.data.metas[:2])\n+            self.assertEqual(data.metas[2, 0], \"\")\n             np.testing.assert_equal(data.domain, self.data.domain)\n         finally:\n             os.remove(fname)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4530.0, "instance_id": "biolab__orange3-4530", "issue_numbers": 0, "base_commit": "dc2ea482fd894e090f5a98d601022a5e94dd44d7", "patch": "diff --git a/Orange/widgets/utils/graphicslayoutitem.py b/Orange/widgets/utils/graphicslayoutitem.py\nindex 0639925ea..2830acaf3 100644\n--- a/Orange/widgets/utils/graphicslayoutitem.py\n+++ b/Orange/widgets/utils/graphicslayoutitem.py\n@@ -142,6 +142,8 @@ def scaled(size: QSizeF, constraint: QSizeF, mode=Qt.KeepAspectRatio) -> QSizeF:\n     ie. the result is not constrained in that dimension.\n     \"\"\"\n     size, constraint = QSizeF(size), QSizeF(constraint)\n+    if size.isEmpty():\n+        return size\n     if constraint.width() < 0 and constraint.height() < 0:\n         return size\n     if mode == Qt.IgnoreAspectRatio:\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_graphicstextlist.py b/Orange/widgets/utils/tests/test_graphicstextlist.py\nindex e57bb5aa7..903e410d1 100644\n--- a/Orange/widgets/utils/tests/test_graphicstextlist.py\n+++ b/Orange/widgets/utils/tests/test_graphicstextlist.py\n@@ -85,3 +85,7 @@ class TestUtils(unittest.TestCase):\n                 s, expected,\n                 f\"scaled({size}, {const}, Qt.KeepAspectRatioByExpanding)\"\n             )\n+\n+        self.assertEqual(\n+            scaled(QSizeF(0, 0), QSizeF(100, 100)), QSizeF(0, 0)\n+        )\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4806.0, "instance_id": "biolab__orange3-4806", "issue_numbers": 0, "base_commit": "c9cc09086550fcaa75ff26885407ded521a33d32", "patch": "diff --git a/Orange/widgets/data/owcontinuize.py b/Orange/widgets/data/owcontinuize.py\nindex fa25ff4b4..484ffde94 100644\n--- a/Orange/widgets/data/owcontinuize.py\n+++ b/Orange/widgets/data/owcontinuize.py\n@@ -206,7 +206,7 @@ def one_hot_coding(var):\n \n def continuize_domain(data,\n                       multinomial_treatment=Continuize.Indicators,\n-                      continuous_treatment=Continuize.Leave,\n+                      continuous_treatment=OWContinuize.Normalize.Leave,\n                       class_treatment=Continuize.Leave):\n     domain = data.domain\n     def needs_dist(var, mtreat, ctreat):\n@@ -214,7 +214,7 @@ def continuize_domain(data,\n         if var.is_discrete:\n             return mtreat == Continuize.FrequentAsBase\n         elif var.is_continuous:\n-            return ctreat != Continuize.Leave\n+            return ctreat != OWContinuize.Normalize.Leave\n         else:\n             raise ValueError\n \n@@ -222,7 +222,7 @@ def continuize_domain(data,\n     attr_needs_dist = [needs_dist(var, multinomial_treatment,\n                                   continuous_treatment)\n                        for var in domain.attributes]\n-    cls_needs_dist = [needs_dist(var, class_treatment, Continuize.Leave)\n+    cls_needs_dist = [needs_dist(var, class_treatment, OWContinuize.Normalize.Leave)\n                       for var in domain.class_vars]\n \n     columns = [i for i, needs in enumerate(attr_needs_dist + cls_needs_dist)\n@@ -242,7 +242,7 @@ def continuize_domain(data,\n                 for var, needs_dist in zip(domain.attributes, attr_needs_dist)]\n     newclass = [continuize_var(var,\n                                next(dist_iter) if needs_dist else None,\n-                               class_treatment, Continuize.Remove)\n+                               class_treatment, OWContinuize.Normalize.Leave)\n                 for var, needs_dist in zip(domain.class_vars, cls_needs_dist)]\n \n     newattrs = reduce(list.__iadd__, newattrs, [])\n@@ -253,13 +253,13 @@ def continuize_domain(data,\n def continuize_var(var,\n                    data_or_dist=None,\n                    multinomial_treatment=Continuize.Indicators,\n-                   continuous_treatment=Continuize.Leave):\n+                   continuous_treatment=OWContinuize.Normalize.Leave):\n     def continuize_continuous():\n-        dist = _ensure_dist(var, data_or_dist)\n+        dist = _ensure_dist(var, data_or_dist) if continuous_treatment != OWContinuize.Normalize.Leave else None\n         treatments = [lambda var, _: var,\n                       normalize_by_sd, center_to_mean, divide_by_sd,\n                       normalize_to_11, normalize_to_01]\n-        if dist.shape[1] == 0:\n+        if dist is not None and dist.shape[1] == 0:\n             return [var]\n         new_var = treatments[continuous_treatment](var, dist)\n         return [new_var]\n@@ -365,7 +365,7 @@ def normalize_by_span(var, dist, zero_based=True):\n class DomainContinuizer(Reprable):\n     def __init__(self,\n                  multinomial_treatment=Continuize.Indicators,\n-                 continuous_treatment=Continuize.Leave,\n+                 continuous_treatment=OWContinuize.Normalize.Leave,\n                  class_treatment=Continuize.Leave):\n         self.multinomial_treatment = multinomial_treatment\n         self.continuous_treatment = continuous_treatment\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcontinuize.py b/Orange/widgets/data/tests/test_owcontinuize.py\nindex 7ff7292b0..36dface19 100644\n--- a/Orange/widgets/data/tests/test_owcontinuize.py\n+++ b/Orange/widgets/data/tests/test_owcontinuize.py\n@@ -62,6 +62,11 @@ class TestOWContinuize(WidgetTest):\n         output_sum.assert_called_once()\n         self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n \n+    def test_continuous(self):\n+        table = Table(\"housing\")\n+        self.send_signal(self.widget.Inputs.data, table)\n+        self.widget.unconditional_commit()\n+\n     def test_one_column_equal_values(self):\n         \"\"\"\n         No crash on a column with equal values and with selected option\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4270.0, "instance_id": "biolab__orange3-4270", "issue_numbers": 0, "base_commit": "79fe1be6b1bb2a5a813b47c46dcc3b151152ca4e", "patch": "diff --git a/Orange/widgets/data/owsql.py b/Orange/widgets/data/owsql.py\nindex a91e2901e..0fbc7c677 100644\n--- a/Orange/widgets/data/owsql.py\n+++ b/Orange/widgets/data/owsql.py\n@@ -50,6 +50,7 @@ class OWSql(OWBaseSql):\n \n     settings_version = 2\n \n+    selected_backend = Setting(None)\n     table = Setting(None)\n     sql = Setting(\"\")\n     guess_values = Setting(True)\n@@ -89,11 +90,19 @@ class OWSql(OWBaseSql):\n         self.backendcombo = QComboBox(box)\n         if self.backends:\n             self.backendcombo.setModel(self.backends)\n+            names = [backend.display_name for backend in self.backends]\n+            if self.selected_backend and self.selected_backend in names:\n+                self.backendcombo.setCurrentText(self.selected_backend)\n         else:\n             self.Error.no_backends()\n             box.setEnabled(False)\n+        self.backendcombo.currentTextChanged.connect(self.__backend_changed)\n         box.layout().insertWidget(0, self.backendcombo)\n \n+    def __backend_changed(self):\n+        backend = self.get_backend()\n+        self.selected_backend = backend.display_name if backend else None\n+\n     def _add_tables_controls(self):\n         vbox = gui.vBox(self.controlArea, \"Tables\", addSpace=True)\n         box = gui.vBox(vbox)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owsql.py b/Orange/widgets/data/tests/test_owsql.py\nindex 7d5586f0c..f9a133449 100644\n--- a/Orange/widgets/data/tests/test_owsql.py\n+++ b/Orange/widgets/data/tests/test_owsql.py\n@@ -6,7 +6,7 @@ from unittest import mock\n \n from Orange.data import Table\n from Orange.widgets.data.owsql import OWSql\n-from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.tests.base import WidgetTest, simulate\n from Orange.tests.sql.base import DataBaseTest as dbt\n \n \n@@ -116,6 +116,33 @@ class TestOWSql(WidgetTest):\n         widget = self.create_widget(OWSql, stored_settings=settings)\n         self.assertEqual(widget.tablecombo.currentText(), \"b\")\n \n+    @mock.patch(\"Orange.data.sql.backend.base.Backend.available_backends\")\n+    def test_selected_backend(self, mocked_backends: mock.Mock):\n+        b1, b2 = mock.Mock(), mock.Mock()\n+        b1.display_name = \"B1\"\n+        b2.display_name = \"B2\"\n+        mocked_backends.return_value = [b1, b2]\n+\n+        widget = self.create_widget(OWSql)\n+        self.assertEqual(widget.backendcombo.currentText(), \"B1\")\n+\n+        simulate.combobox_activate_index(widget.backendcombo, 1)\n+        self.assertEqual(widget.backendcombo.currentText(), \"B2\")\n+\n+        settings = widget.settingsHandler.pack_data(widget)\n+        widget = self.create_widget(OWSql, stored_settings=settings)\n+        self.assertEqual(widget.backendcombo.currentText(), \"B2\")\n+\n+        settings = widget.settingsHandler.pack_data(widget)\n+        settings[\"selected_backend\"] = \"B3\"\n+        widget = self.create_widget(OWSql, stored_settings=settings)\n+        self.assertEqual(widget.backendcombo.currentText(), \"B1\")\n+\n+        mocked_backends.return_value = []\n+        settings = widget.settingsHandler.pack_data(widget)\n+        widget = self.create_widget(OWSql, stored_settings=settings)\n+        self.assertEqual(widget.backendcombo.currentText(), \"\")\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4331.0, "instance_id": "biolab__orange3-4331", "issue_numbers": 0, "base_commit": "5a7d3d3d1abb3eb2d825311a02f1440bd031b550", "patch": "diff --git a/Orange/widgets/data/owdiscretize.py b/Orange/widgets/data/owdiscretize.py\nindex c4b880e35..edfe15ecb 100644\n--- a/Orange/widgets/data/owdiscretize.py\n+++ b/Orange/widgets/data/owdiscretize.py\n@@ -245,6 +245,9 @@ class OWDiscretize(widget.OWWidget):\n \n         self._update_spin_positions()\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n \n     @Inputs.data\n     def set_data(self, data):\n@@ -257,7 +260,9 @@ class OWDiscretize(widget.OWWidget):\n             self._restore(self.saved_var_states)\n             # Complete the induction of cut points\n             self._update_points()\n+            self.info.set_input_summary(len(data))\n         else:\n+            self.info.set_input_summary(self.info.NoInput)\n             self._clear()\n         self.unconditional_commit()\n \n@@ -478,6 +483,9 @@ class OWDiscretize(widget.OWWidget):\n         if self.data is not None and len(self.data):\n             domain = self.discretized_domain()\n             output = self.data.transform(domain)\n+            self.info.set_output_summary(len(output))\n+        else:\n+            self.info.set_output_summary(self.info.NoOutput)\n         self.Outputs.data.send(output)\n \n     def storeSpecificSettings(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdiscretize.py b/Orange/widgets/data/tests/test_owdiscretize.py\nindex 6c5d70ee3..2a148c394 100644\n--- a/Orange/widgets/data/tests/test_owdiscretize.py\n+++ b/Orange/widgets/data/tests/test_owdiscretize.py\n@@ -1,8 +1,11 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n+# pylint: disable=missing-docstring,unsubscriptable-object\n+from unittest.mock import Mock\n+\n from Orange.data import Table\n from Orange.widgets.data.owdiscretize import OWDiscretize\n from Orange.widgets.tests.base import WidgetTest\n+from orangewidget.widget import StateInfo\n \n \n class TestOWDiscretize(WidgetTest):\n@@ -17,3 +20,22 @@ class TestOWDiscretize(WidgetTest):\n         self.send_signal(self.widget.Inputs.data,\n                          Table.from_domain(data.domain))\n         widget.unconditional_commit()\n+\n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        data = Table(\"iris\")\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4843.0, "instance_id": "biolab__orange3-4843", "issue_numbers": 0, "base_commit": "3a2788100933079de28d71fa0eb47a69244bb2ca", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 874556de9..1f98df4c7 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -347,34 +347,26 @@ class Variable(Reprable, metaclass=VariableMeta):\n         return var\n \n     def __eq__(self, other):\n-        # pylint: disable=protected-access,import-outside-toplevel\n-\n-        def to_match(var):\n-            if var._compute_value is None:\n-                return var\n-            elif isinstance(var._compute_value, Identity):\n-                return var._compute_value.variable\n-            return None\n+        if type(self) is not type(other):\n+            return False\n \n-        from Orange.preprocess.transformation import Identity\n-        return type(self) is type(other) and (\n-            self.name == other.name\n-            and self._compute_value == other._compute_value\n-            or\n-            (self.compute_value or other.compute_value)\n-            and to_match(self) == to_match(other) != None)\n+        var1 = self._get_identical_source(self)\n+        var2 = self._get_identical_source(other)\n+        # pylint: disable=protected-access\n+        return var1.name == var2.name \\\n+               and var1._compute_value == var2._compute_value\n \n     def __hash__(self):\n-        # Two variables that are not equal can have the same hash.\n-        # This happens if one has compute_value == Identity and the other\n-        # doesn't have compute_value, or they have a different Identity.\n-        # Having the same hash while not being equal is of course allowed.\n-        # pylint: disable=import-outside-toplevel\n+        var = self._get_identical_source(self)\n+        return hash((var.name, type(self), var._compute_value))\n+\n+    @staticmethod\n+    def _get_identical_source(var):\n+        # pylint: disable=protected-access,import-outside-toplevel\n         from Orange.preprocess.transformation import Identity\n-        compute_value = self._compute_value\n-        if isinstance(self._compute_value, Identity):\n-            compute_value = None\n-        return hash((self.name, type(self), compute_value))\n+        while isinstance(var._compute_value, Identity):\n+            var = var._compute_value.variable\n+        return var\n \n     @classmethod\n     def make(cls, name, *args, **kwargs):\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex 2afa27e74..489f3283b 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -163,6 +163,7 @@ class TestVariable(unittest.TestCase):\n         a._compute_value = Identity(a1)\n         self.assertEqual(a, a)\n         self.assertEqual(a, b)\n+        self.assertEqual(hash(a), hash(b))\n \n         b._compute_value = a.compute_value\n         self.assertEqual(a, b)\n@@ -206,6 +207,27 @@ class TestVariable(unittest.TestCase):\n         b._compute_value = Identity(a2)\n         self.assertEqual(hash(a), hash(b))\n \n+        at = TimeVariable(\"a\")\n+        b = ContinuousVariable(\"b\")\n+        self.assertEqual(hash(a1), hash(a2))\n+        self.assertNotEqual(hash(a1), hash(b))\n+        self.assertNotEqual(hash(a1), hash(at))\n+\n+    def test_hash_eq(self):\n+        a = ContinuousVariable(\"a\")\n+        b1 = ContinuousVariable(\"b\", compute_value=Identity(a))\n+        b2 = ContinuousVariable(\"b2\", compute_value=Identity(b1))\n+        b3 = ContinuousVariable(\"b\")\n+        self.assertEqual(a, b2)\n+        self.assertEqual(b1, b2)\n+        self.assertEqual(a, b1)\n+        self.assertNotEqual(b1, b3)\n+\n+        self.assertEqual(hash(a), hash(b2))\n+        self.assertEqual(hash(b1), hash(b2))\n+        self.assertEqual(hash(a), hash(b1))\n+        self.assertNotEqual(hash(b1), hash(b3))\n+\n \n def variabletest(varcls):\n     def decorate(cls):\n@@ -252,7 +274,6 @@ class TestDiscreteVariable(VariableTest):\n         self.assertEqual(var.val_from_str_add(\"F\"), 0)\n         self.assertEqual(var.val_from_str_add(\"N\"), 2)\n \n-\n     def test_repr(self):\n         var = DiscreteVariable.make(\"a\", values=(\"F\", \"M\"))\n         self.assertEqual(\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4011.0, "instance_id": "biolab__orange3-4011", "issue_numbers": 0, "base_commit": "805166252e6d22fd5dd5df15e8e328661be26071", "patch": "diff --git a/Orange/widgets/visualize/utils/__init__.py b/Orange/widgets/visualize/utils/__init__.py\nindex d053cf318..248839290 100644\n--- a/Orange/widgets/visualize/utils/__init__.py\n+++ b/Orange/widgets/visualize/utils/__init__.py\n@@ -7,6 +7,7 @@ from operator import attrgetter\n from queue import Queue, Empty\n from types import SimpleNamespace as namespace\n from typing import Optional, Iterable, List, Callable\n+from threading import Timer\n \n from AnyQt.QtCore import Qt, QSize, pyqtSignal as Signal, QSortFilterProxyModel\n from AnyQt.QtGui import QStandardItemModel, QStandardItem, QColor, QBrush, QPen\n@@ -393,6 +394,7 @@ def run_vizrank(compute_score: Callable, iterate_states: Callable,\n     task.set_status(\"Getting scores...\")\n     res = Result(queue=Queue(), scores=None)\n     scores = scores.copy()\n+    can_set_partial_result = True\n \n     def do_work(st, next_st):\n         try:\n@@ -405,7 +407,10 @@ def run_vizrank(compute_score: Callable, iterate_states: Callable,\n         except Exception:  # ignore current state in case of any problem\n             pass\n         res.scores = scores.copy()\n-        task.set_partial_result(res)\n+\n+    def reset_flag():\n+        nonlocal can_set_partial_result\n+        can_set_partial_result = True\n \n     state = None\n     next_state = next(states)\n@@ -418,8 +423,18 @@ def run_vizrank(compute_score: Callable, iterate_states: Callable,\n             state = copy.copy(next_state)\n             next_state = copy.copy(next(states))\n             do_work(state, next_state)\n+            # for simple scores (e.g. correlations widget) and many feature\n+            # combinations, the 'partial_result_ready' signal (emitted by\n+            # invoking 'task.set_partial_result') was emitted too frequently\n+            # for a longer period of time and therefore causing the widget\n+            # being unresponsive\n+            if can_set_partial_result:\n+                task.set_partial_result(res)\n+                can_set_partial_result = False\n+                Timer(0.01, reset_flag).start()\n     except StopIteration:\n         do_work(state, None)\n+        task.set_partial_result(res)\n     return res\n \n \n \n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_vizrankdialog.py b/Orange/widgets/visualize/tests/test_vizrankdialog.py\nindex fb3f11f98..343bb6e41 100644\n--- a/Orange/widgets/visualize/tests/test_vizrankdialog.py\n+++ b/Orange/widgets/visualize/tests/test_vizrankdialog.py\n@@ -41,7 +41,7 @@ class TestRunner(unittest.TestCase):\n         res_scores = sorted([compute_score(x) for x in states])\n         self.assertListEqual(res.scores, res_scores)\n         self.assertIsNot(scores, res.scores)\n-        self.assertEqual(task.set_partial_result.call_count, 6)\n+        self.assertEqual(task.set_partial_result.call_count, 2)\n         self.assertEqual(task.set_progress_value.call_count, 7)\n \n     def test_run_vizrank_interrupt(self):\n@@ -59,7 +59,7 @@ class TestRunner(unittest.TestCase):\n         res_scores = sorted([compute_score(x) for x in states[:2]])\n         self.assertListEqual(res.scores, res_scores)\n         self.assertIsNot(scores, res.scores)\n-        self.assertEqual(task.set_partial_result.call_count, 2)\n+        self.assertEqual(task.set_partial_result.call_count, 1)\n         self.assertEqual(task.set_progress_value.call_count, 3)\n         task.set_progress_value.assert_called_with(int(1 / 6 * 100))\n \n@@ -76,7 +76,7 @@ class TestRunner(unittest.TestCase):\n         res_scores = sorted([compute_score(x) for x in states])\n         self.assertListEqual(res.scores, res_scores)\n         self.assertIsNot(scores, res.scores)\n-        self.assertEqual(task.set_partial_result.call_count, 6)\n+        self.assertEqual(task.set_partial_result.call_count, 3)\n         self.assertEqual(task.set_progress_value.call_count, 8)\n         task.set_progress_value.assert_called_with(int(5 / 6 * 100))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4333.0, "instance_id": "biolab__orange3-4333", "issue_numbers": 0, "base_commit": "2bcef21f05c5b9e913ddeca0d0f076d1ab53f754", "patch": "diff --git a/Orange/widgets/data/owpreprocess.py b/Orange/widgets/data/owpreprocess.py\nindex bf776df70..238be791e 100644\n--- a/Orange/widgets/data/owpreprocess.py\n+++ b/Orange/widgets/data/owpreprocess.py\n@@ -1144,6 +1144,9 @@ class OWPreprocess(widget.OWWidget):\n         box = gui.vBox(self.controlArea, \"Output\")\n         gui.auto_send(box, self, \"autocommit\", box=False)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n         self._initialize()\n \n     def _initialize(self):\n@@ -1261,6 +1264,10 @@ class OWPreprocess(widget.OWWidget):\n     def set_data(self, data=None):\n         \"\"\"Set the input dataset.\"\"\"\n         self.data = data\n+        if data is not None:\n+            self.info.set_input_summary(len(data))\n+        else:\n+            self.info.set_input_summary(self.info.NoInput)\n \n     def handleNewSignals(self):\n         self.apply()\n@@ -1304,8 +1311,10 @@ class OWPreprocess(widget.OWWidget):\n             except (ValueError, ZeroDivisionError) as e:\n                 self.error(str(e))\n                 return\n+            self.info.set_output_summary(len(data))\n         else:\n             data = None\n+            self.info.set_output_summary(self.info.NoOutput)\n \n         self.Outputs.preprocessor.send(preprocessor)\n         self.Outputs.preprocessed_data.send(data)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpreprocess.py b/Orange/widgets/data/tests/test_owpreprocess.py\nindex 61a3a6e2f..873403cf4 100644\n--- a/Orange/widgets/data/tests/test_owpreprocess.py\n+++ b/Orange/widgets/data/tests/test_owpreprocess.py\n@@ -1,5 +1,6 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n+# pylint: disable=missing-docstring,unsubscriptable-object\n+from unittest.mock import Mock\n import numpy as np\n \n from Orange.data import Table\n@@ -12,6 +13,7 @@ from Orange.widgets.data import owpreprocess\n from Orange.widgets.data.owpreprocess import OWPreprocess, \\\n     UnivariateFeatureSelect, Scale as ScaleEditor\n from Orange.widgets.tests.base import WidgetTest, datasets\n+from orangewidget.widget import StateInfo\n \n \n class TestOWPreprocess(WidgetTest):\n@@ -138,6 +140,25 @@ class TestOWPreprocess(WidgetTest):\n         self.widget.set_model(model)\n         self.send_signal(self.widget.Inputs.data, table)\n \n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        data = Table(\"iris\")\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        output = self.get_output(self.widget.Outputs.preprocessed_data)\n+        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n \n # Test for editors\n class TestDiscretizeEditor(WidgetTest):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4803.0, "instance_id": "biolab__orange3-4803", "issue_numbers": 0, "base_commit": "aa58911be19d1047643947d11d0a4771e0e7eab2", "patch": "diff --git a/Orange/widgets/utils/colorpalettes.py b/Orange/widgets/utils/colorpalettes.py\nindex e13518bab..359394d20 100644\n--- a/Orange/widgets/utils/colorpalettes.py\n+++ b/Orange/widgets/utils/colorpalettes.py\n@@ -176,11 +176,15 @@ class LimitedDiscretePalette(DiscretePalette):\n                 \"use 'force_glasbey' instead\", DeprecationWarning)\n         if force_glasbey or force_hsv \\\n                 or number_of_colors > len(DefaultRGBColors):\n-            palette = Glasbey\n+            colors = Glasbey.palette[:number_of_colors]\n+            if number_of_colors > len(colors):\n+                colors = np.vstack(\n+                    (colors, ) * (number_of_colors // len(colors))\n+                    + (colors[:number_of_colors % len(colors)], ))\n         else:\n-            palette = DefaultRGBColors\n+            colors = DefaultRGBColors.palette[:number_of_colors]\n         super().__init__(\"custom\", \"custom\",\n-                         palette.palette[:number_of_colors], nan_color,\n+                         colors, nan_color,\n                          category=category, flags=flags)\n \n \n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_colorpalettes.py b/Orange/widgets/utils/tests/test_colorpalettes.py\nindex 82648695d..e6bb960b4 100644\n--- a/Orange/widgets/utils/tests/test_colorpalettes.py\n+++ b/Orange/widgets/utils/tests/test_colorpalettes.py\n@@ -159,6 +159,27 @@ class LimitedDiscretePaletteTest(unittest.TestCase):\n         palette = LimitedDiscretePalette(100)\n         np.testing.assert_equal(palette.palette, Glasbey.palette[:100])\n \n+    def test_large_palettes(self):\n+        palette = LimitedDiscretePalette(257)\n+        qcolors = palette.qcolors\n+        qcolors_w_nan = palette.qcolors_w_nan\n+        c256 = qcolors[256].getRgb()\n+\n+        self.assertEqual(len(palette), 257)\n+        self.assertEqual(len(palette.palette), 257)\n+        self.assertEqual(len(qcolors), 257)\n+        self.assertEqual(len(qcolors_w_nan), 258)\n+        self.assertEqual([c.getRgb() for c in qcolors],\n+                         [c.getRgb() for c in qcolors_w_nan[:-1]])\n+        self.assertEqual(palette[256].getRgb(), c256)\n+        np.testing.assert_equal(palette.value_to_color(256), c256[:3])\n+        self.assertEqual(palette.value_to_qcolor(256).getRgb(), c256)\n+        np.testing.assert_equal(palette.values_to_colors([256])[0], c256[:3])\n+        self.assertEqual(palette.values_to_qcolors([256])[0].getRgb(), c256)\n+\n+        for size in range(1020, 1030):\n+            self.assertEqual(len(LimitedDiscretePalette(size)), size)\n+\n     @staticmethod\n     def test_forced_glasbey_palettes():\n         palette = LimitedDiscretePalette(5, force_glasbey=True)\n@@ -598,6 +619,10 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n         np.testing.assert_almost_equal(var.colors,\n                                        [palette[1], [13, 14, 15], palette[0]])\n \n+        # Variable with many values\n+        var = DiscreteVariable(\"x\", values=tuple(f\"v{i}\" for i in range(1020)))\n+        self.assertEqual(len(var.colors), 1020)\n+\n     def test_colors_fallback_to_palette(self):\n         var = DiscreteVariable.make(\"a\", values=(\"F\", \"M\"))\n         var.palette = Dark2Colors\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4327.0, "instance_id": "biolab__orange3-4327", "issue_numbers": 0, "base_commit": "2cb861f7a163f399ed29997015416006c6153158", "patch": "diff --git a/Orange/widgets/data/owcontinuize.py b/Orange/widgets/data/owcontinuize.py\nindex c054daab2..3c52148af 100644\n--- a/Orange/widgets/data/owcontinuize.py\n+++ b/Orange/widgets/data/owcontinuize.py\n@@ -97,6 +97,8 @@ class OWContinuize(widget.OWWidget):\n         gui.auto_apply(self.buttonsArea, self, \"autosend\", box=False)\n \n         self.data = None\n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n \n     def settings_changed(self):\n         self.commit()\n@@ -106,8 +108,11 @@ class OWContinuize(widget.OWWidget):\n     def setData(self, data):\n         self.data = data\n         if data is None:\n+            self.info.set_input_summary(self.info.NoInput)\n+            self.info.set_output_summary(self.info.NoOutput)\n             self.Outputs.data.send(None)\n         else:\n+            self.info.set_input_summary(len(data))\n             self.unconditional_commit()\n \n     def constructContinuizer(self):\n@@ -133,9 +138,11 @@ class OWContinuize(widget.OWWidget):\n             domain = continuizer(self.data)\n             data = self.data.transform(domain)\n             self.Outputs.data.send(data)\n+            self.info.set_output_summary(len(data))\n         else:\n             self.Outputs.data.send(self.data)  # None or empty data\n \n+\n     def send_report(self):\n         self.report_items(\n             \"Settings\",\n@@ -391,4 +398,4 @@ class DomainContinuizer(Reprable):\n \n \n if __name__ == \"__main__\":  # pragma: no cover\n-    WidgetPreview(OWContinuize).run(Table(\"lenses\"))\n+    WidgetPreview(OWContinuize).run(Table(\"iris\"))\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcontinuize.py b/Orange/widgets/data/tests/test_owcontinuize.py\nindex ccac541d8..b7cb8a929 100644\n--- a/Orange/widgets/data/tests/test_owcontinuize.py\n+++ b/Orange/widgets/data/tests/test_owcontinuize.py\n@@ -1,6 +1,7 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n+# pylint: disable=missing-docstring,unsubscriptable-object\n import unittest\n+from unittest.mock import Mock\n \n import numpy as np\n \n@@ -9,6 +10,7 @@ from Orange.preprocess import transformation\n from Orange.widgets.data import owcontinuize\n from Orange.widgets.data.owcontinuize import OWContinuize\n from Orange.widgets.tests.base import WidgetTest\n+from orangewidget.widget import StateInfo\n \n \n class TestOWContinuize(WidgetTest):\n@@ -39,6 +41,25 @@ class TestOWContinuize(WidgetTest):\n         imp_data = self.get_output(self.widget.Outputs.data)\n         self.assertIsNone(imp_data)\n \n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        data = Table(\"iris\")\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n     def test_one_column_equal_values(self):\n         \"\"\"\n         No crash on a column with equal values and with selected option\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4078.0, "instance_id": "biolab__orange3-4078", "issue_numbers": 0, "base_commit": "6baf428cd7e82177ca9ebb48609669b4b5383f7a", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex 505f792b3..355922765 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -1208,7 +1208,15 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n         cont_color = self.master.is_continuous_color()\n         shape_labels = self.master.get_shape_labels()\n         color_labels = self.master.get_color_labels()\n-        if shape_labels == color_labels and shape_labels is not None:\n+        if not cont_color and shape_labels is not None \\\n+                and shape_labels == color_labels:\n+            colors = self.master.get_color_data()\n+            shapes = self.master.get_shape_data()\n+            mask = np.isfinite(colors) * np.isfinite(shapes)\n+            combined = (colors == shapes)[mask].all()\n+        else:\n+            combined = False\n+        if combined:\n             self._update_combined_legend(shape_labels)\n         else:\n             self._update_shape_legend(shape_labels)\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplotbase.py b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\nindex ed1b780a8..080f83a71 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n@@ -1105,6 +1105,10 @@ class TestOWScatterPlotBase(WidgetTest):\n     def test_legend_combine(self):\n         master = self.master\n         graph = self.graph\n+\n+        master.get_shape_data = lambda: np.arange(10, dtype=float) % 3\n+        master.get_color_data = lambda: 2 * np.arange(10, dtype=float) % 3\n+\n         graph.reset_graph()\n \n         shape_legend = self.graph.shape_legend.setVisible = Mock()\n@@ -1119,6 +1123,12 @@ class TestOWScatterPlotBase(WidgetTest):\n         master.get_color_labels = lambda: [\"a\", \"b\"]\n         graph.update_legends()\n         self.assertTrue(shape_legend.call_args[0][0])\n+        self.assertTrue(color_legend.call_args[0][0])\n+        self.assertEqual(len(graph.shape_legend.items), 2)\n+\n+        master.get_color_data = lambda: np.arange(10, dtype=float) % 3\n+        graph.update_legends()\n+        self.assertTrue(shape_legend.call_args[0][0])\n         self.assertFalse(color_legend.call_args[0][0])\n         self.assertEqual(len(graph.shape_legend.items), 2)\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5147.0, "instance_id": "biolab__orange3-5147", "issue_numbers": 0, "base_commit": "ef789ee61de847e26e297fae3d926f0867914e82", "patch": "diff --git a/Orange/widgets/data/owpythonscript.py b/Orange/widgets/data/owpythonscript.py\nindex 2f9089f27..47b088792 100644\n--- a/Orange/widgets/data/owpythonscript.py\n+++ b/Orange/widgets/data/owpythonscript.py\n@@ -590,7 +590,6 @@ class OWPythonScript(OWWidget):\n         self.splitterState = bytes(self.splitCanvas.saveState())\n \n     def handle_input(self, obj, sig_id, signal):\n-        sig_id = sig_id[0]\n         dic = getattr(self, signal)\n         if obj is None:\n             if sig_id in dic.keys():\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpythonscript.py b/Orange/widgets/data/tests/test_owpythonscript.py\nindex bda77790d..6c505737e 100644\n--- a/Orange/widgets/data/tests/test_owpythonscript.py\n+++ b/Orange/widgets/data/tests/test_owpythonscript.py\n@@ -32,9 +32,9 @@ class TestOWPythonScript(WidgetTest):\n                              (\"Classifier\", self.model),\n                              (\"Object\", \"object\")):\n             self.assertEqual(getattr(self.widget, input_.lower()), {})\n-            self.send_signal(input_, data, (1,))\n+            self.send_signal(input_, data, 1)\n             self.assertEqual(getattr(self.widget, input_.lower()), {1: data})\n-            self.send_signal(input_, None, (1,))\n+            self.send_signal(input_, None, 1)\n             self.assertEqual(getattr(self.widget, input_.lower()), {})\n \n     def test_outputs(self):\n@@ -45,9 +45,9 @@ class TestOWPythonScript(WidgetTest):\n                 (\"Classifier\", self.model)):\n             lsignal = signal.lower()\n             self.widget.text.setPlainText(\"out_{0} = in_{0}\".format(lsignal))\n-            self.send_signal(signal, data, (1,))\n+            self.send_signal(signal, data, 1)\n             self.assertIs(self.get_output(signal), data)\n-            self.send_signal(signal, None, (1,))\n+            self.send_signal(signal, None, 1)\n             self.widget.text.setPlainText(\"print(in_{})\".format(lsignal))\n             self.widget.execute_button.click()\n             self.assertIsNone(self.get_output(signal))\n@@ -73,7 +73,7 @@ class TestOWPythonScript(WidgetTest):\n                 (\"Learner\", self.learner),\n                 (\"Classifier\", self.model)):\n             lsignal = signal.lower()\n-            self.send_signal(signal, data, (1, ))\n+            self.send_signal(signal, data, 1)\n             self.widget.text.setPlainText(\"out_{} = 42\".format(lsignal))\n             self.widget.execute_button.click()\n             self.assertEqual(self.get_output(signal), None)\n@@ -98,27 +98,27 @@ class TestOWPythonScript(WidgetTest):\n         self.assertIsNone(console_locals[\"in_data\"])\n         self.assertEqual(console_locals[\"in_datas\"], [])\n \n-        self.send_signal(\"Data\", self.iris, (1, ))\n+        self.send_signal(\"Data\", self.iris, 1)\n         click()\n         self.assertIs(console_locals[\"in_data\"], self.iris)\n         datas = console_locals[\"in_datas\"]\n         self.assertEqual(len(datas), 1)\n         self.assertIs(datas[0], self.iris)\n \n-        self.send_signal(\"Data\", titanic, (2, ))\n+        self.send_signal(\"Data\", titanic, 2)\n         click()\n         self.assertIsNone(console_locals[\"in_data\"])\n         self.assertEqual({id(obj) for obj in console_locals[\"in_datas\"]},\n                          {id(self.iris), id(titanic)})\n \n-        self.send_signal(\"Data\", None, (2, ))\n+        self.send_signal(\"Data\", None, 2)\n         click()\n         self.assertIs(console_locals[\"in_data\"], self.iris)\n         datas = console_locals[\"in_datas\"]\n         self.assertEqual(len(datas), 1)\n         self.assertIs(datas[0], self.iris)\n \n-        self.send_signal(\"Data\", None, (1, ))\n+        self.send_signal(\"Data\", None, 1)\n         click()\n         self.assertIsNone(console_locals[\"in_data\"])\n         self.assertEqual(console_locals[\"in_datas\"], [])\n@@ -226,7 +226,7 @@ class TestOWPythonScript(WidgetTest):\n         self.signal_manager = DummySignalManager()\n         widget3 = self.create_widget(OWPythonScript)\n \n-        self.send_signal(widget1.Inputs.data, self.iris, (1,), widget=widget1)\n+        self.send_signal(widget1.Inputs.data, self.iris, 1, widget=widget1)\n         widget1.text.setPlainText(\"x = 42\\n\"\n                                   \"out_data = in_data\\n\")\n         widget1.execute_button.click()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6028.0, "instance_id": "biolab__orange3-6028", "issue_numbers": 0, "base_commit": "fabacdf3870d1706b401dce5356325d024a9cd45", "patch": "diff --git a/Orange/misc/utils/embedder_utils.py b/Orange/misc/utils/embedder_utils.py\nindex e01c6ab91..f19b8ee04 100644\n--- a/Orange/misc/utils/embedder_utils.py\n+++ b/Orange/misc/utils/embedder_utils.py\n@@ -78,7 +78,7 @@ class EmbedderCache:\n \n def get_proxies() -> Optional[Dict[str, str]]:\n     \"\"\"\n-    Return dict with proxy addresses if they exists.\n+    Return dict with proxy addresses if they exist.\n \n     Returns\n     -------\n@@ -86,14 +86,18 @@ def get_proxies() -> Optional[Dict[str, str]]:\n         Dictionary with format {proxy type: proxy address} or None if\n         they not set.\n     \"\"\"\n-    def add_protocol(url: Optional[str], prot: str) -> Optional[str]:\n-        if url and not url.startswith(prot):\n-            return f\"{prot}://{url}\"\n-        return url\n-    http_proxy = add_protocol(environ.get(\"http_proxy\"), \"http\")\n-    https_proxy = add_protocol(environ.get(\"https_proxy\"), \"https\")\n-    if http_proxy and https_proxy:  # both proxy addresses defined\n-        return {\"http://\": https_proxy, \"https://\": https_proxy}\n-    elif any([https_proxy, http_proxy]):  # one of the proxies defined\n-        return {\"all://\": http_proxy or https_proxy}\n-    return None  # proxies not defined\n+    def add_scheme(url: Optional[str]) -> Optional[str]:\n+        if url is not None and \"://\" not in url:\n+            # if no scheme default to http - as other libraries do (e.g. requests)\n+            return f\"http://{url}\"\n+        else:\n+            return url\n+\n+    http_proxy = add_scheme(environ.get(\"http_proxy\"))\n+    https_proxy = add_scheme(environ.get(\"https_proxy\"))\n+    proxy_dict = {}\n+    if http_proxy:\n+        proxy_dict[\"http://\"] = http_proxy\n+    if https_proxy:\n+        proxy_dict[\"https://\"] = https_proxy\n+    return proxy_dict if proxy_dict else None\n \n.", "test_patch": "diff --git a/Orange/misc/tests/test_embedder_utils.py b/Orange/misc/tests/test_embedder_utils.py\nnew file mode 100644\nindex 000000000..5890e4916\n--- /dev/null\n+++ b/Orange/misc/tests/test_embedder_utils.py\n@@ -0,0 +1,67 @@\n+import os\n+import unittest\n+\n+from Orange.misc.utils.embedder_utils import get_proxies\n+\n+\n+class TestProxies(unittest.TestCase):\n+    def setUp(self) -> None:\n+        self.previous_http = os.environ.get(\"http_proxy\")\n+        self.previous_https = os.environ.get(\"https_proxy\")\n+        os.environ.pop(\"http_proxy\", None)\n+        os.environ.pop(\"https_proxy\", None)\n+\n+    def tearDown(self) -> None:\n+        os.environ.pop(\"http_proxy\", None)\n+        os.environ.pop(\"https_proxy\", None)\n+        if self.previous_http is not None:\n+            os.environ[\"http_proxy\"] = self.previous_http\n+        if self.previous_https is not None:\n+            os.environ[\"https_proxy\"] = self.previous_https\n+\n+    def test_add_scheme(self):\n+        os.environ[\"http_proxy\"] = \"test1.com\"\n+        os.environ[\"https_proxy\"] = \"test2.com\"\n+        res = get_proxies()\n+        self.assertEqual(\"http://test1.com\", res.get(\"http://\"))\n+        self.assertEqual(\"http://test2.com\", res.get(\"https://\"))\n+\n+        os.environ[\"http_proxy\"] = \"test1.com/path\"\n+        os.environ[\"https_proxy\"] = \"test2.com/path\"\n+        res = get_proxies()\n+        self.assertEqual(\"http://test1.com/path\", res.get(\"http://\"))\n+        self.assertEqual(\"http://test2.com/path\", res.get(\"https://\"))\n+\n+        os.environ[\"http_proxy\"] = \"https://test1.com:123\"\n+        os.environ[\"https_proxy\"] = \"https://test2.com:124\"\n+        res = get_proxies()\n+        self.assertEqual(\"https://test1.com:123\", res.get(\"http://\"))\n+        self.assertEqual(\"https://test2.com:124\", res.get(\"https://\"))\n+\n+    def test_both_urls(self):\n+        os.environ[\"http_proxy\"] = \"http://test1.com:123\"\n+        os.environ[\"https_proxy\"] = \"https://test2.com:124\"\n+        res = get_proxies()\n+        self.assertEqual(\"http://test1.com:123\", res.get(\"http://\"))\n+        self.assertEqual(\"https://test2.com:124\", res.get(\"https://\"))\n+        self.assertNotIn(\"all://\", res)\n+\n+    def test_http_only(self):\n+        os.environ[\"http_proxy\"] = \"http://test1.com:123\"\n+        res = get_proxies()\n+        self.assertEqual(\"http://test1.com:123\", res.get(\"http://\"))\n+        self.assertNotIn(\"https://\", res)\n+\n+    def test_https_only(self):\n+        os.environ[\"https_proxy\"] = \"https://test1.com:123\"\n+        res = get_proxies()\n+        self.assertEqual(\"https://test1.com:123\", res.get(\"https://\"))\n+        self.assertNotIn(\"http://\", res)\n+\n+    def test_none(self):\n+        \"\"\" When no variable is set return None \"\"\"\n+        self.assertIsNone(get_proxies())\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4760.0, "instance_id": "biolab__orange3-4760", "issue_numbers": 0, "base_commit": "0ec2c80b80ddbef7b066510033876f060c1bb32c", "patch": "diff --git a/Orange/widgets/data/owfeatureconstructor.py b/Orange/widgets/data/owfeatureconstructor.py\nindex a31e895be..e628fc3ab 100644\n--- a/Orange/widgets/data/owfeatureconstructor.py\n+++ b/Orange/widgets/data/owfeatureconstructor.py\n@@ -26,11 +26,12 @@ from AnyQt.QtWidgets import (\n     QSizePolicy, QAbstractItemView, QComboBox, QFormLayout, QLineEdit,\n     QHBoxLayout, QVBoxLayout, QStackedWidget, QStyledItemDelegate,\n     QPushButton, QMenu, QListView, QFrame, QLabel)\n-from AnyQt.QtGui import QKeySequence\n+from AnyQt.QtGui import QKeySequence, QColor\n from AnyQt.QtCore import Qt, pyqtSignal as Signal, pyqtProperty as Property\n from orangewidget.utils.combobox import ComboBoxSearch\n \n import Orange\n+from Orange.data.util import get_unique_names\n from Orange.widgets import gui\n from Orange.widgets.settings import ContextSetting, DomainContextHandler\n from Orange.widgets.utils import itemmodels, vartype\n@@ -55,6 +56,7 @@ DiscreteDescriptor = \\\n \n StringDescriptor = namedtuple(\"StringDescriptor\", [\"name\", \"expression\"])\n \n+#warningIcon = gui.createAttributePixmap('!', QColor((202, 0, 32)))\n \n def make_variable(descriptor, compute_value):\n     if isinstance(descriptor, ContinuousDescriptor):\n@@ -390,6 +392,10 @@ class OWFeatureConstructor(OWWidget):\n         more_values_needed = Msg(\"Categorical feature {} needs more values.\")\n         invalid_expressions = Msg(\"Invalid expressions: {}.\")\n \n+    class Warning(OWWidget.Warning):\n+        renamed_var = Msg(\"Recently added variable has been renamed, \"\n+                           \"to avoid duplicates.\\n\")\n+\n     def __init__(self):\n         super().__init__()\n         self.data = None\n@@ -427,16 +433,8 @@ class OWFeatureConstructor(OWWidget):\n             candidates = (fmt.format(i) for i in count(1))\n             return next(c for c in candidates if c not in reserved)\n \n-        def reserved_names():\n-            varnames = []\n-            if self.data is not None:\n-                varnames = [var.name for var in\n-                            self.data.domain.variables + self.data.domain.metas]\n-            varnames += [desc.name for desc in self.featuremodel]\n-            return set(varnames)\n-\n         def generate_newname(fmt):\n-            return unique_name(fmt, reserved_names())\n+            return unique_name(fmt, self.reserved_names())\n \n         menu = QMenu(self.addbutton)\n         cont = menu.addAction(\"Numeric\")\n@@ -531,8 +529,18 @@ class OWFeatureConstructor(OWWidget):\n \n     def _on_modified(self):\n         if self.currentIndex >= 0:\n+            self.Warning.clear()\n             editor = self.editorstack.currentWidget()\n-            self.featuremodel[self.currentIndex] = editor.editorData()\n+            proposed = editor.editorData().name\n+            unique = get_unique_names(self.reserved_names(self.currentIndex),\n+                                      proposed)\n+\n+            feature = editor.editorData()\n+            if editor.editorData().name != unique:\n+                self.Warning.renamed_var()\n+                feature = feature.__class__(unique, *feature[1:])\n+                \n+            self.featuremodel[self.currentIndex] = feature\n             self.descriptors = list(self.featuremodel)\n \n     def setDescriptors(self, descriptors):\n@@ -542,6 +550,15 @@ class OWFeatureConstructor(OWWidget):\n         self.descriptors = descriptors\n         self.featuremodel[:] = list(self.descriptors)\n \n+    def reserved_names(self, idx_=None):\n+        varnames = []\n+        if self.data is not None:\n+            varnames = [var.name for var in\n+                        self.data.domain.variables + self.data.domain.metas]\n+        varnames += [desc.name for idx, desc in enumerate(self.featuremodel)\n+                     if idx != idx_]\n+        return set(varnames)\n+\n     @Inputs.data\n     @check_sql_input\n     def setData(self, data=None):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeatureconstructor.py b/Orange/widgets/data/tests/test_owfeatureconstructor.py\nindex 2f6435ab5..a3acf48b4 100644\n--- a/Orange/widgets/data/tests/test_owfeatureconstructor.py\n+++ b/Orange/widgets/data/tests/test_owfeatureconstructor.py\n@@ -329,6 +329,17 @@ class OWFeatureConstructorTests(WidgetTest):\n         self.widget.apply()\n         self.assertTrue(self.widget.Error.invalid_expressions.is_shown())\n \n+    def test_renaming_duplicate_vars(self):\n+        data = Table(\"iris\")\n+        self.widget.setData(data)\n+        self.widget.addFeature(\n+            ContinuousDescriptor(\"iris\", \"0\", 3)\n+        )\n+        self.widget.apply()\n+        output = self.get_output(self.widget.Outputs.data)\n+        self.assertEqual(len(set(var.name for var in output.domain.variables)),\n+                         len(output.domain.variables))\n+\n     def test_discrete_no_values(self):\n         \"\"\"\n         Should not fail when there are no values set.\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4492.0, "instance_id": "biolab__orange3-4492", "issue_numbers": 0, "base_commit": "4462394d84f5c53e8982029ff6f53d3366483c8b", "patch": "diff --git a/Orange/widgets/data/owdatasampler.py b/Orange/widgets/data/owdatasampler.py\nindex 74174d541..a012b0ed6 100644\n--- a/Orange/widgets/data/owdatasampler.py\n+++ b/Orange/widgets/data/owdatasampler.py\n@@ -11,6 +11,7 @@ from Orange.widgets.settings import Setting\n from Orange.data import Table\n from Orange.data.sql.table import SqlTable\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Msg, OWWidget, Input, Output\n from Orange.util import Reprable\n \n@@ -179,14 +180,14 @@ class OWDataSampler(OWWidget):\n             self.cb_seed.setVisible(not sql)\n             self.cb_stratify.setVisible(not sql)\n             self.cb_sql_dl.setVisible(sql)\n-            self.info.set_input_summary(str(len(dataset)))\n+            self.info.set_input_summary(len(dataset),\n+                                        format_summary_details(dataset))\n \n             if not sql:\n                 self._update_sample_max_size()\n                 self.updateindices()\n         else:\n             self.info.set_input_summary(self.info.NoInput)\n-            self.info.set_output_summary(self.info.NoInput)\n             self.indices = None\n             self.clear_messages()\n         self.commit()\n@@ -224,12 +225,16 @@ class OWDataSampler(OWWidget):\n                 remaining, sample = self.indices\n             elif self.sampling_type == self.CrossValidation:\n                 remaining, sample = self.indices[self.selectedFold - 1]\n-            self.info.set_output_summary(str(len(sample)))\n \n             sample = self.data[sample]\n             other = self.data[remaining]\n             self.sampled_instances = len(sample)\n             self.remaining_instances = len(other)\n+\n+        summary = len(sample) if sample else self.info.NoOutput\n+        details = format_summary_details(sample) if sample else \"\"\n+        self.info.set_output_summary(summary, details)\n+\n         self.Outputs.data_sample.send(sample)\n         self.Outputs.remaining_data.send(other)\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasampler.py b/Orange/widgets/data/tests/test_owdatasampler.py\nindex 2c4d290ee..53c016cbc 100644\n--- a/Orange/widgets/data/tests/test_owdatasampler.py\n+++ b/Orange/widgets/data/tests/test_owdatasampler.py\n@@ -5,6 +5,7 @@ from unittest.mock import Mock\n from Orange.data import Table\n from Orange.widgets.data.owdatasampler import OWDataSampler\n from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWDataSampler(WidgetTest):\n@@ -38,7 +39,6 @@ class TestOWDataSampler(WidgetTest):\n         self.assertTrue(self.widget.Warning.could_not_stratify.is_shown())\n \n     def test_bootstrap(self):\n-        output_sum = self.widget.info.set_output_summary = Mock()\n         self.select_sampling_type(self.widget.Bootstrap)\n \n         self.send_signal(\"Data\", self.iris)\n@@ -59,8 +59,6 @@ class TestOWDataSampler(WidgetTest):\n         # high probability (1-(1/150*2/150*...*150/150) ~= 1-2e-64)\n         self.assertGreater(len(in_sample), 0)\n         self.assertGreater(len(in_remaining), 0)\n-        #Check if status bar shows correct number of output data\n-        output_sum.assert_called_with(str(len(sample)))\n \n     def select_sampling_type(self, sampling_type):\n         buttons = self.widget.controls.sampling_type.group.buttons()\n@@ -68,11 +66,9 @@ class TestOWDataSampler(WidgetTest):\n \n     def test_no_intersection_in_outputs(self):\n         \"\"\" Check whether outputs intersect and whether length of outputs sums\n-        to length of original data and\n-        if status bar displays correct output for each sampling type\"\"\"\n+        to length of original data\"\"\"\n         self.send_signal(\"Data\", self.iris)\n         w = self.widget\n-        output_sum = self.widget.info.set_output_summary = Mock()\n         sampling_types = [w.FixedProportion, w.FixedSize, w.CrossValidation]\n \n         for replicable in [True, False]:\n@@ -87,7 +83,6 @@ class TestOWDataSampler(WidgetTest):\n                     other = self.get_output(\"Remaining Data\")\n                     self.assertEqual(len(self.iris), len(sample) + len(other))\n                     self.assertNoIntersection(sample, other)\n-                    output_sum.assert_called_with(str(len(sample)))\n \n     def test_bigger_size_with_replacement(self):\n         \"\"\"Allow bigger output without replacement.\"\"\"\n@@ -126,17 +121,23 @@ class TestOWDataSampler(WidgetTest):\n \n     def test_summary(self):\n         \"\"\"Check if status bar is updated when data is received\"\"\"\n-        input_sum = self.widget.info.set_input_summary = Mock()\n         data = self.iris\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n \n-        input_sum.reset_mock()\n-        self.send_signal(self.widget.Inputs.data, data[:])\n-        input_sum.assert_called_with(\"150\")\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.data_sample)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n \n         input_sum.reset_mock()\n+        output_sum.reset_mock()\n         self.send_signal(self.widget.Inputs.data, None)\n         input_sum.assert_called_once()\n         self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n \n     def set_fixed_sample_size(self, sample_size, with_replacement=False):\n         \"\"\"Set fixed sample size and return the number of gui spin.\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5105.0, "instance_id": "biolab__orange3-5105", "issue_numbers": 0, "base_commit": "d7d230c3fb059f0730bb9e73e7b6132b19b7751d", "patch": "diff --git a/Orange/widgets/data/owselectcolumns.py b/Orange/widgets/data/owselectcolumns.py\nindex 4e7abd40c..af11f3668 100644\n--- a/Orange/widgets/data/owselectcolumns.py\n+++ b/Orange/widgets/data/owselectcolumns.py\n@@ -1,5 +1,5 @@\n from functools import partial\n-from typing import Optional\n+from typing import Optional, Dict, Tuple\n \n from AnyQt.QtWidgets import QWidget, QGridLayout\n from AnyQt.QtWidgets import QListView\n@@ -8,6 +8,7 @@ from AnyQt.QtCore import (\n     QMimeData, QAbstractItemModel\n )\n \n+from Orange.data import Domain, Variable\n from Orange.widgets import gui, widget\n from Orange.widgets.settings import (\n     ContextSetting, Setting, DomainContextHandler\n@@ -167,6 +168,7 @@ class OWSelectAttributes(widget.OWWidget):\n     settingsHandler = SelectAttributesDomainContextHandler(first_match=False)\n     domain_role_hints = ContextSetting({})\n     use_input_features = Setting(False)\n+    select_new_features = Setting(True)\n     auto_commit = Setting(True)\n \n     class Warning(widget.OWWidget.Warning):\n@@ -286,7 +288,7 @@ class OWSelectAttributes(widget.OWWidget):\n         self.down_class_button = gui.button(bbox, self, \"Down\",\n                                             callback=partial(self.move_down, self.class_attrs_view))\n \n-        bbox = gui.vBox(self.controlArea, addToLayout=False, margin=0)\n+        bbox = gui.vBox(self.controlArea, addToLayout=False)\n         layout.addWidget(bbox, 2, 1, 1, 1)\n         self.up_meta_button = gui.button(bbox, self, \"Up\",\n                                          callback=partial(self.move_up, self.meta_attrs_view))\n@@ -297,8 +299,14 @@ class OWSelectAttributes(widget.OWWidget):\n         self.down_meta_button = gui.button(bbox, self, \"Down\",\n                                            callback=partial(self.move_down, self.meta_attrs_view))\n \n+        bbox = gui.vBox(self.controlArea, \"Additional settings\", addToLayout=False)\n+        gui.checkBox(\n+            bbox, self, \"select_new_features\", \"Automatically select additional/new features\"\n+        )\n+        layout.addWidget(bbox, 3, 0, 1, 3)\n+\n         autobox = gui.auto_send(None, self, \"auto_commit\")\n-        layout.addWidget(autobox, 3, 0, 1, 3)\n+        layout.addWidget(autobox, 4, 0, 1, 3)\n         reset = gui.button(None, self, \"Reset\", callback=self.reset, width=120)\n         autobox.layout().insertWidget(0, reset)\n         autobox.layout().insertStretch(1, 20)\n@@ -370,19 +378,50 @@ class OWSelectAttributes(widget.OWWidget):\n             ]\n             return sorted(selected_attrs, key=lambda attr: domain_hints[attr][1])\n \n-        domain = data.domain\n-        domain_hints = {}\n-        domain_hints.update(self._hints_from_seq(\"attribute\", domain.attributes))\n-        domain_hints.update(self._hints_from_seq(\"meta\", domain.metas))\n-        domain_hints.update(self._hints_from_seq(\"class\", domain.class_vars))\n-        domain_hints.update(self.domain_role_hints)\n-\n+        domain_hints = self.restore_hints(data.domain)\n         self.used_attrs[:] = attrs_for_role(\"attribute\")\n         self.class_attrs[:] = attrs_for_role(\"class\")\n         self.meta_attrs[:] = attrs_for_role(\"meta\")\n         self.available_attrs[:] = attrs_for_role(\"available\")\n         self.info.set_input_summary(len(data), format_summary_details(data))\n \n+    def restore_hints(self, domain: Domain) -> Dict[Variable, Tuple[str, int]]:\n+        \"\"\"\n+        Define hints for selected/unselected features.\n+        Rules:\n+        - if context available, restore new features based on checked/unchecked\n+          select_new_features, context hint should be took into account\n+        - in no context, restore features based on the domain (as selected)\n+\n+        Parameters\n+        ----------\n+        domain\n+            Data domain\n+\n+        Returns\n+        -------\n+        Dictionary with hints about order and model in which each feature\n+        should appear\n+        \"\"\"\n+        domain_hints = {}\n+        if self.select_new_features or len(self.domain_role_hints) == 0:\n+            # select_new_features selected or no context - restore based on domain\n+            domain_hints.update(\n+                self._hints_from_seq(\"attribute\", domain.attributes)\n+            )\n+            domain_hints.update(self._hints_from_seq(\"meta\", domain.metas))\n+            domain_hints.update(\n+                self._hints_from_seq(\"class\", domain.class_vars)\n+            )\n+        else:\n+            # if context restored and select_new_features unselected - restore\n+            # new features as available\n+            d = domain.attributes + domain.metas + domain.class_vars\n+            domain_hints.update(self._hints_from_seq(\"available\", d))\n+\n+        domain_hints.update(self.domain_role_hints)\n+        return domain_hints\n+\n     def update_domain_role_hints(self):\n         \"\"\" Update the domain hints to be stored in the widgets settings.\n         \"\"\"\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectcolumns.py b/Orange/widgets/data/tests/test_owselectcolumns.py\nindex 5a7e87cf7..21bb0a9c9 100644\n--- a/Orange/widgets/data/tests/test_owselectcolumns.py\n+++ b/Orange/widgets/data/tests/test_owselectcolumns.py\n@@ -1,4 +1,5 @@\n # pylint: disable=unsubscriptable-object\n+import unittest\n from unittest import TestCase\n from unittest.mock import Mock\n \n@@ -411,3 +412,88 @@ class TestOWSelectAttributes(WidgetTest):\n             data.Y\n         )\n         self.send_signal(self.widget.Inputs.data, data1)\n+\n+    def test_select_new_features(self):\n+        \"\"\"\n+        When select_new_features checked new attributes must appear in one of\n+        selected columns. Test with fist make context remember attributes of\n+        reduced domain and then testing with full domain. Features in missing\n+        in reduced domain must appears as seleceted.\n+        \"\"\"\n+        data = Table(\"iris\")\n+        domain = data.domain\n+\n+        # data with one feature missing\n+        new_domain = Domain(\n+            domain.attributes[:-1], domain.class_var, domain.metas\n+        )\n+        new_data = Table.from_table(new_domain, data)\n+\n+        # make context remember features in reduced domain\n+        self.send_signal(self.widget.Inputs.data, new_data)\n+        output = self.get_output(self.widget.Outputs.data)\n+\n+        self.assertTupleEqual(\n+            new_data.domain.attributes, output.domain.attributes\n+        )\n+        self.assertTupleEqual(new_data.domain.metas, output.domain.metas)\n+        self.assertEqual(new_data.domain.class_var, output.domain.class_var)\n+\n+        # send full domain\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+\n+        # if select_new_features checked all new features goes in the selected\n+        # features columns - domain equal original\n+        self.assertTrue(self.widget.select_new_features)\n+        self.assertTupleEqual(data.domain.attributes, output.domain.attributes)\n+        self.assertTupleEqual(data.domain.metas, output.domain.metas)\n+        self.assertEqual(data.domain.class_var, output.domain.class_var)\n+\n+    def test_unselect_new_features(self):\n+        \"\"\"\n+        When select_new_features not checked new attributes must appear in one\n+        available attributes column. Test with fist make context remember\n+        attributes of reduced domain and then testing with full domain.\n+        Features in missing in reduced domain must appears as not seleceted.\n+        \"\"\"\n+        data = Table(\"iris\")\n+        domain = data.domain\n+\n+        # data with one feature missing\n+        new_domain = Domain(\n+            domain.attributes[:-1], domain.class_var, domain.metas\n+        )\n+        new_data = Table.from_table(new_domain, data)\n+\n+        # make context remember features in reduced domain\n+        self.send_signal(self.widget.Inputs.data, new_data)\n+        # unselect select_new_features\n+        self.widget.controls.select_new_features.click()\n+        self.assertFalse(self.widget.select_new_features)\n+        output = self.get_output(self.widget.Outputs.data)\n+\n+        self.assertTupleEqual(\n+            new_data.domain.attributes, output.domain.attributes\n+        )\n+        self.assertTupleEqual(new_data.domain.metas, output.domain.metas)\n+        self.assertEqual(new_data.domain.class_var, output.domain.class_var)\n+\n+        # send full domain\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+\n+        # if select_new_features not checked all new features goes in the\n+        # available attributes column\n+        self.assertFalse(self.widget.select_new_features)\n+        self.assertTupleEqual(new_domain.attributes, output.domain.attributes)\n+        self.assertTupleEqual(new_domain.metas, output.domain.metas)\n+        self.assertEqual(new_domain.class_var, output.domain.class_var)\n+        # test if new attribute was added to unselected attributes\n+        self.assertEqual(\n+            domain.attributes[-1], list(self.widget.available_attrs)[0]\n+        )\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4525.0, "instance_id": "biolab__orange3-4525", "issue_numbers": 0, "base_commit": "c695b4da4b87d8831fed7e04b494353402675314", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex 6c2ee9f73..51343bae0 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -1144,16 +1144,22 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n             self.plot_widget.removeItem(self.density_img)\n             self.density_img = None\n         if self.class_density and self.scatterplot_item is not None:\n+            c_data = self.master.get_color_data()\n+            if c_data is None:\n+                return\n+            mask = np.isfinite(self._filter_visible(c_data))\n+            pens = self.scatterplot_item.data['pen']\n             rgb_data = [\n                 pen.color().getRgb()[:3] if pen is not None else (255, 255, 255)\n-                for pen in self.scatterplot_item.data['pen']]\n+                for known, pen in zip(mask, pens)\n+                if known]\n             if len(set(rgb_data)) <= 1:\n                 return\n             [min_x, max_x], [min_y, max_y] = self.view_box.viewRange()\n             x_data, y_data = self.scatterplot_item.getData()\n             self.density_img = classdensity.class_density_image(\n                 min_x, max_x, min_y, max_y, self.resolution,\n-                x_data, y_data, rgb_data)\n+                x_data[mask], y_data[mask], rgb_data)\n             self.plot_widget.addItem(self.density_img)\n \n     def update_selection_colors(self):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplotbase.py b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\nindex 7cfbb9844..4c3dacfde 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n@@ -866,6 +866,41 @@ class TestOWScatterPlotBase(WidgetTest):\n             self.assertIsNone(graph.density_img)\n             self.assertIs(graph.plot_widget.removeItem.call_args[0][0], density)\n \n+    @patch(\"Orange.widgets.utils.classdensity.class_density_image\")\n+    def test_density_with_missing(self, class_density_image):\n+        graph = self.graph\n+        graph.reset_graph()\n+        graph.plot_widget.addItem = Mock()\n+        graph.plot_widget.removeItem = Mock()\n+\n+        graph.class_density = True\n+        d = np.arange(10, dtype=float) % 2\n+        self.master.get_color_data = lambda: d\n+\n+        # All colors known\n+        graph.update_colors()\n+        x_data0, y_data0, colors0 = class_density_image.call_args[0][5:]\n+\n+        # Some missing colors\n+        d[:3] = np.nan\n+        graph.update_colors()\n+        x_data, y_data, colors = class_density_image.call_args[0][5:]\n+        np.testing.assert_equal(x_data, x_data0[3:])\n+        np.testing.assert_equal(y_data, y_data0[3:])\n+        np.testing.assert_equal(colors, colors0[3:])\n+\n+        # Missing colors + only subsample plotted\n+        graph.set_sample_size(8)\n+        graph.reset_graph()\n+        d_known = np.isfinite(graph._filter_visible(d))\n+        x_data0 = graph._filter_visible(x_data0)[d_known]\n+        y_data0 = graph._filter_visible(y_data0)[d_known]\n+        colors0 = graph._filter_visible(np.array(colors0))[d_known]\n+        x_data, y_data, colors = class_density_image.call_args[0][5:]\n+        np.testing.assert_equal(x_data, x_data0)\n+        np.testing.assert_equal(y_data, y_data0)\n+        np.testing.assert_equal(colors, colors0)\n+\n     def test_labels(self):\n         graph = self.graph\n         graph.reset_graph()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5681.0, "instance_id": "biolab__orange3-5681", "issue_numbers": 0, "base_commit": "3634e370289f8ffe682626168f51c2639e50c31e", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 95e9e92cc..2d6aac4b5 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -157,6 +157,16 @@ def _is_datetime(s):\n         return True\n     try:\n         if is_object_dtype(s):\n+            # pd.to_datetime would sucessfuly parse column of numbers to datetime\n+            # but for column of object dtype with numbers we want to be either\n+            # discret or string - following code try to parse column to numeric\n+            # if connversion to numeric is sucessful return False\n+            try:\n+                pd.to_numeric(s)\n+                return False\n+            except (ValueError, TypeError):\n+                pass\n+\n             # utc=True - to allow different timezones in a series object\n             pd.to_datetime(s, infer_datetime_format=True, utc=True)\n             return True\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex f8649f113..2d30ed363 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -383,6 +383,25 @@ class TestPandasCompat(unittest.TestCase):\n             ],\n         )\n \n+    def test_table_from_frame_no_datetim(self):\n+        \"\"\"\n+        In case when dtype of column is object and column contains numbers only,\n+        column could be recognized as a TimeVarialbe since pd.to_datetime can parse\n+        numbers as datetime. That column must be result either in StringVariable\n+        or DiscreteVariable since it's dtype is object.\n+        \"\"\"\n+        from Orange.data.pandas_compat import table_from_frame\n+\n+        df = pd.DataFrame([[1], [2], [3]], dtype=\"object\")\n+        table = table_from_frame(df)\n+        # check if exactly ContinuousVariable and not subtype TimeVariable\n+        self.assertIsInstance(table.domain.metas[0], StringVariable)\n+\n+        df = pd.DataFrame([[1], [2], [2]], dtype=\"object\")\n+        table = table_from_frame(df)\n+        # check if exactly ContinuousVariable and not subtype TimeVariable\n+        self.assertIsInstance(table.domain.attributes[0], DiscreteVariable)\n+\n     def test_time_variable_compatible(self):\n         from Orange.data.pandas_compat import table_from_frame\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4495.0, "instance_id": "biolab__orange3-4495", "issue_numbers": 0, "base_commit": "b894ea5c567efb45ea942e609f6c172fc5049d1a", "patch": "diff --git a/Orange/widgets/data/owdiscretize.py b/Orange/widgets/data/owdiscretize.py\nindex edfe15ecb..6b4fdd750 100644\n--- a/Orange/widgets/data/owdiscretize.py\n+++ b/Orange/widgets/data/owdiscretize.py\n@@ -10,6 +10,7 @@ import Orange.preprocess.discretize as disc\n from Orange.widgets import widget, gui, settings\n from Orange.widgets.utils import itemmodels, vartype\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n \n __all__ = [\"OWDiscretize\"]\n@@ -260,7 +261,8 @@ class OWDiscretize(widget.OWWidget):\n             self._restore(self.saved_var_states)\n             # Complete the induction of cut points\n             self._update_points()\n-            self.info.set_input_summary(len(data))\n+            self.info.set_input_summary(len(data),\n+                                        format_summary_details(data))\n         else:\n             self.info.set_input_summary(self.info.NoInput)\n             self._clear()\n@@ -483,9 +485,10 @@ class OWDiscretize(widget.OWWidget):\n         if self.data is not None and len(self.data):\n             domain = self.discretized_domain()\n             output = self.data.transform(domain)\n-            self.info.set_output_summary(len(output))\n-        else:\n-            self.info.set_output_summary(self.info.NoOutput)\n+\n+        summary = len(output) if output else self.info.NoOutput\n+        details = format_summary_details(output) if output else \"\"\n+        self.info.set_output_summary(summary, details)\n         self.Outputs.data.send(output)\n \n     def storeSpecificSettings(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdiscretize.py b/Orange/widgets/data/tests/test_owdiscretize.py\nindex 2a148c394..de4b46892 100644\n--- a/Orange/widgets/data/tests/test_owdiscretize.py\n+++ b/Orange/widgets/data/tests/test_owdiscretize.py\n@@ -5,7 +5,7 @@ from unittest.mock import Mock\n from Orange.data import Table\n from Orange.widgets.data.owdiscretize import OWDiscretize\n from Orange.widgets.tests.base import WidgetTest\n-from orangewidget.widget import StateInfo\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWDiscretize(WidgetTest):\n@@ -28,9 +28,10 @@ class TestOWDiscretize(WidgetTest):\n \n         data = Table(\"iris\")\n         self.send_signal(self.widget.Inputs.data, data)\n-        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n         output = self.get_output(self.widget.Outputs.data)\n-        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n \n         input_sum.reset_mock()\n         output_sum.reset_mock()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3919.0, "instance_id": "biolab__orange3-3919", "issue_numbers": 0, "base_commit": "4f6ac7dc024776dc2b5bd74e8ee5e9d30a439196", "patch": "diff --git a/Orange/widgets/data/owmergedata.py b/Orange/widgets/data/owmergedata.py\nindex 23c6310fa..c6e416b10 100644\n--- a/Orange/widgets/data/owmergedata.py\n+++ b/Orange/widgets/data/owmergedata.py\n@@ -584,13 +584,20 @@ class OWMergeData(widget.OWWidget):\n \n     @staticmethod\n     def migrate_settings(settings, version=None):\n+        def mig_value(x):\n+            if x == \"Position (index)\":\n+                return INDEX\n+            if x == \"Source position (index)\":\n+                return INSTANCEID\n+            return x\n+\n         if not version:\n             operations = (\"augment\", \"merge\", \"combine\")\n-            oper = [settings[\"merging\"]]\n+            oper = operations[settings[\"merging\"]]\n             settings[\"attr_pairs\"] = (\n                 True, True,\n-                [(settings[f\"attr_{oper}_data\"],\n-                  settings[f\"attr_{oper}_extra\"])])\n+                [(mig_value(settings[f\"attr_{oper}_data\"]),\n+                  mig_value(settings[f\"attr_{oper}_extra\"]))])\n             for oper in operations:\n                 del settings[f\"attr_{oper}_data\"]\n                 del settings[f\"attr_{oper}_extra\"]\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owmergedata.py b/Orange/widgets/data/tests/test_owmergedata.py\nindex d1b78f05c..a83bfdd75 100644\n--- a/Orange/widgets/data/tests/test_owmergedata.py\n+++ b/Orange/widgets/data/tests/test_owmergedata.py\n@@ -6,6 +6,8 @@ import unittest\n import numpy as np\n import scipy.sparse as sp\n \n+from AnyQt.QtCore import Qt\n+\n from Orange.data import Table, Domain, DiscreteVariable, StringVariable, \\\n     ContinuousVariable\n from Orange.widgets.data.owmergedata import OWMergeData, INSTANCEID, INDEX\n@@ -109,6 +111,25 @@ class TestOWMergeData(WidgetTest):\n         self.assertEqual(data_combo.currentIndex(), 1)\n         self.assertEqual(extra_combo.currentIndex(), 1)\n \n+    def test_attr_combo_tooltips(self):\n+        row = self.widget.attr_boxes.rows[0]\n+        model = row.left_combo.model()\n+        self.send_signal(self.widget.Inputs.data, self.dataA)\n+        self.send_signal(self.widget.Inputs.extra_data, self.dataA)\n+\n+        tip = model.data(model.index(2, 0), Qt.ToolTipRole)\n+        # Test the test; if general tooltips ever change and the following\n+        # assert fails, the rest of this test has to be modified accordingly\n+        self.assertTrue(tip.startswith(\"<b>\"))\n+\n+        # Just test that tooltip is a string (implicitly) and that it's not\n+        # a generic DomainModel tooltip\n+        tip = model.data(model.index(0, 0), Qt.ToolTipRole)\n+        self.assertFalse(tip.startswith(\"<b>\"))\n+\n+        tip = model.data(model.index(1, 0), Qt.ToolTipRole)\n+        self.assertFalse(tip.startswith(\"<b>\"))\n+\n     def test_match_attr_name(self):\n         widget = self.widget\n         row = widget.attr_boxes.rows[0]\n@@ -235,6 +256,13 @@ class TestOWMergeData(WidgetTest):\n             self.assertEqual(row.add_button.isEnabled(), i == 1)\n             self.assertEqual(row.add_button.text(), [\"\", \"+\"][i == 1])\n \n+    def test_dont_remove_single_row(self):\n+        widget = self.widget\n+        rows = widget.attr_boxes.rows\n+        self.assertEqual(len(rows), 1)\n+        rows[0].remove_button.clicked.emit()\n+        self.assertEqual(len(rows), 1)\n+\n     def test_retrieve_settings(self):\n         widget = self.widget\n         boxes = widget.attr_boxes\n@@ -258,6 +286,71 @@ class TestOWMergeData(WidgetTest):\n             widget2.attr_boxes.current_state(),\n             [(INDEX, INDEX), (INSTANCEID, INSTANCEID), (var0, var1)])\n \n+    def test_retrieve_settings_with_missing_var(self):\n+        widget = self.widget\n+        boxes = widget.attr_boxes\n+        var0, var1 = self.dataA.domain.attributes[:2]\n+\n+        self.send_signal(self.widget.Inputs.data, self.dataA)\n+        self.send_signal(self.widget.Inputs.extra_data, self.dataA)\n+\n+        boxes.set_state(\n+            [(INDEX, INDEX), (INSTANCEID, INSTANCEID), (var0, var1)])\n+\n+        domain = self.dataA.domain\n+\n+        # The left combo in the last row must change to INDEX due to missing var\n+        data2 = self.dataA.transform(\n+            Domain(domain.attributes[1:], domain.class_var, domain.metas))\n+        settings = widget.settingsHandler.pack_data(widget)\n+        widget2 = self.create_widget(OWMergeData, stored_settings=settings)\n+        widget2.attr_boxes.set_state([(INDEX, INDEX)])\n+        self.send_signals(\n+            [(widget2.Inputs.data, data2),\n+             (widget2.Inputs.extra_data, data2)],\n+            widget=widget2)\n+        self.assertEqual(\n+            widget2.attr_boxes.current_state(),\n+            [(INDEX, INDEX), (INSTANCEID, INSTANCEID), (INDEX, var1)])\n+\n+        # The last row is changed to INDEX, INDEX and removed as duplicate\n+        data2 = self.dataA.transform(\n+            Domain(domain.attributes[2:], domain.class_var, domain.metas))\n+        settings = widget.settingsHandler.pack_data(widget)\n+        widget2 = self.create_widget(OWMergeData, stored_settings=settings)\n+        widget2.attr_boxes.set_state([(INDEX, INDEX)])\n+        self.send_signals(\n+            [(widget2.Inputs.data, data2),\n+             (widget2.Inputs.extra_data, data2)],\n+            widget=widget2)\n+        self.assertEqual(\n+            widget2.attr_boxes.current_state(),\n+            [(INDEX, INDEX), (INSTANCEID, INSTANCEID)])\n+\n+    def test_migrate_settings(self):\n+        attr1, attr2, attr3, attr4, attr5 = [object() for _ in range(5)]\n+        orig_settings = dict(\n+            attr_augment_data=attr1, attr_augment_extra=attr2,\n+            attr_merge_data=attr3, attr_merge_extra=attr4,\n+            attr_combine_data=attr5, attr_combine_extra='Position (index)')\n+\n+        widget = self.create_widget(\n+            OWMergeData, stored_settings=dict(merging=0, **orig_settings))\n+        self.assertEqual(widget.attr_pairs, (True, True, [(attr1, attr2)]))\n+\n+        widget = self.create_widget(\n+            OWMergeData, stored_settings=dict(merging=1, **orig_settings))\n+        self.assertEqual(widget.attr_pairs, (True, True, [(attr3, attr4)]))\n+\n+        widget = self.create_widget(\n+            OWMergeData, stored_settings=dict(merging=2, **orig_settings))\n+        self.assertEqual(widget.attr_pairs, (True, True, [(attr5, INDEX)]))\n+\n+        orig_settings[\"attr_combine_extra\"] = \"Source position (index)\"\n+        widget = self.create_widget(\n+            OWMergeData, stored_settings=dict(merging=2, **orig_settings))\n+        self.assertEqual(widget.attr_pairs, (True, True, [(attr5, INSTANCEID)]))\n+\n     @unittest.skip(\"widget doesn't work this way, but could in the future\")\n     def test_switch_domain(self):  # pragma: no cover\n         widget = self.widget\n@@ -322,6 +415,23 @@ class TestOWMergeData(WidgetTest):\n         widget.send_report()\n         # Don't crash, that's it\n \n+    def test_no_matches(self):\n+        \"\"\"Check output is None when there are no matches in inner join\"\"\"\n+        self.send_signal(self.widget.Inputs.data, self.dataA)\n+        self.send_signal(self.widget.Inputs.extra_data, self.dataB)\n+        domA = self.dataA.domain\n+        domB = self.dataB.domain\n+\n+        self.widget.attr_boxes.set_state([(domA[\"dA1\"], domB[\"dB2\"])])\n+        self.widget.controls.merging.buttons[self.widget.LeftJoin].click()\n+        self.assertIsNotNone(self.get_output(self.widget.Outputs.data))\n+\n+        self.widget.controls.merging.buttons[self.widget.InnerJoin].click()\n+        self.assertIsNone(self.get_output(self.widget.Outputs.data))\n+\n+        self.widget.controls.merging.buttons[self.widget.OuterJoin].click()\n+        self.assertIsNotNone(self.get_output(self.widget.Outputs.data))\n+\n     def test_output_merge_by_ids_inner(self):\n         \"\"\"Check output for merging option 'Find matching rows' by\n         Source position (index)\"\"\"\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5466.0, "instance_id": "biolab__orange3-5466", "issue_numbers": 0, "base_commit": "8aacb0830c721c0962203a5e4b8c7c953d551fa3", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 401902f4a..b37913164 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -2,6 +2,7 @@\n from unittest.mock import patch\n \n import numpy as np\n+from pandas.core.dtypes.common import is_string_dtype\n from scipy import sparse as sp\n from scipy.sparse import csr_matrix\n import pandas as pd\n@@ -170,9 +171,20 @@ def vars_from_df(df, role=None, force_nominal=False):\n         _role = role\n \n     # If df index is not a simple RangeIndex (or similar), put it into data\n-    if not any(str(i).startswith('_o') for i in df.index) \\\n-            and not (df.index.is_integer() and (df.index.is_monotonic_increasing\n-                                                or df.index.is_monotonic_decreasing)):\n+    if (\n+        # not range-like index - test first to skip slow startswith(_o) check\n+        not (\n+            df.index.is_integer()\n+            and (df.index.is_monotonic_increasing or df.index.is_monotonic_decreasing)\n+        )\n+        # check that it does not contain Orange index\n+        and (\n+            # startswith is slow (for long drs) - firs check if col has strings\n+            isinstance(df.index, pd.MultiIndex)\n+            or not is_string_dtype(df.index)\n+            or not any(str(i).startswith(\"_o\") for i in df.index)\n+        )\n+    ):\n         df = df.reset_index()\n \n     Xcols, Ycols, Mcols = [], [], []\n@@ -180,6 +192,7 @@ def vars_from_df(df, role=None, force_nominal=False):\n     attrs, class_vars, metas = [], [], []\n \n     contains_strings = _role == Role.Meta\n+\n     for column in df.columns:\n         s = df[column]\n         if hasattr(df, 'orange_variables') and column in df.orange_variables:\n@@ -203,12 +216,16 @@ def vars_from_df(df, role=None, force_nominal=False):\n                                    discrete.categories.astype(str).tolist())\n             attrs.append(var)\n             Xcols.append(column)\n-            Xexpr.append(lambda s, _: np.asarray(\n-                s.astype('category').cat.codes.replace(-1, np.nan)\n-            ))\n+\n+            def to_cat(s, _):\n+                x = s.astype(\"category\").cat.codes\n+                # it is same than x.replace(-1, np.nan), but much faster\n+                x = x.where(x != -1, np.nan)\n+                return np.asarray(x)\n+\n+            Xexpr.append(to_cat)\n         elif _is_datetime(s):\n             var = TimeVariable(str(column))\n-            s = pd.to_datetime(s, infer_datetime_format=True)\n             attrs.append(var)\n             Xcols.append(column)\n             Xexpr.append(lambda s, v: np.asarray(\n@@ -281,13 +298,21 @@ def table_from_frame(df, *, force_nominal=False):\n     XYM, domain = vars_from_df(df, force_nominal=force_nominal)\n \n     if hasattr(df, 'orange_weights') and hasattr(df, 'orange_attributes'):\n-        W = [df.orange_weights[i] for i in df.index\n-             if i in df.orange_weights]\n+        W = [df.orange_weights[i] for i in df.index if i in df.orange_weights]\n         if len(W) != len(df.index):\n             W = None\n         attributes = df.orange_attributes\n-        ids = [int(i[2:]) if str(i).startswith('_o') else Table.new_id()\n-               for i in df.index]\n+        if isinstance(df.index, pd.MultiIndex) or not is_string_dtype(df.index):\n+            # we can skip checking for Orange indices when MultiIndex an when\n+            # not string dtype and so speedup the conversion\n+            ids = None\n+        else:\n+            ids = [\n+                int(i[2:])\n+                if str(i).startswith(\"_o\") and i[2:].isdigit()\n+                else Table.new_id()\n+                for i in df.index\n+            ]\n     else:\n         W = None\n         attributes = None\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 6182c7023..5a854c444 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -69,6 +69,15 @@ class TestPandasCompat(unittest.TestCase):\n         self.assertEqual(names, ['index', '1', '2'])\n         self.assertEqual(types, [DiscreteVariable, ContinuousVariable, TimeVariable])\n \n+    def test_table_from_frame_keep_ids(self):\n+        \"\"\" Test if indices are correctly transferred to Table\"\"\"\n+        from Orange.data.pandas_compat import table_from_frame\n+        df = OrangeDataFrame(Table('iris')[:6])\n+        df.index = [1, \"_oa\", \"_o\", \"1\", \"_o20\", \"_o30\"]\n+        table = table_from_frame(df)\n+        self.assertEqual(table.ids[-2:].tolist(), [20, 30])\n+        self.assertTrue(np.issubdtype(table.ids.dtype, np.number))\n+\n     def test_table_to_frame(self):\n         from Orange.data.pandas_compat import table_to_frame\n         table = Table(\"iris\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6681.0, "instance_id": "biolab__orange3-6681", "issue_numbers": 0, "base_commit": "7b68883a38697039fb4ad4d7e8e543b11e2e13a2", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 100b34b7e..a82f73af5 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -10,6 +10,7 @@ from math import isnan, floor\n from pickle import PickleError\n \n import numpy as np\n+import pandas\n import scipy.sparse as sp\n \n from Orange.data import _variable\n@@ -905,6 +906,8 @@ class StringVariable(Variable):\n             if not val.value:\n                 return \"?\"\n             val = val.value\n+        if pandas.isnull(val):\n+            return \"?\"\n         return str(val)\n \n     def repr_val(self, val):\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex 4021acafc..efb35106f 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -634,6 +634,8 @@ class TestStringVariable(VariableTest):\n         self.assertEqual(a.str_val(\"\"), \"?\")\n         self.assertEqual(a.str_val(Value(a, \"\")), \"?\")\n         self.assertEqual(a.repr_val(Value(a, \"foo\")), '\"foo\"')\n+        self.assertEqual(a.str_val(np.nan), \"?\")\n+        self.assertEqual(a.str_val(None), \"?\")\n \n \n @variabletest(TimeVariable)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6564.0, "instance_id": "biolab__orange3-6564", "issue_numbers": 0, "base_commit": "8608e849ee3c04daeb3f9b7961fe86679635e6f9", "patch": "diff --git a/Orange/classification/naive_bayes.py b/Orange/classification/naive_bayes.py\nindex 2db384f91..3d5e8e32e 100644\n--- a/Orange/classification/naive_bayes.py\n+++ b/Orange/classification/naive_bayes.py\n@@ -98,7 +98,7 @@ class NaiveBayesModel(Model):\n         zeros = np.zeros((1, probs.shape[1]))\n         for col, attr_prob in zip(data.T, self.log_cont_prob):\n             col = col.copy()\n-            col[np.isnan(col)] = attr_prob.shape[1] - 1\n+            col[np.isnan(col)] = attr_prob.shape[1]\n             col = col.astype(int)\n             probs0 = np.vstack((attr_prob.T, zeros))\n             probs += probs0[col]\n@@ -113,6 +113,7 @@ class NaiveBayesModel(Model):\n             p0 = p.T[0].copy()\n             probs[:] += p0\n             log_prob[i, :p.shape[1]] = p.T - p0\n+            log_prob[i, n_vals-1] = -p0\n \n         dat = data.data.copy()\n         dat[np.isnan(dat)] = n_vals - 1\n.", "test_patch": "diff --git a/Orange/tests/test_naive_bayes.py b/Orange/tests/test_naive_bayes.py\nindex 9c20e76a7..c24484e7c 100644\n--- a/Orange/tests/test_naive_bayes.py\n+++ b/Orange/tests/test_naive_bayes.py\n@@ -101,14 +101,17 @@ class TestNaiveBayesLearner(unittest.TestCase):\n     def test_predictions(self):\n         self._test_predictions(sparse=None)\n         self._test_predictions_with_absent_class(sparse=None)\n+        self._test_predict_missing_attributes(sparse=None)\n \n     def test_predictions_csr_matrix(self):\n         self._test_predictions(sparse=sp.csr_matrix)\n         self._test_predictions_with_absent_class(sparse=sp.csr_matrix)\n+        self._test_predict_missing_attributes(sparse=sp.csr_matrix)\n \n     def test_predictions_csc_matrix(self):\n         self._test_predictions(sparse=sp.csc_matrix)\n         self._test_predictions_with_absent_class(sparse=sp.csc_matrix)\n+        self._test_predict_missing_attributes(sparse=sp.csc_matrix)\n \n     def _test_predictions(self, sparse):\n         x = np.array([\n@@ -311,6 +314,36 @@ class TestNaiveBayesLearner(unittest.TestCase):\n         np.testing.assert_almost_equal(exp_probs, probs)\n         np.testing.assert_equal(values, np.argmax(exp_probs, axis=1))\n \n+    def _test_predict_missing_attributes(self, sparse):\n+        x = np.array([\n+            [1, 0, 0],\n+            [0, 1, 0],\n+            [0, 0, 0],\n+            [0, 1, 0],\n+            [1, 1, 0],\n+            [1, 2, 0],\n+            [1, 2, np.nan]])\n+        if sparse is not None:\n+            x = sparse(x)\n+        y = np.array([1,0,0,0,1,1,1])\n+        domain = Domain(\n+            [DiscreteVariable(\"a\", values=\"ab\"),\n+             DiscreteVariable(\"b\", values=\"abc\"),\n+             DiscreteVariable(\"c\", values=\"a\")],\n+            DiscreteVariable(\"y\", values=\"AB\"))\n+        data = Table.from_numpy(domain, x, y)\n+\n+        model = self.learner(data)\n+        test_x = np.array([[np.nan, np.nan, np.nan],\n+                           [np.nan, 0, np.nan],\n+                           [0, np.nan, np.nan]])\n+        if sparse is not None and sparse is not sp.csc_matrix:\n+            test_x = sparse(test_x)\n+        probs = model(test_x, ret=model.Probs)\n+        np.testing.assert_almost_equal(probs, [[(3+1)/(7+2), (4+1)/(7+2)],\n+                                               [(1+1)/(2+2), (1+1)/(2+2)],\n+                                               [(3+1)/(3+2), (0+1)/(3+2)]])\n+\n     def test_no_attributes(self):\n         y = np.array([0, 0, 0, 1, 1, 1, 2, 2])\n         domain = Domain([], DiscreteVariable(\"y\", values=\"abc\"))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5821.0, "instance_id": "biolab__orange3-5821", "issue_numbers": 0, "base_commit": "c3e7011300ac031c90838ad45f11324026c9e39b", "patch": "diff --git a/Orange/widgets/utils/itemmodels.py b/Orange/widgets/utils/itemmodels.py\nindex 84fe03723..dc44a7bc5 100644\n--- a/Orange/widgets/utils/itemmodels.py\n+++ b/Orange/widgets/utils/itemmodels.py\n@@ -358,12 +358,17 @@ class PyTableModel(AbstractSortTableModel):\n \n \n class PyListModelTooltip(PyListModel):\n-    def __init__(self, iterable=None, tooltips=[], **kwargs):\n+    def __init__(self, iterable=None, tooltips=(), **kwargs):\n         super().__init__(iterable, **kwargs)\n+        if not isinstance(tooltips, Sequence):\n+            # may be a generator; if not, fail\n+            tooltips = list(tooltips)\n         self.tooltips = tooltips\n \n     def data(self, index, role=Qt.DisplayRole):\n         if role == Qt.ToolTipRole:\n+            if index.row() >= len(self.tooltips):\n+                return None\n             return self.tooltips[index.row()]\n         else:\n             return super().data(index, role)\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_itemmodels.py b/Orange/widgets/utils/tests/test_itemmodels.py\nindex d0a67b617..cdc8806b5 100644\n--- a/Orange/widgets/utils/tests/test_itemmodels.py\n+++ b/Orange/widgets/utils/tests/test_itemmodels.py\n@@ -4,8 +4,6 @@\n import unittest\n from unittest.mock import patch\n \n-import numpy as np\n-\n from AnyQt.QtCore import Qt, QModelIndex\n from AnyQt.QtTest import QSignalSpy\n \n@@ -14,8 +12,8 @@ from Orange.data import \\\n     ContinuousVariable, DiscreteVariable, StringVariable, TimeVariable\n from Orange.widgets.utils import colorpalettes\n from Orange.widgets.utils.itemmodels import \\\n-    AbstractSortTableModel, PyTableModel,\\\n-    PyListModel, VariableListModel, DomainModel, ContinuousPalettesModel, \\\n+    PyTableModel, PyListModel, PyListModelTooltip,\\\n+    VariableListModel, DomainModel, ContinuousPalettesModel, \\\n     _as_contiguous_range\n from Orange.widgets.gui import TableVariable\n from orangewidget.tests.base import GuiTest\n@@ -481,5 +479,54 @@ class TestContinuousPalettesModel(GuiTest):\n         self.assertIsNone(model.indexOf(42))\n \n \n+class TestPyListModelTooltip(GuiTest):\n+    def test_tooltips_size(self):\n+        def data(i):\n+            return model.data(model.index(i, 0))\n+\n+        def tip(i):\n+            return model.data(model.index(i, 0), Qt.ToolTipRole)\n+\n+        # Not enough tooptips - return None\n+        model = PyListModelTooltip([\"foo\", \"bar\", \"baz\"], [\"footip\", \"bartip\"])\n+        self.assertEqual(data(1), \"bar\")\n+        self.assertEqual(data(2), \"baz\")\n+        self.assertIsNone(data(3))\n+        self.assertEqual(tip(1), \"bartip\")\n+        self.assertIsNone(tip(2))\n+\n+        # No tooltips\n+        model = PyListModelTooltip([\"foo\", \"bar\", \"baz\"])\n+        self.assertIsNone(tip(1))\n+        self.assertIsNone(tip(2))\n+\n+        # Too many tooltips\n+        model = PyListModelTooltip([\"foo\", \"bar\"], [\"footip\", \"bartip\", \"btip\"])\n+        self.assertEqual(data(0), \"foo\")\n+        self.assertEqual(data(1), \"bar\")\n+        self.assertIsNone(data(2))\n+        self.assertEqual(tip(1), \"bartip\")\n+        self.assertEqual(tip(2), \"btip\")\n+\n+    def test_tooltip_arg(self):\n+        def tip(i):\n+            return model.data(model.index(i, 0), Qt.ToolTipRole)\n+\n+        # Allow generators\n+        s = dict(a=\"ta\", b=\"tb\")\n+        model = PyListModelTooltip(s, s.values())\n+        self.assertEqual(tip(0), \"ta\")\n+        self.assertEqual(tip(1), \"tb\")\n+\n+        # Basically backward compatibility; this behaviour diverges from\n+        # behaviour of data role\n+        s = []\n+        model = PyListModelTooltip([\"foo\"], s)\n+        self.assertIsNone(tip(0))\n+\n+        s += [\"footip\"]\n+        self.assertEqual(tip(1), \"footip\")\n+\n+\n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4494.0, "instance_id": "biolab__orange3-4494", "issue_numbers": 0, "base_commit": "2b096e03e46559f754aa958dc99e7e7f280296fe", "patch": "diff --git a/Orange/widgets/data/owcontinuize.py b/Orange/widgets/data/owcontinuize.py\nindex 9a7ece807..fa25ff4b4 100644\n--- a/Orange/widgets/data/owcontinuize.py\n+++ b/Orange/widgets/data/owcontinuize.py\n@@ -13,6 +13,7 @@ from Orange.widgets import gui, widget\n from Orange.widgets.settings import Setting\n from Orange.widgets.utils.sql import check_sql_input\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n \n \n@@ -108,7 +109,8 @@ class OWContinuize(widget.OWWidget):\n             self.info.set_output_summary(self.info.NoOutput)\n             self.Outputs.data.send(None)\n         else:\n-            self.info.set_input_summary(len(data))\n+            self.info.set_input_summary(len(data),\n+                                        format_summary_details(data))\n             self.unconditional_commit()\n \n     def enable_normalization(self):\n@@ -139,7 +141,8 @@ class OWContinuize(widget.OWWidget):\n             domain = continuizer(self.data)\n             data = self.data.transform(domain)\n             self.Outputs.data.send(data)\n-            self.info.set_output_summary(len(data))\n+            self.info.set_output_summary(len(data),\n+                                         format_summary_details(data))\n         else:\n             self.Outputs.data.send(self.data)  # None or empty data\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcontinuize.py b/Orange/widgets/data/tests/test_owcontinuize.py\nindex d06859d52..7ff7292b0 100644\n--- a/Orange/widgets/data/tests/test_owcontinuize.py\n+++ b/Orange/widgets/data/tests/test_owcontinuize.py\n@@ -10,7 +10,7 @@ from Orange.preprocess import transformation\n from Orange.widgets.data import owcontinuize\n from Orange.widgets.data.owcontinuize import OWContinuize\n from Orange.widgets.tests.base import WidgetTest\n-from orangewidget.widget import StateInfo\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWContinuize(WidgetTest):\n@@ -48,9 +48,11 @@ class TestOWContinuize(WidgetTest):\n         output_sum = self.widget.info.set_output_summary = Mock()\n \n         self.send_signal(self.widget.Inputs.data, data)\n-        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        input_sum.assert_called_with(len(data),\n+                                     format_summary_details(data))\n         output = self.get_output(self.widget.Outputs.data)\n-        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n \n         input_sum.reset_mock()\n         output_sum.reset_mock()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4151.0, "instance_id": "biolab__orange3-4151", "issue_numbers": 0, "base_commit": "2ee56ea0f09ec3124fa0f6b773a8cd42d6c7c7bd", "patch": "diff --git a/Orange/widgets/utils/save/owsavebase.py b/Orange/widgets/utils/save/owsavebase.py\nindex 8b444b04e..55bbf9286 100644\n--- a/Orange/widgets/utils/save/owsavebase.py\n+++ b/Orange/widgets/utils/save/owsavebase.py\n@@ -283,8 +283,9 @@ class OWSaveBase(widget.OWWidget, openclass=True):\n         # be sure we know what happens.\n         class SaveFileDialog(QFileDialog):\n             # pylint: disable=protected-access\n-            def __init__(self, *args, **kwargs):\n+            def __init__(self, save_cls, *args, **kwargs):\n                 super().__init__(*args, **kwargs)\n+                self.save_cls = save_cls\n                 self.suffix = \"\"\n                 self.setAcceptMode(QFileDialog.AcceptSave)\n                 self.setOption(QFileDialog.DontUseNativeDialog)\n@@ -295,17 +296,20 @@ class OWSaveBase(widget.OWWidget, openclass=True):\n                 self.updateDefaultExtension(selected_filter)\n \n             def updateDefaultExtension(self, selected_filter):\n-                self.suffix = OWSaveBase._extension_from_filter(selected_filter)\n+                self.suffix = \\\n+                    self.save_cls._extension_from_filter(selected_filter)\n                 files = self.selectedFiles()\n                 if files and not os.path.isdir(files[0]):\n                     self.selectFile(files[0])\n \n             def selectFile(self, filename):\n-                filename = OWSaveBase._replace_extension(filename, self.suffix)\n+                filename = \\\n+                    self.save_cls._replace_extension(filename, self.suffix)\n                 super().selectFile(filename)\n \n         def get_save_filename(self):\n             dlg = self.SaveFileDialog(\n+                type(self),\n                 None, \"Save File\", self.initial_start_dir(),\n                 \";;\".join(self.valid_filters()))\n             dlg.selectNameFilter(self.default_valid_filter())\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owsave.py b/Orange/widgets/data/tests/test_owsave.py\nindex d43147eee..5101c7f0d 100644\n--- a/Orange/widgets/data/tests/test_owsave.py\n+++ b/Orange/widgets/data/tests/test_owsave.py\n@@ -406,8 +406,8 @@ class TestOWSaveLinuxDialog(OWSaveTestBase):\n         instance.selectedFiles.return_value = [\"foo\"]\n         instance.selectedNameFilter.return_value = \"bar\"\n         self.assertEqual(widget.get_save_filename(), (\"foo\", \"bar\"))\n-        self.assertEqual(dlg.call_args[0][2], \"baz\")\n-        self.assertEqual(dlg.call_args[0][3], \"a;;b;;c\")\n+        self.assertEqual(dlg.call_args[0][3], \"baz\")\n+        self.assertEqual(dlg.call_args[0][4], \"a;;b;;c\")\n         instance.selectNameFilter.assert_called_with(\"b\")\n \n         instance.exec.return_value = QFileDialog.Rejected\n@@ -416,7 +416,7 @@ class TestOWSaveLinuxDialog(OWSaveTestBase):\n     @patch.object(OWSaveBase, \"filters\", OWSave.filters)\n     def test_save_file_dialog_enforces_extension_linux(self):\n         dialog = OWSave.SaveFileDialog(\n-            None, \"Save File\", \"foo.bar\",\n+            OWSave, None, \"Save File\", \"foo.bar\",\n             \"Bar files (*.tab);;Low files (*.csv)\")\n \n         dialog.selectNameFilter(\"Low files (*.csv)\")\n@@ -448,7 +448,7 @@ class TestOWSaveLinuxDialog(OWSaveTestBase):\n         instance = dlg.return_value\n         instance.exec.return_value = dlg.Rejected = QFileDialog.Rejected\n         widget.get_save_filename()\n-        self.assertEqual(dlg.call_args[0][3], \"a (*.a);;b (*.b)\")\n+        self.assertEqual(dlg.call_args[0][4], \"a (*.a);;b (*.b)\")\n         instance.selectNameFilter.assert_called_with(\"a (*.a)\")\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4505.0, "instance_id": "biolab__orange3-4505", "issue_numbers": 0, "base_commit": "331cc845b224af39e0330466011bb4c2435fc728", "patch": "diff --git a/Orange/widgets/data/owsave.py b/Orange/widgets/data/owsave.py\nindex 2a8446ab3..b3b55a4fa 100644\n--- a/Orange/widgets/data/owsave.py\n+++ b/Orange/widgets/data/owsave.py\n@@ -8,6 +8,7 @@ from Orange.widgets.widget import Input\n from Orange.widgets.settings import Setting\n from Orange.widgets.utils.save.owsavebase import OWSaveBase\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n _userhome = os.path.expanduser(f\"~{os.sep}\")\n@@ -35,6 +36,8 @@ class OWSave(OWSaveBase):\n     def __init__(self):\n         super().__init__(2)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+\n         self.grid.addWidget(\n             gui.checkBox(\n                 None, self, \"add_type_annotations\",\n@@ -79,13 +82,9 @@ class OWSave(OWSaveBase):\n             and self.filename and not self.writer.SUPPORT_SPARSE_DATA)\n \n     def update_status(self):\n-        if self.data is None:\n-            self.info.set_input_summary(self.info.NoInput)\n-        else:\n-            self.info.set_input_summary(\n-                str(len(self.data)),\n-                f\"Data set {self.data.name or '(no name)'} \"\n-                f\"with {len(self.data)} instances\")\n+        summary = len(self.data) if self.data else self.info.NoInput\n+        details = format_summary_details(self.data) if self.data else \"\"\n+        self.info.set_input_summary(summary, details)\n \n     def send_report(self):\n         self.report_data_brief(self.data)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owsave.py b/Orange/widgets/data/tests/test_owsave.py\nindex d09179a89..5982d3102 100644\n--- a/Orange/widgets/data/tests/test_owsave.py\n+++ b/Orange/widgets/data/tests/test_owsave.py\n@@ -13,6 +13,7 @@ from Orange.tests import named_file\n from Orange.widgets.data.owsave import OWSave, OWSaveBase\n from Orange.widgets.utils.save.tests.test_owsavebase import \\\n     SaveWidgetsTestBaseMixin\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.tests.base import WidgetTest, open_widget_classes\n \n \n@@ -55,7 +56,7 @@ class TestOWSave(OWSaveTestBase):\n \n         datasig = widget.Inputs.data\n         self.send_signal(datasig, self.iris)\n-        self.assertEqual(insum.call_args[0][0], \"150\")\n+        insum.assert_called_with(len(self.iris), format_summary_details(self.iris))\n         insum.reset_mock()\n         savefile.reset_mock()\n \n@@ -63,16 +64,18 @@ class TestOWSave(OWSaveTestBase):\n         widget.writer = TabReader\n         widget.auto_save = False\n         self.send_signal(datasig, self.iris)\n-        self.assertEqual(insum.call_args[0][0], \"150\")\n+        insum.assert_called_with(len(self.iris), format_summary_details(self.iris))\n         savefile.assert_not_called()\n \n         widget.auto_save = True\n         self.send_signal(datasig, self.iris)\n-        self.assertEqual(insum.call_args[0][0], \"150\")\n+        insum.assert_called_with(len(self.iris), format_summary_details(self.iris))\n         savefile.assert_called()\n \n+        insum.reset_mock()\n         self.send_signal(datasig, None)\n-        insum.assert_called_with(widget.info.NoInput)\n+        insum.assert_called_once()\n+        self.assertEqual(insum.call_args[0][0].brief, \"\")\n \n     def test_initial_start_dir(self):\n         widget = self.widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6409.0, "instance_id": "biolab__orange3-6409", "issue_numbers": 0, "base_commit": "17fe7bc655e7377f97440868db7ef05e072773a3", "patch": "diff --git a/Orange/widgets/data/utils/tableview.py b/Orange/widgets/data/utils/tableview.py\nindex b567c5613..f19ef62b4 100644\n--- a/Orange/widgets/data/utils/tableview.py\n+++ b/Orange/widgets/data/utils/tableview.py\n@@ -112,7 +112,9 @@ def is_table_sortable(table):\n     if isinstance(table, Orange.data.sql.table.SqlTable):\n         return False\n     elif isinstance(table, Orange.data.Table):\n-        return True\n+        # Dense only (due to sparse basket column).\n+        return all(d == Orange.data.Table.DENSE for d in\n+                   (table.X_density(), table.Y_density(), table.metas_density()))\n     else:\n         return False\n \n.", "test_patch": "diff --git a/Orange/widgets/data/utils/tests/test_tableview.py b/Orange/widgets/data/utils/tests/test_tableview.py\nindex f3d18ade5..c042843ca 100644\n--- a/Orange/widgets/data/utils/tests/test_tableview.py\n+++ b/Orange/widgets/data/utils/tests/test_tableview.py\n@@ -58,3 +58,12 @@ class TableViewTest(GuiTest):\n         sel = [(idx.row(), idx.column()) for idx in view.selectedIndexes()]\n         self.assertEqual(sorted(sel), [(0, 2), (0, 3), (1, 2), (1, 3)])\n         self.assertEqual(view.blockSelection(), ([1, 2], [2, 3]))\n+\n+    def test_basket_column(self):\n+        model = RichTableModel(self.data.to_sparse())\n+        view = RichTableView()\n+        view.setModel(model)\n+        self.assertFalse(view.isSortingEnabled())\n+        view.grab()\n+        model.setRichHeaderFlags(RichTableModel.Name | RichTableModel.Labels)\n+        view.grab()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6101.0, "instance_id": "biolab__orange3-6101", "issue_numbers": 0, "base_commit": "9d73b8e3a8a248273495b1d3d80cf16d16ee78f3", "patch": "diff --git a/Orange/widgets/evaluate/owconfusionmatrix.py b/Orange/widgets/evaluate/owconfusionmatrix.py\nindex 00f194541..54c9377a9 100644\n--- a/Orange/widgets/evaluate/owconfusionmatrix.py\n+++ b/Orange/widgets/evaluate/owconfusionmatrix.py\n@@ -99,7 +99,8 @@ class OWConfusionMatrix(widget.OWWidget):\n \n     quantities = [\"Number of instances\",\n                   \"Proportion of predicted\",\n-                  \"Proportion of actual\"]\n+                  \"Proportion of actual\",\n+                  \"Sum of probabilities\"]\n \n     settings_version = 1\n     settingsHandler = ClassValuesContextHandler()\n@@ -445,7 +446,8 @@ class OWConfusionMatrix(widget.OWWidget):\n \n         # Update the displayed confusion matrix\n         if self.results is not None and self.selected_learner:\n-            cmatrix = confusion_matrix(self.results, self.selected_learner[0])\n+            learner_index = self.selected_learner[0]\n+            cmatrix = confusion_matrix(self.results, learner_index)\n             colsum = cmatrix.sum(axis=0)\n             rowsum = cmatrix.sum(axis=1)\n             n = len(cmatrix)\n@@ -457,6 +459,16 @@ class OWConfusionMatrix(widget.OWWidget):\n                 normalized = cmatrix.astype(int)\n                 formatstr = \"{}\"\n                 div = np.array([colors.max()])\n+            elif self.selected_quantity == 3:\n+                normalized = np.zeros((n, n), dtype=float)\n+                probabilities = self.results.probabilities[learner_index]\n+                for index in np.unique(self.results.actual).astype(int):\n+                    mask = self.results.actual == index\n+                    normalized[index] = np.sum(probabilities[mask], axis=0)\n+                colsum = normalized.sum(axis=0)\n+                rowsum = normalized.sum(axis=1)\n+                formatstr = \"{:2.1f}\"\n+                div = np.array([colors.max()])\n             else:\n                 if self.selected_quantity == 1:\n                     normalized = 100 * cmatrix / colsum\n@@ -496,6 +508,7 @@ class OWConfusionMatrix(widget.OWWidget):\n             bold_font.setBold(True)\n \n             def _sum_item(value, border=\"\"):\n+                value = int(round(value))\n                 item = QStandardItem()\n                 item.setData(value, Qt.DisplayRole)\n                 item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)\n@@ -506,9 +519,9 @@ class OWConfusionMatrix(widget.OWWidget):\n                 return item\n \n             for i in range(n):\n-                self._set_item(n + 2, i + 2, _sum_item(int(colsum[i]), \"t\"))\n-                self._set_item(i + 2, n + 2, _sum_item(int(rowsum[i]), \"l\"))\n-            self._set_item(n + 2, n + 2, _sum_item(int(rowsum.sum())))\n+                self._set_item(n + 2, i + 2, _sum_item(colsum[i], \"t\"))\n+                self._set_item(i + 2, n + 2, _sum_item(rowsum[i], \"l\"))\n+            self._set_item(n + 2, n + 2, _sum_item(rowsum.sum()))\n \n     def send_report(self):\n         \"\"\"Send report\"\"\"\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owconfusionmatrix.py b/Orange/widgets/evaluate/tests/test_owconfusionmatrix.py\nindex 1261e03ef..82939cd84 100644\n--- a/Orange/widgets/evaluate/tests/test_owconfusionmatrix.py\n+++ b/Orange/widgets/evaluate/tests/test_owconfusionmatrix.py\n@@ -9,7 +9,7 @@ from Orange.evaluation.testing import CrossValidation, TestOnTrainingData, \\\n     ShuffleSplit, Results\n from Orange.widgets.evaluate.owconfusionmatrix import OWConfusionMatrix\n from Orange.widgets.tests.base import WidgetTest, WidgetOutputsTestMixin\n-from Orange.widgets.tests.utils import possible_duplicate_table\n+from Orange.widgets.tests.utils import possible_duplicate_table, simulate\n \n \n class TestOWConfusionMatrix(WidgetTest, WidgetOutputsTestMixin):\n@@ -153,6 +153,40 @@ class TestOWConfusionMatrix(WidgetTest, WidgetOutputsTestMixin):\n                           'p(Iris-setosa) (1)', 'p(Iris-versicolor) (1)',\n                           'p(Iris-virginica) (1)'})\n \n+    def test_sum_of_probabilities(self):\n+        results: Results = self.results_1_iris\n+        self.send_signal(self.widget.Inputs.evaluation_results, results)\n+\n+        model = self.widget.tablemodel\n+        n = model.rowCount() - 3\n+        matrix = np.zeros((n, n))\n+        probabilities = results.probabilities[0]\n+        for label_index in np.unique(results.actual).astype(int):\n+            mask = results.actual == label_index\n+            prob_sum = np.sum(probabilities[mask], axis=0)\n+            matrix[label_index] = prob_sum\n+        colsum = matrix.sum(axis=0)\n+        rowsum = matrix.sum(axis=1)\n+\n+        simulate.combobox_activate_index(\n+            self.widget.controls.selected_quantity, 3)\n+        # matrix\n+        for i in range(n):\n+            for j in range(n):\n+                value = model.data(model.index(i + 2, j + 2))\n+                self.assertAlmostEqual(float(value), matrix[i, j], 1)\n+        # rowsum\n+        for i in range(n):\n+            value = model.data(model.index(i + 2, n + 2))\n+            self.assertAlmostEqual(float(value), rowsum[i], 0)\n+        # colsum\n+        for i in range(n):\n+            value = model.data(model.index(n + 2, i + 2))\n+            self.assertAlmostEqual(float(value), colsum[i], 0)\n+        # total\n+        value = model.data(model.index(n + 2, n + 2))\n+        self.assertAlmostEqual(float(value), colsum.sum(), 0)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5218.0, "instance_id": "biolab__orange3-5218", "issue_numbers": 0, "base_commit": "80f38c46f4bfbe82efa830aaceb7f2f274c2e201", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 379c0987f..ed26711ce 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -2025,6 +2025,13 @@ def _optimize_indices(indices, maxlen):\n     if indices is ...:\n         return slice(None, None, 1)\n \n+    # a very common case for column selection\n+    if len(indices) == 1 and not isinstance(indices[0], bool):\n+        if indices[0] >= 0:\n+            return slice(indices[0], indices[0] + 1, 1)\n+        else:\n+            return slice(indices[0], indices[0] - 1, -1)\n+\n     if len(indices) >= 1:\n         indices = np.asarray(indices)\n         if indices.dtype != bool:\n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex 1927a71c7..02168ff44 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -1962,7 +1962,7 @@ class TableIndexingTests(TableTests):\n \n         # single element\n         self.assertEqual(_optimize_indices([1], 2), slice(1, 2, 1))\n-        np.testing.assert_equal(_optimize_indices([1], 1), [1])\n+        self.assertEqual(_optimize_indices([-2], 5), slice(-2, -3, -1))\n \n \n class TableElementAssignmentTest(TableTests):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6123.0, "instance_id": "biolab__orange3-6123", "issue_numbers": 0, "base_commit": "ba814bd7c2ff10e3daf74b6f32cc596ce2255029", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex ccb73061e..c69450f60 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -2828,7 +2828,15 @@ class ToContinuousTransform(Transformation):\n \n def datetime_to_epoch(dti: pd.DatetimeIndex, only_time) -> np.ndarray:\n     \"\"\"Convert datetime to epoch\"\"\"\n-    delta = dti - (dti.normalize() if only_time else pd.Timestamp(\"1970-01-01\"))\n+    # when dti has timezone info also the subtracted timestamp must have it\n+    # otherwise subtracting fails\n+    initial_ts = pd.Timestamp(\"1970-01-01\", tz=None if dti.tz is None else \"UTC\")\n+    # pandas in versions before 1.4 don't support subtracting different timezones\n+    # remove next two lines when read-the-docs start supporting config files\n+    # for subprojects, or they change default python version to 3.8\n+    if dti.tz is not None:\n+        dti = dti.tz_convert(\"UTC\")\n+    delta = dti - (dti.normalize() if only_time else initial_ts)\n     return (delta / pd.Timedelta(\"1s\")).values\n \n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex b4a7f7342..01b9d5fa4 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -921,13 +921,18 @@ class TestReinterpretTransforms(TestCase):\n         times = (\n             [\"07.02.2022\", \"18.04.2021\"],  # date only\n             [\"07.02.2022 01:02:03\", \"18.04.2021 01:02:03\"],  # datetime\n+            # datetime with timezone\n+            [\"2021-02-08 01:02:03+01:00\", \"2021-02-07 01:02:03+01:00\"],\n             [\"010203\", \"010203\"],  # time\n             [\"02-07\", \"04-18\"],\n         )\n-        formats = [\"25.11.2021\", \"25.11.2021 00:00:00\", \"000000\", \"11-25\"]\n+        formats = [\n+            \"25.11.2021\", \"25.11.2021 00:00:00\", \"2021-11-25 00:00:00\", \"000000\", \"11-25\"\n+        ]\n         expected = [\n             [d(\"2022-02-07\"), d(\"2021-04-18\")],\n             [d(\"2022-02-07 01:02:03\"), d(\"2021-04-18 01:02:03\")],\n+            [d(\"2021-02-08 01:02:03+0100\"), d(\"2021-02-07 01:02:03+0100\")],\n             [d(\"01:02:03\"), d(\"01:02:03\")],\n             [d(\"1900-02-07\"), d(\"1900-04-18\")],\n         ]\n@@ -952,6 +957,16 @@ class TestReinterpretTransforms(TestCase):\n             np.array(list(chain(expected, expected)), dtype=float).transpose()\n         )\n \n+    def test_raise_pandas_version(self):\n+        \"\"\"\n+        When this test start to fail:\n+        - remove this test\n+        - remove if clause in datetime_to_epoch function and supporting comments\n+        - set pandas dependency version to pandas>=1.4\n+        \"\"\"\n+        from datetime import datetime\n+        self.assertLess(datetime.today(), datetime(2023, 1, 1))\n+\n     def test_reinterpret_string(self):\n         table = self.data_str\n         domain = table.domain\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5423.0, "instance_id": "biolab__orange3-5423", "issue_numbers": 0, "base_commit": "f68f2937cfb147f679da58df0432f2786289ca15", "patch": "diff --git a/Orange/widgets/unsupervised/owdbscan.py b/Orange/widgets/unsupervised/owdbscan.py\nindex c4cd4eabc..82f742a06 100644\n--- a/Orange/widgets/unsupervised/owdbscan.py\n+++ b/Orange/widgets/unsupervised/owdbscan.py\n@@ -10,7 +10,7 @@ from Orange.preprocess import Normalize, Continuize, SklImpute\n from Orange.widgets import widget, gui\n from Orange.widgets.utils.slidergraph import SliderGraph\n from Orange.widgets.settings import Setting\n-from Orange.data import Table, Domain, DiscreteVariable\n+from Orange.data import Table, DiscreteVariable\n from Orange.data.util import get_unique_names\n from Orange.clustering import DBSCAN\n from Orange.widgets.utils.annotated_data import ANNOTATED_DATA_SIGNAL_NAME\n@@ -197,11 +197,10 @@ class OWDBSCAN(widget.OWWidget):\n \n         clusters = [c if c >= 0 else np.nan for c in model.labels]\n         k = len(set(clusters) - {np.nan})\n-        clusters = np.array(clusters).reshape(len(self.data), 1)\n+        clusters = np.array(clusters)\n         core_samples = set(model.projector.core_sample_indices_)\n         in_core = np.array([1 if (i in core_samples) else 0\n                             for i in range(len(self.data))])\n-        in_core = in_core.reshape(len(self.data), 1)\n \n         domain = self.data.domain\n         attributes, classes = domain.attributes, domain.class_vars\n@@ -215,15 +214,8 @@ class OWDBSCAN(widget.OWWidget):\n         u_in_core = get_unique_names(names + [u_clust_var], \"DBSCAN Core\")\n         in_core_var = DiscreteVariable(u_in_core, values=(\"0\", \"1\"))\n \n-        x, y, metas = self.data.X, self.data.Y, self.data.metas\n-\n-        meta_attrs += (clust_var, )\n-        metas = np.hstack((metas, clusters))\n-        meta_attrs += (in_core_var, )\n-        metas = np.hstack((metas, in_core))\n-\n-        domain = Domain(attributes, classes, meta_attrs)\n-        new_table = Table(domain, x, y, metas, self.data.W)\n+        new_table = self.data.add_column(clust_var, clusters, to_metas=True)\n+        new_table = new_table.add_column(in_core_var, in_core, to_metas=True)\n \n         self._set_output_summary(new_table)\n         self.Outputs.annotated_data.send(new_table)\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owdbscan.py b/Orange/widgets/unsupervised/tests/test_owdbscan.py\nindex dc620cc3e..c7e434c1d 100644\n--- a/Orange/widgets/unsupervised/tests/test_owdbscan.py\n+++ b/Orange/widgets/unsupervised/tests/test_owdbscan.py\n@@ -218,6 +218,11 @@ class TestOWDBSCAN(WidgetTest):\n         data = Table(\"titanic\")\n         self.send_signal(w.Inputs.data, data)\n \n+    def test_data_retain_ids(self):\n+        self.send_signal(self.widget.Inputs.data, self.iris)\n+        output = self.get_output(self.widget.Outputs.annotated_data)\n+        np.testing.assert_array_equal(self.iris.ids, output.ids)\n+\n     def test_missing_data(self):\n         w = self.widget\n         self.iris[1:5, 1] = np.nan\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4722.0, "instance_id": "biolab__orange3-4722", "issue_numbers": 0, "base_commit": "b5e910f4aef4b3e10daf997b494d51c2f220b236", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex a2a4b848f..ddcd666a2 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -1770,6 +1770,7 @@ class OWEditDomain(widget.OWWidget):\n     _domain_change_store = settings.ContextSetting({})\n     _selected_item = settings.ContextSetting(None)  # type: Optional[Tuple[str, int]]\n     _merge_dialog_settings = settings.ContextSetting({})\n+    output_table_name = settings.ContextSetting(\"\")\n \n     want_control_area = False\n \n@@ -1809,6 +1810,10 @@ class OWEditDomain(widget.OWWidget):\n \n         box.layout().addWidget(self._editor)\n \n+        self.le_output_name = gui.lineEdit(\n+            self.mainArea, self, \"output_table_name\", \"Output table name: \",\n+            box=True, orientation=Qt.Horizontal)\n+\n         bbox = QDialogButtonBox()\n         bbox.setStyleSheet(\n             \"button-layout: {:d};\".format(QDialogButtonBox.MacLayout))\n@@ -1856,10 +1861,12 @@ class OWEditDomain(widget.OWWidget):\n             self.info.set_input_summary(len(data),\n                                         format_summary_details(data))\n             self.setup_model(data)\n+            self.le_output_name.setPlaceholderText(data.name)\n             self.openContext(self.data)\n             self._editor.set_merge_context(self._merge_dialog_settings)\n             self._restore()\n         else:\n+            self.le_output_name.setPlaceholderText(\"\")\n             self.info.set_input_summary(self.info.NoInput)\n \n         self.commit()\n@@ -2054,7 +2061,8 @@ class OWEditDomain(widget.OWWidget):\n                     model.data(midx, TransformRole))\n \n         state = [state(i) for i in range(model.rowCount())]\n-        if all(tr is None or not tr for _, tr in state):\n+        if all(tr is None or not tr for _, tr in state) \\\n+                and self.output_table_name in (\"\", data.name):\n             self.Outputs.data.send(data)\n             self.info.set_output_summary(len(data),\n                                          format_summary_details(data))\n@@ -2090,6 +2098,8 @@ class OWEditDomain(widget.OWWidget):\n         Ys = [v for v in Ys if v.is_primitive()]\n         domain = Orange.data.Domain(Xs, Ys, Ms)\n         new_data = data.transform(domain)\n+        if self.output_table_name:\n+            new_data.name = self.output_table_name\n         self.Outputs.data.send(new_data)\n         self.info.set_output_summary(len(new_data),\n                                      format_summary_details(new_data))\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex e37cc5e23..a8ed3fe45 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -171,6 +171,11 @@ class TestOWEditDomain(WidgetTest):\n         np.testing.assert_array_equal(output.Y, self.iris.Y)\n         self.assertEqual(output.domain, self.iris.domain)\n \n+        self.widget.output_table_name = \"Iris 2\"\n+        self.widget.commit()\n+        output = self.get_output(self.widget.Outputs.data)\n+        self.assertEqual(output.name, \"Iris 2\")\n+\n     def test_input_from_owcolor(self):\n         \"\"\"Check widget's data sent from OWColor widget\"\"\"\n         owcolor = self.create_widget(OWColor)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4960.0, "instance_id": "biolab__orange3-4960", "issue_numbers": 0, "base_commit": "6b142339df483cd861e65e1acc7a85c3aab717ca", "patch": "diff --git a/Orange/widgets/data/owmergedata.py b/Orange/widgets/data/owmergedata.py\nindex 359e01139..fe2a5414e 100644\n--- a/Orange/widgets/data/owmergedata.py\n+++ b/Orange/widgets/data/owmergedata.py\n@@ -221,8 +221,13 @@ class MergeDataContextHandler(ContextHandler):\n         context = widget.current_context\n         if context is None:\n             return\n-        pairs = context.values.get(\"attr_pairs\", [])\n-        widget.attr_pairs = [self.decode_pair(widget, pair) for pair in pairs]\n+        pairs = context.values.get(\"attr_pairs\")\n+        if pairs:\n+            # attr_pairs is schema only setting which means it is not always\n+            # present. When not present leave widgets default.\n+            widget.attr_pairs = [\n+                self.decode_pair(widget, pair) for pair in pairs\n+            ]\n \n     def match(self, context, variables1, variables2):\n         def matches(part, variables):\n@@ -232,9 +237,10 @@ class MergeDataContextHandler(ContextHandler):\n         if (variables1, variables2) == (context.variables1, context.variables2):\n             return self.PERFECT_MATCH\n \n-        left, right = zip(*context.values[\"attr_pairs\"])\n-        if matches(left, variables1) and matches(right, variables2):\n-            return 0.5\n+        if \"attr_pairs\" in context.values:\n+            left, right = zip(*context.values[\"attr_pairs\"])\n+            if matches(left, variables1) and matches(right, variables2):\n+                return 0.5\n \n         return self.NO_MATCH\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owmergedata.py b/Orange/widgets/data/tests/test_owmergedata.py\nindex 36a7efe06..995d018a2 100644\n--- a/Orange/widgets/data/tests/test_owmergedata.py\n+++ b/Orange/widgets/data/tests/test_owmergedata.py\n@@ -4,6 +4,7 @@\n # pylint: disable=too-many-lines,too-many-public-methods, protected-access\n from itertools import chain\n import unittest\n+from types import SimpleNamespace\n from unittest.mock import Mock\n \n import numpy as np\n@@ -1076,6 +1077,37 @@ class MergeDataContextHandlerTest(unittest.TestCase):\n         handler.settings_from_widget(widget)  # mustn't crash\n         handler.settings_to_widget(widget)  # mustn't crash\n \n+    def test_attr_pairs_not_present(self):\n+        data = Table(\"iris\")\n+\n+        context = SimpleNamespace(values={})\n+        widget = SimpleNamespace(\n+            current_context=context, attr_pairs=(\"a\", \"b\")\n+        )\n+        handler = MergeDataContextHandler()\n+\n+        handler.settings_to_widget(widget)  # mustn't crash\n+        # no attr_pairs in context -> handler must not change widget.attr_pairs\n+        self.assertTupleEqual(widget.attr_pairs, (\"a\", \"b\"))\n+\n+        context = SimpleNamespace(\n+            values={\n+                \"attr_pairs\": [((data.domain[0], 100), (data.domain[1], 100))]\n+            }\n+        )\n+        widget = SimpleNamespace(\n+            current_context=context,\n+            attr_pairs=(\"a\", \"b\"),\n+            data=data,\n+            extra_data=data,\n+        )\n+\n+        handler.settings_to_widget(widget)  # mustn't crash\n+        # values taken from context\n+        self.assertListEqual(\n+            widget.attr_pairs, [(data.domain[0], data.domain[1])]\n+        )\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4738.0, "instance_id": "biolab__orange3-4738", "issue_numbers": 0, "base_commit": "d019c6c0533673154db5e9efeb251b7eebcf3905", "patch": "diff --git a/Orange/widgets/evaluate/owtestandscore.py b/Orange/widgets/evaluate/owtestandscore.py\nindex 4b4a463d0..73439e389 100644\n--- a/Orange/widgets/evaluate/owtestandscore.py\n+++ b/Orange/widgets/evaluate/owtestandscore.py\n@@ -32,6 +32,7 @@ import Orange.evaluation\n from Orange.evaluation import Results\n from Orange.preprocess.preprocess import Preprocess\n import Orange.regression\n+from Orange.statistics.util import unique\n from Orange.widgets import gui, settings, widget\n from Orange.widgets.evaluate.utils import \\\n     usable_scorers, ScoreTable, learner_name, scorer_caller\n@@ -187,19 +188,15 @@ class OWTestAndScore(OWWidget):\n     class_selection = settings.ContextSetting(TARGET_AVERAGE)\n \n     class Error(OWWidget.Error):\n-        train_data_empty = Msg(\"Train dataset is empty.\")\n         test_data_empty = Msg(\"Test dataset is empty.\")\n-        class_required = Msg(\"Train data input requires a target variable.\")\n-        too_many_classes = Msg(\"Too many target variables.\")\n         class_required_test = Msg(\"Test data input requires a target variable.\")\n         too_many_folds = Msg(\"Number of folds exceeds the data size\")\n         class_inconsistent = Msg(\"Test and train datasets \"\n                                  \"have different target variables.\")\n         memory_error = Msg(\"Not enough memory.\")\n-        no_class_values = Msg(\"Target variable has no values.\")\n-        only_one_class_var_value = Msg(\"Target variable has only one value.\")\n         test_data_incompatible = Msg(\n             \"Test data may be incompatible with train data.\")\n+        train_data_error = Msg(\"{}\")\n \n     class Warning(OWWidget.Warning):\n         missing_data = \\\n@@ -382,26 +379,27 @@ class OWTestAndScore(OWWidget):\n         \"\"\"\n         self.cancel()\n         self.Information.data_sampled.clear()\n-        self.Error.train_data_empty.clear()\n-        self.Error.class_required.clear()\n-        self.Error.too_many_classes.clear()\n-        self.Error.no_class_values.clear()\n-        self.Error.only_one_class_var_value.clear()\n-        if data is not None and not data:\n-            self.Error.train_data_empty()\n-            data = None\n-        if data:\n-            conds = [not data.domain.class_vars,\n-                     len(data.domain.class_vars) > 1,\n-                     np.isnan(data.Y).all(),\n-                     data.domain.has_discrete_class and len(data.domain.class_var.values) == 1]\n-            errors = [self.Error.class_required,\n-                      self.Error.too_many_classes,\n-                      self.Error.no_class_values,\n-                      self.Error.only_one_class_var_value]\n-            for cond, error in zip(conds, errors):\n+        self.Error.train_data_error.clear()\n+\n+        if data is not None:\n+            data_errors = [\n+                (\"Train dataset is empty.\", len(data) == 0),\n+                (\n+                    \"Train data input requires a target variable.\",\n+                    not data.domain.class_vars\n+                ),\n+                (\"Too many target variables.\", len(data.domain.class_vars) > 1),\n+                (\"Target variable has no values.\", np.isnan(data.Y).all()),\n+                (\n+                    \"Target variable has only one value.\",\n+                    data.domain.has_discrete_class and len(unique(data.Y)) < 2\n+                ),\n+                (\"Data has no features to learn from.\", data.X.shape[1] == 0),\n+            ]\n+\n+            for error_msg, cond in data_errors:\n                 if cond:\n-                    error()\n+                    self.Error.train_data_error(error_msg)\n                     data = None\n                     break\n \n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owtestandscore.py b/Orange/widgets/evaluate/tests/test_owtestandscore.py\nindex 9a20fea8d..0eb8aa25d 100644\n--- a/Orange/widgets/evaluate/tests/test_owtestandscore.py\n+++ b/Orange/widgets/evaluate/tests/test_owtestandscore.py\n@@ -166,25 +166,38 @@ class TestOWTestAndScore(WidgetTest):\n                 \"yyyy\"))\n         )\n         self.widget.n_folds = 0\n-        self.assertFalse(self.widget.Error.only_one_class_var_value.is_shown())\n+        self.assertFalse(self.widget.Error.train_data_error.is_shown())\n         self.send_signal(\"Data\", table)\n         self.send_signal(\"Learner\", MajorityLearner(), 0, wait=1000)\n-        self.assertTrue(self.widget.Error.only_one_class_var_value.is_shown())\n+        self.assertTrue(self.widget.Error.train_data_error.is_shown())\n \n-    def test_nan_class(self):\n-        \"\"\"\n-        Do not crash on a data with only nan class values.\n-        GH-2751\n-        \"\"\"\n-        def assertErrorShown(data, is_shown):\n+    def test_data_errors(self):\n+        \"\"\" Test all data_errors \"\"\"\n+        def assertErrorShown(data, is_shown, message):\n             self.send_signal(\"Data\", data)\n-            self.assertEqual(is_shown, self.widget.Error.no_class_values.is_shown())\n+            self.assertEqual(is_shown, self.widget.Error.train_data_error.is_shown())\n+            self.assertEqual(message, str(self.widget.Error.train_data_error))\n \n         data = Table(\"iris\")[::30]\n         data.Y[:] = np.nan\n \n-        for data, is_shown in zip([None, data, Table(\"iris\")[:30]], [False, True, False]):\n-            assertErrorShown(data, is_shown)\n+        iris_empty_x = Table.from_table(\n+            Domain([], data.domain.class_var), Table(\"iris\")\n+        )\n+\n+        for data, is_shown, message in zip(\n+                [None, data, Table(\"iris\")[:30], iris_empty_x, data[:0]],\n+                [False, True, True, True, True],\n+                [\n+                    \"\",\n+                    \"Target variable has no values.\",\n+                    \"Target variable has only one value.\",\n+                    \"Data has no features to learn from.\",\n+                    \"Train dataset is empty.\"\n+                ]\n+\n+        ):\n+            assertErrorShown(data, is_shown, message)\n \n     def test_addon_scorers(self):\n         try:\n@@ -319,15 +332,19 @@ class TestOWTestAndScore(WidgetTest):\n         self.send_signal(self.widget.Inputs.learner, learner, 0, wait=5000)\n         return self._retrieve_scores()\n \n-    def test_scores_constant_all_same(self):\n+    def test_scores_constant(self):\n         table = Table.from_list(\n             self.scores_domain,\n-            list(zip(*self.scores_table_values + [list(\"yyyy\")]))\n+            list(zip(*self.scores_table_values + [list(\"yyyn\")]))\n         )\n \n-        self.assertTupleEqual(self._test_scores(\n-            table, table, ConstantLearner(), OWTestAndScore.TestOnTest, None),\n-                              (None, 1, 1, 1, 1))\n+        self.assertTupleEqual(\n+            self._test_scores(\n+                table, table[:3], ConstantLearner(),\n+                OWTestAndScore.TestOnTest, None\n+            ),\n+            (None, 1, 1, 1, 1)\n+        )\n \n     def test_scores_log_reg_overfitted(self):\n         table = Table.from_list(\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5620.0, "instance_id": "biolab__orange3-5620", "issue_numbers": 0, "base_commit": "8ed85c8ec9ea71e27710e1be143fece496a3d2ec", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex ffaaa09d9..95e9e92cc 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -386,11 +386,13 @@ def table_from_frames(xdf, ydf, mdf):\n     XYM = (xXYM[0], yXYM[1], mXYM[2])\n     domain = Domain(xDomain.attributes, yDomain.class_vars, mDomain.metas)\n \n-    index_iter = (filter(lambda ind: ind.startswith('_o'),\n-                         set(df.index[i] for df in dfs))\n-                  for i in range(len(xdf.shape[0])))\n-    ids = (i[0] if len(i) == 1 else Table.new_id()\n-           for i in index_iter)\n+    indexes = [df.index for df in dfs]\n+    ids = [\n+        int(x[2:])\n+        if str(x).startswith(\"_o\") and x[2:].isdigit() and x == y == m\n+        else Table.new_id()\n+        for x, y, m in zip(*indexes)\n+    ]\n \n     attributes = {}\n     W = None\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 8fb8191eb..999c23597 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -428,6 +428,21 @@ class TestPandasCompat(unittest.TestCase):\n             self.assertEqual(len(df), len(table), assert_message)\n             self.assertEqual(len(df.columns), len(table.domain.variables), assert_message)\n \n+    def test_table_from_frames(self):\n+        table = Table(\"brown-selected\")\n+        table.ids = np.arange(100, len(table) + 100, 1, dtype=int)\n+\n+        x, y, m = table.to_pandas_dfs()\n+        new_table = Table.from_pandas_dfs(x, y, m)\n+\n+        np.testing.assert_array_equal(table.X, new_table.X)\n+        np.testing.assert_array_equal(table.Y, new_table.Y)\n+        np.testing.assert_array_equal(table.metas, new_table.metas)\n+        np.testing.assert_array_equal(table.ids, new_table.ids)\n+        self.assertTupleEqual(table.domain.attributes, new_table.domain.attributes)\n+        self.assertTupleEqual(table.domain.metas, new_table.domain.metas)\n+        self.assertEqual(table.domain.class_var, new_table.domain.class_var)\n+\n \n class TestTablePandas(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6189.0, "instance_id": "biolab__orange3-6189", "issue_numbers": 0, "base_commit": "5b67ff8bcc42fd67c7299c88b0be3a181d8596cf", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 260b804a4..ab3b76990 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -7,6 +7,7 @@ import weakref\n import zlib\n from collections.abc import Iterable, Sequence, Sized\n from contextlib import contextmanager\n+from copy import deepcopy\n from functools import reduce\n from itertools import chain\n from numbers import Real, Integral\n@@ -821,7 +822,7 @@ class Table(Sequence, Storage):\n                     self.ids = source.ids[row_indices]\n                 else:\n                     cls._init_ids(self)\n-                self.attributes = getattr(source, 'attributes', {})\n+                self.attributes = deepcopy(getattr(source, 'attributes', {}))\n                 _idcache_save(_thread_local.conversion_cache, (domain, source), self)\n             return self\n         finally:\n@@ -879,7 +880,7 @@ class Table(Sequence, Storage):\n             self.W = source.W[row_indices]\n             self.name = getattr(source, 'name', '')\n             self.ids = np.array(source.ids[row_indices])\n-            self.attributes = getattr(source, 'attributes', {})\n+            self.attributes = deepcopy(getattr(source, 'attributes', {}))\n         return self\n \n     @classmethod\n@@ -2284,7 +2285,7 @@ class Table(Sequence, Storage):\n             self.domain = Domain(attributes, class_vars, metas)\n             progress_callback(0.9)\n             cls._init_ids(self)\n-            self.attributes = table.attributes.copy()\n+            self.attributes = deepcopy(table.attributes)\n             self.attributes[\"old_domain\"] = table.domain\n             progress_callback(1)\n             return self\n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex bf2ebfead..e9c4559ed 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -17,7 +17,7 @@ import numpy as np\n import scipy.sparse as sp\n \n from Orange import data\n-from Orange.data import (filter, Unknown, Variable, Table, DiscreteVariable,\n+from Orange.data import (filter, Unknown, Table, DiscreteVariable,\n                          ContinuousVariable, Domain, StringVariable)\n from Orange.data.util import SharedComputeValue\n from Orange.tests import test_dirname\n@@ -1165,7 +1165,8 @@ class TableTestCase(unittest.TestCase):\n         table2 = table[:4]\n         self.assertEqual(table2.attributes[1], \"test\")\n         table2.attributes[1] = \"modified\"\n-        self.assertEqual(table.attributes[1], \"modified\")\n+        self.assertEqual(table.attributes[1], \"test\")\n+        self.assertEqual(table2.attributes[1], \"modified\")\n \n     # TODO Test conjunctions and disjunctions of conditions\n \n@@ -1893,6 +1894,28 @@ class CreateTableWithDomainAndTable(TableTests):\n         np.testing.assert_almost_equal(new_table.metas, magic[rows, mcols])\n         np.testing.assert_almost_equal(new_table.W, old_table.W[rows])\n \n+    def test_attributes_copied(self):\n+        \"\"\"Table created from table attributes dict copied\"\"\"\n+        self.table.attributes = {\"A\": \"Test\", \"B\": []}\n+\n+        # from_table\n+        new_table = self.table.from_table(self.table.domain, self.table)\n+        self.assertDictEqual(new_table.attributes, {\"A\": \"Test\", \"B\": []})\n+        new_table.attributes[\"A\"] = \"Changed\"\n+        new_table.attributes[\"B\"].append(1)\n+        self.assertDictEqual(new_table.attributes, {\"A\": \"Changed\", \"B\": [1]})\n+        # attributes dict of old table not be changed since new dist is a copy\n+        self.assertDictEqual(self.table.attributes, {\"A\": \"Test\", \"B\": []})\n+\n+        # from_table_rows\n+        new_table = self.table.from_table_rows(self.table, [1, 2])\n+        self.assertDictEqual(new_table.attributes, {\"A\": \"Test\", \"B\": []})\n+        new_table.attributes[\"A\"] = \"Changed\"\n+        new_table.attributes[\"B\"].append(1)\n+        self.assertDictEqual(new_table.attributes, {\"A\": \"Changed\", \"B\": [1]})\n+        # attributes dict of old table not be changed since new dist is a copy\n+        self.assertDictEqual(self.table.attributes, {\"A\": \"Test\", \"B\": []})\n+\n \n def isspecial(s):\n     return isinstance(s, slice) or s is Ellipsis\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5702.0, "instance_id": "biolab__orange3-5702", "issue_numbers": 0, "base_commit": "5b24aeeae267ca2ba77dc88da445d14d11741867", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex 93ec0b0eb..5c53e5193 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -9,6 +9,7 @@ from typing import Iterable\n \n import bottleneck as bn\n import numpy as np\n+import pandas\n import scipy.stats.stats\n from scipy import sparse as sp\n \n@@ -373,8 +374,7 @@ def stats(X, weights=None, compute_variance=False):\n             X.shape[0] - non_zero,\n             non_zero))\n     else:\n-        X_str = X.astype(str)\n-        nans = ((X_str == \"nan\") | (X_str == \"\")).sum(axis=0) \\\n+        nans = (pandas.isnull(X).sum(axis=0) + (X == \"\").sum(axis=0)) \\\n             if X.size else np.zeros(X.shape[1])\n         return np.column_stack((\n             np.tile(np.inf, X.shape[1]),\n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex f2195254b..15dca6253 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -1,4 +1,5 @@\n # pylint: disable=no-self-use\n+import time\n import unittest\n import warnings\n from itertools import chain\n@@ -145,6 +146,28 @@ class TestUtil(unittest.TestCase):\n                                            [np.inf, -np.inf, 0, 0, 2, 1],\n                                            [np.inf, -np.inf, 0, 0, 0, 3]])\n \n+    def test_stats_long_string_mem_use(self):\n+        X = np.full((1000, 1000), \"a\", dtype=object)\n+        t = time.time()\n+        stats(X)\n+        t_a = time.time() - t  # time for an array with constant-len strings\n+\n+        # Add one very long string\n+        X[0, 0] = \"a\"*2000\n+\n+        # The implementation of stats() in Orange 3.30.2 used .astype(\"str\")\n+        # internally. X.astype(\"str\") would take ~1000x the memory as X,\n+        # because its type would be \"<U1000\" (the length of the longest string).\n+        # That is about 7.5 GiB of memory on a 64-bit Linux system\n+\n+        # Because it is hard to measure CPU, we here measure time as\n+        # memory allocation of such big tables takes time. On Marko's\n+        # Linux system .astype(\"str\") took ~3 seconds.\n+        t = time.time()\n+        stats(X)\n+        t_b = time.time() - t\n+        self.assertLess(t_b, 2*t_a + 0.1)  # some grace period\n+\n     def test_nanmin_nanmax(self):\n         warnings.filterwarnings(\"ignore\", r\".*All-NaN slice encountered.*\")\n         for X in self.data:\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5527.0, "instance_id": "biolab__orange3-5527", "issue_numbers": 0, "base_commit": "8c1a64fcb6cac954931c22d3e6a64bfcb9e2674f", "patch": "diff --git a/Orange/widgets/data/owpivot.py b/Orange/widgets/data/owpivot.py\nindex 6f3074a77..8906c252f 100644\n--- a/Orange/widgets/data/owpivot.py\n+++ b/Orange/widgets/data/owpivot.py\n@@ -921,8 +921,8 @@ class OWPivot(OWWidget):\n             self.row_feature = model[0]\n         model = self.controls.val_feature.model()\n         if model and len(model) > 2:\n-            self.val_feature = domain.variables[0] \\\n-                if domain.variables[0] in model else model[2]\n+            allvars = domain.variables + domain.metas\n+            self.val_feature = allvars[0] if allvars[0] in model else model[2]\n \n     def commit(self):\n         def send_outputs(pivot_table, filtered_data, grouped_data):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpivot.py b/Orange/widgets/data/tests/test_owpivot.py\nindex 1e09a7bd4..502af2709 100644\n--- a/Orange/widgets/data/tests/test_owpivot.py\n+++ b/Orange/widgets/data/tests/test_owpivot.py\n@@ -278,6 +278,14 @@ class TestOWPivot(WidgetTest):\n         self.assertEqual(model.data(model.index(4, 4)), \"114.0\")\n         self.assertEqual(model.data(model.index(5, 4)), \"reversable defect\")\n \n+    def test_only_metas_table(self):\n+        self.send_signal(self.widget.Inputs.data, self.zoo[:, 17:])\n+        self.assertTrue(self.widget.Warning.no_variables.is_shown())\n+\n+        data = self.zoo.transform(Domain([], metas=self.zoo.domain.attributes))\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.assertFalse(self.widget.Warning.no_variables.is_shown())\n+\n     def test_empty_table(self):\n         data = self.heart_disease[:, :0]\n         self.send_signal(self.widget.Inputs.data, data)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5769.0, "instance_id": "biolab__orange3-5769", "issue_numbers": 0, "base_commit": "30c5657673a46e452162b1cb4fc6415baada5784", "patch": "diff --git a/Orange/widgets/data/owcolor.py b/Orange/widgets/data/owcolor.py\nindex cfd6d5e1b..42fa9480b 100644\n--- a/Orange/widgets/data/owcolor.py\n+++ b/Orange/widgets/data/owcolor.py\n@@ -690,6 +690,7 @@ class OWColor(widget.OWWidget):\n \n         # First, construct all descriptions; assign later, after we know\n         # there won't be exceptions due to invalid file format\n+        unused_vars = []\n         both_descs = []\n         warnings = []\n         for old_desc, repo, desc_type in (\n@@ -700,11 +701,26 @@ class OWColor(widget.OWWidget):\n             for var_name, var_data in js[repo].items():\n                 var = var_by_name.get(var_name)\n                 if var is None:\n+                    unused_vars.append(var_name)\n                     continue\n                 # This can throw InvalidFileFormat\n                 new_descs[var_name], warn = desc_type.from_dict(var, var_data)\n                 warnings += warn\n             both_descs.append(new_descs)\n+        if unused_vars:\n+            names = [f\"'{name}'\" for name in unused_vars]\n+            if len(unused_vars) == 1:\n+                warn = f'Definition for variable {names[0]}, which does not ' \\\n+                       f'appear in the data, was ignored.\\n'\n+            else:\n+                if len(unused_vars) <= 5:\n+                    warn = 'Definitions for variables ' \\\n+                           f'{\", \".join(names[:-1])} and {names[-1]}'\n+                else:\n+                    warn = f'Definitions for {\", \".join(names[:4])} ' \\\n+                           f'and {len(names) - 4} other variables'\n+                warn += \", which do not appear in the data, were ignored.\\n\"\n+            warnings.insert(0, warn)\n \n         self.disc_descs = [both_descs[0].get(desc.var.name, desc)\n                            for desc in self.disc_descs]\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcolor.py b/Orange/widgets/data/tests/test_owcolor.py\nindex fa8ba624c..634bc6d68 100644\n--- a/Orange/widgets/data/tests/test_owcolor.py\n+++ b/Orange/widgets/data/tests/test_owcolor.py\n@@ -793,6 +793,32 @@ class TestOWColor(WidgetTest):\n                 msg_box.reset_mock()\n                 self.widget._parse_var_defs.assert_called_with(json.load.return_value)\n \n+    @patch(\"Orange.widgets.data.owcolor.QMessageBox.warning\")\n+    def test_load_ignore_warning(self, msg_box):\n+        self.widget._parse_var_defs(dict(categorical={}, numeric={}))\n+        msg_box.assert_not_called()\n+\n+        no_change = dict(renamed_values={}, colors={})\n+        for names, message in (\n+                ((\"foo\",),\n+                 \"'foo'\"),\n+                ((\"foo\", \"bar\"),\n+                 \"'foo' and 'bar'\"),\n+                ((\"foo\", \"bar\", \"baz\"),\n+                 \"'foo', 'bar' and 'baz'\"),\n+                ((\"foo\", \"bar\", \"baz\", \"qux\"),\n+                 \"'foo', 'bar', 'baz' and 'qux'\"),\n+                ((\"foo\", \"bar\", \"baz\", \"qux\", \"quux\"),\n+                 \"'foo', 'bar', 'baz', 'qux' and 'quux'\"),\n+                ((\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\"),\n+                 \"'foo', 'bar', 'baz', 'qux' and 2 other\"),\n+                ((\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\", \"grault\"),\n+                 \"'foo', 'bar', 'baz', 'qux' and 3 other\")):\n+            self.widget._parse_var_defs(dict(\n+                categorical=dict.fromkeys(names, no_change),\n+                numeric={}))\n+            self.assertIn(message, msg_box.call_args[0][2])\n+\n     def _create_descs(self):\n         disc_vars = [DiscreteVariable(f\"var{c}\", values=(\"a\", \"b\", \"c\"))\n                      for c in \"AB\"]\n@@ -882,11 +908,6 @@ class TestOWColor(WidgetTest):\n              \"numeric\": {\"varD\": {\"rename\": \"varA\"}}})\n         msg_box.assert_not_called()\n \n-        self.widget._parse_var_defs(\n-            {\"categorical\": {\"varA\": {\"rename\": \"X\"}},\n-             \"numeric\": {\"var not\": {\"rename\": \"X\"}}})\n-        msg_box.assert_not_called()\n-\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6208.0, "instance_id": "biolab__orange3-6208", "issue_numbers": 0, "base_commit": "0d3e3ee443e2b1ee248b486722ea801c684ca732", "patch": "diff --git a/Orange/widgets/data/owdatasampler.py b/Orange/widgets/data/owdatasampler.py\nindex 15cbf3f53..6f14556ce 100644\n--- a/Orange/widgets/data/owdatasampler.py\n+++ b/Orange/widgets/data/owdatasampler.py\n@@ -107,7 +107,7 @@ class OWDataSampler(OWWidget):\n         ibox = gui.indentedBox(sampling)\n         self.sampleSizeSpin = gui.spin(\n             ibox, self, \"sampleSizeNumber\", label=\"Instances: \",\n-            minv=1, maxv=self._MAX_SAMPLE_SIZE,\n+            minv=0, maxv=self._MAX_SAMPLE_SIZE,\n             callback=set_sampling_type(self.FixedSize),\n             controlWidth=90)\n         gui.checkBox(\n@@ -395,11 +395,15 @@ class SampleRandomN(Reprable):\n             o[sample] = 0\n             others = np.nonzero(o)[0]\n             return others, sample\n-        if self.n == len(table):\n+        if self.n in (0, len(table)):\n             rgen = np.random.RandomState(self.random_state)\n-            sample = np.arange(self.n)\n-            rgen.shuffle(sample)\n-            return np.array([], dtype=int), sample\n+            shuffled = np.arange(len(table))\n+            rgen.shuffle(shuffled)\n+            empty = np.array([], dtype=int)\n+            if self.n == 0:\n+                return shuffled, empty\n+            else:\n+                return empty, shuffled\n         elif self.stratified and table.domain.has_discrete_class:\n             test_size = max(len(table.domain.class_var.values), self.n)\n             splitter = skl.StratifiedShuffleSplit(\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasampler.py b/Orange/widgets/data/tests/test_owdatasampler.py\nindex c59ba5600..b0fa8bf6a 100644\n--- a/Orange/widgets/data/tests/test_owdatasampler.py\n+++ b/Orange/widgets/data/tests/test_owdatasampler.py\n@@ -131,6 +131,13 @@ class TestOWDataSampler(WidgetTest):\n         self.widget.commit()\n         return self.widget.sampleSizeSpin.value()\n \n+    def set_fixed_proportion(self, proportion):\n+        \"\"\"Set fixed sample proportion.\n+        \"\"\"\n+        self.select_sampling_type(self.widget.FixedProportion)\n+        self.widget.sampleSizePercentageSlider.setValue(proportion)\n+        self.widget.commit()\n+\n     def assertNoIntersection(self, sample, other):\n         self.assertFalse(bool(set(sample.ids) & set(other.ids)))\n \n@@ -170,6 +177,26 @@ class TestOWDataSampler(WidgetTest):\n         self.assertEqual(len(self.get_output(w.Outputs.data_sample)), 15)\n         self.assertEqual(len(self.get_output(w.Outputs.remaining_data)), 135)\n \n+    def test_empty_sample(self):\n+        w = self.widget\n+        self.send_signal(w.Inputs.data, self.iris)\n+\n+        self.set_fixed_sample_size(150)\n+        self.assertEqual(len(self.get_output(w.Outputs.data_sample)), 150)\n+        self.assertEqual(len(self.get_output(w.Outputs.remaining_data)), 0)\n+\n+        self.set_fixed_sample_size(0)\n+        self.assertEqual(len(self.get_output(w.Outputs.data_sample)), 0)\n+        self.assertEqual(len(self.get_output(w.Outputs.remaining_data)), 150)\n+\n+        self.set_fixed_proportion(100)\n+        self.assertEqual(len(self.get_output(w.Outputs.data_sample)), 150)\n+        self.assertEqual(len(self.get_output(w.Outputs.remaining_data)), 0)\n+\n+        self.set_fixed_proportion(0)\n+        self.assertEqual(len(self.get_output(w.Outputs.data_sample)), 0)\n+        self.assertEqual(len(self.get_output(w.Outputs.remaining_data)), 150)\n+\n     def test_send_report(self):\n         w = self.widget\n         self.send_signal(w.Inputs.data, self.iris)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6331.0, "instance_id": "biolab__orange3-6331", "issue_numbers": 0, "base_commit": "ce13f5a65642a8ff13647ab2e6391e1483d0b439", "patch": "diff --git a/Orange/widgets/data/owconcatenate.py b/Orange/widgets/data/owconcatenate.py\nindex 4904a33ea..8c3958923 100644\n--- a/Orange/widgets/data/owconcatenate.py\n+++ b/Orange/widgets/data/owconcatenate.py\n@@ -263,6 +263,7 @@ class OWConcatenate(widget.OWWidget):\n                 dumb_domain,\n                 table.X, table.Y, table.metas, table.W,\n                 table.attributes, table.ids)\n+            dumb_table.name = table.name\n             dumb_tables.append(dumb_table)\n         return dumb_tables\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owconcatenate.py b/Orange/widgets/data/tests/test_owconcatenate.py\nindex d2c1d3507..3eb2f7598 100644\n--- a/Orange/widgets/data/tests/test_owconcatenate.py\n+++ b/Orange/widgets/data/tests/test_owconcatenate.py\n@@ -71,36 +71,54 @@ class TestOWConcatenate(WidgetTest):\n         outvars = output.domain.variables\n         self.assertEqual(0, len(outvars))\n \n+    def get_source_var(self, vars_before):\n+        output = self.get_output(self.widget.Outputs.data)\n+        outvars = output.domain.variables + output.domain.metas\n+        return (set(outvars) - set(vars_before)).pop()\n+\n     def test_source(self):\n         self.send_signal(self.widget.Inputs.additional_data, self.iris, 0)\n         self.send_signal(self.widget.Inputs.additional_data, self.titanic, 1)\n         outputb = self.get_output(self.widget.Outputs.data)\n         outvarsb = outputb.domain.variables\n-        def get_source():\n-            output = self.get_output(self.widget.Outputs.data)\n-            outvars = output.domain.variables + output.domain.metas\n-            return (set(outvars) - set(outvarsb)).pop()\n         # test adding source\n         self.widget.controls.append_source_column.toggle()\n-        source = get_source()\n+        source = self.get_source_var(outvarsb)\n         self.assertEqual(source.name, \"Source ID\")\n         # test name changing\n         self.widget.controls.source_attr_name.setText(\"Source\")\n         self.widget.controls.source_attr_name.callback()\n-        source = get_source()\n+        source = self.get_source_var(outvarsb)\n         self.assertEqual(source.name, \"Source\")\n         # test source_column role\n         places = [\"class_vars\", \"attributes\", \"metas\"]\n         for i, place in enumerate(places):\n             self.widget.source_column_role = i\n             self.widget.commit.now()\n-            source = get_source()\n+            source = self.get_source_var(outvarsb)\n             output = self.get_output(self.widget.Outputs.data)\n             self.assertTrue(source in getattr(output.domain, place))\n             data = output.transform(Domain([source]))\n+            self.assertTupleEqual((\"iris\", \"titanic\"), source.values)\n             np.testing.assert_equal(data[:len(self.iris)].X, 0)\n             np.testing.assert_equal(data[len(self.iris):].X, 1)\n \n+    def test_source_ignore_compute_value(self):\n+        \"\"\"Test source variable correct also when ignore_compute_value on\"\"\"\n+        self.send_signal(self.widget.Inputs.additional_data, self.iris, 0)\n+        self.send_signal(self.widget.Inputs.additional_data, self.titanic, 1)\n+        outputb = self.get_output(self.widget.Outputs.data)\n+        outvarsb = outputb.domain.variables\n+\n+        self.widget.controls.append_source_column.toggle()\n+        self.widget.controls.ignore_compute_value.toggle()  # on\n+        source = self.get_source_var(outvarsb)\n+        output = self.get_output(self.widget.Outputs.data)\n+        data = output.transform(Domain([source]))\n+        self.assertTupleEqual((\"iris\", \"titanic\"), source.values)\n+        np.testing.assert_equal(data[: len(self.iris)].X, 0)\n+        np.testing.assert_equal(data[len(self.iris) :].X, 1)\n+\n     def test_singleclass_source_class(self):\n         self.send_signal(self.widget.Inputs.primary_data, self.iris)\n         # add source into a class variable\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5769.0, "instance_id": "biolab__orange3-5769", "issue_numbers": 0, "base_commit": "aa9877e66e02612e32e79a03d66de3ce973d8a67", "patch": "diff --git a/Orange/widgets/data/owcolor.py b/Orange/widgets/data/owcolor.py\nindex cfd6d5e1b..0f50915fb 100644\n--- a/Orange/widgets/data/owcolor.py\n+++ b/Orange/widgets/data/owcolor.py\n@@ -647,16 +647,15 @@ class OWColor(widget.OWWidget):\n             return\n \n         try:\n-            f = open(fname)\n+            with open(fname) as f:\n+                js = json.load(f)  #: dict\n+                self._parse_var_defs(js)\n         except IOError:\n             QMessageBox.critical(self, \"File error\", \"File cannot be opened.\")\n             return\n-\n-        try:\n-            js = json.load(f)  #: dict\n-            self._parse_var_defs(js)\n         except (json.JSONDecodeError, InvalidFileFormat):\n             QMessageBox.critical(self, \"File error\", \"Invalid file format.\")\n+            return\n \n     def _parse_var_defs(self, js):\n         if not isinstance(js, dict) or set(js) != {\"categorical\", \"numeric\"}:\n@@ -690,6 +689,7 @@ class OWColor(widget.OWWidget):\n \n         # First, construct all descriptions; assign later, after we know\n         # there won't be exceptions due to invalid file format\n+        unused_vars = []\n         both_descs = []\n         warnings = []\n         for old_desc, repo, desc_type in (\n@@ -700,11 +700,26 @@ class OWColor(widget.OWWidget):\n             for var_name, var_data in js[repo].items():\n                 var = var_by_name.get(var_name)\n                 if var is None:\n+                    unused_vars.append(var_name)\n                     continue\n                 # This can throw InvalidFileFormat\n                 new_descs[var_name], warn = desc_type.from_dict(var, var_data)\n                 warnings += warn\n             both_descs.append(new_descs)\n+        if unused_vars:\n+            names = [f\"'{name}'\" for name in unused_vars]\n+            if len(unused_vars) == 1:\n+                warn = f'Definition for variable {names[0]}, which does not ' \\\n+                       f'appear in the data, was ignored.\\n'\n+            else:\n+                if len(unused_vars) <= 5:\n+                    warn = 'Definitions for variables ' \\\n+                           f'{\", \".join(names[:-1])} and {names[-1]}'\n+                else:\n+                    warn = f'Definitions for {\", \".join(names[:4])} ' \\\n+                           f'and {len(names) - 4} other variables'\n+                warn += \", which do not appear in the data, were ignored.\\n\"\n+            warnings.insert(0, warn)\n \n         self.disc_descs = [both_descs[0].get(desc.var.name, desc)\n                            for desc in self.disc_descs]\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcolor.py b/Orange/widgets/data/tests/test_owcolor.py\nindex fa8ba624c..634bc6d68 100644\n--- a/Orange/widgets/data/tests/test_owcolor.py\n+++ b/Orange/widgets/data/tests/test_owcolor.py\n@@ -793,6 +793,32 @@ class TestOWColor(WidgetTest):\n                 msg_box.reset_mock()\n                 self.widget._parse_var_defs.assert_called_with(json.load.return_value)\n \n+    @patch(\"Orange.widgets.data.owcolor.QMessageBox.warning\")\n+    def test_load_ignore_warning(self, msg_box):\n+        self.widget._parse_var_defs(dict(categorical={}, numeric={}))\n+        msg_box.assert_not_called()\n+\n+        no_change = dict(renamed_values={}, colors={})\n+        for names, message in (\n+                ((\"foo\",),\n+                 \"'foo'\"),\n+                ((\"foo\", \"bar\"),\n+                 \"'foo' and 'bar'\"),\n+                ((\"foo\", \"bar\", \"baz\"),\n+                 \"'foo', 'bar' and 'baz'\"),\n+                ((\"foo\", \"bar\", \"baz\", \"qux\"),\n+                 \"'foo', 'bar', 'baz' and 'qux'\"),\n+                ((\"foo\", \"bar\", \"baz\", \"qux\", \"quux\"),\n+                 \"'foo', 'bar', 'baz', 'qux' and 'quux'\"),\n+                ((\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\"),\n+                 \"'foo', 'bar', 'baz', 'qux' and 2 other\"),\n+                ((\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\", \"grault\"),\n+                 \"'foo', 'bar', 'baz', 'qux' and 3 other\")):\n+            self.widget._parse_var_defs(dict(\n+                categorical=dict.fromkeys(names, no_change),\n+                numeric={}))\n+            self.assertIn(message, msg_box.call_args[0][2])\n+\n     def _create_descs(self):\n         disc_vars = [DiscreteVariable(f\"var{c}\", values=(\"a\", \"b\", \"c\"))\n                      for c in \"AB\"]\n@@ -882,11 +908,6 @@ class TestOWColor(WidgetTest):\n              \"numeric\": {\"varD\": {\"rename\": \"varA\"}}})\n         msg_box.assert_not_called()\n \n-        self.widget._parse_var_defs(\n-            {\"categorical\": {\"varA\": {\"rename\": \"X\"}},\n-             \"numeric\": {\"var not\": {\"rename\": \"X\"}}})\n-        msg_box.assert_not_called()\n-\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5919.0, "instance_id": "biolab__orange3-5919", "issue_numbers": 0, "base_commit": "4d61c1b19ea4dfb018ba3ad608bb65ebb4844089", "patch": "diff --git a/Orange/widgets/data/owdiscretize.py b/Orange/widgets/data/owdiscretize.py\nindex 625582096..298bb5828 100644\n--- a/Orange/widgets/data/owdiscretize.py\n+++ b/Orange/widgets/data/owdiscretize.py\n@@ -882,6 +882,7 @@ class OWDiscretize(widget.OWWidget):\n         set_enabled(Methods.FixedWidth, True)\n         set_enabled(Methods.FixedWidthTime, True)\n         set_enabled(Methods.Custom, True)\n+        self.copy_to_custom.setEnabled(False)\n \n     def _var_selection_changed(self, _):\n         \"\"\"Callback for changed selection in listview with variables\"\"\"\n@@ -900,6 +901,7 @@ class OWDiscretize(widget.OWWidget):\n         set_enabled(Methods.Default, True)\n         set_enabled(Methods.FixedWidth, no_time)\n         set_enabled(Methods.Custom, no_time)\n+        self.copy_to_custom.setEnabled(no_time)\n         set_enabled(Methods.FixedWidthTime, all_time)\n \n     def _update_interface(self):\n@@ -937,6 +939,7 @@ class OWDiscretize(widget.OWWidget):\n         self.varview.model().set_domain(None if data is None else data.domain)\n         self._update_discretizations()\n         self._update_default_model()\n+        self.varview.select_default()\n         self._set_mdl_button()\n         self.commit.now()\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdiscretize.py b/Orange/widgets/data/tests/test_owdiscretize.py\nindex f69cbd485..2fb0979c2 100644\n--- a/Orange/widgets/data/tests/test_owdiscretize.py\n+++ b/Orange/widgets/data/tests/test_owdiscretize.py\n@@ -198,6 +198,7 @@ class TestOWDiscretize(WidgetTest, DataMixin):\n         self.assertTrue(w.button_group.button(Methods.FixedWidth).isEnabled())\n         self.assertFalse(w.button_group.button(Methods.FixedWidthTime).isEnabled())\n         self.assertTrue(w.button_group.button(Methods.Custom).isEnabled())\n+        self.assertTrue(w.copy_to_custom.isEnabled())\n         self.assertEqual(w.width_line.text(), \"10\")\n \n         select_rows(w.varview, (1, 2))\n@@ -205,6 +206,7 @@ class TestOWDiscretize(WidgetTest, DataMixin):\n         self.assertTrue(w.button_group.button(Methods.FixedWidth).isEnabled())\n         self.assertFalse(w.button_group.button(Methods.FixedWidthTime).isEnabled())\n         self.assertTrue(w.button_group.button(Methods.Custom).isEnabled())\n+        self.assertTrue(w.copy_to_custom.isEnabled())\n \n         select_rows(w.varview, (2, 4))\n         self.assertFalse(w.button_group.button(Methods.FixedWidth).isChecked())\n@@ -217,6 +219,7 @@ class TestOWDiscretize(WidgetTest, DataMixin):\n         self.assertFalse(w.button_group.button(Methods.FixedWidth).isEnabled())\n         self.assertTrue(w.button_group.button(Methods.FixedWidthTime).isEnabled())\n         self.assertFalse(w.button_group.button(Methods.Custom).isEnabled())\n+        self.assertFalse(w.copy_to_custom.isEnabled())\n \n         select_rows(w.varview.default_view, (0, ))\n         self.assertEqual(len(w.varview.selectionModel().selectedIndexes()), 0)\n@@ -224,6 +227,7 @@ class TestOWDiscretize(WidgetTest, DataMixin):\n         self.assertTrue(w.button_group.button(Methods.FixedWidth).isEnabled())\n         self.assertTrue(w.button_group.button(Methods.FixedWidthTime).isEnabled())\n         self.assertTrue(w.button_group.button(Methods.Custom).isEnabled())\n+        self.assertFalse(w.copy_to_custom.isEnabled())\n         self.assertFalse(w.button_group.button(Methods.Default).isEnabled())\n         w._check_button(Methods.FixedWidth, True)\n         self.assertTrue(w.button_group.button(Methods.FixedWidth).isChecked())\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6537.0, "instance_id": "biolab__orange3-6537", "issue_numbers": 0, "base_commit": "f53185457d2d3a322f275f64869949e5da0ae1bc", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex b9b5ec36e..69797905a 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -9,7 +9,7 @@ from typing import Set, Sequence, Union, Optional, List, NamedTuple\n import numpy\n from AnyQt.QtWidgets import (\n     QTableView, QSplitter, QToolTip, QStyle, QApplication, QSizePolicy,\n-    QPushButton, QAbstractItemDelegate)\n+    QPushButton, QStyledItemDelegate)\n from AnyQt.QtGui import QPainter, QStandardItem, QPen, QColor, QBrush\n from AnyQt.QtCore import (\n     Qt, QSize, QRect, QRectF, QPoint, QPointF, QLocale,\n@@ -1117,14 +1117,16 @@ class ErrorDelegate(PredictionsBarItemDelegate):\n         return cls.__size_hint\n \n \n-class NoopItemDelegate(QAbstractItemDelegate):\n+class NoopItemDelegate(QStyledItemDelegate):\n     def paint(self, *_):\n         pass\n \n-    @staticmethod\n-    def sizeHint(*_):\n+    def sizeHint(self, *_):\n         return QSize(0, 0)\n \n+    def displayText(self, *_):\n+        return \"\"\n+\n \n class ClassificationErrorDelegate(ErrorDelegate):\n     def displayText(self, value, _):\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex fcb5ecfef..a6ab9b15d 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -152,6 +152,14 @@ class TestOWPredictions(WidgetTest):\n             predmodel.data(predmodel.index(0, 0), Qt.UserRole)))\n         self.assertIn(predmodel.data(predmodel.index(0, 0))[0],\n                       titanic.domain.class_var.values)\n+        self.widget.send_report()\n+\n+        housing = self.housing[::5]\n+        mean_housing = ConstantLearner()(housing)\n+        no_target = housing.transform(Domain(housing.domain.attributes, None))\n+        self.send_signal(self.widget.Inputs.data, no_target)\n+        self.send_signal(self.widget.Inputs.predictors, mean_housing, 1)\n+        self.widget.send_report()\n \n     def test_invalid_regression_target(self):\n         widget = self.widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6612.0, "instance_id": "biolab__orange3-6612", "issue_numbers": 0, "base_commit": "5a3de65c5a4130feea71eeacaf7e01e5d1215eb4", "patch": "diff --git a/Orange/util.py b/Orange/util.py\nindex 0cd768669..2a1581677 100644\n--- a/Orange/util.py\n+++ b/Orange/util.py\n@@ -216,14 +216,20 @@ class allot:\n     The decorator also adds two attributes:\n \n     - f.last_call_duration is the duration of the last call (in seconds)\n-    - f.no_call_before contains the time (time.perf_counter) when the next\n-        call will be made.\n+    - f.no_call_before contains the time stamp when the next call will be made.\n \n     The decorator can be used for functions and for methods.\n \n     A non-parametrized decorator doesn't block any calls and only adds\n     last_call_duration, so that it can be used for timing.\n     \"\"\"\n+\n+    try:\n+        __timer = time.thread_time\n+    except AttributeError:\n+        # thread_time is not available on macOS\n+        __timer = time.process_time\n+\n     def __new__(cls: type, arg: Union[None, float, Callable], *,\n                 overflow: Optional[Callable] = None,\n                 _bound_methods: Optional[WeakKeyDictionary] = None):\n@@ -295,16 +301,16 @@ class allot:\n         return self.__bound_methods[inst]\n \n     def __call__(self, *args, **kwargs):\n-        if time.perf_counter() < self.no_call_before:\n+        if self.__timer() < self.no_call_before:\n             if self.overflow is None:\n                 return None\n             return self.overflow(*args, **kwargs)\n         return self.call(*args, **kwargs)\n \n     def call(self, *args, **kwargs):\n-        start = time.perf_counter()\n+        start = self.__timer()\n         result = self.func(*args, **kwargs)\n-        self.last_call_duration = time.perf_counter() - start\n+        self.last_call_duration = self.__timer() - start\n         if self.allotted_time is not None:\n             if self.overflow is None:\n                 assert result is None, \"skippable function cannot return a result\"\n \n.", "test_patch": "diff --git a/Orange/tests/test_util.py b/Orange/tests/test_util.py\nindex 43e70bc53..ae0c9d336 100644\n--- a/Orange/tests/test_util.py\n+++ b/Orange/tests/test_util.py\n@@ -2,7 +2,7 @@ from itertools import count\n import time\n import os\n import unittest\n-from unittest.mock import Mock\n+from unittest.mock import Mock, patch\n import warnings\n \n import numpy as np\n@@ -245,6 +245,14 @@ class TestUtil(unittest.TestCase):\n \n class TestAllot(unittest.TestCase):\n     # names of functions within tests don't matter, pylint: disable=invalid-name\n+\n+    def setUp(self):\n+        # patch the object to user perf_counter, which will include the time\n+        # when tests `sleep`\n+        patcher = patch.object(allot, \"_allot__timer\", new=time.perf_counter)\n+        patcher.start()\n+        self.addCleanup(patcher.stop)\n+\n     def test_duration(self):\n         @allot\n         def f(x, y):\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4525.0, "instance_id": "biolab__orange3-4525", "issue_numbers": 0, "base_commit": "711a79b2855fbcb7e8e8b8407fc766b3cde358db", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex c4007004e..b3a232037 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -1101,16 +1101,22 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n             self.plot_widget.removeItem(self.density_img)\n             self.density_img = None\n         if self.class_density and self.scatterplot_item is not None:\n+            c_data = self.master.get_color_data()\n+            if c_data is None:\n+                return\n+            mask = np.isfinite(self._filter_visible(c_data))\n+            pens = self.scatterplot_item.data['pen']\n             rgb_data = [\n                 pen.color().getRgb()[:3] if pen is not None else (255, 255, 255)\n-                for pen in self.scatterplot_item.data['pen']]\n+                for known, pen in zip(mask, pens)\n+                if known]\n             if len(set(rgb_data)) <= 1:\n                 return\n             [min_x, max_x], [min_y, max_y] = self.view_box.viewRange()\n             x_data, y_data = self.scatterplot_item.getData()\n             self.density_img = classdensity.class_density_image(\n                 min_x, max_x, min_y, max_y, self.resolution,\n-                x_data, y_data, rgb_data)\n+                x_data[mask], y_data[mask], rgb_data)\n             self.plot_widget.addItem(self.density_img)\n \n     def update_selection_colors(self):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplotbase.py b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\nindex 8b9391a9b..b73b53634 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n@@ -740,6 +740,41 @@ class TestOWScatterPlotBase(WidgetTest):\n             self.assertIsNone(graph.density_img)\n             self.assertIs(graph.plot_widget.removeItem.call_args[0][0], density)\n \n+    @patch(\"Orange.widgets.utils.classdensity.class_density_image\")\n+    def test_density_with_missing(self, class_density_image):\n+        graph = self.graph\n+        graph.reset_graph()\n+        graph.plot_widget.addItem = Mock()\n+        graph.plot_widget.removeItem = Mock()\n+\n+        graph.class_density = True\n+        d = np.arange(10, dtype=float) % 2\n+        self.master.get_color_data = lambda: d\n+\n+        # All colors known\n+        graph.update_colors()\n+        x_data0, y_data0, colors0 = class_density_image.call_args[0][5:]\n+\n+        # Some missing colors\n+        d[:3] = np.nan\n+        graph.update_colors()\n+        x_data, y_data, colors = class_density_image.call_args[0][5:]\n+        np.testing.assert_equal(x_data, x_data0[3:])\n+        np.testing.assert_equal(y_data, y_data0[3:])\n+        np.testing.assert_equal(colors, colors0[3:])\n+\n+        # Missing colors + only subsample plotted\n+        graph.set_sample_size(8)\n+        graph.reset_graph()\n+        d_known = np.isfinite(graph._filter_visible(d))\n+        x_data0 = graph._filter_visible(x_data0)[d_known]\n+        y_data0 = graph._filter_visible(y_data0)[d_known]\n+        colors0 = graph._filter_visible(np.array(colors0))[d_known]\n+        x_data, y_data, colors = class_density_image.call_args[0][5:]\n+        np.testing.assert_equal(x_data, x_data0)\n+        np.testing.assert_equal(y_data, y_data0)\n+        np.testing.assert_equal(colors, colors0)\n+\n     def test_labels(self):\n         graph = self.graph\n         graph.reset_graph()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5763.0, "instance_id": "biolab__orange3-5763", "issue_numbers": 0, "base_commit": "06d7f24352088e4d2e7ccc8212d1d63d58ec05e2", "patch": "diff --git a/Orange/widgets/data/owgroupby.py b/Orange/widgets/data/owgroupby.py\nindex 4566dac31..07821aec2 100644\n--- a/Orange/widgets/data/owgroupby.py\n+++ b/Orange/widgets/data/owgroupby.py\n@@ -5,6 +5,7 @@ from functools import partial\n from typing import Any, Dict, List, Optional, Set\n \n import pandas as pd\n+from numpy import nan\n from AnyQt.QtCore import (\n     QAbstractTableModel,\n     QEvent,\n@@ -58,7 +59,7 @@ AGGREGATIONS = {\n     \"Mean\": Aggregation(\"mean\", {ContinuousVariable, TimeVariable}),\n     \"Median\": Aggregation(\"median\", {ContinuousVariable, TimeVariable}),\n     \"Mode\": Aggregation(\n-        lambda x: pd.Series.mode(x)[0], {ContinuousVariable, TimeVariable}\n+        lambda x: pd.Series.mode(x).get(0, nan), {ContinuousVariable, TimeVariable}\n     ),\n     \"Standard deviation\": Aggregation(\"std\", {ContinuousVariable, TimeVariable}),\n     \"Variance\": Aggregation(\"var\", {ContinuousVariable, TimeVariable}),\n@@ -405,7 +406,7 @@ class OWGroupBy(OWWidget, ConcurrentWidgetMixin):\n         self.gb_attrs = [values[row.row()] for row in sorted(rows)]\n         # everything cached in result should be recomputed on gb change\n         self.result = Result()\n-        self.commit()\n+        self.commit.deferred()\n \n     def __aggregation_changed(self, agg: str) -> None:\n         \"\"\"\n@@ -421,7 +422,7 @@ class OWGroupBy(OWWidget, ConcurrentWidgetMixin):\n             else:\n                 self.aggregations[attr].discard(agg)\n             self.agg_table_model.update_aggregation(attr)\n-        self.commit()\n+        self.commit.deferred()\n \n     @Inputs.data\n     def set_data(self, data: Table) -> None:\n@@ -449,11 +450,12 @@ class OWGroupBy(OWWidget, ConcurrentWidgetMixin):\n         self.agg_table_model.set_domain(data.domain if data else None)\n         self._set_gb_selection()\n \n-        self.commit()\n+        self.commit.now()\n \n     #########################\n     # Task connected methods\n \n+    @gui.deferred\n     def commit(self) -> None:\n         self.Error.clear()\n         self.Warning.clear()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owgroupby.py b/Orange/widgets/data/tests/test_owgroupby.py\nindex a85bb4cac..4356622ac 100644\n--- a/Orange/widgets/data/tests/test_owgroupby.py\n+++ b/Orange/widgets/data/tests/test_owgroupby.py\n@@ -12,6 +12,8 @@ from AnyQt.QtWidgets import QListView\n from Orange.data import (\n     Table,\n     table_to_frame,\n+    Domain,\n+    ContinuousVariable,\n )\n from Orange.data.tests.test_aggregate import create_sample_data\n from Orange.widgets.data.owgroupby import OWGroupBy\n@@ -689,6 +691,65 @@ class TestOWGropBy(WidgetTest):\n         output = self.get_output(self.widget.Outputs.data)\n         self.assertEqual(2, len(output))\n \n+    def test_only_nan_in_group(self):\n+        data = Table(\n+            Domain([ContinuousVariable(\"A\"), ContinuousVariable(\"B\")]),\n+            np.array([[1, np.nan], [2, 1], [1, np.nan], [2, 1]]),\n+        )\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        # select feature A as group-by\n+        self._set_selection(self.widget.gb_attrs_view, [0])\n+        # select all aggregations for feature B\n+        self.select_table_rows(self.widget.agg_table_view, [1])\n+        for cb in self.widget.agg_checkboxes.values():\n+            while not cb.isChecked():\n+                cb.click()\n+\n+        # unselect all aggregations for attr A\n+        self.select_table_rows(self.widget.agg_table_view, [0])\n+        for cb in self.widget.agg_checkboxes.values():\n+            while cb.isChecked():\n+                cb.click()\n+\n+        expected_columns = [\n+            \"B - Mean\",\n+            \"B - Median\",\n+            \"B - Mode\",\n+            \"B - Standard deviation\",\n+            \"B - Variance\",\n+            \"B - Sum\",\n+            \"B - Min. value\",\n+            \"B - Max. value\",\n+            \"B - Span\",\n+            \"B - First value\",\n+            \"B - Last value\",\n+            \"B - Random value\",\n+            \"B - Count defined\",\n+            \"B - Count\",\n+            \"B - Proportion defined\",\n+            \"B - Concatenate\",\n+            \"A\",\n+        ]\n+        n = np.nan\n+        expected_df = pd.DataFrame(\n+            [\n+                [n, n, n, n, n, 0, n, n, n, n, n, n, 0, 2, 0, \"\", 1],\n+                [1, 1, 1, 0, 0, 2, 1, 1, 0, 1, 1, 1, 2, 2, 1, \"1.0 1.0\", 2],\n+            ],\n+            columns=expected_columns,\n+        )\n+        output_df = table_to_frame(\n+            self.get_output(self.widget.Outputs.data), include_metas=True\n+        )\n+        pd.testing.assert_frame_equal(\n+            output_df,\n+            expected_df,\n+            check_dtype=False,\n+            check_column_type=False,\n+            check_categorical=False,\n+        )\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6062.0, "instance_id": "biolab__orange3-6062", "issue_numbers": 0, "base_commit": "7ab4f52e192b6b55129d09a592a66d86e7a4bd33", "patch": "diff --git a/Orange/evaluation/scoring.py b/Orange/evaluation/scoring.py\nindex 6d8aabd9e..89c82a28d 100644\n--- a/Orange/evaluation/scoring.py\n+++ b/Orange/evaluation/scoring.py\n@@ -11,6 +11,7 @@ Examples\n \"\"\"\n \n import math\n+import warnings\n \n import numpy as np\n import sklearn.metrics as skl_metrics\n@@ -22,6 +23,8 @@ from Orange.misc.wrapper_meta import WrapperMeta\n __all__ = [\"CA\", \"Precision\", \"Recall\", \"F1\", \"PrecisionRecallFSupport\", \"AUC\",\n            \"MSE\", \"RMSE\", \"MAE\", \"R2\", \"compute_CD\", \"graph_ranks\", \"LogLoss\"]\n \n+from Orange.util import OrangeDeprecationWarning\n+\n \n class ScoreMetaType(WrapperMeta):\n     \"\"\"\n@@ -388,7 +391,11 @@ def compute_CD(avranks, n, alpha=\"0.05\", test=\"nemenyi\"):\n     according to given alpha (either alpha=\"0.05\" or alpha=\"0.1\") for average\n     ranks and number of tested datasets N. Test can be either \"nemenyi\" for\n     for Nemenyi two tailed test or \"bonferroni-dunn\" for Bonferroni-Dunn test.\n+\n+    This function is deprecated and will be removed in Orange 3.34.\n     \"\"\"\n+    warnings.warn(\"compute_CD is deprecated and will be removed in Orange 3.34.\",\n+                  OrangeDeprecationWarning, stacklevel=2)\n     k = len(avranks)\n     d = {(\"nemenyi\", \"0.05\"): [0, 0, 1.959964, 2.343701, 2.569032, 2.727774,\n                                2.849705, 2.94832, 3.030879, 3.101730, 3.163684,\n@@ -420,6 +427,8 @@ def graph_ranks(avranks, names, cd=None, cdmethod=None, lowv=None, highv=None,\n     The image is ploted on `plt` imported using\n     `import matplotlib.pyplot as plt`.\n \n+    This function is deprecated and will be removed in Orange 3.34.\n+\n     Args:\n         avranks (list of float): average ranks of methods.\n         names (list of str): names of methods.\n@@ -437,6 +446,8 @@ def graph_ranks(avranks, names, cd=None, cdmethod=None, lowv=None, highv=None,\n         filename (str, optional): output file name (with extension). If not\n             given, the function does not write a file.\n     \"\"\"\n+    warnings.warn(\"graph_ranks is deprecated and will be removed in Orange 3.34.\",\n+                  OrangeDeprecationWarning, stacklevel=2)\n     try:\n         import matplotlib.pyplot as plt\n         from matplotlib.backends.backend_agg import FigureCanvasAgg\n.", "test_patch": "diff --git a/Orange/tests/test_evaluation_scoring.py b/Orange/tests/test_evaluation_scoring.py\nindex 0fe8950c7..95488051b 100644\n--- a/Orange/tests/test_evaluation_scoring.py\n+++ b/Orange/tests/test_evaluation_scoring.py\n@@ -2,8 +2,11 @@\n # pylint: disable=missing-docstring\n \n import unittest\n+from distutils.version import LooseVersion\n+\n import numpy as np\n \n+import Orange\n from Orange.data import DiscreteVariable, ContinuousVariable, Domain\n from Orange.data import Table\n from Orange.classification import LogisticRegressionLearner, SklTreeLearner, NaiveBayesLearner,\\\n@@ -13,6 +16,7 @@ from Orange.evaluation import AUC, CA, Results, Recall, \\\n from Orange.evaluation.scoring import Specificity\n from Orange.preprocess import discretize, Discretize\n from Orange.tests import test_filename\n+from Orange.util import OrangeDeprecationWarning\n \n \n class TestScoreMetaType(unittest.TestCase):\n@@ -320,15 +324,21 @@ class TestAUC(unittest.TestCase):\n class TestComputeCD(unittest.TestCase):\n     def test_compute_CD(self):\n         avranks = [1.9, 3.2, 2.8, 3.3]\n-        cd = scoring.compute_CD(avranks, 30)\n+        with self.assertWarns(OrangeDeprecationWarning):\n+            cd = scoring.compute_CD(avranks, 30)\n         np.testing.assert_almost_equal(cd, 0.856344)\n \n-        cd = scoring.compute_CD(avranks, 30, test=\"bonferroni-dunn\")\n+        with self.assertWarns(OrangeDeprecationWarning):\n+            cd = scoring.compute_CD(avranks, 30, test=\"bonferroni-dunn\")\n         np.testing.assert_almost_equal(cd, 0.798)\n \n-        # Do what you will, just don't crash\n-        scoring.graph_ranks(avranks, \"abcd\", cd)\n-        scoring.graph_ranks(avranks, \"abcd\", cd, cdmethod=0)\n+    def test_CD_deprecated(self):\n+        if LooseVersion(Orange.__version__) >= LooseVersion(\"3.34\"):\n+            self.fail(\n+                \"`scoring.compute_CD` and `scoring.graph_ranks` were deprecated in \"\n+                \"version 3.33. Please remove the deprecated methods, TestComputeCD, \"\n+                \"and references in documentation.\"\n+            )\n \n \n class TestLogLoss(unittest.TestCase):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6415.0, "instance_id": "biolab__orange3-6415", "issue_numbers": 0, "base_commit": "d59c0459202a97a287285535079be36dcf8399d7", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex ee447b80c..0af6f5cbc 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -42,7 +42,8 @@ from Orange.preprocess.transformation import (\n )\n from Orange.misc.collections import DictMissingConst\n from Orange.util import frompyfunc\n-from Orange.widgets import widget, gui, settings\n+from Orange.widgets import widget, gui\n+from Orange.widgets.settings import Setting\n from Orange.widgets.utils import itemmodels, ftry, disconnected\n from Orange.widgets.utils.buttons import FixedSizeButton\n from Orange.widgets.utils.itemmodels import signal_blocking\n@@ -1892,9 +1893,9 @@ class OWEditDomain(widget.OWWidget):\n \n     settings_version = 3\n \n-    _domain_change_hints = settings.Setting({}, schema_only=True)\n-    _merge_dialog_settings = settings.Setting({}, schema_only=True)\n-    output_table_name = settings.Setting(\"\", schema_only=True)\n+    _domain_change_hints = Setting({}, schema_only=True)\n+    _merge_dialog_settings = Setting({}, schema_only=True)\n+    output_table_name = Setting(\"\", schema_only=True)\n \n     want_main_area = False\n \n@@ -2311,9 +2312,31 @@ class OWEditDomain(widget.OWWidget):\n                         trs.append(CategoriesMapping(\n                             list(zip(src.categories, dst.categories))))\n                 store.append((deconstruct(src), [deconstruct(tr) for tr in trs]))\n-            # TODO: migrate directly to non-context hints\n             context.values[\"_domain_change_store\"] = (dict(store), -2)\n \n+    @classmethod\n+    def migrate_settings(cls, settings, version):\n+        if version == 2 and \"context_settings\" in settings:\n+            contexts = settings[\"context_settings\"]\n+            valuess = []\n+            for context in contexts:\n+                cls.migrate_context(context, context.values[\"__version__\"])\n+                valuess.append(context.values)\n+            # Fix the order of keys\n+            hints = dict.fromkeys(\n+                chain(*(values[\"_domain_change_store\"][0]\n+                        for values in reversed(valuess)))\n+            )\n+            settings[\"output_table_name\"] = \"\"\n+            for values in valuess:\n+                hints.update(values[\"_domain_change_store\"][0])\n+                new_name, _ = values.pop(\"output_table_name\", (\"\", -2))\n+                if new_name:\n+                    settings[\"output_table_name\"] = new_name\n+            while len(hints) > MAX_HINTS:\n+                del hints[next(iter(hints))]\n+            settings[\"_domain_change_hints\"] = hints\n+            del settings[\"context_settings\"]\n \n def enumerate_columns(\n         table: Orange.data.Table\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex 419b562cc..654f0685d 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -16,6 +16,7 @@ from AnyQt.QtWidgets import QAction, QComboBox, QLineEdit, \\\n     QStyleOptionViewItem, QDialog, QMenu, QToolTip, QListView\n from AnyQt.QtTest import QTest, QSignalSpy\n \n+from orangewidget.settings import Context\n from orangewidget.tests.utils import simulate\n \n from Orange.data import (\n@@ -408,6 +409,107 @@ class TestOWEditDomain(WidgetTest):\n         self.assertEqual([var.name for var in outp.domain.attributes],\n                          [\"v0\", \"v1\", \"v2\", \"xv3\", \"v4\"])\n \n+    def test_migrate_settings_hints_2_to_3(self):\n+        settings = {\n+            '__version__': 2,\n+            'context_settings':\n+                [Context(values={\n+                    '_domain_change_store': (\n+                        {('Categorical', ('a', ('mir1', 'mir4', 'mir2'), (), False)):\n+                            [('Rename', ('disease mir',))],\n+                         ('Categorical', ('b', ('mir4', 'mir1', 'mir2'), (), False)):\n+                             [('Rename', ('disease mirs',))]\n+                         },\n+                        -2),\n+                    '_merge_dialog_settings': ({}, -4),\n+                    '_selected_item': (('1', 0), -2),\n+                    'output_table_name': ('boo', -2),\n+                    '__version__': 2}),\n+                 Context(values={\n+                     '_domain_change_store': (\n+                         {('Categorical', ('b', ('mir4', 'mir1', 'mir2'), (), False)):\n+                             [('Rename', ('disease bmir',))],\n+                          ('Categorical', ('c', ('mir4', 'mir1', 'mir2'), (), False)):\n+                              [('Rename', ('disease mirs',))]\n+                         },\n+                         -2),\n+                      '_merge_dialog_settings': ({}, -4),\n+                      '_selected_item': (('1', 0), -2),\n+                      'output_table_name': ('far', -2),\n+                      '__version__': 2}),\n+                ]}\n+        migrated_hints = {\n+            ('Categorical', ('b', ('mir4', 'mir1', 'mir2'), (), False)):\n+                [('Rename', ('disease bmir',))],\n+            ('Categorical', ('c', ('mir4', 'mir1', 'mir2'), (), False)):\n+                [('Rename', ('disease mirs',))],\n+            ('Categorical', ('a', ('mir1', 'mir4', 'mir2'), (), False)):\n+                 [('Rename', ('disease mir',))],\n+        }\n+        widget = self.create_widget(OWEditDomain, stored_settings=settings)\n+        self.assertEqual(widget._domain_change_hints, migrated_hints)\n+        # order matters\n+        self.assertEqual(list(widget._domain_change_hints), list(migrated_hints))\n+        self.assertEqual(widget.output_table_name, \"far\")\n+\n+    def test_migrate_settings_2_to_3_realworld(self):\n+        settings = {\n+            'controlAreaVisible': True,\n+            '__version__': 2,\n+            'context_settings': [Context(\n+                values={\n+                    '_domain_change_store':\n+                        ({('Real', ('sepal length', (1, 'f'), (), False)):\n+                              [('AsString', ())],\n+                          ('Real', ('sepal width', (1, 'f'), (), False)):\n+                              [('AsTime', ()), ('StrpTime', ('Detect automatically', None, 1, 1))],\n+                          ('Real', ('petal width', (1, 'f'), (), False)):\n+                              [('Annotate', ((('a', 'b'),),))]}, -2),\n+                    '_merge_dialog_settings': ({}, -4),\n+                    '_selected_item': (('petal width', 2), -2),\n+                    'output_table_name': ('', -2),\n+                    '__version__': 2},\n+                attributes={'sepal length': 2, 'sepal width': 2,\n+                            'petal length': 2, 'petal width': 2, 'iris': 1},\n+                metas={}\n+            )]\n+        }\n+        widget = self.create_widget(OWEditDomain, stored_settings=settings)\n+        self.assertEqual(\n+            widget._domain_change_hints,\n+            {('Real', ('sepal length', (1, 'f'), (), False)):\n+                 [('AsString', ())],\n+             ('Real', ('sepal width', (1, 'f'), (), False)):\n+                 [('AsTime', ()),\n+                  ('StrpTime', ('Detect automatically', None, 1, 1))],\n+             ('Real', ('petal width', (1, 'f'), (), False)):\n+                 [('Annotate', ((('a', 'b'),),))]}\n+        )\n+\n+    def test_migrate_settings_name_2_to_3(self):\n+        settings = {\n+            '__version__': 2,\n+            'context_settings':\n+                [Context(values={\n+                    '_domain_change_store': ({}, -2),\n+                     'output_table_name': ('boo', -2),\n+                     '__version__': 2}),\n+                 Context(values={\n+                     '_domain_change_store': ({}, -2),\n+                     'output_table_name': ('far', -2),\n+                     '__version__': 2}),\n+                 Context(values={\n+                     '_domain_change_store': ({}, -2),\n+                     'output_table_name': ('', -2),\n+                     '__version__': 2}),\n+                 Context(values={\n+                     '_domain_change_store': ({}, -2),\n+                     '__version__': 2})\n+                ]\n+        }\n+        widget = self.create_widget(OWEditDomain, stored_settings=settings)\n+        self.assertEqual(widget.output_table_name, \"far\")\n+\n \n class TestEditors(GuiTest):\n     def test_variable_editor(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6233.0, "instance_id": "biolab__orange3-6233", "issue_numbers": 0, "base_commit": "3423a8ea9a827f778a13129d31cb21df9cc05b5e", "patch": "diff --git a/Orange/widgets/unsupervised/owdistancematrix.py b/Orange/widgets/unsupervised/owdistancematrix.py\nindex a6b465c38..d56cf4ba3 100644\n--- a/Orange/widgets/unsupervised/owdistancematrix.py\n+++ b/Orange/widgets/unsupervised/owdistancematrix.py\n@@ -252,8 +252,7 @@ class OWDistanceMatrix(widget.OWWidget):\n         elif isinstance(items, Table):\n             annotations.extend(\n                 itertools.chain(items.domain.variables, items.domain.metas))\n-            if items.domain.class_var:\n-                pending_idx = 2 + len(items.domain.attributes)\n+            pending_idx = annotations.index(self._choose_label(items))\n         self.annot_combo.model()[:] = annotations\n         self.annotation_idx = pending_idx\n \n@@ -263,6 +262,14 @@ class OWDistanceMatrix(widget.OWWidget):\n             self.tableview.resizeColumnsToContents()\n         self.commit.now()\n \n+    @staticmethod\n+    def _choose_label(data: Table):\n+        attr = max((attr for attr in data.domain.metas\n+                    if isinstance(attr, StringVariable)),\n+                   key=lambda x: len(set(data.get_column(x))),\n+                   default=None)\n+        return attr or data.domain.class_var or \"Enumerate\"\n+\n     def _invalidate_annotations(self):\n         if self.distances is not None:\n             self._update_labels()\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owdistancematrix.py b/Orange/widgets/unsupervised/tests/test_owdistancematrix.py\nindex acd31c5ea..ef35a5e66 100644\n--- a/Orange/widgets/unsupervised/tests/test_owdistancematrix.py\n+++ b/Orange/widgets/unsupervised/tests/test_owdistancematrix.py\n@@ -84,6 +84,30 @@ class TestOWDistanceMatrix(WidgetTest):\n         ac.activated.emit(idx)\n         self.assertEqual(self.widget.tablemodel.labels, [\"1\", \"?\"])\n \n+    def test_choose_label(self):\n+        self.assertIs(OWDistanceMatrix._choose_label(self.iris),\n+                      self.iris.domain.class_var)\n+\n+        domain = Domain([ContinuousVariable(x) for x in \"xyz\"],\n+                        ContinuousVariable(\"t\"),\n+                        [ContinuousVariable(\"m\")] +\n+                        [StringVariable(c) for c in \"abc\"]\n+                        )\n+        data = Table.from_numpy(\n+            domain,\n+            np.zeros((4, 3), dtype=float),\n+            np.arange(4, dtype=float),\n+            np.array([[0, \"a\", \"a\", \"a\"],\n+                      [1, \"b\", \"b\", \"b\"],\n+                      [2, \"a\", \"c\", \"b\"],\n+                      [0, \"b\", \"a\", \"a\"]])\n+        )\n+        self.assertIs(OWDistanceMatrix._choose_label(data),\n+                      domain.metas[2])\n+        domain2 = Domain(domain.attributes, domain.class_var, domain.metas[:-2])\n+        self.assertIs(OWDistanceMatrix._choose_label(data.transform(domain2)),\n+                      domain.metas[1])\n+\n \n class TestDelegates(GuiTest):\n     def test_delegate(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5788.0, "instance_id": "biolab__orange3-5788", "issue_numbers": 0, "base_commit": "077e38482559ddc988a8bb2d5efd32edc5eefc25", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex 1a952bcd0..069316139 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -406,7 +406,13 @@ class UrlReader(FileFormat):\n         filename = filename.strip()\n         if not urlparse(filename).scheme:\n             filename = 'http://' + filename\n-        filename = quote(filename, safe=\"/:\")\n+\n+        # Fully support URL with query or fragment like http://filename.txt?a=1&b=2#c=3\n+        def quote_byte(b):\n+            return chr(b) if b < 0x80 else '%{:02X}'.format(b)\n+\n+        filename = ''.join(map(quote_byte, filename.encode(\"utf-8\")))\n+\n         super().__init__(filename)\n \n     @staticmethod\n.", "test_patch": "diff --git a/Orange/tests/test_url_reader.py b/Orange/tests/test_url_reader.py\nindex c40bf26a2..2d3bb5907 100644\n--- a/Orange/tests/test_url_reader.py\n+++ b/Orange/tests/test_url_reader.py\n@@ -25,6 +25,19 @@ class TestUrlReader(unittest.TestCase):\n                \"vestnik-clanki/detektiranje-utrdb-v-\u0161ahu-.txt\"\n         self.assertRaises(OSError, UrlReader(path).read)\n \n+    def test_base_url_with_query(self):\n+        data = UrlReader(\"https://datasets.biolab.si/core/grades.xlsx?a=1&b=2\").read()\n+        self.assertEqual(16, len(data))\n+\n+    def test_url_with_fragment(self):\n+        data = UrlReader(\"https://datasets.biolab.si/core/grades.xlsx#tab=1\").read()\n+        self.assertEqual(16, len(data))\n+\n+    def test_special_characters_with_query_and_fragment(self):\n+        path = \"http://file.biolab.si/text-semantics/data/elektrotehniski-\" \\\n+               \"vestnik-clanki/detektiranje-utrdb-v-\u0161ahu-.txt?a=1&b=2#c=3\"\n+        self.assertRaises(OSError, UrlReader(path).read)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5382.0, "instance_id": "biolab__orange3-5382", "issue_numbers": 0, "base_commit": "704a8379ee7d6345df39f44c8e6cbd5f6ec9ed0d", "patch": "diff --git a/Orange/widgets/visualize/ownomogram.py b/Orange/widgets/visualize/ownomogram.py\nindex b1a34112d..faaa631d6 100644\n--- a/Orange/widgets/visualize/ownomogram.py\n+++ b/Orange/widgets/visualize/ownomogram.py\n@@ -1285,6 +1285,7 @@ class OWNomogram(OWWidget):\n         for attr in preprocessed.attributes:\n             cv = attr._compute_value.variable._compute_value\n             var = cv.variable if cv else original[attr.name]\n+            var = original[var.name] if var.name in original else attr\n             if var in attrs:    # the reason for OrderedDict\n                 continue\n             attrs[var] = None   # we only need keys\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_ownomogram.py b/Orange/widgets/visualize/tests/test_ownomogram.py\nindex b2d51c4dc..9409cb8a9 100644\n--- a/Orange/widgets/visualize/tests/test_ownomogram.py\n+++ b/Orange/widgets/visualize/tests/test_ownomogram.py\n@@ -13,6 +13,7 @@ from Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n from Orange.classification import (\n     NaiveBayesLearner, LogisticRegressionLearner, MajorityLearner\n )\n+from Orange.preprocess import Scale, Continuize\n from Orange.tests import test_filename\n from Orange.widgets.tests.base import WidgetTest\n from Orange.widgets.utils.state_summary import format_summary_details\n@@ -306,6 +307,28 @@ class TestOWNomogram(WidgetTest):\n         anim = animator._GraphicsColorAnimator__animation\n         self.assertNotEqual(anim.state(), QPropertyAnimation.Running)\n \n+    def test_reconstruct_domain(self):\n+        data = Table(\"heart_disease\")\n+        cls = LogisticRegressionLearner()(data)\n+        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        transformed_data = cls.original_data.transform(domain)\n+        self.assertEqual(transformed_data.X.shape, data.X.shape)\n+        self.assertFalse(np.isnan(transformed_data.X[0]).any())\n+\n+        scaled_data = Scale()(data)\n+        cls = LogisticRegressionLearner()(scaled_data)\n+        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        transformed_data = cls.original_data.transform(domain)\n+        self.assertEqual(transformed_data.X.shape, scaled_data.X.shape)\n+        self.assertFalse(np.isnan(transformed_data.X[0]).any())\n+\n+        disc_data = Continuize()(data)\n+        cls = LogisticRegressionLearner()(disc_data)\n+        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        transformed_data = cls.original_data.transform(domain)\n+        self.assertEqual(transformed_data.X.shape, disc_data.X.shape)\n+        self.assertFalse(np.isnan(transformed_data.X[0]).any())\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6357.0, "instance_id": "biolab__orange3-6357", "issue_numbers": 0, "base_commit": "a2cfc31d15ba3e480c40b12687bbf800f20df5be", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex f8e08944f..72deea866 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1475,6 +1475,8 @@ class Table(Sequence, Storage):\n             self._metas = self._metas.copy()\n         if is_view(self._W):\n             self._W = self._W.copy()\n+        if is_view(self.ids):\n+            self.ids = self.ids.copy()\n \n     def copy(self):\n         \"\"\"\ndiff --git a/Orange/widgets/visualize/owtreeviewer.py b/Orange/widgets/visualize/owtreeviewer.py\nindex 7078e8fa3..9751a3457 100644\n--- a/Orange/widgets/visualize/owtreeviewer.py\n+++ b/Orange/widgets/visualize/owtreeviewer.py\n@@ -10,7 +10,6 @@ from AnyQt.QtWidgets import (\n from AnyQt.QtGui import QColor, QBrush, QPen, QFontMetrics\n from AnyQt.QtCore import Qt, QPointF, QSizeF, QRectF\n \n-from orangecanvas.utils.localization import pl\n from orangewidget.utils.combobox import ComboBoxSearch\n \n from Orange.base import TreeModel, SklModel\n@@ -20,6 +19,7 @@ from Orange.widgets.utils.widgetpreview import WidgetPreview\n from Orange.widgets.visualize.owtreeviewer2d import \\\n     GraphicsNode, GraphicsEdge, OWTreeViewer2D\n from Orange.widgets.utils import to_html\n+from Orange.widgets.utils.localization import pl\n from Orange.data import Table\n from Orange.util import color_to_hex\n \n \n.", "test_patch": "diff --git a/Orange/data/tests/test_table.py b/Orange/data/tests/test_table.py\nindex b687b00c4..45a71762d 100644\n--- a/Orange/data/tests/test_table.py\n+++ b/Orange/data/tests/test_table.py\n@@ -253,6 +253,25 @@ class TestTableInit(unittest.TestCase):\n             tabw.metas,\n             np.hstack((tab.metas, np.array(list(\"abcde\")).reshape(5, -1))))\n \n+    def test_copy(self):\n+        domain = Domain([ContinuousVariable(\"x\")],\n+                        ContinuousVariable(\"y\"),\n+                        [ContinuousVariable(\"z\")])\n+        data1 = Table.from_list(domain, [[1, 2, 3]], weights=[4])\n+        data1.ids[0]= 5\n+        data2 = data1.copy()\n+        with data2.unlocked():\n+            data2.X += 1\n+            data2.Y += 1\n+            data2.metas += 1\n+            data2.W += 1\n+            data2.ids += 1\n+        self.assertEqual(data1.X, [[1]])\n+        self.assertEqual(data1.Y, [[2]])\n+        self.assertEqual(data1.metas, [[3]])\n+        self.assertEqual(data1.W, [[4]])\n+        self.assertEqual(data1.ids, [[5]])\n+\n \n class TestTableLocking(unittest.TestCase):\n     @classmethod\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6276.0, "instance_id": "biolab__orange3-6276", "issue_numbers": 0, "base_commit": "216264ac5c6fa0bd4c8392b3631d40138ae07652", "patch": "diff --git a/Orange/widgets/visualize/owpythagoreanforest.py b/Orange/widgets/visualize/owpythagoreanforest.py\nindex f615f0f14..e0b36d135 100644\n--- a/Orange/widgets/visualize/owpythagoreanforest.py\n+++ b/Orange/widgets/visualize/owpythagoreanforest.py\n@@ -3,11 +3,13 @@ from math import log, sqrt\n from typing import Any, Callable, Optional\n \n from AnyQt.QtCore import Qt, QRectF, QSize, QPointF, QSizeF, QModelIndex, \\\n-    QItemSelection, QItemSelectionModel, QT_VERSION\n+    QItemSelection, QItemSelectionModel, QT_VERSION, QByteArray, QBuffer, \\\n+    QIODevice\n from AnyQt.QtGui import QPainter, QPen, QColor, QBrush, QMouseEvent\n from AnyQt.QtWidgets import QSizePolicy, QGraphicsScene, QLabel, QSlider, \\\n     QListView, QStyledItemDelegate, QStyleOptionViewItem, QStyle\n \n+from orangewidget.io import PngFormat\n from Orange.base import RandomForestModel, TreeModel\n from Orange.data import Table\n from Orange.widgets import gui, settings\n@@ -23,6 +25,53 @@ from Orange.widgets.visualize.utils.tree.skltreeadapter import \\\n from Orange.widgets.widget import OWWidget\n \n \n+REPORT_STYLE = \"\"\"\n+<style>\n+* {\n+  box-sizing: border-box;\n+}\n+\n+.forest_model_row {\n+  display: flex;\n+  flex-wrap: wrap;\n+  padding: 0 4px;\n+}\n+\n+.forest_model_col {\n+  flex: 10%;\n+  max-width: 10%;\n+  padding: 0 4px;\n+}\n+\n+.forest_model_col img {\n+  margin-top: 8px;\n+  vertical-align: middle;\n+}\n+\n+@media screen and (max-width: 2200px) {\n+  .forest_model_col {\n+    flex: 25%;\n+    max-width: 25%;\n+  }\n+}\n+\n+@media screen and (max-width: 1200px) {\n+  .forest_model_col {\n+    flex: 50%;\n+    max-width: 50%;\n+  }\n+}\n+\n+@media screen and (max-width: 600px) {\n+  .forest_model_col {\n+    flex: 100%;\n+    max-width: 100%;\n+  }\n+}\n+</style>\n+\"\"\"\n+\n+\n class PythagoreanForestModel(PyListModel):\n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n@@ -377,7 +426,30 @@ class OWPythagoreanForest(OWWidget):\n \n     def send_report(self):\n         \"\"\"Send report.\"\"\"\n-        self.report_plot()\n+        model = self.forest_model\n+        max_rows = 30\n+\n+        def item_html(row):\n+            img_data = model.data(model.index(row))\n+            byte_array = QByteArray()\n+            filename = QBuffer(byte_array)\n+            filename.open(QIODevice.WriteOnly)\n+            PngFormat.write(filename, img_data)\n+            img_encoded = byte_array.toBase64().data().decode(\"utf-8\")\n+            return f'<img style=\"width:100%\" ' \\\n+                   f'src=\"data:image/png;base64,{img_encoded}\"/>'\n+\n+        html = [\"<div class='forest_model_row'>\"]\n+        for i in range(model.rowCount())[:max_rows]:\n+            html.append(\"<div class='forest_model_col'>\")\n+            html.extend(item_html(i))\n+            html.append(\"</div>\")\n+        html.append(\"</div>\")\n+\n+        html = REPORT_STYLE + \"\".join(html)\n+        if model.rowCount() > max_rows:\n+            html += \"<p>. . .</p>\"\n+        self.report_raw(html)\n \n \n class SklRandomForestAdapter:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owpythagoreanforest.py b/Orange/widgets/visualize/tests/test_owpythagoreanforest.py\nindex f2c88b362..29fa8dc19 100644\n--- a/Orange/widgets/visualize/tests/test_owpythagoreanforest.py\n+++ b/Orange/widgets/visualize/tests/test_owpythagoreanforest.py\n@@ -1,5 +1,5 @@\n # pylint: disable=missing-docstring,protected-access\n-\n+import unittest\n from unittest.mock import Mock\n \n from AnyQt.QtCore import Qt, QItemSelection, QItemSelectionModel\n@@ -238,3 +238,15 @@ class TestOWPythagoreanForest(WidgetTest):\n \n         self.send_signal(self.widget.Inputs.random_forest, iris_tree)\n         self.assertEqual(2, self.widget.target_class_index)\n+\n+    def test_report(self):\n+        self.widget.send_report()\n+\n+        self.widget.report_raw = Mock()\n+        self.send_signal(self.widget.Inputs.random_forest, self.titanic)\n+        self.widget.send_report()\n+        self.widget.report_raw.assert_called_once()\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5423.0, "instance_id": "biolab__orange3-5423", "issue_numbers": 0, "base_commit": "f68f2937cfb147f679da58df0432f2786289ca15", "patch": "diff --git a/Orange/widgets/unsupervised/owdbscan.py b/Orange/widgets/unsupervised/owdbscan.py\nindex c4cd4eabc..82f742a06 100644\n--- a/Orange/widgets/unsupervised/owdbscan.py\n+++ b/Orange/widgets/unsupervised/owdbscan.py\n@@ -10,7 +10,7 @@ from Orange.preprocess import Normalize, Continuize, SklImpute\n from Orange.widgets import widget, gui\n from Orange.widgets.utils.slidergraph import SliderGraph\n from Orange.widgets.settings import Setting\n-from Orange.data import Table, Domain, DiscreteVariable\n+from Orange.data import Table, DiscreteVariable\n from Orange.data.util import get_unique_names\n from Orange.clustering import DBSCAN\n from Orange.widgets.utils.annotated_data import ANNOTATED_DATA_SIGNAL_NAME\n@@ -197,11 +197,10 @@ class OWDBSCAN(widget.OWWidget):\n \n         clusters = [c if c >= 0 else np.nan for c in model.labels]\n         k = len(set(clusters) - {np.nan})\n-        clusters = np.array(clusters).reshape(len(self.data), 1)\n+        clusters = np.array(clusters)\n         core_samples = set(model.projector.core_sample_indices_)\n         in_core = np.array([1 if (i in core_samples) else 0\n                             for i in range(len(self.data))])\n-        in_core = in_core.reshape(len(self.data), 1)\n \n         domain = self.data.domain\n         attributes, classes = domain.attributes, domain.class_vars\n@@ -215,15 +214,8 @@ class OWDBSCAN(widget.OWWidget):\n         u_in_core = get_unique_names(names + [u_clust_var], \"DBSCAN Core\")\n         in_core_var = DiscreteVariable(u_in_core, values=(\"0\", \"1\"))\n \n-        x, y, metas = self.data.X, self.data.Y, self.data.metas\n-\n-        meta_attrs += (clust_var, )\n-        metas = np.hstack((metas, clusters))\n-        meta_attrs += (in_core_var, )\n-        metas = np.hstack((metas, in_core))\n-\n-        domain = Domain(attributes, classes, meta_attrs)\n-        new_table = Table(domain, x, y, metas, self.data.W)\n+        new_table = self.data.add_column(clust_var, clusters, to_metas=True)\n+        new_table = new_table.add_column(in_core_var, in_core, to_metas=True)\n \n         self._set_output_summary(new_table)\n         self.Outputs.annotated_data.send(new_table)\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owdbscan.py b/Orange/widgets/unsupervised/tests/test_owdbscan.py\nindex dc620cc3e..c7e434c1d 100644\n--- a/Orange/widgets/unsupervised/tests/test_owdbscan.py\n+++ b/Orange/widgets/unsupervised/tests/test_owdbscan.py\n@@ -218,6 +218,11 @@ class TestOWDBSCAN(WidgetTest):\n         data = Table(\"titanic\")\n         self.send_signal(w.Inputs.data, data)\n \n+    def test_data_retain_ids(self):\n+        self.send_signal(self.widget.Inputs.data, self.iris)\n+        output = self.get_output(self.widget.Outputs.annotated_data)\n+        np.testing.assert_array_equal(self.iris.ids, output.ids)\n+\n     def test_missing_data(self):\n         w = self.widget\n         self.iris[1:5, 1] = np.nan\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5202.0, "instance_id": "biolab__orange3-5202", "issue_numbers": 0, "base_commit": "b8d3d676f506f1c49e09028e4e38ef99ffebf9a8", "patch": "diff --git a/Orange/widgets/data/owpivot.py b/Orange/widgets/data/owpivot.py\nindex f35b19ab2..6787c3803 100644\n--- a/Orange/widgets/data/owpivot.py\n+++ b/Orange/widgets/data/owpivot.py\n@@ -14,7 +14,7 @@ from AnyQt.QtWidgets import (QTableView, QSizePolicy, QHeaderView,\n                              QGridLayout)\n \n from Orange.data import (Table, DiscreteVariable, Variable, Domain,\n-                         ContinuousVariable)\n+                         ContinuousVariable, TimeVariable)\n from Orange.data.domain import filter_visible\n from Orange.data.util import get_unique_names_duplicates, get_unique_names\n from Orange.data.filter import FilterContinuous, FilterDiscrete, Values\n@@ -67,6 +67,7 @@ class Pivot:\n     AnyVarFunctions = (Count_defined,)\n     ContVarFunctions = (Sum, Mean, Min, Max, Mode, Median, Var)\n     DiscVarFunctions = (Majority,)\n+    TimeVarFunctions = (Mean, Min, Max, Mode, Median)\n \n     class Tables:\n         table = None  # type: Table\n@@ -195,7 +196,12 @@ class Pivot:\n             if fun in self.DiscVarFunctions:\n                 attrs.append(DiscreteVariable(name, var.values))\n             else:\n-                attrs.append(ContinuousVariable(name))\n+                if isinstance(var, TimeVariable) and \\\n+                        fun in self.TimeVarFunctions:\n+                    attrs.append(TimeVariable(name, have_date=var.have_date,\n+                                              have_time=var.have_time))\n+                else:\n+                    attrs.append(ContinuousVariable(name))\n         args = (var_indep_funs, var_dep_funs, attrs)\n         for t, var in ((\"table\", None), (\"total_h\", self._col_var),\n                        (\"total_v\", self._row_var), (\"total\", self._total_var)):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpivot.py b/Orange/widgets/data/tests/test_owpivot.py\nindex 4d12d05eb..1d9ab780f 100644\n--- a/Orange/widgets/data/tests/test_owpivot.py\n+++ b/Orange/widgets/data/tests/test_owpivot.py\n@@ -10,7 +10,8 @@ from AnyQt.QtCore import Qt, QPoint\n from AnyQt.QtTest import QTest\n \n from Orange.data import (Table, Domain, ContinuousVariable as Cv,\n-                         StringVariable as sv, DiscreteVariable as Dv)\n+                         StringVariable as sv, DiscreteVariable as Dv,\n+                         TimeVariable as Tv)\n from Orange.widgets.data.owpivot import (OWPivot, Pivot,\n                                          AggregationFunctionsEnum)\n from Orange.widgets.tests.base import WidgetTest\n@@ -68,6 +69,16 @@ class TestOWPivot(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, None)\n         self.assertIsNone(self.get_output(self.widget.Outputs.grouped_data))\n \n+    def test_output_grouped_data_time_var(self):\n+        domain = Domain([Dv(\"d1\", (\"a\", \"b\")), Tv(\"t1\", have_date=1)])\n+        X = np.array([[0, 1e9], [0, 1e8], [1, 2e8], [1, np.nan]])\n+        data = Table(domain, X)\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.agg_checkboxes[Pivot.Functions.Mean.value].click()\n+        grouped = self.get_output(self.widget.Outputs.grouped_data)\n+        str_grouped = \"[[a, 2, 1987-06-06],\\n [b, 2, 1976-05-03]]\"\n+        self.assertEqual(str(grouped), str_grouped)\n+\n     def test_output_filtered_data(self):\n         self.agg_checkboxes[Pivot.Functions.Sum.value].click()\n         self.send_signal(self.widget.Inputs.data, self.iris)\n@@ -333,6 +344,18 @@ class TestPivot(unittest.TestCase):\n              [1, 2, 1, 1, 1, 1, 2, 1, 7, 7, 7, 7, 7, 7, 0]])\n         self.assert_table_equal(group_tab, Table(Domain(domain[:2] + atts), X))\n \n+    def test_group_table_time_var(self):\n+        domain = Domain([Dv(\"d1\", (\"a\", \"b\")), Tv(\"t1\", have_date=1)])\n+        X = np.array([[0, 1e9], [0, 1e8], [1, 2e8], [1, np.nan]])\n+        table = Table(domain, X)\n+        pivot = Pivot(table, Pivot.Functions, domain[0], val_var=domain[1])\n+        str_grouped = \\\n+            \"[[a, 2, 2, a, 2, 1.1e+09, 1987-06-06, 1973-03-03, \" \\\n+            \"2001-09-09, 1973-03-03, 1987-06-06, 2.025e+17],\\n \" \\\n+            \"[b, 2, 2, b, 1, 2e+08, 1976-05-03, 1976-05-03, \" \\\n+            \"1976-05-03, 1976-05-03, 1976-05-03, 0]]\"\n+        self.assertEqual(str(pivot.group_table), str_grouped)\n+\n     def test_group_table_metas(self):\n         domain = Domain([Dv(\"d1\", (\"a\", \"b\")), Cv(\"c1\"),\n                          Dv(\"d2\", (\"a\", \"b\")), Cv(\"c2\")])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5193.0, "instance_id": "biolab__orange3-5193", "issue_numbers": 0, "base_commit": "5236e3b9a2d529dc68a50052ed50d8cf582cfc63", "patch": "diff --git a/Orange/widgets/data/owpivot.py b/Orange/widgets/data/owpivot.py\nindex 6787c3803..c2c3c0019 100644\n--- a/Orange/widgets/data/owpivot.py\n+++ b/Orange/widgets/data/owpivot.py\n@@ -618,8 +618,11 @@ class PivotTableView(QTableView):\n             self.table_model.setItem(i + 1, 1, item)\n \n     def _set_values(self, table):\n+        attrs = table.domain.attributes\n         for i, j in product(range(len(table)), range(len(table[0]))):\n-            item = self._create_value_item(str(table.X[i, j]))\n+            # data is read faster when reading directly from table.X\n+            value = table.X[i, j] if attrs[j].is_continuous else table[i, j]\n+            item = self._create_value_item(str(value))\n             self.table_model.setItem(i + self._n_leading_rows,\n                                      j + self._n_leading_cols, item)\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpivot.py b/Orange/widgets/data/tests/test_owpivot.py\nindex 1d9ab780f..9e41fbd5f 100644\n--- a/Orange/widgets/data/tests/test_owpivot.py\n+++ b/Orange/widgets/data/tests/test_owpivot.py\n@@ -294,6 +294,25 @@ class TestOWPivot(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, None)\n         self.assertFalse(self.widget.Warning.too_many_values.is_shown())\n \n+    def test_table_values(self):\n+        self.send_signal(self.widget.Inputs.data, self.heart_disease)\n+        domain = self.heart_disease.domain\n+        self.agg_checkboxes[Pivot.Functions.Majority.value].click()\n+        simulate.combobox_activate_item(self.widget.controls.col_feature,\n+                                        domain[\"gender\"].name)\n+        simulate.combobox_activate_item(self.widget.controls.val_feature,\n+                                        domain[\"thal\"].name)\n+\n+        model = self.widget.table_view.model()\n+        self.assertEqual(model.data(model.index(2, 3)), \"72.0\")\n+        self.assertEqual(model.data(model.index(3, 3)), \"normal\")\n+        self.assertEqual(model.data(model.index(4, 3)), \"25.0\")\n+        self.assertEqual(model.data(model.index(5, 3)), \"reversable defect\")\n+        self.assertEqual(model.data(model.index(2, 4)), \"92.0\")\n+        self.assertEqual(model.data(model.index(3, 4)), \"normal\")\n+        self.assertEqual(model.data(model.index(4, 4)), \"114.0\")\n+        self.assertEqual(model.data(model.index(5, 4)), \"reversable defect\")\n+\n \n class TestAggregationFunctionsEnum(unittest.TestCase):\n     def test_pickle(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5986.0, "instance_id": "biolab__orange3-5986", "issue_numbers": 0, "base_commit": "fd15025405a0d4291bbeef9f4bf7eb58f30ca97e", "patch": "diff --git a/Orange/widgets/data/owneighbors.py b/Orange/widgets/data/owneighbors.py\nindex ae1e502a0..8e5bc4356 100644\n--- a/Orange/widgets/data/owneighbors.py\n+++ b/Orange/widgets/data/owneighbors.py\n@@ -156,17 +156,16 @@ class OWNeighbors(OWWidget):\n         return np.argpartition(dist, up_to - 1)[:up_to]\n \n     def _data_with_similarity(self, indices):\n-        data = self.data\n-        varname = get_unique_names(data.domain, \"distance\")\n-        metas = data.domain.metas + (ContinuousVariable(varname), )\n-        domain = Domain(data.domain.attributes, data.domain.class_vars, metas)\n-        data_metas = self.distances[indices].reshape((-1, 1))\n-        if data.domain.metas:\n-            data_metas = np.hstack((data.metas[indices], data_metas))\n-        neighbors = Table(domain, data.X[indices], data.Y[indices], data_metas)\n-        neighbors.ids = data.ids[indices]\n-        neighbors.attributes = self.data.attributes\n-        return neighbors\n+        domain = self.data.domain\n+        dist_var = ContinuousVariable(get_unique_names(domain, \"distance\"))\n+        metas = domain.metas + (dist_var, )\n+        domain = Domain(domain.attributes, domain.class_vars, metas)\n+        neighbours = self.data.from_table(domain, self.data, row_indices=indices)\n+        distances = self.distances[indices]\n+        with neighbours.unlocked(neighbours.metas):\n+            if distances.size > 0:\n+                neighbours.get_column_view(dist_var)[0][:] = distances\n+        return neighbours\n \n \n if __name__ == \"__main__\":  # pragma: no cover\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owneighbors.py b/Orange/widgets/data/tests/test_owneighbors.py\nindex f695d64d3..394d86529 100644\n--- a/Orange/widgets/data/tests/test_owneighbors.py\n+++ b/Orange/widgets/data/tests/test_owneighbors.py\n@@ -442,6 +442,16 @@ class TestOWNeighbors(WidgetTest):\n         self.send_signal(w.Inputs.data, None)\n         self.assertEqual(sb.maximum(), default)\n \n+    def test_inherited_table(self):\n+        # pylint: disable=abstract-method\n+        class Table2(Table):\n+            pass\n+\n+        data = Table2(self.iris)\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.send_signal(self.widget.Inputs.reference, data[0:1])\n+        self.assertIsInstance(self.get_output(self.widget.Outputs.data), Table2)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6773.0, "instance_id": "biolab__orange3-6773", "issue_numbers": 0, "base_commit": "39bd0ec37368c9495e753e95c401a34586fe2709", "patch": "diff --git a/Orange/widgets/evaluate/owrocanalysis.py b/Orange/widgets/evaluate/owrocanalysis.py\nindex 1a82f769b..8a42c0ba7 100644\n--- a/Orange/widgets/evaluate/owrocanalysis.py\n+++ b/Orange/widgets/evaluate/owrocanalysis.py\n@@ -442,6 +442,7 @@ class OWROCAnalysis(widget.OWWidget):\n             self._initialize(self.results)\n             self.openContext(self.results.domain.class_var,\n                              self.classifier_names)\n+            self._set_target_prior()\n             self._setup_plot()\n         else:\n             self.warning()\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owrocanalysis.py b/Orange/widgets/evaluate/tests/test_owrocanalysis.py\nindex 46fc078ed..0dfc9f993 100644\n--- a/Orange/widgets/evaluate/tests/test_owrocanalysis.py\n+++ b/Orange/widgets/evaluate/tests/test_owrocanalysis.py\n@@ -278,6 +278,14 @@ class TestOWROCAnalysis(EvaluateTest):\n         simulate.combobox_activate_item(w.controls.target_index, \"soft\")\n         self.assertEqual(np.round(5/12 * 100), w.target_prior)\n \n+    def test_target_prior_reload(self):\n+        w = self.widget\n+        self.send_signal(w.Inputs.evaluation_results, self.res)\n+        simulate.combobox_activate_item(w.controls.target_index, \"soft\")\n+        self.assertEqual(np.round(5/12 * 100), w.target_prior)\n+        self.send_signal(w.Inputs.evaluation_results, self.res)\n+        self.assertEqual(np.round(5/12 * 100), w.target_prior)\n+\n     @patch(\"Orange.widgets.evaluate.owrocanalysis.ThresholdClassifier\")\n     def test_apply_no_output(self, *_):\n         \"\"\"Test no output warnings\"\"\"\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5813.0, "instance_id": "biolab__orange3-5813", "issue_numbers": 0, "base_commit": "bd737a656906e897ca461dc7cc31258d5da382e4", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex 470c92b80..da983b4c4 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -65,6 +65,8 @@ class OWPredictions(OWWidget):\n         empty_data = Msg(\"Empty dataset\")\n         wrong_targets = Msg(\n             \"Some model(s) predict a different target (see more ...)\\n{}\")\n+        missing_targets = Msg(\"Instances with missing targets \"\n+                              \"are ignored while scoring.\")\n \n     class Error(OWWidget.Error):\n         predictor_failed = Msg(\"Some predictor(s) failed (see more ...)\\n{}\")\n@@ -291,18 +293,38 @@ class OWPredictions(OWWidget):\n                 continue\n             row = [QStandardItem(learner_name(pred.predictor)),\n                    QStandardItem(\"N/A\"), QStandardItem(\"N/A\")]\n-            for scorer in scorers:\n-                item = QStandardItem()\n-                try:\n-                    score = scorer_caller(scorer, results)()[0]\n-                    item.setText(f\"{score:.3f}\")\n-                except Exception as exc:  # pylint: disable=broad-except\n-                    item.setToolTip(str(exc))\n-                    # false pos.; pylint: disable=unsupported-membership-test\n-                    if scorer.name in self.score_table.shown_scores:\n-                        errors.append(str(exc))\n-                row.append(item)\n-            self.score_table.model.appendRow(row)\n+\n+            try:\n+                actual = results.actual\n+                predicted = results.predicted\n+                probabilities = results.probabilities\n+\n+                mask = numpy.isnan(results.actual)\n+                no_targets = mask.sum() == len(results.actual)\n+                results.actual = results.actual[~mask]\n+                results.predicted = results.predicted[:, ~mask]\n+                results.probabilities = results.probabilities[:, ~mask]\n+\n+                for scorer in scorers:\n+                    item = QStandardItem()\n+                    if no_targets:\n+                        item.setText(\"NA\")\n+                    else:\n+                        try:\n+                            score = scorer_caller(scorer, results)()[0]\n+                            item.setText(f\"{score:.3f}\")\n+                        except Exception as exc:  # pylint: disable=broad-except\n+                            item.setToolTip(str(exc))\n+                            # false pos.; pylint: disable=unsupported-membership-test\n+                            if scorer.name in self.score_table.shown_scores:\n+                                errors.append(str(exc))\n+                    row.append(item)\n+                self.score_table.model.appendRow(row)\n+\n+            finally:\n+                results.actual = actual\n+                results.predicted = predicted\n+                results.probabilities = probabilities\n \n         view = self.score_table.view\n         if model.rowCount():\n@@ -332,8 +354,12 @@ class OWPredictions(OWWidget):\n                              if isinstance(p.results, Results)\n                              and p.results.probabilities is None))\n             self.Warning.wrong_targets(inv_targets, shown=bool(inv_targets))\n+\n+            show_warning = numpy.isnan(self.data.Y).any() and self.predictors\n+            self.Warning.missing_targets(shown=show_warning)\n         else:\n             self.Warning.wrong_targets.clear()\n+            self.Warning.missing_targets.clear()\n \n     def _get_details(self):\n         details = \"Data:<br>\"\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex 71dc1e967..26fbfbfdd 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -11,6 +11,7 @@ from AnyQt.QtCore import QItemSelectionModel, QItemSelection, Qt\n from Orange.base import Model\n from Orange.classification import LogisticRegressionLearner\n from Orange.data.io import TabReader\n+from Orange.regression import LinearRegressionLearner\n from Orange.widgets.tests.base import WidgetTest\n from Orange.widgets.evaluate.owpredictions import (\n     OWPredictions, SharedSelectionModel, SharedSelectionStore, DataModel,\n@@ -33,6 +34,7 @@ class TestOWPredictions(WidgetTest):\n     def setUp(self):\n         self.widget = self.create_widget(OWPredictions)  # type: OWPredictions\n         self.iris = Table(\"iris\")\n+        self.housing = Table(\"housing\")\n \n     def test_rowCount_from_model(self):\n         \"\"\"Don't crash if the bottom row is visible\"\"\"\n@@ -519,6 +521,62 @@ class TestOWPredictions(WidgetTest):\n         self.send_signal(w.Inputs.predictors, p2, 2)\n         check_evres([\"P1\", \"P3\", \"P2\"])\n \n+    def test_missing_target_cls(self):\n+        mask = np.zeros(len(self.iris), dtype=bool)\n+        mask[::2] = True\n+        train_data = self.iris[~mask]\n+        predict_data = self.iris[mask]\n+        model = LogisticRegressionLearner()(train_data)\n+\n+        self.send_signal(self.widget.Inputs.predictors, model)\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertFalse(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        with predict_data.unlocked():\n+            predict_data.Y[0] = np.nan\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertTrue(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        with predict_data.unlocked():\n+            predict_data.Y[:] = np.nan\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertTrue(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.predictors, None)\n+        self.assertFalse(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+    def test_missing_target_reg(self):\n+        mask = np.zeros(len(self.housing), dtype=bool)\n+        mask[::2] = True\n+        train_data = self.housing[~mask]\n+        predict_data = self.housing[mask]\n+        model = LinearRegressionLearner()(train_data)\n+\n+        self.send_signal(self.widget.Inputs.predictors, model)\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertFalse(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        with predict_data.unlocked():\n+            predict_data.Y[0] = np.nan\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertTrue(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        with predict_data.unlocked():\n+            predict_data.Y[:] = np.nan\n+        self.send_signal(self.widget.Inputs.data, predict_data)\n+        self.assertTrue(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.predictors, None)\n+        self.assertFalse(self.widget.Warning.missing_targets.is_shown())\n+        self.assertFalse(self.widget.Error.scorer_failed.is_shown())\n+\n \n class SelectionModelTest(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6697.0, "instance_id": "biolab__orange3-6697", "issue_numbers": 0, "base_commit": "72335334905912c6501f12d63752734a06084032", "patch": "diff --git a/Orange/widgets/data/owcorrelations.py b/Orange/widgets/data/owcorrelations.py\nindex b1e969228..aeaef49b5 100644\n--- a/Orange/widgets/data/owcorrelations.py\n+++ b/Orange/widgets/data/owcorrelations.py\n@@ -153,12 +153,16 @@ class CorrelationRank(VizRankDialogAttrPair):\n     def row_for_state(self, score, state):\n         attrs = sorted((self.attrs[x] for x in state), key=attrgetter(\"name\"))\n         attr_items = []\n-        for attr in attrs:\n+        for attr, halign in zip(attrs, (Qt.AlignRight, Qt.AlignLeft)):\n             item = QStandardItem(attr.name)\n             item.setData(attrs, self._AttrRole)\n-            item.setData(Qt.AlignLeft + Qt.AlignCenter, Qt.TextAlignmentRole)\n+            item.setData(halign + Qt.AlignVCenter, Qt.TextAlignmentRole)\n             item.setToolTip(attr.name)\n             attr_items.append(item)\n+            if halign is Qt.AlignRight:\n+                colon = QStandardItem(\":\")\n+                colon.setData(Qt.AlignCenter, Qt.TextAlignmentRole)\n+                attr_items.append(colon)\n         correlation_item = QStandardItem(\"{:+.3f}\".format(score[1]))\n         correlation_item.setData(score[2], self.PValRole)\n         correlation_item.setData(attrs, self._AttrRole)\n@@ -195,6 +199,7 @@ class CorrelationRank(VizRankDialogAttrPair):\n         self.threadStopped.emit()\n         header = self.rank_table.horizontalHeader()\n         header.setSectionResizeMode(1, QHeaderView.Stretch)\n+        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)\n \n     def start(self, task, *args, **kwargs):\n         self._set_empty_status()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcorrelations.py b/Orange/widgets/data/tests/test_owcorrelations.py\nindex 17b7bd4f9..859e9988e 100644\n--- a/Orange/widgets/data/tests/test_owcorrelations.py\n+++ b/Orange/widgets/data/tests/test_owcorrelations.py\n@@ -38,7 +38,7 @@ class TestOWCorrelations(WidgetTest):\n         self.wait_until_finished()\n         n_attrs = len(self.data_cont.domain.attributes)\n         self.process_events()\n-        self.assertEqual(self.widget.vizrank.rank_model.columnCount(), 3)\n+        self.assertEqual(self.widget.vizrank.rank_model.columnCount(), 4)\n         self.assertEqual(self.widget.vizrank.rank_model.rowCount(),\n                          n_attrs * (n_attrs - 1) / 2)\n         self.send_signal(self.widget.Inputs.data, None)\n@@ -60,7 +60,7 @@ class TestOWCorrelations(WidgetTest):\n         n_attrs = len([a for a in domain.attributes if a.is_continuous])\n         self.wait_until_finished()\n         self.process_events()\n-        self.assertEqual(self.widget.vizrank.rank_model.columnCount(), 3)\n+        self.assertEqual(self.widget.vizrank.rank_model.columnCount(), 4)\n         self.assertEqual(self.widget.vizrank.rank_model.rowCount(),\n                          n_attrs * (n_attrs - 1) / 2)\n \n@@ -328,7 +328,7 @@ class TestCorrelationRank(WidgetTest):\n         self.assertEqual(row[0].data(Qt.DisplayRole), \"+0.200\")\n         self.assertEqual(row[0].data(CorrelationRank.PValRole), 0.1)\n         self.assertEqual(row[1].data(Qt.DisplayRole), self.attrs[0].name)\n-        self.assertEqual(row[2].data(Qt.DisplayRole), self.attrs[1].name)\n+        self.assertEqual(row[3].data(Qt.DisplayRole), self.attrs[1].name)\n \n     def test_iterate_states(self):\n         self.assertListEqual(list(self.vizrank.iterate_states(None)),\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6544.0, "instance_id": "biolab__orange3-6544", "issue_numbers": 0, "base_commit": "090634830d24489f2da6832f9b610f572574a00c", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex 69797905a..34c41302f 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -325,7 +325,9 @@ class OWPredictions(OWWidget):\n         self.score_opt_box.setVisible(bool(self.class_var))\n \n     def _reg_error_changed(self):\n-        self.predictionsview.model().setRegErrorType(self.show_reg_errors)\n+        model = self.predictionsview.model()\n+        if model is not None:\n+            model.setRegErrorType(self.show_reg_errors)\n         self._update_prediction_delegate()\n \n     def _update_errors_visibility(self):\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex a6ab9b15d..f48a5eb88 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -1157,6 +1157,13 @@ class TestOWPredictions(WidgetTest):\n         self.assertEqual(delegate.span, max(3 / 2, 6 / 11))\n         self.assertFalse(delegate.centered)\n \n+    def test_regression_error_no_model(self):\n+        data = self.housing[:5]\n+        self.send_signal(self.widget.Inputs.data, data)\n+        combo = self.widget.controls.show_reg_errors\n+        with excepthook_catch(raise_on_exit=True):\n+            simulate.combobox_activate_index(combo, 1)\n+\n     def test_report(self):\n         widget = self.widget\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6811.0, "instance_id": "biolab__orange3-6811", "issue_numbers": 0, "base_commit": "ee0ebe7899376bce25e28488442a0d7009c2fdf7", "patch": "diff --git a/Orange/widgets/model/owpls.py b/Orange/widgets/model/owpls.py\nindex c05c0ee86..c397e882d 100644\n--- a/Orange/widgets/model/owpls.py\n+++ b/Orange/widgets/model/owpls.py\n@@ -67,6 +67,7 @@ class OWPLS(OWBaseLearner):\n         self.Outputs.components.send(components)\n \n     def _create_output_coeffs_loadings(self) -> Table:\n+        intercept = self.model.intercept\n         coefficients = self.model.coefficients.T\n         _, y_loadings = self.model.loadings\n         x_rotations, _ = self.model.rotations\n@@ -83,11 +84,12 @@ class OWPLS(OWBaseLearner):\n         )\n \n         X = np.vstack((np.hstack((coefficients, x_rotations)),\n-                       np.full((n_targets, n_targets + n_components), np.nan)))\n-        X[-n_targets:, n_targets:] = y_loadings\n+                       np.full((n_targets + 1, n_targets + n_components), np.nan)))\n+        X[-n_targets - 1: -1, n_targets:] = y_loadings\n+        X[-1, :n_targets] = intercept\n \n-        M = np.array([[v.name for v in self.model.domain.variables],\n-                      [0] * n_features + [1] * n_targets],\n+        M = np.array([[v.name for v in self.model.domain.variables] + [\"intercept\"],\n+                      [0] * n_features + [1] * n_targets + [np.nan]],\n                      dtype=object).T\n \n         table = Table.from_numpy(domain, X=X, metas=M)\n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owpls.py b/Orange/widgets/model/tests/test_owpls.py\nindex f627e360e..a3e787831 100644\n--- a/Orange/widgets/model/tests/test_owpls.py\n+++ b/Orange/widgets/model/tests/test_owpls.py\n@@ -34,28 +34,31 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.send_signal(self.widget.Inputs.data, self._data)\n         coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n         self.assertEqual(coefsdata.name, \"Coefficients and Loadings\")\n-        self.assertEqual(coefsdata.X.shape, (14, 3))\n-        self.assertEqual(coefsdata.Y.shape, (14, 0))\n-        self.assertEqual(coefsdata.metas.shape, (14, 2))\n+        self.assertEqual(coefsdata.X.shape, (15, 3))\n+        self.assertEqual(coefsdata.Y.shape, (15, 0))\n+        self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n         self.assertEqual([\"coef (MEDV)\", \"w*c 1\", \"w*c 2\"],\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n                          [v.name for v in coefsdata.domain.metas])\n-        metas = [v.name for v in self._data.domain.variables]\n+        metas = [v.name for v in self._data.domain.variables] + [\"intercept\"]\n         self.assertTrue((coefsdata.metas[:, 0] == metas).all())\n-        self.assertTrue((coefsdata.metas[:-1, 1] == 0).all())\n-        self.assertTrue((coefsdata.metas[-1, 1] == 1))\n+        self.assertTrue((coefsdata.metas[:-2, 1] == 0).all())\n+        self.assertTrue((coefsdata.metas[-2, 1] == 1))\n+        self.assertTrue(np.isnan(coefsdata.metas[-1, 1]))\n         self.assertAlmostEqual(coefsdata.X[0, 1], 0.237, 3)\n         self.assertAlmostEqual(coefsdata.X[13, 1], -0.304, 3)\n+        self.assertAlmostEqual(coefsdata.X[-1, 0], 22.5, 1)\n+        self.assertTrue(np.isnan(coefsdata.X[-1, 1:]).all())\n \n     def test_output_coefsdata_multi_target(self):\n         self.send_signal(self.widget.Inputs.data, self._data_multi_target)\n         coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n         self.assertEqual(coefsdata.name, \"Coefficients and Loadings\")\n-        self.assertEqual(coefsdata.X.shape, (14, 4))\n-        self.assertEqual(coefsdata.Y.shape, (14, 0))\n-        self.assertEqual(coefsdata.metas.shape, (14, 2))\n+        self.assertEqual(coefsdata.X.shape, (15, 4))\n+        self.assertEqual(coefsdata.Y.shape, (15, 0))\n+        self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n         attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"w*c 1\", \"w*c 2\"]\n         self.assertEqual(attr_names,\n@@ -63,12 +66,17 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n                          [v.name for v in coefsdata.domain.metas])\n         metas = [v.name for v in self._data_multi_target.domain.variables]\n+        metas += [\"intercept\"]\n         self.assertTrue((coefsdata.metas[:, 0] == metas).all())\n-        self.assertTrue((coefsdata.metas[:-2, 1] == 0).all())\n-        self.assertTrue((coefsdata.metas[-2:, 1] == 1).all())\n+        self.assertTrue((coefsdata.metas[:-3, 1] == 0).all())\n+        self.assertTrue((coefsdata.metas[-2:-1, 1] == 1).all())\n+        self.assertTrue(np.isnan(coefsdata.metas[-1, 1]))\n         self.assertAlmostEqual(coefsdata.X[0, 2], -0.198, 3)\n         self.assertAlmostEqual(coefsdata.X[12, 2], -0.288, 3)\n         self.assertAlmostEqual(coefsdata.X[13, 2], 0.243, 3)\n+        self.assertAlmostEqual(coefsdata.X[-1, 0], 22.5, 1)\n+        self.assertAlmostEqual(coefsdata.X[-1, 1], 3.6, 1)\n+        self.assertTrue(np.isnan(coefsdata.X[-1, 2:]).all())\n \n     def test_output_data(self):\n         self.send_signal(self.widget.Inputs.data, self._data)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6784.0, "instance_id": "biolab__orange3-6784", "issue_numbers": 0, "base_commit": "5ada6c40d8e4b4c7681a4dc060a95fb4ff069c9f", "patch": "diff --git a/Orange/regression/pls.py b/Orange/regression/pls.py\nindex 2d69283ec..bb1cf4d2f 100644\n--- a/Orange/regression/pls.py\n+++ b/Orange/regression/pls.py\n@@ -34,7 +34,16 @@ class _PLSCommonTransform:\n         u = y_center @ pls.y_rotations_\n         \"\"\"\n         pls = self.pls_model.skl_model\n-        t, u = pls.transform(X, Y)\n+        mask = np.isnan(Y).any(axis=1)\n+        n_comp = pls.n_components\n+        t = np.full((len(X), n_comp), np.nan, dtype=float)\n+        u = np.full((len(X), n_comp), np.nan, dtype=float)\n+        if (~mask).sum() > 0:\n+            t_, u_ = pls.transform(X[~mask], Y[~mask])\n+            t[~mask] = t_\n+            u[~mask] = u_\n+        if mask.sum() > 0:\n+            t[mask] = pls.transform(X[mask])\n         return np.hstack((t, u))\n \n     def __call__(self, data):\n.", "test_patch": "diff --git a/Orange/regression/tests/test_pls.py b/Orange/regression/tests/test_pls.py\nindex c6bb237ca..3bdbd2f89 100644\n--- a/Orange/regression/tests/test_pls.py\n+++ b/Orange/regression/tests/test_pls.py\n@@ -141,6 +141,38 @@ class TestPLSCommonTransform(unittest.TestCase):\n         m = PLSRegressionLearner()(table(10, 5, 2))\n         self.assertNotEqual(hash(transformer), hash(_PLSCommonTransform(m)))\n \n+    def test_missing_target(self):\n+        data = table(10, 5, 1)\n+        with data.unlocked(data.Y):\n+            data.Y[::3] = np.nan\n+        pls = PLSRegressionLearner()(data)\n+        proj = pls.project(data)\n+        self.assertFalse(np.isnan(proj.X).any())\n+        self.assertFalse(np.isnan(proj.metas[1::3]).any())\n+        self.assertFalse(np.isnan(proj.metas[2::3]).any())\n+        self.assertTrue(np.isnan(proj.metas[::3]).all())\n+\n+    def test_missing_target_multitarget(self):\n+        data = table(10, 5, 3)\n+        with data.unlocked(data.Y):\n+            data.Y[0] = np.nan\n+            data.Y[1, 1] = np.nan\n+\n+        pls = PLSRegressionLearner()(data)\n+        proj = pls.project(data)\n+        self.assertFalse(np.isnan(proj.X).any())\n+        self.assertFalse(np.isnan(proj.metas[2:]).any())\n+        self.assertTrue(np.isnan(proj.metas[:2]).all())\n+\n+    def test_apply_domain_classless_data(self):\n+        data = Table(\"housing\")\n+        pls = PLSRegressionLearner()(data)\n+        classless_data = data.transform(Domain(data.domain.attributes))[:5]\n+\n+        proj = pls.project(classless_data)\n+        self.assertFalse(np.isnan(proj.X).any())\n+        self.assertTrue(np.isnan(proj.metas).all())\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\ndiff --git a/Orange/widgets/model/tests/test_owpls.py b/Orange/widgets/model/tests/test_owpls.py\nindex 9c94e48a2..f887aa052 100644\n--- a/Orange/widgets/model/tests/test_owpls.py\n+++ b/Orange/widgets/model/tests/test_owpls.py\n@@ -1,4 +1,5 @@\n import unittest\n+import numpy as np\n \n from Orange.data import Table, Domain, StringVariable\n from Orange.widgets.model.owpls import OWPLS\n@@ -71,6 +72,21 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertEqual(components.Y.shape, (2, 2))\n         self.assertEqual(components.metas.shape, (2, 1))\n \n+    def test_missing_target(self):\n+        data = self._data[:5].copy()\n+        data.Y[[0, 4]] = np.nan\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+        self.assertFalse(np.isnan(output.metas[:, 3:].astype(float)).any())\n+        self.assertTrue(np.isnan(output.metas[0, 1:3].astype(float)).all())\n+        self.assertTrue(np.isnan(output.metas[4, 1:3].astype(float)).all())\n+        self.assertFalse(np.isnan(output.metas[1:4, 1:3].astype(float)).any())\n+\n+        with data.unlocked(data.Y):\n+            data.Y[:] = np.nan\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.assertIsNone(self.get_output(self.widget.Outputs.data))\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6773.0, "instance_id": "biolab__orange3-6773", "issue_numbers": 0, "base_commit": "39bd0ec37368c9495e753e95c401a34586fe2709", "patch": "diff --git a/Orange/widgets/evaluate/owrocanalysis.py b/Orange/widgets/evaluate/owrocanalysis.py\nindex 1a82f769b..8a42c0ba7 100644\n--- a/Orange/widgets/evaluate/owrocanalysis.py\n+++ b/Orange/widgets/evaluate/owrocanalysis.py\n@@ -442,6 +442,7 @@ class OWROCAnalysis(widget.OWWidget):\n             self._initialize(self.results)\n             self.openContext(self.results.domain.class_var,\n                              self.classifier_names)\n+            self._set_target_prior()\n             self._setup_plot()\n         else:\n             self.warning()\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owrocanalysis.py b/Orange/widgets/evaluate/tests/test_owrocanalysis.py\nindex 46fc078ed..0dfc9f993 100644\n--- a/Orange/widgets/evaluate/tests/test_owrocanalysis.py\n+++ b/Orange/widgets/evaluate/tests/test_owrocanalysis.py\n@@ -278,6 +278,14 @@ class TestOWROCAnalysis(EvaluateTest):\n         simulate.combobox_activate_item(w.controls.target_index, \"soft\")\n         self.assertEqual(np.round(5/12 * 100), w.target_prior)\n \n+    def test_target_prior_reload(self):\n+        w = self.widget\n+        self.send_signal(w.Inputs.evaluation_results, self.res)\n+        simulate.combobox_activate_item(w.controls.target_index, \"soft\")\n+        self.assertEqual(np.round(5/12 * 100), w.target_prior)\n+        self.send_signal(w.Inputs.evaluation_results, self.res)\n+        self.assertEqual(np.round(5/12 * 100), w.target_prior)\n+\n     @patch(\"Orange.widgets.evaluate.owrocanalysis.ThresholdClassifier\")\n     def test_apply_no_output(self, *_):\n         \"\"\"Test no output warnings\"\"\"\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5957.0, "instance_id": "biolab__orange3-5957", "issue_numbers": 0, "base_commit": "5f07bad8dc0037c8c240bc5adfcac0dc580873f5", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex 0ad470b80..ad3d0923e 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -1026,7 +1026,7 @@ class RegressionItemDelegate(PredictionsItemDelegate):\n             self.span = 1\n         else:\n             self.offset = minv\n-            self.span = maxv - minv\n+            self.span = maxv - minv or 1\n \n     def initStyleOption(self, option, index):\n         super().initStyleOption(option, index)\n@@ -1048,16 +1048,8 @@ class RegressionItemDelegate(PredictionsItemDelegate):\n         painter.save()\n         painter.translate(rect.topLeft())\n         if numpy.isfinite(xvalue):\n-            painter.setBrush(QBrush(Qt.blue))\n-            painter.drawRect(QRectF(0, 0,\n-                                    numpy.nanmin([xvalue, xactual]), height))\n-            if numpy.isfinite(xactual):\n-                if xvalue > xactual:\n-                    painter.setBrush(QBrush(Qt.red))\n-                    painter.drawRect(QRectF(xactual, 0, xvalue - xactual, height))\n-                elif xvalue < xactual:\n-                    painter.setPen(QPen(QBrush(Qt.red), 1, Qt.DotLine))\n-                    painter.drawLine(QPointF(xvalue, height / 2), QPointF(xactual, height / 2))\n+            painter.setBrush(QBrush(Qt.magenta))\n+            painter.drawRect(QRectF(0, 0, xvalue, height))\n         if numpy.isfinite(xactual):\n             painter.setPen(QPen(QBrush(Qt.black), 1))\n             painter.setBrush(Qt.white)\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex 1f90e4b13..d12f85449 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -1475,7 +1475,6 @@ class TestRegressionItemDelegate(GuiTest):\n         painter = Mock()\n         dr = painter.drawRect\n         el = painter.drawEllipse\n-        dl = painter.drawLine\n         index = Mock()\n         rect = QRect(0, 0, 256, 16)\n \n@@ -1488,7 +1487,6 @@ class TestRegressionItemDelegate(GuiTest):\n \n         dr.assert_not_called()\n         el.assert_not_called()\n-        dl.assert_not_called()\n \n         # Prediction is known\n         delegate.cachedData = lambda *_: (8.0, None)\n@@ -1498,7 +1496,6 @@ class TestRegressionItemDelegate(GuiTest):\n         rrect = dr.call_args[0][0]\n         self.assertEqual(rrect.width(), 192)\n         el.assert_not_called()\n-        dl.assert_not_called()\n         dr.reset_mock()\n \n         ### Actual is known\n@@ -1514,7 +1511,6 @@ class TestRegressionItemDelegate(GuiTest):\n         el.assert_called_once()\n         center = el.call_args[0][0]\n         self.assertEqual(center.x(), 192)\n-        dl.assert_not_called()\n         dr.reset_mock()\n         el.reset_mock()\n \n@@ -1528,11 +1524,6 @@ class TestRegressionItemDelegate(GuiTest):\n         el.assert_called_once()\n         center = el.call_args[0][0]\n         self.assertEqual(center.x(), 192)\n-        dl.assert_called_once()\n-        lline = dl.call_args[0]\n-        self.assertEqual(lline[0].x(), 128)\n-        self.assertEqual(lline[1].x(), 192)\n-        dl.reset_mock()\n         dr.reset_mock()\n         el.reset_mock()\n \n@@ -1540,15 +1531,12 @@ class TestRegressionItemDelegate(GuiTest):\n         delegate.cachedData = lambda *_: (9.0, None)\n         delegate.drawBar(painter, Mock(), index, rect)\n \n-        self.assertEqual(dr.call_count, 2)\n-        rrect = dr.call_args_list[0][0][0]\n-        self.assertEqual(rrect.width(), 192)\n-        rrect = dr.call_args_list[1][0][0]\n-        self.assertEqual(rrect.width(), 32)\n+        dr.assert_called_once()\n+        rrect = dr.call_args[0][0]\n+        self.assertEqual(rrect.width(), 224)\n         el.assert_called_once()\n         center = el.call_args[0][0]\n         self.assertEqual(center.x(), 192)\n-        dl.assert_not_called()\n         dr.reset_mock()\n         el.reset_mock()\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6867.0, "instance_id": "biolab__orange3-6867", "issue_numbers": 0, "base_commit": "a32c0acaf4b8166585fb8cafbe37b679271fb6bd", "patch": "diff --git a/Orange/widgets/model/owpls.py b/Orange/widgets/model/owpls.py\nindex e648de785..14a20a3bf 100644\n--- a/Orange/widgets/model/owpls.py\n+++ b/Orange/widgets/model/owpls.py\n@@ -68,14 +68,15 @@ class OWPLS(OWBaseLearner):\n \n     def _create_output_coeffs_loadings(self) -> Table:\n         intercept = self.model.intercept.T[None, :]\n-        coefficients = self.model.coefficients.T\n+        coefficients = self.model.coefficients\n         _, y_loadings = self.model.loadings\n         x_rotations, _ = self.model.rotations\n \n-        n_features, n_targets = coefficients.shape\n+        n_targets, n_features = coefficients.shape\n         n_components = x_rotations.shape[1]\n \n         names = [f\"coef ({v.name})\" for v in self.model.domain.class_vars]\n+        names += [f\"coef * X_sd ({v.name})\" for v in self.model.domain.class_vars]\n         names += [f\"w*c {i + 1}\" for i in range(n_components)]\n         domain = Domain(\n             [ContinuousVariable(n) for n in names],\n@@ -84,13 +85,16 @@ class OWPLS(OWBaseLearner):\n         )\n \n         data = self.model.data_to_model_domain(self.data)\n-        X_features = np.hstack((coefficients,\n+        X_features = np.hstack((coefficients.T,\n+                                (coefficients * np.std(data.X, axis=0)).T,\n                                 x_rotations))\n         X_targets = np.hstack((np.full((n_targets, n_targets), np.nan),\n+                               np.full((n_targets, n_targets), np.nan),\n                                y_loadings))\n \n-        coeffs = coefficients.T * np.mean(data.X, axis=0)\n+        coeffs = coefficients * np.mean(data.X, axis=0)\n         X_intercepts = np.hstack((intercept - coeffs.sum(),\n+                                  intercept,\n                                   np.full((1, n_components), np.nan)))\n         X = np.vstack((X_features, X_targets, X_intercepts))\n \n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owpls.py b/Orange/widgets/model/tests/test_owpls.py\nindex e87e68173..c7dfa19dd 100644\n--- a/Orange/widgets/model/tests/test_owpls.py\n+++ b/Orange/widgets/model/tests/test_owpls.py\n@@ -48,11 +48,11 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.send_signal(self.widget.Inputs.data, self._data)\n         coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n         self.assertEqual(coefsdata.name, \"Coefficients and Loadings\")\n-        self.assertEqual(coefsdata.X.shape, (15, 3))\n+        self.assertEqual(coefsdata.X.shape, (15, 4))\n         self.assertEqual(coefsdata.Y.shape, (15, 0))\n         self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n-        self.assertEqual([\"coef (MEDV)\", \"w*c 1\", \"w*c 2\"],\n+        self.assertEqual([\"coef (MEDV)\", \"coef * X_sd (MEDV)\", \"w*c 1\", \"w*c 2\"],\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n                          [v.name for v in coefsdata.domain.metas])\n@@ -61,8 +61,8 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertTrue((coefsdata.metas[:-2, 1] == 0).all())\n         self.assertTrue((coefsdata.metas[-2, 1] == 1))\n         self.assertTrue(np.isnan(coefsdata.metas[-1, 1]))\n-        self.assertAlmostEqual(coefsdata.X[0, 2], 0.012, 3)\n-        self.assertAlmostEqual(coefsdata.X[13, 2], 0.389, 3)\n+        self.assertAlmostEqual(coefsdata.X[0, 3], 0.012, 3)\n+        self.assertAlmostEqual(coefsdata.X[13, 3], 0.389, 3)\n         self.assertAlmostEqual(coefsdata.X[-1, 0], 13.7, 1)\n         self.assertTrue(np.isnan(coefsdata.X[-1, 2:]).all())\n \n@@ -70,11 +70,12 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.send_signal(self.widget.Inputs.data, self._data_multi_target)\n         coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n         self.assertEqual(coefsdata.name, \"Coefficients and Loadings\")\n-        self.assertEqual(coefsdata.X.shape, (15, 4))\n+        self.assertEqual(coefsdata.X.shape, (15, 6))\n         self.assertEqual(coefsdata.Y.shape, (15, 0))\n         self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n-        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"w*c 1\", \"w*c 2\"]\n+        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"coef * X_sd (MEDV)\",\n+                      \"coef * X_sd (CRIM)\", \"w*c 1\", \"w*c 2\"]\n         self.assertEqual(attr_names,\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n@@ -85,12 +86,12 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertTrue((coefsdata.metas[:-3, 1] == 0).all())\n         self.assertTrue((coefsdata.metas[-2:-1, 1] == 1).all())\n         self.assertTrue(np.isnan(coefsdata.metas[-1, 1]))\n-        self.assertAlmostEqual(coefsdata.X[0, 2], -0.198, 3)\n-        self.assertAlmostEqual(coefsdata.X[12, 2], -0.288, 3)\n-        self.assertAlmostEqual(coefsdata.X[13, 2], 0.243, 3)\n+        self.assertAlmostEqual(coefsdata.X[0, 4], -0.198, 3)\n+        self.assertAlmostEqual(coefsdata.X[12, 4], -0.288, 3)\n+        self.assertAlmostEqual(coefsdata.X[13, 4], 0.243, 3)\n         self.assertAlmostEqual(coefsdata.X[-1, 0], 6.7, 1)\n         self.assertAlmostEqual(coefsdata.X[-1, 1], -12.2, 1)\n-        self.assertTrue(np.isnan(coefsdata.X[-1, 2:]).all())\n+        self.assertTrue(np.isnan(coefsdata.X[-1, 4:]).all())\n \n     def test_output_data(self):\n         self.send_signal(self.widget.Inputs.data, self._data)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4686.0, "instance_id": "biolab__orange3-4686", "issue_numbers": 0, "base_commit": "e2d215a531e4fc3276e8349d163f987dfc151026", "patch": "diff --git a/Orange/widgets/visualize/owheatmap.py b/Orange/widgets/visualize/owheatmap.py\nindex 5d1aabf8b..6a28b7c9f 100644\n--- a/Orange/widgets/visualize/owheatmap.py\n+++ b/Orange/widgets/visualize/owheatmap.py\n@@ -200,8 +200,6 @@ class OWHeatMap(widget.OWWidget):\n \n     class Warning(widget.OWWidget.Warning):\n         empty_clusters = Msg(\"Empty clusters were removed\")\n-        missing_split_values = Msg(\n-            \"Instances with undefined split variable values are not shown\")\n \n     def __init__(self):\n         super().__init__()\n@@ -602,12 +600,6 @@ class OWHeatMap(widget.OWWidget):\n                 self.selected_rows = []\n         else:\n             self.clear()\n-        if self.parts is not None and self.effective_data is not None:\n-            nrows = sum(len(p.indices) for p in self.parts.rows)\n-            self.Warning.missing_split_values(\n-                shown=nrows < len(self.effective_data))\n-        else:\n-            self.Warning.missing_split_values.clear()\n \n     def update_merge(self):\n         self.kmeans_model = None\n@@ -625,9 +617,15 @@ class OWHeatMap(widget.OWWidget):\n             _col_data = table_column_data(data, group_var)\n             row_indices = [np.flatnonzero(_col_data == i)\n                            for i in range(len(group_var.values))]\n+\n             row_groups = [RowPart(title=name, indices=ind,\n                                   cluster=None, cluster_ordered=None)\n                           for name, ind in zip(group_var.values, row_indices)]\n+            if np.any(_col_data.mask):\n+                row_groups.append(RowPart(\n+                    title=\"N/A\", indices=np.flatnonzero(_col_data.mask),\n+                    cluster=None, cluster_ordered=None\n+                ))\n         else:\n             row_groups = [RowPart(title=None, indices=range(0, len(data)),\n                                   cluster=None, cluster_ordered=None)]\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owheatmap.py b/Orange/widgets/visualize/tests/test_owheatmap.py\nindex 98eee49fb..7aba80d85 100644\n--- a/Orange/widgets/visualize/tests/test_owheatmap.py\n+++ b/Orange/widgets/visualize/tests/test_owheatmap.py\n@@ -229,10 +229,7 @@ class TestOWHeatMap(WidgetTest, WidgetOutputsTestMixin):\n         self.send_signal(self.widget.Inputs.data, data, widget=w)\n         self.assertIs(w.split_by_var, data.domain.class_var)\n         self.assertEqual(len(w.parts.rows),\n-                         len(data.domain.class_var.values))\n-        self.assertTrue(w.Warning.missing_split_values.is_shown())\n-        w.set_split_variable(None)\n-        self.assertFalse(w.Warning.missing_split_values.is_shown())\n+                         len(data.domain.class_var.values) + 1)\n \n     def test_palette_centering(self):\n         data = np.arange(2).reshape(-1, 1)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6886.0, "instance_id": "biolab__orange3-6886", "issue_numbers": 0, "base_commit": "6c742f75b95cee79c48855700459e7c4d82428da", "patch": "diff --git a/Orange/widgets/model/owlogisticregression.py b/Orange/widgets/model/owlogisticregression.py\nindex 63c401b77..95db40a62 100644\n--- a/Orange/widgets/model/owlogisticregression.py\n+++ b/Orange/widgets/model/owlogisticregression.py\n@@ -49,7 +49,7 @@ class OWLogisticRegression(OWBaseLearner):\n     max_iter = 10000\n \n     penalty_types = (\"Lasso (L1)\", \"Ridge (L2)\", \"None\")\n-    penalty_types_short = [\"l1\", \"l2\", \"none\"]\n+    penalty_types_short = [\"l1\", \"l2\", None]\n \n     class Warning(OWBaseLearner.Warning):\n         class_weights_used = Msg(\"Weighting by class may decrease performance.\")\n@@ -86,7 +86,7 @@ class OWLogisticRegression(OWBaseLearner):\n     def set_c(self):\n         self.strength_C = self.C_s[self.C_index]\n         penalty = self.penalty_types_short[self.penalty_type]\n-        enable_c = penalty != \"none\"\n+        enable_c = penalty is not None\n         self.c_box.setEnabled(enable_c)\n         if enable_c:\n             fmt = \"C={}\" if self.strength_C >= 1 else \"C={:.3f}\"\n@@ -110,7 +110,7 @@ class OWLogisticRegression(OWBaseLearner):\n             self.Warning.class_weights_used()\n         else:\n             class_weight = None\n-        if penalty == \"none\":\n+        if penalty is None:\n             C = 1.0\n         else:\n             C = self.strength_C\n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owlogisticregression.py b/Orange/widgets/model/tests/test_owlogisticregression.py\nindex c604817e4..47139172f 100644\n--- a/Orange/widgets/model/tests/test_owlogisticregression.py\n+++ b/Orange/widgets/model/tests/test_owlogisticregression.py\n@@ -125,10 +125,10 @@ class TestOWLogisticRegression(WidgetTest, WidgetLearnerTestMixin):\n         self.assertTrue(self.widget.Warning.class_weights_used.is_shown())\n \n     def test_no_penalty(self):\n-        self.widget.set_penalty(\"none\")\n+        self.widget.set_penalty(None)\n         self.click_apply()\n         lr = self.get_output(self.widget.Outputs.learner)\n-        self.assertEqual(lr.penalty, \"none\")\n+        self.assertEqual(lr.penalty, None)\n         self.assertEqual(lr.C, 1.0)\n         self.assertEqual(self.widget.c_label.text(), \"N/A\")\n         self.assertFalse(self.widget.c_slider.isEnabledTo(self.widget))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6656.0, "instance_id": "biolab__orange3-6656", "issue_numbers": 0, "base_commit": "b932914d57f82fd2ccfa6c1550c45d730c8330b3", "patch": "diff --git a/Orange/widgets/data/owcorrelations.py b/Orange/widgets/data/owcorrelations.py\nindex 4779ad8a8..b1e969228 100644\n--- a/Orange/widgets/data/owcorrelations.py\n+++ b/Orange/widgets/data/owcorrelations.py\n@@ -70,7 +70,7 @@ class KMeansCorrelationHeuristic:\n         :return: generator of attributes grouped by cluster\n         \"\"\"\n         data = Normalize()(self.data).X.T\n-        kmeans = KMeans(n_clusters=self.n_clusters, random_state=0).fit(data)\n+        kmeans = KMeans(n_clusters=self.n_clusters, random_state=0, n_init=1).fit(data)\n         labels_attrs = sorted([(l, i) for i, l in enumerate(kmeans.labels_)])\n         return [Cluster(instances=list(pair[1] for pair in group),\n                         centroid=kmeans.cluster_centers_[l])\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcorrelations.py b/Orange/widgets/data/tests/test_owcorrelations.py\nindex f8b31b157..17b7bd4f9 100644\n--- a/Orange/widgets/data/tests/test_owcorrelations.py\n+++ b/Orange/widgets/data/tests/test_owcorrelations.py\n@@ -362,7 +362,7 @@ class TestKMeansCorrelationHeuristic(unittest.TestCase):\n         clusters = self.heuristic.get_clusters_of_attributes()\n         # results depend on scikit-learn k-means implementation\n         result = sorted([c.instances for c in clusters])\n-        self.assertListEqual([[0], [1, 2, 3, 4, 5, 6, 7], [8]],\n+        self.assertListEqual([[0, 3, 5], [1, 2, 6, 7], [4, 8]],\n                              result)\n \n     def test_get_states(self):\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6531.0, "instance_id": "biolab__orange3-6531", "issue_numbers": 0, "base_commit": "9eb649075e83cfea90aa2961abae8c8e00fcbea6", "patch": "diff --git a/Orange/widgets/visualize/owscatterplot.py b/Orange/widgets/visualize/owscatterplot.py\nindex 58b15601a..d005d832e 100644\n--- a/Orange/widgets/visualize/owscatterplot.py\n+++ b/Orange/widgets/visualize/owscatterplot.py\n@@ -526,6 +526,7 @@ class OWScatterPlot(OWDataProjectionWidget):\n     def can_draw_regresssion_line(self):\n         return self.data is not None and \\\n                self.data.domain is not None and \\\n+               self.attr_x is not None and self.attr_y is not None and \\\n                self.attr_x.is_continuous and \\\n                self.attr_y.is_continuous\n \n@@ -571,12 +572,13 @@ class OWScatterPlot(OWDataProjectionWidget):\n         self.attr_box.setEnabled(True)\n         self.vizrank.setEnabled(True)\n         if self.attribute_selection_list and self.data is not None and \\\n-                self.data.domain is not None and \\\n-                all(attr in self.data.domain for attr\n-                        in self.attribute_selection_list):\n-            self.attr_x, self.attr_y = self.attribute_selection_list[:2]\n+                self.data.domain is not None:\n             self.attr_box.setEnabled(False)\n             self.vizrank.setEnabled(False)\n+            if all(attr in self.xy_model for attr in self.attribute_selection_list):\n+                self.attr_x, self.attr_y = self.attribute_selection_list\n+            else:\n+                self.attr_x, self.attr_y = None, None\n         self._invalidated = self._invalidated or self._xy_invalidated\n         self._xy_invalidated = False\n         super().handleNewSignals()\n@@ -593,6 +595,10 @@ class OWScatterPlot(OWDataProjectionWidget):\n                 or self.attr_x != attributes[0] \\\n                 or self.attr_y != attributes[1]\n         else:\n+            if self.attr_x is None or self.attr_y is None:\n+                # scenario happens when features input removed and features\n+                # were invalid or hidden and those attr_x and attr_h were None\n+                self.init_attr_values()\n             self.attribute_selection_list = None\n \n     def set_attr(self, attr_x, attr_y):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplot.py b/Orange/widgets/visualize/tests/test_owscatterplot.py\nindex f200c9525..e092281e5 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplot.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplot.py\n@@ -349,6 +349,38 @@ class TestOWScatterPlot(WidgetTest, ProjectionWidgetTestMixin,\n         self.assertTrue(self.widget.attr_box.isEnabled())\n         self.assertTrue(self.widget.vizrank.isEnabled())\n \n+    def test_features_and_hidden_data(self):\n+        new_domain = self.data.domain.copy()\n+        new_domain.attributes[0].attributes[\"hidden\"] = True\n+        data = self.data.transform(new_domain)\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.send_signal(self.widget.Inputs.features, AttributeList(data.domain[:2]))\n+        self.assertIsNone(self.widget.attr_x)\n+        self.assertIsNone(self.widget.attr_y)\n+        self.assertFalse(self.widget.attr_box.isEnabled())\n+        self.assertFalse(self.widget.vizrank.isEnabled())\n+\n+        self.send_signal(self.widget.Inputs.features, None)\n+        self.assertEqual(self.widget.attr_x, self.data.domain[1])\n+        self.assertEqual(self.widget.attr_y, self.data.domain[2])\n+        self.assertTrue(self.widget.attr_box.isEnabled())\n+        self.assertTrue(self.widget.vizrank.isEnabled())\n+\n+        # try with features not in data\n+        bad_feat = AttributeList([ContinuousVariable(\"a\"), ContinuousVariable(\"b\")])\n+        self.send_signal(self.widget.Inputs.features, bad_feat)\n+        self.assertIsNone(self.widget.attr_x)\n+        self.assertIsNone(self.widget.attr_y)\n+        self.assertFalse(self.widget.attr_box.isEnabled())\n+        self.assertFalse(self.widget.vizrank.isEnabled())\n+\n+        self.send_signal(self.widget.Inputs.features, None)\n+        self.assertEqual(self.widget.attr_x, self.data.domain[1])\n+        self.assertEqual(self.widget.attr_y, self.data.domain[2])\n+        self.assertTrue(self.widget.attr_box.isEnabled())\n+        self.assertTrue(self.widget.vizrank.isEnabled())\n+\n     def test_output_features(self):\n         data = Table(\"iris\")\n         self.send_signal(self.widget.Inputs.data, data)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5517.0, "instance_id": "biolab__orange3-5517", "issue_numbers": 0, "base_commit": "f9d78d6cb3606473f07f437c512ce16f30ba5f5b", "patch": "diff --git a/Orange/widgets/visualize/owheatmap.py b/Orange/widgets/visualize/owheatmap.py\nindex a51c747a1..7228d910e 100644\n--- a/Orange/widgets/visualize/owheatmap.py\n+++ b/Orange/widgets/visualize/owheatmap.py\n@@ -662,8 +662,8 @@ class OWHeatMap(widget.OWWidget):\n \n         self.update_heatmaps()\n         if data is not None and self.__pending_selection is not None:\n-            assert self.scene.widget is not None\n-            self.scene.widget.selectRows(self.__pending_selection)\n+            if self.scene.widget is not None:\n+                self.scene.widget.selectRows(self.__pending_selection)\n             self.selected_rows = self.__pending_selection\n             self.__pending_selection = None\n \n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owheatmap.py b/Orange/widgets/visualize/tests/test_owheatmap.py\nindex c61075f77..cd0a3c246 100644\n--- a/Orange/widgets/visualize/tests/test_owheatmap.py\n+++ b/Orange/widgets/visualize/tests/test_owheatmap.py\n@@ -205,6 +205,20 @@ class TestOWHeatMap(WidgetTest, WidgetOutputsTestMixin):\n         self.send_signal(w.Inputs.data, iris, widget=w)\n         self.assertEqual(len(self.get_output(w.Outputs.selected_data)), 21)\n \n+    def test_saved_selection_when_not_possible(self):\n+        # Has stored selection but ot enough columns for clustering.\n+        iris = Table(\"iris\")[:, [\"petal width\"]]\n+        w = self.create_widget(\n+            OWHeatMap, stored_settings={\n+                \"__version__\": 3,\n+                \"col_clustering_method\": \"Clustering\",\n+                \"selected_rows\": [1, 2, 3],\n+            }\n+        )\n+        self.send_signal(w.Inputs.data, iris)\n+        out = self.get_output(w.Outputs.selected_data)\n+        self.assertSequenceEqual(list(out.ids), list(iris.ids[[1, 2, 3]]))\n+\n     def test_set_split_var(self):\n         data = self.brown_selected[::3]\n         w = self.widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6805.0, "instance_id": "biolab__orange3-6805", "issue_numbers": 0, "base_commit": "ca75c5c338c4c97f20438e123ea4029aaf1af640", "patch": "diff --git a/Orange/regression/pls.py b/Orange/regression/pls.py\nindex 68cfa6f4f..28c5dc084 100644\n--- a/Orange/regression/pls.py\n+++ b/Orange/regression/pls.py\n@@ -122,7 +122,6 @@ class PLSModel(LinearModel):\n         domain = Domain(\n             [trvar(i, var_names_X[i]) for i in range(n_components)],\n             data.domain.class_vars,\n-            list(data.domain.metas) +\n             [trvar(n_components + i, var_names_Y[i]) for i in\n              range(n_components)]\n         )\ndiff --git a/Orange/widgets/model/owpls.py b/Orange/widgets/model/owpls.py\nindex cc1317c03..69e1ba587 100644\n--- a/Orange/widgets/model/owpls.py\n+++ b/Orange/widgets/model/owpls.py\n@@ -98,7 +98,7 @@ class OWPLS(OWBaseLearner):\n         proj_domain = projection.domain\n         nprobs_domain = normal_probs.domain\n         dmodx_domain = dmodx.domain\n-        metas = proj_domain.metas + proj_domain.attributes + \\\n+        metas = data_domain.metas + proj_domain.attributes + proj_domain.metas + \\\n             nprobs_domain.attributes + dmodx_domain.attributes\n         domain = Domain(data_domain.attributes, data_domain.class_vars, metas)\n         data: Table = self.data.transform(domain)\n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owpls.py b/Orange/widgets/model/tests/test_owpls.py\nindex 8c0bede0f..137915636 100644\n--- a/Orange/widgets/model/tests/test_owpls.py\n+++ b/Orange/widgets/model/tests/test_owpls.py\n@@ -78,7 +78,7 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertEqual(output.metas.shape, (506, 8))\n         self.assertEqual([v.name for v in self._data.domain.variables],\n                          [v.name for v in output.domain.variables])\n-        metas = [\"PLS U1\", \"PLS U2\", \"PLS T1\", \"PLS T2\",\n+        metas = [\"PLS T1\", \"PLS T2\", \"PLS U1\", \"PLS U2\",\n                  \"Sample Quantiles (MEDV)\", \"Theoretical Quantiles (MEDV)\",\n                  \"DModX\"]\n         self.assertEqual([v.name for v in self._data.domain.metas] + metas,\n@@ -93,7 +93,7 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         orig_domain = self._data_multi_target.domain\n         self.assertEqual([v.name for v in orig_domain.variables],\n                          [v.name for v in output.domain.variables])\n-        metas = [\"PLS U1\", \"PLS U2\", \"PLS T1\", \"PLS T2\",\n+        metas = [\"PLS T1\", \"PLS T2\", \"PLS U1\", \"PLS U2\",\n                  \"Sample Quantiles (MEDV)\", \"Theoretical Quantiles (MEDV)\",\n                  \"Sample Quantiles (CRIM)\", \"Theoretical Quantiles (CRIM)\",\n                  \"DModX\"]\n@@ -119,10 +119,10 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         data.Y[[0, 4]] = np.nan\n         self.send_signal(self.widget.Inputs.data, data)\n         output = self.get_output(self.widget.Outputs.data)\n-        self.assertFalse(np.isnan(output.metas[:, 3:5].astype(float)).any())\n-        self.assertTrue(np.isnan(output.metas[0, 1:3].astype(float)).all())\n-        self.assertTrue(np.isnan(output.metas[4, 1:3].astype(float)).all())\n-        self.assertFalse(np.isnan(output.metas[1:4, 1:3].astype(float)).any())\n+        self.assertFalse(np.isnan(output.metas[:, 1:3].astype(float)).any())\n+        self.assertTrue(np.isnan(output.metas[0, 3:4].astype(float)).all())\n+        self.assertTrue(np.isnan(output.metas[4, 3:5].astype(float)).all())\n+        self.assertFalse(np.isnan(output.metas[1:4, 3:5].astype(float)).any())\n \n         with data.unlocked(data.Y):\n             data.Y[:] = np.nan\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6200.0, "instance_id": "biolab__orange3-6200", "issue_numbers": 0, "base_commit": "15cba33dfd40bfbbb36000efa5e661418dcf6887", "patch": "diff --git a/Orange/widgets/data/owfile.py b/Orange/widgets/data/owfile.py\nindex 85d9b567f..fb3ae2dda 100644\n--- a/Orange/widgets/data/owfile.py\n+++ b/Orange/widgets/data/owfile.py\n@@ -525,8 +525,10 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n \n         text += f\"<p>{len(table)} {pl(len(table), 'instance')}\"\n \n-        missing_in_attr = missing_prop(table.get_nan_frequency_attribute())\n-        missing_in_class = missing_prop(table.get_nan_frequency_class())\n+        missing_in_attr = missing_in_class = \"\"\n+        if table.X.size < OWFile.SIZE_LIMIT:\n+            missing_in_attr = missing_prop(table.get_nan_frequency_attribute())\n+            missing_in_class = missing_prop(table.get_nan_frequency_class())\n         nattrs = len(domain.attributes)\n         text += f\"<br/>{nattrs} {pl(nattrs, 'feature')} {missing_in_attr}\"\n         if domain.has_continuous_class:\ndiff --git a/Orange/widgets/utils/state_summary.py b/Orange/widgets/utils/state_summary.py\nindex 7f100c13e..372f58f17 100644\n--- a/Orange/widgets/utils/state_summary.py\n+++ b/Orange/widgets/utils/state_summary.py\n@@ -20,6 +20,9 @@ from Orange.widgets.utils.signals import AttributeList\n from Orange.base import Model, Learner\n \n \n+SIZE_LIMIT = 1e7\n+\n+\n def format_variables_string(variables):\n     \"\"\"\n     A function that formats the descriptive part of the input/output summary for\n@@ -83,7 +86,9 @@ def format_summary_details(data, format=Qt.PlainText):\n     targets = format_variables_string(data.domain.class_vars)\n     metas = format_variables_string(data.domain.metas)\n \n-    features_missing = missing_values(data.get_nan_frequency_attribute())\n+    features_missing = \"\"\n+    if data.X.size < SIZE_LIMIT:\n+        features_missing = missing_values(data.get_nan_frequency_attribute())\n     n_features = len(data.domain.variables) + len(data.domain.metas)\n     name = getattr(data, \"name\", None)\n     if name == \"untitled\":\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfile.py b/Orange/widgets/data/tests/test_owfile.py\nindex ded88b37e..9bbe6708b 100644\n--- a/Orange/widgets/data/tests/test_owfile.py\n+++ b/Orange/widgets/data/tests/test_owfile.py\n@@ -76,6 +76,23 @@ class TestOWFile(WidgetTest):\n     def tearDown(self):\n         dataset_dirs.pop()\n \n+    def test_describe(self):\n+        table = Table(\"iris\")\n+        description = f\"<p><b>Iris flower dataset</b><br/>\" \\\n+                      f\"Classical dataset with 150 instances of Iris setosa, Iris virginica and Iris versicolor.</p>\" \\\n+                      f\"<p>150 instance(s)<br/>\" \\\n+                      f\"4 feature(s) (no missing values)<br/>\" \\\n+                      f\"Classification; categorical class with 3 values (no missing values)<br/>\" \\\n+                      f\"0 meta attribute(s)</p>\"\n+        self.assertEqual(description, self.widget._describe(table))\n+\n+        table = Table.from_numpy(domain=None, X=np.random.random((10000, 1000)))\n+        description = f\"<p>10000 instance(s)<br/>\" \\\n+                      f\"1000 feature(s) <br/>\" \\\n+                      f\"Data has no target variable.<br/>\" \\\n+                      f\"0 meta attribute(s)</p>\"\n+        self.assertEqual(description, self.widget._describe(table))\n+\n     def test_dragEnterEvent_accepts_urls(self):\n         event = self._drag_enter_event(QUrl.fromLocalFile(TITANIC_PATH))\n         self.widget.dragEnterEvent(event)\ndiff --git a/Orange/widgets/utils/tests/test_state_summary.py b/Orange/widgets/utils/tests/test_state_summary.py\nindex 50abe2b97..fd28c463b 100644\n--- a/Orange/widgets/utils/tests/test_state_summary.py\n+++ b/Orange/widgets/utils/tests/test_state_summary.py\n@@ -1,4 +1,5 @@\n import unittest\n+from unittest.mock import patch\n import datetime\n from collections import namedtuple\n \n@@ -183,6 +184,15 @@ class TestUtils(unittest.TestCase):\n                   f'Target: \u2014'\n         self.assertEqual(details, format_summary_details(data))\n \n+        data = Table.from_numpy(domain=None, X=np.random.random((10000, 1000)))\n+        details = f'{len(data)} instances, ' \\\n+                  f'{len(data.domain.variables)} variables\\n' \\\n+                  f'Features: {len(data.domain.variables)} numeric \\n' \\\n+                  f'Target: \u2014'\n+        with patch.object(Table, \"get_nan_frequency_attribute\") as mock:\n+            self.assertEqual(details, format_summary_details(data))\n+            self.assertFalse(mock.called)\n+\n         data = None\n         self.assertEqual('', format_summary_details(data))\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6000.0, "instance_id": "biolab__orange3-6000", "issue_numbers": 0, "base_commit": "7d6c7d78a4d7795f8058e70c5293af4f2cff8957", "patch": "diff --git a/Orange/widgets/visualize/owheatmap.py b/Orange/widgets/visualize/owheatmap.py\nindex b3e4eca1b..fac4bd15a 100644\n--- a/Orange/widgets/visualize/owheatmap.py\n+++ b/Orange/widgets/visualize/owheatmap.py\n@@ -229,8 +229,8 @@ class OWHeatMap(widget.OWWidget):\n         #: The original data with all features (retained to\n         #: preserve the domain on the output)\n         self.input_data = None\n-        #: The effective data striped of discrete features, and often\n-        #: merged using k-means\n+        #: The effective data stripped of discrete features and hidden\n+        #: attributes, and often merged using k-means\n         self.data = None\n         self.effective_data = None\n         #: Source of column annotations (derived from self.data)\n@@ -602,13 +602,16 @@ class OWHeatMap(widget.OWWidget):\n             self.Error.no_continuous()\n             input_data = data = None\n \n-        # Data contains some discrete attributes which must be filtered\n+        # Data contains some discrete or hidden attributes which must be\n+        # filtered\n         if data is not None and \\\n-                any(var.is_discrete for var in data.domain.attributes):\n+                any(var.is_discrete or var.attributes.get('hidden', False)\n+                    for var in data.domain.attributes):\n             ndisc = sum(var.is_discrete for var in data.domain.attributes)\n             data = data.transform(\n                 Domain([var for var in data.domain.attributes\n-                        if var.is_continuous],\n+                        if var.is_continuous and\n+                        not var.attributes.get('hidden', False)],\n                        data.domain.class_vars,\n                        data.domain.metas))\n             if not data.domain.attributes:\n@@ -689,7 +692,11 @@ class OWHeatMap(widget.OWWidget):\n     def update_heatmaps(self):\n         if self.data is not None:\n             self.clear_scene()\n-            self.clear_messages()\n+            self.Error.clear()\n+            self.Warning.clear()\n+            self.Information.row_clust.clear()\n+            self.Information.col_clust.clear()\n+            self.Information.sampled.clear()\n             if self.col_clustering != Clustering.None_ and \\\n                     len(self.data.domain.attributes) < 2:\n                 self.Error.not_enough_features()\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owheatmap.py b/Orange/widgets/visualize/tests/test_owheatmap.py\nindex 2efaf1c8d..2f3eece77 100644\n--- a/Orange/widgets/visualize/tests/test_owheatmap.py\n+++ b/Orange/widgets/visualize/tests/test_owheatmap.py\n@@ -29,16 +29,16 @@ class TestOWHeatMap(WidgetTest, WidgetOutputsTestMixin):\n         super().setUpClass()\n         WidgetOutputsTestMixin.init(cls)\n \n-        cls.housing = Table(\"housing\")\n-        cls.titanic = Table(\"titanic\")\n-        cls.brown_selected = Table(\"brown-selected\")\n-\n         cls.signal_name = \"Data\"\n         cls.signal_data = cls.data\n \n     def setUp(self):\n         self.widget = self.create_widget(OWHeatMap)  # type: OWHeatMap\n \n+        self.housing = Table(\"housing\")\n+        self.titanic = Table(\"titanic\")\n+        self.brown_selected = Table(\"brown-selected\")\n+\n     def test_input_data(self):\n         \"\"\"Check widget's data with data on the input\"\"\"\n         for data in (self.data, self.housing):\n@@ -72,6 +72,9 @@ class TestOWHeatMap(WidgetTest, WidgetOutputsTestMixin):\n         self.assertFalse(self.widget.Information.active)\n         self.send_signal(self.widget.Inputs.data, data[:21])\n         self.assertTrue(self.widget.Information.active)\n+        data = Table(\"heart_disease.tab\")[:10]\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.assertTrue(self.widget.Information.discrete_ignored.is_shown())\n \n     def test_settings_changed(self):\n         self.send_signal(self.widget.Inputs.data, self.data)\n@@ -396,6 +399,14 @@ class TestOWHeatMap(WidgetTest, WidgetOutputsTestMixin):\n         widget.set_column_annotation_color_var(None)\n         self.assertFalse(widget.scene.widget.top_side_colors[0].isVisible())\n \n+    def test_data_with_hidden(self):\n+        w = self.widget\n+        housing = self.housing.copy()\n+        housing.domain.attributes[0].attributes[\"hidden\"] = True\n+        self.send_signal(self.widget.Inputs.data, housing)\n+        self.assertEqual(len(w.effective_data.domain.attributes),\n+                         len(housing.domain.attributes) - 1)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5280.0, "instance_id": "biolab__orange3-5280", "issue_numbers": 0, "base_commit": "31ba74a8dfced4ac48fe6f9c7fb9a2877d2e134d", "patch": "diff --git a/Orange/widgets/unsupervised/owkmeans.py b/Orange/widgets/unsupervised/owkmeans.py\nindex 1af73ddac..3c0b5e42d 100644\n--- a/Orange/widgets/unsupervised/owkmeans.py\n+++ b/Orange/widgets/unsupervised/owkmeans.py\n@@ -2,6 +2,8 @@ from concurrent.futures import Future\n from typing import Optional, List, Dict\n \n import numpy as np\n+import scipy.sparse as sp\n+\n from AnyQt.QtCore import Qt, QTimer, QAbstractTableModel, QModelIndex, QThread, \\\n     pyqtSlot as Slot\n from AnyQt.QtGui import QIntValidator\n@@ -130,6 +132,7 @@ class OWKMeans(widget.OWWidget):\n         not_enough_data = widget.Msg(\n             \"Too few ({}) unique data instances for {} clusters\"\n         )\n+        no_sparse_normalization = widget.Msg(\"Sparse data cannot be normalized\")\n \n     INIT_METHODS = ((\"Initialize with KMeans++\", \"k-means++\"),\n                     (\"Random initialization\", \"random\"))\n@@ -490,7 +493,10 @@ class OWKMeans(widget.OWWidget):\n \n     def preproces(self, data):\n         if self.normalize:\n-            data = Normalize()(data)\n+            if sp.issparse(data.X):\n+                self.Warning.no_sparse_normalization()\n+            else:\n+                data = Normalize()(data)\n         for preprocessor in KMeans.preprocessors:  # use same preprocessors than\n             data = preprocessor(data)\n         return data\n@@ -570,6 +576,9 @@ class OWKMeans(widget.OWWidget):\n         self.selection = None\n         self._set_input_summary()\n \n+        self.controls.normalize.setDisabled(\n+            bool(self.data) and sp.issparse(self.data.X))\n+\n         # Do not needlessly recluster the data if X hasn't changed\n         if old_data and self.data and array_equal(self.data.X, old_data.X):\n             if self.auto_commit:\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owkmeans.py b/Orange/widgets/unsupervised/tests/test_owkmeans.py\nindex 68c44df10..2bf27e20d 100644\n--- a/Orange/widgets/unsupervised/tests/test_owkmeans.py\n+++ b/Orange/widgets/unsupervised/tests/test_owkmeans.py\n@@ -3,6 +3,8 @@ import unittest\n from unittest.mock import patch, Mock\n \n import numpy as np\n+import scipy.sparse as sp\n+\n from AnyQt.QtCore import Qt\n from AnyQt.QtWidgets import QRadioButton\n from sklearn.metrics import silhouette_score\n@@ -336,6 +338,44 @@ class TestOWKMeans(WidgetTest):\n         widget.update_results()\n         self.assertEqual(widget.selected_row(), None)\n \n+    @patch(\"Orange.widgets.unsupervised.owkmeans.Normalize\")\n+    def test_normalize_sparse(self, normalize):\n+        normalization = normalize.return_value = Mock(return_value=self.data)\n+        widget = self.widget\n+        widget.normalize = True\n+        norm_check = widget.controls.normalize\n+\n+        x = sp.csr_matrix(np.random.randint(0, 2, (5, 10)))\n+        data = Table.from_numpy(None, x)\n+\n+        self.send_signal(widget.Inputs.data, data)\n+        self.assertTrue(widget.Warning.no_sparse_normalization.is_shown())\n+        self.assertFalse(norm_check.isEnabled())\n+        normalization.assert_not_called()\n+\n+        self.send_signal(widget.Inputs.data, None)\n+        self.assertFalse(widget.Warning.no_sparse_normalization.is_shown())\n+        self.assertTrue(norm_check.isEnabled())\n+        normalization.assert_not_called()\n+\n+        self.send_signal(widget.Inputs.data, data)\n+        self.assertTrue(widget.Warning.no_sparse_normalization.is_shown())\n+        self.assertFalse(norm_check.isEnabled())\n+        normalization.assert_not_called()\n+\n+        self.send_signal(widget.Inputs.data, self.data)\n+        self.assertFalse(widget.Warning.no_sparse_normalization.is_shown())\n+        self.assertTrue(norm_check.isEnabled())\n+        normalization.assert_called()\n+        normalization.reset_mock()\n+\n+        widget.controls.normalize.click()\n+\n+        self.send_signal(widget.Inputs.data, data)\n+        self.assertFalse(widget.Warning.no_sparse_normalization.is_shown())\n+        self.assertFalse(norm_check.isEnabled())\n+        normalization.assert_not_called()\n+\n     def test_report(self):\n         widget = self.widget\n         widget.k = 4\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3896.0, "instance_id": "biolab__orange3-3896", "issue_numbers": 0, "base_commit": "5949e3a39de43eaf761f69ff98fa2e0f4a36a79c", "patch": "diff --git a/Orange/widgets/visualize/owdistributions.py b/Orange/widgets/visualize/owdistributions.py\nindex 0bac00e0a..820c0ea47 100644\n--- a/Orange/widgets/visualize/owdistributions.py\n+++ b/Orange/widgets/visualize/owdistributions.py\n@@ -710,7 +710,7 @@ class OWDistributions(OWWidget):\n             if np.any(np.isfinite(column)):\n                 self.binnings = decimal_binnings(\n                     column, min_width=self.min_var_resolution(self.var),\n-                    add_unique=10, min_unique=5)\n+                    add_unique=10, min_unique=5)[::-1]\n                 max_bins = len(self.binnings) - 1\n \n         self.controls.number_of_bins.setMaximum(max_bins)\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owdistributions.py b/Orange/widgets/visualize/tests/test_owdistributions.py\nindex 5408deef0..265a78a42 100644\n--- a/Orange/widgets/visualize/tests/test_owdistributions.py\n+++ b/Orange/widgets/visualize/tests/test_owdistributions.py\n@@ -246,7 +246,7 @@ class TestOWDistributions(WidgetTest):\n         widget = self.widget\n         self.send_signal(widget.Inputs.data, self.iris)\n \n-        widget.number_of_bins = 0\n+        self._set_slider(0)\n         widget.selection.add(1)\n         n_bars = len(widget.bar_items)\n         widget.apply = Mock()\n@@ -449,7 +449,7 @@ class TestOWDistributions(WidgetTest):\n         \"\"\"Widget groups consecutive selected bars\"\"\"\n         widget = self.widget\n         self.send_signal(widget.Inputs.data, self.iris)\n-        self._set_slider(len(widget.binnings) - 1)\n+        self._set_slider(0)\n         widget.selection = {1, 2, 3, 5, 6, 9}\n         widget.plot_mark.addItem = Mock()\n         widget.show_selection()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5828.0, "instance_id": "biolab__orange3-5828", "issue_numbers": 0, "base_commit": "5a570061292edf0b33a7f69ccbd8c8670b34e5e0", "patch": "diff --git a/Orange/widgets/visualize/owlinearprojection.py b/Orange/widgets/visualize/owlinearprojection.py\nindex 8baa07524..1e6498f76 100644\n--- a/Orange/widgets/visualize/owlinearprojection.py\n+++ b/Orange/widgets/visualize/owlinearprojection.py\n@@ -329,7 +329,10 @@ class OWLinearProjection(OWAnchorProjectionWidget):\n \n     @property\n     def effective_data(self):\n-        return self.data.transform(Domain(self.effective_variables))\n+        cvs = None\n+        if self.placement == Placement.LDA:\n+            cvs = self.data.domain.class_vars\n+        return self.data.transform(Domain(self.effective_variables, cvs))\n \n     def __vizrank_set_attrs(self, attrs):\n         if not attrs:\ndiff --git a/Orange/widgets/visualize/utils/widget.py b/Orange/widgets/visualize/utils/widget.py\nindex 924acc179..62ede7c3e 100644\n--- a/Orange/widgets/visualize/utils/widget.py\n+++ b/Orange/widgets/visualize/utils/widget.py\n@@ -455,7 +455,10 @@ class OWDataProjectionWidget(OWProjectionWidgetBase, openclass=True):\n         self.openContext(self.data)\n         self._invalidated = not (\n             data_existed and self.data is not None and\n-            array_equal(effective_data.X, self.effective_data.X))\n+            array_equal(effective_data.X, self.effective_data.X) and\n+            array_equal(effective_data.Y, self.effective_data.Y) and\n+            array_equal(effective_data.metas, self.effective_data.metas)\n+        )\n         self._domain_invalidated = not (\n             data_existed and self.data is not None and\n             effective_data.domain.checksum()\n \n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owlinearprojection.py b/Orange/widgets/visualize/tests/test_owlinearprojection.py\nindex d936a3002..0c60b3da8 100644\n--- a/Orange/widgets/visualize/tests/test_owlinearprojection.py\n+++ b/Orange/widgets/visualize/tests/test_owlinearprojection.py\n@@ -85,6 +85,8 @@ class TestOWLinearProjection(WidgetTest, AnchorProjectionWidgetTestMixin,\n         self.send_signal(self.widget.Inputs.data, self.data)\n         self.widget.radio_placement.buttons[Placement.LDA].click()\n         self.assertTrue(buttons[Placement.LDA].isEnabled())\n+        output = self.get_output(self.widget.Outputs.components)\n+        self.assertTrue(output and len(output) == 2)\n         self.send_signal(self.widget.Inputs.data, Table(\"housing\"))\n         self.assertFalse(buttons[Placement.LDA].isEnabled())\n         self.send_signal(self.widget.Inputs.data, None)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5054.0, "instance_id": "biolab__orange3-5054", "issue_numbers": 0, "base_commit": "887648d532fe35a2c57e2bd7e1b1bc5c7083d5f3", "patch": "diff --git a/Orange/widgets/data/owselectcolumns.py b/Orange/widgets/data/owselectcolumns.py\nindex 7bd8d5837..4e7abd40c 100644\n--- a/Orange/widgets/data/owselectcolumns.py\n+++ b/Orange/widgets/data/owselectcolumns.py\n@@ -116,6 +116,9 @@ class SelectAttributesDomainContextHandler(DomainContextHandler):\n         return decoded\n \n     def match(self, context, domain, attrs, metas):\n+        if context.attributes == attrs and context.metas == metas:\n+            return self.PERFECT_MATCH\n+\n         if not \"domain_role_hints\" in context.values:\n             return self.NO_MATCH\n \ndiff --git a/Orange/widgets/settings.py b/Orange/widgets/settings.py\nindex 14fa183d1..3bbe31eb2 100644\n--- a/Orange/widgets/settings.py\n+++ b/Orange/widgets/settings.py\n@@ -203,6 +203,9 @@ class DomainContextHandler(ContextHandler):\n                 metas.get(attr_name, -1) == attr_type)\n \n     def match(self, context, domain, attrs, metas):\n+        if context.attributes == attrs and context.metas == metas:\n+            return self.PERFECT_MATCH\n+\n         matches = []\n         try:\n             for setting, data, _ in \\\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owlinearprojection.py b/Orange/widgets/visualize/tests/test_owlinearprojection.py\nindex f0f361d94..b0617355c 100644\n--- a/Orange/widgets/visualize/tests/test_owlinearprojection.py\n+++ b/Orange/widgets/visualize/tests/test_owlinearprojection.py\n@@ -178,7 +178,7 @@ class TestOWLinearProjection(WidgetTest, AnchorProjectionWidgetTestMixin,\n \n         self.widget.setup_plot.reset_mock()\n         self.send_signal(self.widget.Inputs.data, self.data)\n-        self.widget.setup_plot.assert_not_called()\n+        self.widget.setup_plot.assert_called_once()\n \n     def test_two_classes_dataset(self):\n         self.widget.radio_placement.buttons[1].click()\ndiff --git a/Orange/widgets/visualize/tests/test_owradviz.py b/Orange/widgets/visualize/tests/test_owradviz.py\nindex 1fe471357..ed78ee9f9 100644\n--- a/Orange/widgets/visualize/tests/test_owradviz.py\n+++ b/Orange/widgets/visualize/tests/test_owradviz.py\n@@ -128,4 +128,4 @@ class TestOWRadviz(WidgetTest, AnchorProjectionWidgetTestMixin,\n \n         self.widget.setup_plot.reset_mock()\n         self.send_signal(self.widget.Inputs.data, self.data)\n-        self.widget.setup_plot.assert_not_called()\n+        self.widget.setup_plot.assert_called_once()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3896.0, "instance_id": "biolab__orange3-3896", "issue_numbers": 0, "base_commit": "4e938097b8004e56de618dc63597fdd810147ddb", "patch": "diff --git a/Orange/widgets/visualize/owdistributions.py b/Orange/widgets/visualize/owdistributions.py\nindex cb87d33a0..1b33217e5 100644\n--- a/Orange/widgets/visualize/owdistributions.py\n+++ b/Orange/widgets/visualize/owdistributions.py\n@@ -490,7 +490,7 @@ class OWDistributions(OWWidget):\n \n     def _update_controls_state(self):\n         assert self.is_valid  # called only from replot, so assumes data is OK\n-        self.continuous_box.setHidden(self.var.is_discrete)\n+        self.continuous_box.setDisabled(self.var.is_discrete)\n         self.controls.show_probs.setDisabled(self.cvar is None)\n         self.controls.stacked_columns.setDisabled(self.cvar is None)\n \n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owdistributions.py b/Orange/widgets/visualize/tests/test_owdistributions.py\nindex 8ead26693..5408deef0 100644\n--- a/Orange/widgets/visualize/tests/test_owdistributions.py\n+++ b/Orange/widgets/visualize/tests/test_owdistributions.py\n@@ -375,25 +375,25 @@ class TestOWDistributions(WidgetTest):\n \n         self._set_var(cont)\n         self._set_cvar(disc)\n-        self.assertFalse(cont_box.isHidden())\n+        self.assertTrue(cont_box.isEnabled())\n         self.assertTrue(show_probs.isEnabled())\n         self.assertTrue(stacked.isEnabled())\n \n         self._set_var(cont)\n         self._set_cvar(None)\n-        self.assertFalse(cont_box.isHidden())\n+        self.assertTrue(cont_box.isEnabled())\n         self.assertFalse(show_probs.isEnabled())\n         self.assertFalse(stacked.isEnabled())\n \n         self._set_var(disc)\n         self._set_cvar(None)\n-        self.assertTrue(cont_box.isHidden())\n+        self.assertFalse(cont_box.isEnabled())\n         self.assertFalse(show_probs.isEnabled())\n         self.assertFalse(stacked.isEnabled())\n \n         self._set_var(disc)\n         self._set_cvar(disc)\n-        self.assertTrue(cont_box.isHidden())\n+        self.assertFalse(cont_box.isEnabled())\n         self.assertTrue(show_probs.isEnabled())\n         self.assertTrue(stacked.isEnabled())\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6702.0, "instance_id": "biolab__orange3-6702", "issue_numbers": 0, "base_commit": "fb238eb93c537ec9adaec28674ffda5be7d8df8a", "patch": "diff --git a/Orange/widgets/unsupervised/owdistances.py b/Orange/widgets/unsupervised/owdistances.py\nindex cc5e7e87f..0e4f32887 100644\n--- a/Orange/widgets/unsupervised/owdistances.py\n+++ b/Orange/widgets/unsupervised/owdistances.py\n@@ -127,6 +127,7 @@ class OWDistances(OWWidget, ConcurrentWidgetMixin):\n         unsupported_sparse = Msg(\"Some metrics don't support sparse data\\n\"\n                                  \"and were disabled: {}\")\n         imputing_data = Msg(\"Missing values were imputed\")\n+        no_features = Msg(\"Data has no features\")\n \n     def __init__(self):\n         OWWidget.__init__(self)\n@@ -242,11 +243,17 @@ class OWDistances(OWWidget, ConcurrentWidgetMixin):\n                         return False\n             return True\n \n+        def _check_no_features():\n+            if len(data.domain.attributes) == 0:\n+                self.Warning.no_features()\n+            return True\n+\n         metric_def = MetricDefs[self.metric_id]\n         metric = metric_def.metric\n         self.clear_messages()\n         if data is not None:\n             for check in (_check_sparse, _check_tractability,\n+                          _check_no_features,\n                           _fix_discrete, _fix_missing, _fix_nonbinary):\n                 if not check():\n                     data = None\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owdistances.py b/Orange/widgets/unsupervised/tests/test_owdistances.py\nindex 3cdc30404..103d31e1c 100644\n--- a/Orange/widgets/unsupervised/tests/test_owdistances.py\n+++ b/Orange/widgets/unsupervised/tests/test_owdistances.py\n@@ -265,6 +265,27 @@ class TestOWDistances(WidgetTest):\n         out_domain = out.row_items.domain\n         self.assertEqual(out_domain.metas, (domain[\"name\"], domain[\"legs\"]))\n \n+    def test_no_features(self):\n+        zoo = Table(\"zoo\")[:5, 16:]\n+\n+        self.send_signal(self.widget.Inputs.data, zoo)\n+        self.wait_until_finished()\n+        out = self.get_output(self.widget.Outputs.distances)\n+        self.assertEqual(out.shape, (5, 5))\n+        self.assertTrue((out == 0).all())\n+        self.assertTrue(self.widget.Warning.no_features.is_shown())\n+\n+        self.widget.controls.axis.buttons[1].click()\n+        self.wait_until_finished()\n+        out = self.get_output(self.widget.Outputs.distances)\n+        self.assertEqual(out.shape, (0, 0))\n+        self.assertTrue((out == 0).all())\n+        self.assertTrue(self.widget.Warning.no_features.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.data, None)\n+        self.wait_until_finished()\n+        self.assertFalse(self.widget.Warning.no_features.is_shown())\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3321.0, "instance_id": "biolab__orange3-3321", "issue_numbers": 0, "base_commit": "9b89000fd926d8222933d1fcfba95e1e12e9a5b5", "patch": "diff --git a/Orange/widgets/settings.py b/Orange/widgets/settings.py\nindex 8be8bf0ae..75ebe4129 100644\n--- a/Orange/widgets/settings.py\n+++ b/Orange/widgets/settings.py\n@@ -49,7 +49,8 @@ log = logging.getLogger(__name__)\n __all__ = [\"Setting\", \"SettingsHandler\", \"SettingProvider\",\n            \"ContextSetting\", \"ContextHandler\",\n            \"DomainContextHandler\", \"PerfectDomainContextHandler\",\n-           \"ClassValuesContextHandler\", \"widget_settings_dir\"]\n+           \"ClassValuesContextHandler\", \"widget_settings_dir\",\n+           \"IncompatibleContext\"]\n \n _IMMUTABLES = (str, int, bytes, bool, float, tuple)\n \n@@ -624,8 +625,16 @@ class ContextHandler(SettingsHandler):\n         self._migrate_contexts(self.global_contexts)\n \n     def _migrate_contexts(self, contexts):\n-        for context in contexts:\n-            self.widget_class.migrate_context(context, context.values.pop(VERSION_KEY, 0))\n+        i = 0\n+        while i < len(contexts):\n+            context = contexts[i]\n+            try:\n+                self.widget_class.migrate_context(\n+                    context, context.values.pop(VERSION_KEY, 0))\n+            except IncompatibleContext:\n+                del contexts[i]\n+            else:\n+                i += 1\n \n     def write_defaults_file(self, settings_file):\n         \"\"\"Call the inherited method, then add global context to the pickle.\"\"\"\n.", "test_patch": "diff --git a/Orange/widgets/tests/test_context_handler.py b/Orange/widgets/tests/test_context_handler.py\nindex a3c94f54d..3ea0c540e 100644\n--- a/Orange/widgets/tests/test_context_handler.py\n+++ b/Orange/widgets/tests/test_context_handler.py\n@@ -5,7 +5,7 @@ from unittest import TestCase\n from unittest.mock import Mock, patch, call\n from Orange.widgets.settings import (\n     ContextHandler, ContextSetting, Context, Setting, SettingsPrinter,\n-    VERSION_KEY\n+    VERSION_KEY, IncompatibleContext\n )\n \n __author__ = 'anze'\n@@ -111,6 +111,26 @@ class TestContextHandler(TestCase):\n             handler.initialize(widget, dict(context_settings=deepcopy(contexts)))\n         migrate_context.assert_has_calls([call(c, c.values[VERSION_KEY]) for c in contexts])\n \n+    def test_migrates_settings_removes_incompatible(self):\n+        handler = ContextHandler()\n+        handler.bind(SimpleWidget)\n+\n+        widget = SimpleWidget()\n+\n+        contexts = [Context(foo=i) for i in (13, 13, 0, 1, 13, 2, 13)]\n+\n+        def migrate_context(context, _):\n+            if context.foo == 13:\n+                raise IncompatibleContext()\n+\n+        with patch.object(SimpleWidget, \"migrate_context\", migrate_context):\n+            handler.initialize(widget, dict(context_settings=contexts))\n+            contexts = widget.context_settings\n+            self.assertEqual(len(contexts), 3)\n+            self.assertTrue(\n+                all(context.foo == i\n+                    for i, context in enumerate(contexts)))\n+\n     def test_fast_save(self):\n         handler = ContextHandler()\n         handler.bind(SimpleWidget)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3237.0, "instance_id": "biolab__orange3-3237", "issue_numbers": 0, "base_commit": "972ec52c1ec08b278dce71153ea4db18ff7bb38c", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex 77def811e..00ab17f4a 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -618,8 +618,15 @@ class FileFormat(metaclass=FileFormatMeta):\n         # Determine maximum row length\n         rowlen = max(map(len, (names, types, flags)))\n \n+        strip = False\n+\n         def _equal_length(lst):\n-            lst.extend(['']*(rowlen - len(lst)))\n+            nonlocal strip\n+            if len(lst) > rowlen > 0:\n+                lst = lst[:rowlen]\n+                strip = True\n+            elif len(lst) < rowlen:\n+                lst.extend(['']*(rowlen - len(lst)))\n             return lst\n \n         # Ensure all data is of equal width in a column-contiguous array\n@@ -627,6 +634,9 @@ class FileFormat(metaclass=FileFormatMeta):\n                 for row in data if any(row)]\n         data = np.array(data, dtype=object, order='F')\n \n+        if strip:\n+            warnings.warn(\"Columns with no headers were removed.\")\n+\n         # Data may actually be longer than headers were\n         try:\n             rowlen = data.shape[1]\n.", "test_patch": "diff --git a/Orange/tests/test_io.py b/Orange/tests/test_io.py\nindex ad6731c67..9dee28e52 100644\n--- a/Orange/tests/test_io.py\n+++ b/Orange/tests/test_io.py\n@@ -5,6 +5,7 @@ import unittest\n import os\n import tempfile\n import shutil\n+import io\n \n from Orange.data import ContinuousVariable\n from Orange.data.io import FileFormat, TabReader, CSVReader, PickleReader, \\\n@@ -104,6 +105,20 @@ class TestReader(unittest.TestCase):\n         with unittest.mock.patch(\"pickle.load\", return_value=None):\n             self.assertRaises(TypeError, reader.read, \"foo\")\n \n+    def test_empty_columns(self):\n+        \"\"\"Can't read files with more columns then headers. GH-1417\"\"\"\n+        samplefile = \"\"\"\\\n+        a, b\n+        1, 0,\n+        1, 2,\n+        \"\"\"\n+        c = io.StringIO(samplefile)\n+        with self.assertWarns(UserWarning) as cm:\n+            table = CSVReader(c).read()\n+        self.assertEqual(len(table.domain.attributes), 2)\n+        self.assertEqual(cm.warning.args[0],\n+                         \"Columns with no headers were removed.\")\n+\n \n class TestIo(unittest.TestCase):\n     def test_sanitize_variable_deprecated_params(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3107.0, "instance_id": "biolab__orange3-3107", "issue_numbers": 0, "base_commit": "87577c7a105f2ce210d3143b79dd79488d526859", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex 245a4f0e6..3a8d63e26 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -183,12 +183,7 @@ def sanitize_variable(valuemap, values, orig_values, coltype, coltype_kwargs,\n     if issubclass(coltype, DiscreteVariable) and valuemap is not None:\n         coltype_kwargs.update(values=valuemap)\n \n-    if existing_var:\n-        # Use existing variable if available\n-        var = coltype.make(existing_var.strip(), **coltype_kwargs)\n-    else:\n-        # Never use existing for un-named variables\n-        var = coltype(new_var_name, **coltype_kwargs)\n+    var = coltype.make(existing_var.strip() if existing_var else new_var_name, **coltype_kwargs)\n \n     if isinstance(var, DiscreteVariable):\n         # Map discrete data to 'ints' (or at least what passes as int around\n.", "test_patch": "diff --git a/Orange/tests/test_tab_reader.py b/Orange/tests/test_tab_reader.py\nindex 1e842f0ff..fa5bedac4 100644\n--- a/Orange/tests/test_tab_reader.py\n+++ b/Orange/tests/test_tab_reader.py\n@@ -143,6 +143,17 @@ class TestTabReader(unittest.TestCase):\n         self.assertTrue(table.domain[0].is_continuous)\n         self.assertEqual(table.domain[0].name, 'Feature 1')\n \n+    def test_read_data_no_header_feature_reuse(self):\n+        samplefile = \"\"\"\\\n+        0.1\\t0.2\\t0.3\n+        1.1\\t1.2\\t1.5\n+        \"\"\"\n+        file = io.StringIO(samplefile)\n+        t1 = read_tab_file(file)\n+        file = io.StringIO(samplefile)\n+        t2 = read_tab_file(file)\n+        self.assertEqual(t1.domain[0], t2.domain[0])\n+\n     def test_reuse_variables(self):\n         file1 = io.StringIO(\"\\n\".join(\"xd dbac\"))\n         t1 = read_tab_file(file1)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4419.0, "instance_id": "biolab__orange3-4419", "issue_numbers": 0, "base_commit": "da37d153ef51aa32a8f897bb7c47f8ee98317b44", "patch": "diff --git a/Orange/widgets/utils/state_summary.py b/Orange/widgets/utils/state_summary.py\nindex 17675fe5e..c43f14864 100644\n--- a/Orange/widgets/utils/state_summary.py\n+++ b/Orange/widgets/utils/state_summary.py\n@@ -60,7 +60,7 @@ def format_summary_details(data):\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = \\\n             f'{len(data)} instance{_plural(len(data))}, ' \\\n-            f'{n_features} feature{_plural(n_features)}\\n' \\\n+            f'{n_features} variable{_plural(n_features)}\\n' \\\n             f'Features: {features}\\nTarget: {targets}\\nMetas: {metas}'\n \n     return details\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_state_summary.py b/Orange/widgets/utils/tests/test_state_summary.py\nindex df9a5fbcd..f28885cb0 100644\n--- a/Orange/widgets/utils/tests/test_state_summary.py\n+++ b/Orange/widgets/utils/tests/test_state_summary.py\n@@ -4,9 +4,9 @@ from collections import namedtuple\n \n import numpy as np\n \n-from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.data import Table, Domain, StringVariable, ContinuousVariable, \\\n     DiscreteVariable, TimeVariable\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n VarDataPair = namedtuple('VarDataPair', ['variable', 'data'])\n \n@@ -40,10 +40,12 @@ ints_missing = VarDataPair(\n     np.array([0, 1, 1, np.nan, 2], dtype=float),\n )\n \n+\n def _to_timestamps(years):\n     return [datetime.datetime(year, 1, 1).timestamp() if not np.isnan(year)\n             else np.nan for year in years]\n \n+\n time_full = VarDataPair(\n     TimeVariable('time_full'),\n     np.array(_to_timestamps([2000, 2001, 2002, 2003, 2004]), dtype=float),\n@@ -103,7 +105,7 @@ class TestUtils(unittest.TestCase):\n         data = Table('zoo')\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = f'{len(data)} instances, ' \\\n-                  f'{n_features} features\\n' \\\n+                  f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} categorical\\n' \\\n                   f'Target: categorical\\n' \\\n                   f'Metas: string (not shown)'\n@@ -112,7 +114,7 @@ class TestUtils(unittest.TestCase):\n         data = Table('housing')\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = f'{len(data)} instances, ' \\\n-                  f'{n_features} features\\n' \\\n+                  f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} numeric\\n' \\\n                   f'Target: numeric\\n' \\\n                   f'Metas: \u2014'\n@@ -121,7 +123,7 @@ class TestUtils(unittest.TestCase):\n         data = Table('heart_disease')\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = f'{len(data)} instances, ' \\\n-                  f'{n_features} features\\n' \\\n+                  f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} ' \\\n                   f'(7 categorical, 6 numeric)\\n' \\\n                   f'Target: categorical\\n' \\\n@@ -134,7 +136,7 @@ class TestUtils(unittest.TestCase):\n         )\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = f'{len(data)} instances, ' \\\n-                  f'{n_features} features\\n' \\\n+                  f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} numeric\\n' \\\n                   f'Target: {len(data.domain.class_vars)} categorical\\n' \\\n                   f'Metas: {len(data.domain.metas)} categorical'\n@@ -147,7 +149,7 @@ class TestUtils(unittest.TestCase):\n         )\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = f'{len(data)} instances, ' \\\n-                  f'{n_features} features\\n' \\\n+                  f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} ' \\\n                   f'(2 categorical, 1 numeric, 1 time)\\n' \\\n                   f'Target: {len(data.domain.class_vars)} ' \\\n@@ -158,15 +160,15 @@ class TestUtils(unittest.TestCase):\n         data = make_table([time_full, time_missing], target=[ints_missing],\n                           metas=None)\n         details = f'{len(data)} instances, ' \\\n-                  f'{len(data.domain.variables)} features\\n' \\\n-                  f'Features: {len(data.domain.attributes)} time\\n'\\\n+                  f'{len(data.domain.variables)} variables\\n' \\\n+                  f'Features: {len(data.domain.attributes)} time\\n' \\\n                   f'Target: categorical\\n' \\\n                   f'Metas: \u2014'\n         self.assertEqual(details, format_summary_details(data))\n \n         data = make_table([rgb_full, ints_full], target=None, metas=None)\n         details = f'{len(data)} instances, ' \\\n-                  f'{len(data.domain.variables)} features\\n' \\\n+                  f'{len(data.domain.variables)} variables\\n' \\\n                   f'Features: {len(data.domain.variables)} categorical\\n' \\\n                   f'Target: \u2014\\n' \\\n                   f'Metas: \u2014'\n@@ -174,7 +176,7 @@ class TestUtils(unittest.TestCase):\n \n         data = make_table([rgb_full], target=None, metas=None)\n         details = f'{len(data)} instances, ' \\\n-                  f'{len(data.domain.variables)} feature\\n' \\\n+                  f'{len(data.domain.variables)} variable\\n' \\\n                   f'Features: categorical\\n' \\\n                   f'Target: \u2014\\n' \\\n                   f'Metas: \u2014'\n@@ -182,3 +184,7 @@ class TestUtils(unittest.TestCase):\n \n         data = None\n         self.assertEqual('', format_summary_details(data))\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3722.0, "instance_id": "biolab__orange3-3722", "issue_numbers": 0, "base_commit": "399c4efabb5e1183735bf41257558b0584fba4d4", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex 57c38bbdc..7dc564901 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -361,7 +361,9 @@ def stats(X, weights=None, compute_variance=False):\n             X.shape[0] - non_zero,\n             non_zero))\n     else:\n-        nans = (~X.astype(bool)).sum(axis=0) if X.size else np.zeros(X.shape[1])\n+        X_str = X.astype(str)\n+        nans = ((X_str == \"nan\") | (X_str == \"\")).sum(axis=0) \\\n+            if X.size else np.zeros(X.shape[1])\n         return np.column_stack((\n             np.tile(np.inf, X.shape[1]),\n             np.tile(-np.inf, X.shape[1]),\n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex 59a04e9e2..1c0b4226c 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -118,13 +118,14 @@ class TestUtil(unittest.TestCase):\n \n     def test_stats_non_numeric(self):\n         X = np.array([\n-            ['', 'a', 'b'],\n-            ['a', '', 'b'],\n-            ['a', 'b', ''],\n+            [\"\", \"a\", np.nan, 0],\n+            [\"a\", \"\", np.nan, 1],\n+            [\"a\", \"b\", 0, 0],\n         ], dtype=object)\n         np.testing.assert_equal(stats(X), [[np.inf, -np.inf, 0, 0, 1, 2],\n                                            [np.inf, -np.inf, 0, 0, 1, 2],\n-                                           [np.inf, -np.inf, 0, 0, 1, 2]])\n+                                           [np.inf, -np.inf, 0, 0, 2, 1],\n+                                           [np.inf, -np.inf, 0, 0, 0, 3]])\n \n     def test_nanmin_nanmax(self):\n         warnings.filterwarnings(\"ignore\", r\".*All-NaN slice encountered.*\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4207.0, "instance_id": "biolab__orange3-4207", "issue_numbers": 0, "base_commit": "562ebb249e4c39b3d2af2278e83d0628ea18b41f", "patch": "diff --git a/Orange/preprocess/fss.py b/Orange/preprocess/fss.py\nindex e6e3620cf..b892508bd 100644\n--- a/Orange/preprocess/fss.py\n+++ b/Orange/preprocess/fss.py\n@@ -91,8 +91,9 @@ class SelectBestFeatures(Reprable):\n         return data.transform(domain)\n \n     def score_only_nice_features(self, data, method):\n+        # dtype must be defined because array can be empty\n         mask = np.array([isinstance(a, method.feature_type)\n-                         for a in data.domain.attributes])\n+                         for a in data.domain.attributes], dtype=np.bool)\n         features = [f for f in data.domain.attributes\n                     if isinstance(f, method.feature_type)]\n         scores = [method(data, f) for f in features]\n.", "test_patch": "diff --git a/Orange/preprocess/tests/test_fss.py b/Orange/preprocess/tests/test_fss.py\nnew file mode 100644\nindex 000000000..14c5c3fdc\n--- /dev/null\n+++ b/Orange/preprocess/tests/test_fss.py\n@@ -0,0 +1,36 @@\n+import unittest\n+from unittest.mock import Mock\n+\n+import numpy as np\n+\n+from Orange.data import Domain, Table, DiscreteVariable, ContinuousVariable\n+from Orange.preprocess import fss\n+\n+\n+class SelectBestFeaturesTest(unittest.TestCase):\n+    def test_no_nice_features(self):\n+        method = Mock()\n+        method.feature_type = DiscreteVariable\n+        selector = fss.SelectBestFeatures(method, 5)\n+\n+        domain = Domain([])\n+        data = Table.from_numpy(domain, np.zeros((100, 0)))\n+        selection = selector.score_only_nice_features(data, method)\n+        self.assertEqual(selection.size, 0)\n+        method.assert_not_called()\n+\n+        domain = Domain([ContinuousVariable(\"x\")])\n+        data = Table.from_numpy(domain, np.zeros((100, 1)))\n+        selector.decreasing = True\n+        selection = selector.score_only_nice_features(data, method)\n+        np.testing.assert_equal(selection, [float('-inf')])\n+        method.assert_not_called()\n+\n+        selector.decreasing = False\n+        selection = selector.score_only_nice_features(data, method)\n+        np.testing.assert_equal(selection, [float('inf')])\n+        method.assert_not_called()\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4867.0, "instance_id": "biolab__orange3-4867", "issue_numbers": 0, "base_commit": "56c12a59d4d42513e98e50dc35f2c1064151ecca", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 47f7668e5..f9deb6f98 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1751,6 +1751,8 @@ def _check_arrays(*arrays, dtype=None, shape_1=None):\n                              % (ninstances(array), shape_1))\n \n         if sp.issparse(array):\n+            if not (sp.isspmatrix_csr(array) or sp.isspmatrix_csc(array)):\n+                array = array.tocsr()\n             array.data = np.asarray(array.data)\n             has_inf = _check_inf(array.data)\n         else:\n.", "test_patch": "diff --git a/Orange/data/tests/test_table.py b/Orange/data/tests/test_table.py\nindex 37b40af10..4ed531453 100644\n--- a/Orange/data/tests/test_table.py\n+++ b/Orange/data/tests/test_table.py\n@@ -1,6 +1,7 @@\n import unittest\n \n import numpy as np\n+import scipy.sparse as sp\n \n from Orange.data import (\n     ContinuousVariable, DiscreteVariable, StringVariable,\n@@ -85,6 +86,28 @@ class TestTableInit(unittest.TestCase):\n             self.assertRaises(ValueError, func, dom, X, Y, metas[:4])\n             self.assertRaises(ValueError, func, dom, X, Y[:4])\n \n+    def test_from_numpy_sparse(self):\n+        domain = Domain([ContinuousVariable(c) for c in \"abc\"])\n+        x = np.arange(12).reshape(4, 3)\n+\n+        t = Table.from_numpy(domain, x, None, None)\n+        self.assertFalse(sp.issparse(t.X))\n+\n+        t = Table.from_numpy(domain, sp.csr_matrix(x))\n+        self.assertTrue(sp.isspmatrix_csr(t.X))\n+\n+        t = Table.from_numpy(domain, sp.csc_matrix(x))\n+        self.assertTrue(sp.isspmatrix_csc(t.X))\n+\n+        t = Table.from_numpy(domain, sp.coo_matrix(x))\n+        self.assertTrue(sp.isspmatrix_csr(t.X))\n+\n+        t = Table.from_numpy(domain, sp.lil_matrix(x))\n+        self.assertTrue(sp.isspmatrix_csr(t.X))\n+\n+        t = Table.from_numpy(domain, sp.bsr_matrix(x))\n+        self.assertTrue(sp.isspmatrix_csr(t.X))\n+\n \n class TestTableFilters(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3683.0, "instance_id": "biolab__orange3-3683", "issue_numbers": 0, "base_commit": "9e0d4eb0e9237dcbb551633e30ec8d049c500baa", "patch": "diff --git a/Orange/distance/distance.py b/Orange/distance/distance.py\nindex cfd7fe43a..9dd1d7213 100644\n--- a/Orange/distance/distance.py\n+++ b/Orange/distance/distance.py\n@@ -442,8 +442,11 @@ class JaccardModel(FittedDistanceModel):\n         for i in range(n):\n             xi_ind = set(x1[i].indices)\n             for j in range(i if symmetric else m):\n-                jacc = 1 - len(xi_ind.intersection(x2[j].indices))\\\n-                           / len(set(x1[i].indices).union(x1[j].indices))\n+                union = len(xi_ind.union(x2[j].indices))\n+                if union:\n+                    jacc = 1 - len(xi_ind.intersection(x2[j].indices)) / union\n+                else:\n+                    jacc = 0\n                 matrix[i, j] = jacc\n                 if symmetric:\n                     matrix[j, i] = jacc\n.", "test_patch": "diff --git a/Orange/distance/tests/test_distance.py b/Orange/distance/tests/test_distance.py\nindex e056619fb..5295014e8 100644\n--- a/Orange/distance/tests/test_distance.py\n+++ b/Orange/distance/tests/test_distance.py\n@@ -892,6 +892,20 @@ class JaccardDistanceTest(unittest.TestCase, CommonFittedTests):\n                           [0.4, 1, 5/12],\n                           [0.25, 5/12, 1]]))\n \n+    def test_zero_instances(self):\n+        \"Test all zero instances\"\n+        domain = Domain([ContinuousVariable(c) for c in \"abc\"])\n+        dense_data = Table.from_list(\n+            domain, [[0, 0, 0], [0, 0, 0], [0, 0, 1]])\n+        sparse_data = Table(domain, csr_matrix(dense_data.X))\n+        dist_dense = self.Distance(dense_data)\n+        dist_sparse = self.Distance(sparse_data)\n+\n+        self.assertEqual(dist_dense[0][1], 0)\n+        self.assertEqual(dist_sparse[0][1], 0)\n+        self.assertEqual(dist_dense[0][2], 1)\n+        self.assertEqual(dist_sparse[0][2], 1)\n+\n class HammingDistanceTest(FittedDistanceTest):\n     Distance = distance.Hamming\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5671.0, "instance_id": "biolab__orange3-5671", "issue_numbers": 0, "base_commit": "5e58c4e432bc3989e6a5987d87aa1ec0988f1ce0", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 7321b6d7f..851b644af 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -382,11 +382,13 @@ def table_from_frames(xdf, ydf, mdf):\n     XYM = (xXYM[0], yXYM[1], mXYM[2])\n     domain = Domain(xDomain.attributes, yDomain.class_vars, mDomain.metas)\n \n-    index_iter = (filter(lambda ind: ind.startswith('_o'),\n-                         set(df.index[i] for df in dfs))\n-                  for i in range(len(xdf.shape[0])))\n-    ids = (i[0] if len(i) == 1 else Table.new_id()\n-           for i in index_iter)\n+    indexes = [df.index for df in dfs]\n+    ids = [\n+        int(x[2:])\n+        if str(x).startswith(\"_o\") and x[2:].isdigit() and x == y == m\n+        else Table.new_id()\n+        for x, y, m in zip(*indexes)\n+    ]\n \n     attributes = {}\n     W = None\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex e15c7908e..5d62d06ec 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -428,6 +428,21 @@ class TestPandasCompat(unittest.TestCase):\n             self.assertEqual(len(df), len(table), assert_message)\n             self.assertEqual(len(df.columns), len(table.domain.variables), assert_message)\n \n+    def test_table_from_frames(self):\n+        table = Table(\"brown-selected\")  # dataset with all X, Y and metas\n+        table.ids = np.arange(100, len(table) + 100, 1, dtype=int)\n+\n+        x, y, m = table.to_pandas_dfs()\n+        new_table = Table.from_pandas_dfs(x, y, m)\n+\n+        np.testing.assert_array_equal(table.X, new_table.X)\n+        np.testing.assert_array_equal(table.Y, new_table.Y)\n+        np.testing.assert_array_equal(table.metas, new_table.metas)\n+        np.testing.assert_array_equal(table.ids, new_table.ids)\n+        self.assertTupleEqual(table.domain.attributes, new_table.domain.attributes)\n+        self.assertTupleEqual(table.domain.metas, new_table.domain.metas)\n+        self.assertEqual(table.domain.class_var, new_table.domain.class_var)\n+\n \n class TestTablePandas(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3757.0, "instance_id": "biolab__orange3-3757", "issue_numbers": 0, "base_commit": "a29163471cba2829d3c046f92dc29d5b890122a0", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex dcb07690a..5bf0c34de 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -22,6 +22,7 @@ Unknown = ValueUnknown = float(\"nan\")\n MISSING_VALUES = {np.nan, \"?\", \"nan\", \".\", \"\", \"NA\", \"~\", None}\n \n DISCRETE_MAX_VALUES = 3  # == 2 + nan\n+MAX_NUM_OF_DECIMALS = 5\n \n \n def make_variable(cls, compute_value, *args):\n@@ -522,10 +523,10 @@ class ContinuousVariable(Variable):\n         three, but adjusted at the first call of :obj:`to_val`.\n         \"\"\"\n         super().__init__(name, compute_value, sparse=sparse)\n+        self._format_str = \"%g\"\n         if number_of_decimals is None:\n             self._number_of_decimals = 3\n             self.adjust_decimals = 2\n-            self._format_str = \"%g\"\n         else:\n             self.number_of_decimals = number_of_decimals\n \n@@ -559,7 +560,8 @@ class ContinuousVariable(Variable):\n     def number_of_decimals(self, x):\n         self._number_of_decimals = x\n         self.adjust_decimals = 0\n-        self._format_str = \"%.{}f\".format(self.number_of_decimals)\n+        if self._number_of_decimals <= MAX_NUM_OF_DECIMALS:\n+            self._format_str = \"%.{}f\".format(self.number_of_decimals)\n \n     def to_val(self, s):\n         \"\"\"\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex dd4e98f8e..62e8285e5 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -292,7 +292,12 @@ class TestContinuousVariable(VariableTest):\n     def test_decimals(self):\n         a = ContinuousVariable(\"a\", 4)\n         self.assertEqual(a.str_val(4.654321), \"4.6543\")\n+        self.assertEqual(a.str_val(4.654321654321), \"4.6543\")\n         self.assertEqual(a.str_val(Unknown), \"?\")\n+        a = ContinuousVariable(\"a\", 5)\n+        self.assertEqual(a.str_val(0.000000000001), \"0.00000\")\n+        a = ContinuousVariable(\"a\", 10)\n+        self.assertEqual(a.str_val(0.000000000001), \"1e-12\")\n \n     def test_adjust_decimals(self):\n         a = ContinuousVariable(\"a\")\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4513.0, "instance_id": "biolab__orange3-4513", "issue_numbers": 0, "base_commit": "bafa2adcd9ea8903c568658a878911148a5fdb2c", "patch": "diff --git a/Orange/widgets/data/owdatainfo.py b/Orange/widgets/data/owdatainfo.py\nindex b4cfa69a9..1599cfc53 100644\n--- a/Orange/widgets/data/owdatainfo.py\n+++ b/Orange/widgets/data/owdatainfo.py\n@@ -4,6 +4,7 @@ import textwrap\n \n from Orange.widgets import widget, gui\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input\n from Orange.data.table import Table\n from Orange.data import StringVariable, DiscreteVariable, ContinuousVariable\n@@ -42,6 +43,8 @@ class OWDataInfo(widget.OWWidget):\n                           addSpace=False and box != \"Meta Attributes\")\n             gui.label(bo, self, \"%%(%s)s\" % name)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+\n         # ensure the widget has some decent minimum width.\n         self.targets = \"Categorical outcome with 123 values\"\n         self.layout().activate()\n@@ -56,7 +59,9 @@ class OWDataInfo(widget.OWWidget):\n     def data(self, data):\n         if data is None:\n             self._clear_fields()\n+            self.info.set_input_summary(self.info.NoInput)\n         else:\n+            self.info.set_input_summary(len(data), format_summary_details(data))\n             self._set_fields(data)\n             self._set_report(data)\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatainfo.py b/Orange/widgets/data/tests/test_owdatainfo.py\nindex a480cc598..b69b923c6 100644\n--- a/Orange/widgets/data/tests/test_owdatainfo.py\n+++ b/Orange/widgets/data/tests/test_owdatainfo.py\n@@ -1,8 +1,11 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n+# pylint: disable=missing-docstring,unsubscriptable-object\n+from unittest.mock import Mock\n+\n from Orange.data import Table\n from Orange.widgets.data.owdatainfo import OWDataInfo\n from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWDataInfo(WidgetTest):\n@@ -25,3 +28,14 @@ class TestOWDataInfo(WidgetTest):\n         data = Table(\"iris\")\n         data.attributes = {\"att 1\": 1, \"att 2\": True, \"att 3\": 3}\n         self.send_signal(self.widget.Inputs.data, data)\n+\n+    def test_summary(self):\n+        \"\"\"Check if the status bar is updated when data is received\"\"\"\n+        data = Table(\"iris\")\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        input_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3836.0, "instance_id": "biolab__orange3-3836", "issue_numbers": 0, "base_commit": "2a5adcdf016cfabf380053af23aa465bed3020ce", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex ca433756d..583c4be5e 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1212,8 +1212,10 @@ class Table(MutableSequence, Storage):\n                 col, sparse = self.get_column_view(column)\n                 if sparse:\n                     remove += col == 0\n+                elif self.domain[column].is_primitive():\n+                    remove += bn.anynan([col.astype(float)], axis=0)\n                 else:\n-                    remove += bn.anynan([col], axis=0)\n+                    remove += col.astype(bool)\n         retain = remove if negate else np.logical_not(remove)\n         return self.from_table_rows(self, retain)\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_table.py b/Orange/data/tests/test_table.py\nindex 22f3193b7..880b752c9 100644\n--- a/Orange/data/tests/test_table.py\n+++ b/Orange/data/tests/test_table.py\n@@ -96,6 +96,11 @@ class TestTableFilters(unittest.TestCase):\n         filtered = val_filter(self.table)\n         self.assertEqual(list(filtered.metas[:, -2].flatten()), list(\"bd\"))\n \n+    def test_is_defined(self):\n+        val_filter = IsDefined(columns=[\"c3\"])\n+        filtered = val_filter(self.table)\n+        self.assertEqual(list(filtered.metas[:, -2].flatten()), list(\"abcdeg\"))\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4414.0, "instance_id": "biolab__orange3-4414", "issue_numbers": 0, "base_commit": "b5be01df8f994a16d8ab725dac93f4bd22032398", "patch": "diff --git a/Orange/widgets/data/owpreprocess.py b/Orange/widgets/data/owpreprocess.py\nindex 238be791e..ad7c642ac 100644\n--- a/Orange/widgets/data/owpreprocess.py\n+++ b/Orange/widgets/data/owpreprocess.py\n@@ -29,6 +29,7 @@ from Orange.widgets.settings import Setting\n from Orange.widgets.utils.overlay import OverlayWidget\n from Orange.widgets.utils.sql import check_sql_input\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n from Orange.preprocess import Normalize\n from Orange.widgets.data.utils.preprocess import (\n@@ -1265,7 +1266,7 @@ class OWPreprocess(widget.OWWidget):\n         \"\"\"Set the input dataset.\"\"\"\n         self.data = data\n         if data is not None:\n-            self.info.set_input_summary(len(data))\n+            self.info.set_input_summary(len(data), format_summary_details(data))\n         else:\n             self.info.set_input_summary(self.info.NoInput)\n \n@@ -1311,7 +1312,7 @@ class OWPreprocess(widget.OWWidget):\n             except (ValueError, ZeroDivisionError) as e:\n                 self.error(str(e))\n                 return\n-            self.info.set_output_summary(len(data))\n+            self.info.set_output_summary(len(data), format_summary_details(data))\n         else:\n             data = None\n             self.info.set_output_summary(self.info.NoOutput)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpreprocess.py b/Orange/widgets/data/tests/test_owpreprocess.py\nindex 873403cf4..030f036d4 100644\n--- a/Orange/widgets/data/tests/test_owpreprocess.py\n+++ b/Orange/widgets/data/tests/test_owpreprocess.py\n@@ -12,8 +12,8 @@ from Orange.preprocess import discretize, impute, fss, score\n from Orange.widgets.data import owpreprocess\n from Orange.widgets.data.owpreprocess import OWPreprocess, \\\n     UnivariateFeatureSelect, Scale as ScaleEditor\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.tests.base import WidgetTest, datasets\n-from orangewidget.widget import StateInfo\n \n \n class TestOWPreprocess(WidgetTest):\n@@ -147,9 +147,10 @@ class TestOWPreprocess(WidgetTest):\n         output_sum = self.widget.info.set_output_summary = Mock()\n \n         self.send_signal(self.widget.Inputs.data, data)\n-        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n         output = self.get_output(self.widget.Outputs.preprocessed_data)\n-        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n \n         input_sum.reset_mock()\n         output_sum.reset_mock()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4498.0, "instance_id": "biolab__orange3-4498", "issue_numbers": 0, "base_commit": "524b40df249e83a136ce70314d5181c259698e3c", "patch": "diff --git a/Orange/widgets/data/owrandomize.py b/Orange/widgets/data/owrandomize.py\nindex c88c25337..018e0fd63 100644\n--- a/Orange/widgets/data/owrandomize.py\n+++ b/Orange/widgets/data/owrandomize.py\n@@ -7,6 +7,7 @@ from Orange.data import Table\n from Orange.preprocess import Randomize\n from Orange.widgets.settings import Setting\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import OWWidget, Input, Output\n from Orange.widgets import gui\n \n@@ -68,7 +69,7 @@ class OWRandomize(OWWidget):\n             callback=self._shuffle_check_changed)\n \n         self.info.set_input_summary(self.info.NoInput)\n-        self.info.set_output_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n \n         self.apply_button = gui.auto_apply(self.controlArea, self, box=False, commit=self.apply)\n \n@@ -89,9 +90,10 @@ class OWRandomize(OWWidget):\n     @Inputs.data\n     def set_data(self, data):\n         self.data = data\n+        summary = len(data) if data else self.info.NoInput\n+        details = format_summary_details(data) if data else \"\"\n+        self.info.set_input_summary(summary, details)\n         self.unconditional_apply()\n-        text = str(len(data)) if data else self.info.NoInput\n-        self.info.set_input_summary(text)\n \n     def apply(self):\n         data = None\n@@ -105,8 +107,9 @@ class OWRandomize(OWWidget):\n             data = self.data.copy()\n             for i, instance in zip(indices, randomized):\n                 data[i] = instance\n-        text = str(len(data)) if data else self.info.NoInput\n-        self.info.set_output_summary(text)\n+        summary = len(data) if data else self.info.NoOutput\n+        details = format_summary_details(data) if data else \"\"\n+        self.info.set_output_summary(summary, details)\n         self.Outputs.data.send(data)\n \n     def send_report(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owrandomize.py b/Orange/widgets/data/tests/test_owrandomize.py\nindex 173677402..153fe3d2b 100644\n--- a/Orange/widgets/data/tests/test_owrandomize.py\n+++ b/Orange/widgets/data/tests/test_owrandomize.py\n@@ -7,6 +7,7 @@ import numpy as np\n from Orange.data import Table\n from Orange.widgets.data.owrandomize import OWRandomize\n from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWRandomize(WidgetTest):\n@@ -79,13 +80,15 @@ class TestOWRandomize(WidgetTest):\n         output_sum = self.widget.info.set_output_summary = Mock()\n         input_sum = self.widget.info.set_input_summary = Mock()\n \n-        self.send_signal(self.widget.Inputs.data, self.zoo)\n-        input_sum.assert_called_with(str(len(self.zoo)))\n+        data = self.zoo\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data),\n+                                     format_summary_details(data))\n         output = self.get_output(self.widget.Outputs.data)\n-        output_sum.assert_called_with(str(len(output)))\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n         input_sum.reset_mock()\n         output_sum.reset_mock()\n-\n         self.send_signal(self.widget.Inputs.data, None)\n         input_sum.assert_called_once()\n         self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4292.0, "instance_id": "biolab__orange3-4292", "issue_numbers": 0, "base_commit": "0b41b58465a61183e70b956c865d4c15608874c2", "patch": "diff --git a/Orange/statistics/contingency.py b/Orange/statistics/contingency.py\nindex 9905a52eb..76135576a 100644\n--- a/Orange/statistics/contingency.py\n+++ b/Orange/statistics/contingency.py\n@@ -225,6 +225,18 @@ class Continuous:\n                 \"Fallback method for computation of contingencies is not implemented yet\"\n             )\n \n+    @property\n+    def array_with_unknowns(self):\n+        \"\"\"\n+        This function returns the list of all items returned by __getitem__\n+        with adding a row of row_unknowns together with values.\n+        \"\"\"\n+        # pylint: disable=unnecessary-comprehension\n+        other_rows = [x for x in self]\n+        ind = self.row_unknowns > 0\n+        unknown_rows = np.vstack((self.values[ind], self.row_unknowns[ind]))\n+        return other_rows + [unknown_rows]\n+\n     def __eq__(self, other):\n         return (\n             np.array_equal(self.values, other.values) and\n.", "test_patch": "diff --git a/Orange/tests/test_contingency.py b/Orange/tests/test_contingency.py\nindex 6f7ccfca2..022da6d69 100644\n--- a/Orange/tests/test_contingency.py\n+++ b/Orange/tests/test_contingency.py\n@@ -165,6 +165,32 @@ class TestDiscrete(unittest.TestCase):\n              3., 4., 2., 1., 1., 1., 1.])\n         self.assertEqual(cont.unknowns, 1)\n \n+    @staticmethod\n+    def test_continuous_array_with_unknowns():\n+        \"\"\"\n+        Test array_with_unknowns function\n+        \"\"\"\n+        d = data.Table(\"iris\")\n+        d.Y[:50] = np.zeros(50) * float(\"nan\")\n+        cont = contingency.Continuous(d, \"sepal width\")\n+        correct_row_unknowns = [0., 0., 1., 0., 0., 0., 0., 0., 1., 6., 5., 5.,\n+                                2., 9., 6., 2., 3., 4., 2., 1., 1., 1., 1.]\n+        correct_row_unknowns_no_zero = [\n+            c for c in correct_row_unknowns if c > 0]\n+        correct_values_no_zero = [\n+            v for v, c in zip(cont.values, correct_row_unknowns) if c > 0]\n+\n+        np.testing.assert_almost_equal(cont.row_unknowns, correct_row_unknowns)\n+        arr_unknowns = cont.array_with_unknowns\n+        np.testing.assert_almost_equal(\n+            arr_unknowns[-1][1], correct_row_unknowns_no_zero)\n+        np.testing.assert_almost_equal(\n+            arr_unknowns[-1][0], correct_values_no_zero)\n+\n+        # check if other match to what we get with __getitem__\n+        for v1, v2 in zip(arr_unknowns[:-1], cont):\n+            np.testing.assert_almost_equal(v1, v2)\n+\n     def test_mixedtype_metas(self):\n         import Orange\n         zoo = Orange.data.Table(\"zoo\")\n@@ -212,7 +238,6 @@ class TestDiscrete(unittest.TestCase):\n         Y = np.array([[1, 2, 1, 0, 0]]).T\n         return data.Table.from_numpy(domain, X, Y)\n \n-\n     def test_sparse(self):\n         d = self._construct_sparse()\n         cont = contingency.Discrete(d, 5)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5269.0, "instance_id": "biolab__orange3-5269", "issue_numbers": 0, "base_commit": "50345c21370a136f170c17c130677137c98600bf", "patch": "diff --git a/Orange/preprocess/discretize.py b/Orange/preprocess/discretize.py\nindex 75656829f..e91763e5f 100644\n--- a/Orange/preprocess/discretize.py\n+++ b/Orange/preprocess/discretize.py\n@@ -147,6 +147,8 @@ class EqualFreq(Discretization):\n         else:\n             d = distribution.get_distribution(data, attribute)\n             points = _discretize.split_eq_freq(d, self.n)\n+            # np.unique handles cases in which differences are below precision\n+            points = list(np.unique(points))\n         return Discretizer.create_discretized_var(\n             data.domain[attribute], points)\n \n.", "test_patch": "diff --git a/Orange/tests/test_discretize.py b/Orange/tests/test_discretize.py\nindex f1c9b29bb..1b938f825 100644\n--- a/Orange/tests/test_discretize.py\n+++ b/Orange/tests/test_discretize.py\n@@ -1,6 +1,7 @@\n # Test methods with long descriptive names can omit docstrings\n # pylint: disable=missing-docstring\n \n+import sys\n import random\n from unittest import TestCase\n \n@@ -43,6 +44,26 @@ class TestEqualFreq(TestCase):\n         self.assertEqual(len(dvar.values), 4)\n         self.assertEqual(dvar.compute_value.points, [1.5, 2.5, 3.5])\n \n+    def test_below_precision(self):\n+        eps = sys.float_info.epsilon\n+\n+        # Test with n >= number of distinct values\n+        X = np.array([[1], [1 + eps], [1 + 2 * eps], [1 + 3 * eps]])\n+        # Test the test: check that these are indeed distinct values\n+        assert len(np.unique(X).flatten()) == 4\n+        table = data.Table.from_numpy(None, X)\n+        var = discretize.EqualFreq(n=4)(table, table.domain[0])\n+        points = var.compute_value.points\n+        self.assertEqual(len(np.unique(points)), len(points))\n+\n+        # Test with n < number of distinct values\n+        X = np.array([[1 + i * eps] for i in range(10)])\n+        # Test the test: check that these are indeed distinct values\n+        assert len(np.unique(X).flatten()) == 10\n+        table = data.Table.from_numpy(None, X)\n+        var = discretize.EqualFreq(n=8)(table, table.domain[0])\n+        points = var.compute_value.points\n+        self.assertEqual(len(np.unique(points)), len(points))\n \n # noinspection PyPep8Naming\n class TestEqualWidth(TestCase):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3624.0, "instance_id": "biolab__orange3-3624", "issue_numbers": 0, "base_commit": "69f65f8765954dbb67644ffd2ceb9cf5400abde6", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 5bcc2ad91..4b7c9b5f5 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -785,18 +785,18 @@ class Table(MutableSequence, Storage):\n                     raise ValueError(\"Invalid number of values\")\n             else:\n                 col_idx, values = [col_idx], [value]\n-            for value, col_idx in zip(values, col_idx):\n-                if not isinstance(value, Integral):\n-                    value = self.domain[col_idx].to_val(value)\n+            for val, col_idx in zip(values, col_idx):\n+                if not isinstance(val, Integral):\n+                    val = self.domain[col_idx].to_val(val)\n                 if not isinstance(col_idx, Integral):\n                     col_idx = self.domain.index(col_idx)\n                 if col_idx >= 0:\n                     if col_idx < self.X.shape[1]:\n-                        self.X[row_idx, col_idx] = value\n+                        self.X[row_idx, col_idx] = val\n                     else:\n-                        self._Y[row_idx, col_idx - self.X.shape[1]] = value\n+                        self._Y[row_idx, col_idx - self.X.shape[1]] = val\n                 else:\n-                    self.metas[row_idx, -1 - col_idx] = value\n+                    self.metas[row_idx, -1 - col_idx] = val\n \n         # multiple rows, multiple columns\n         attributes, col_indices = self.domain._compute_col_indices(col_idx)\n@@ -1779,7 +1779,8 @@ def _check_arrays(*arrays, dtype=None):\n             has_inf = _check_inf(array)\n \n         if has_inf:\n-            raise ValueError(\"Array contains infinity.\")\n+            array[np.isinf(array)] = np.nan\n+            warnings.warn(\"Array contains infinity.\", RuntimeWarning)\n         checked.append(array)\n \n     return checked\n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex a4beba674..a373a1187 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -284,9 +284,6 @@ class TableTestCase(unittest.TestCase):\n             warnings.simplefilter(\"ignore\")\n             d = data.Table(\"test2\")\n \n-            vara = d.domain[\"a\"]\n-            metaa = d.domain.index(vara)\n-\n             self.assertFalse(isnan(d[0, \"a\"]))\n             d[0] = [\"3.14\", \"1\", \"f\"]\n             almost_equal_list(d[0].values(), [3.14, \"1\", \"f\"])\n@@ -879,7 +876,7 @@ class TableTestCase(unittest.TestCase):\n         self.assertEqual(len(e), 50)\n         e = filter.Random(50, negate=True)(d)\n         self.assertEqual(len(e), 100)\n-        for i in range(5):\n+        for _ in range(5):\n             e = filter.Random(0.2)(d)\n             self.assertEqual(len(e), 30)\n             bc = np.bincount(np.array(e.Y[:], dtype=int))\n@@ -1277,6 +1274,14 @@ class TableTestCase(unittest.TestCase):\n         table.X = sp.csr_matrix(table.X)\n         repr(table)     # make sure repr does not crash\n \n+    def test_inf(self):\n+        a = np.array([[2, 0, 0, 0],\n+                      [0, np.nan, np.nan, 1],\n+                      [0, 0, np.inf, 0]])\n+        with self.assertWarns(Warning):\n+            tab = data.Table(a)\n+        self.assertEqual(tab.get_nan_frequency_attribute(), 3/12)\n+\n \n def column_sizes(table):\n     return (len(table.domain.attributes),\n@@ -1698,11 +1703,11 @@ class CreateTableWithData(TableTests):\n                                           self.meta_data, self.weight_data)\n \n     def test_from_numpy_reconstructable(self):\n-        def assert_equal(T1, T2):\n-            np.testing.assert_array_equal(T1.X, T2.X)\n-            np.testing.assert_array_equal(T1.Y, T2.Y)\n-            np.testing.assert_array_equal(T1.metas, T2.metas)\n-            np.testing.assert_array_equal(T1.W, T2.W)\n+        def assert_equal(t1, t2):\n+            np.testing.assert_array_equal(t1.X, t2.X)\n+            np.testing.assert_array_equal(t1.Y, t2.Y)\n+            np.testing.assert_array_equal(t1.metas, t2.metas)\n+            np.testing.assert_array_equal(t1.W, t2.W)\n \n         nullcol = np.empty((self.nrows, 0))\n         domain = self.create_domain(self.attributes)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4740.0, "instance_id": "biolab__orange3-4740", "issue_numbers": 0, "base_commit": "69353159135a14d1ae2555974dbd8abc85611257", "patch": "diff --git a/Orange/widgets/data/owselectrows.py b/Orange/widgets/data/owselectrows.py\nindex b8806f369..5d213b28c 100644\n--- a/Orange/widgets/data/owselectrows.py\n+++ b/Orange/widgets/data/owselectrows.py\n@@ -80,13 +80,30 @@ class SelectRowsContextHandler(DomainContextHandler):\n         conditions = context.values[\"conditions\"]\n         all_vars = attrs.copy()\n         all_vars.update(metas)\n-        # Use this after 2022/2/2:\n-        # if all(all_vars.get(name) == tpe for name, tpe, *_ in conditions):\n-        if all(all_vars.get(name) == tpe if len(rest) == 2 else name in all_vars\n-               for name, tpe, *rest in conditions):\n-            return 0.5\n+        matched = [all_vars.get(name) == tpe\n+                   # After 2022/2/2 remove this line:\n+                   if len(rest) == 2 else name in all_vars\n+                   for name, tpe, *rest in conditions]\n+        if any(matched):\n+            return 0.5 * sum(matched) / len(matched)\n         return self.NO_MATCH\n \n+    def filter_value(self, setting, data, domain, attrs, metas):\n+        if setting.name != \"conditions\":\n+            super().filter_value(setting, data, domain, attrs, metas)\n+            return\n+\n+        all_vars = attrs.copy()\n+        all_vars.update(metas)\n+        conditions = data[\"conditions\"]\n+        # Use this after 2022/2/2: if any(all_vars.get(name) == tpe:\n+        # conditions[:] = [(name, tpe, *rest) for name, tpe, *rest in conditions\n+        #                  if all_vars.get(name) == tpe]\n+        conditions[:] = [\n+            (name, tpe, *rest) for name, tpe, *rest in conditions\n+            if (all_vars.get(name) == tpe if len(rest) == 2\n+                else name in all_vars)]\n+\n \n class FilterDiscreteType(enum.Enum):\n     Equal = \"Equal\"\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectrows.py b/Orange/widgets/data/tests/test_owselectrows.py\nindex b3a04178a..bdbee4bd9 100644\n--- a/Orange/widgets/data/tests/test_owselectrows.py\n+++ b/Orange/widgets/data/tests/test_owselectrows.py\n@@ -191,6 +191,20 @@ class TestOWSelectRows(WidgetTest):\n         self.assertEqual(condition[1], 2)\n         self.assertTrue(condition[2][0].startswith(\"5.2\"))\n \n+    @override_locale(QLocale.C)\n+    def test_partial_matches_with_missing_vars(self):\n+        iris = Table(\"iris\")\n+        domain = iris.domain\n+        self.widget = self.widget_with_context(\n+            domain, [[domain[0].name, 2, (\"5.2\",)],\n+                     [domain[2].name, 2, (\"4.2\",)]])\n+        iris2 = iris.transform(Domain(domain.attributes[2:], None))\n+        self.send_signal(self.widget.Inputs.data, iris2)\n+        condition = self.widget.conditions[0]\n+        self.assertEqual(condition[0], domain[2].name)\n+        self.assertEqual(condition[1], 2)\n+        self.assertTrue(condition[2][0].startswith(\"4.2\"))\n+\n     def test_load_settings(self):\n         iris = Table(\"iris\")[:5]\n         self.send_signal(self.widget.Inputs.data, iris)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4419.0, "instance_id": "biolab__orange3-4419", "issue_numbers": 0, "base_commit": "5c36a87547a3e786df717fbcece6d552d08caaaa", "patch": "diff --git a/Orange/widgets/utils/state_summary.py b/Orange/widgets/utils/state_summary.py\nindex 17675fe5e..c43f14864 100644\n--- a/Orange/widgets/utils/state_summary.py\n+++ b/Orange/widgets/utils/state_summary.py\n@@ -60,7 +60,7 @@ def format_summary_details(data):\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = \\\n             f'{len(data)} instance{_plural(len(data))}, ' \\\n-            f'{n_features} feature{_plural(n_features)}\\n' \\\n+            f'{n_features} variable{_plural(n_features)}\\n' \\\n             f'Features: {features}\\nTarget: {targets}\\nMetas: {metas}'\n \n     return details\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_state_summary.py b/Orange/widgets/utils/tests/test_state_summary.py\nindex df9a5fbcd..f28885cb0 100644\n--- a/Orange/widgets/utils/tests/test_state_summary.py\n+++ b/Orange/widgets/utils/tests/test_state_summary.py\n@@ -4,9 +4,9 @@ from collections import namedtuple\n \n import numpy as np\n \n-from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.data import Table, Domain, StringVariable, ContinuousVariable, \\\n     DiscreteVariable, TimeVariable\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n VarDataPair = namedtuple('VarDataPair', ['variable', 'data'])\n \n@@ -40,10 +40,12 @@ ints_missing = VarDataPair(\n     np.array([0, 1, 1, np.nan, 2], dtype=float),\n )\n \n+\n def _to_timestamps(years):\n     return [datetime.datetime(year, 1, 1).timestamp() if not np.isnan(year)\n             else np.nan for year in years]\n \n+\n time_full = VarDataPair(\n     TimeVariable('time_full'),\n     np.array(_to_timestamps([2000, 2001, 2002, 2003, 2004]), dtype=float),\n@@ -103,7 +105,7 @@ class TestUtils(unittest.TestCase):\n         data = Table('zoo')\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = f'{len(data)} instances, ' \\\n-                  f'{n_features} features\\n' \\\n+                  f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} categorical\\n' \\\n                   f'Target: categorical\\n' \\\n                   f'Metas: string (not shown)'\n@@ -112,7 +114,7 @@ class TestUtils(unittest.TestCase):\n         data = Table('housing')\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = f'{len(data)} instances, ' \\\n-                  f'{n_features} features\\n' \\\n+                  f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} numeric\\n' \\\n                   f'Target: numeric\\n' \\\n                   f'Metas: \u2014'\n@@ -121,7 +123,7 @@ class TestUtils(unittest.TestCase):\n         data = Table('heart_disease')\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = f'{len(data)} instances, ' \\\n-                  f'{n_features} features\\n' \\\n+                  f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} ' \\\n                   f'(7 categorical, 6 numeric)\\n' \\\n                   f'Target: categorical\\n' \\\n@@ -134,7 +136,7 @@ class TestUtils(unittest.TestCase):\n         )\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = f'{len(data)} instances, ' \\\n-                  f'{n_features} features\\n' \\\n+                  f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} numeric\\n' \\\n                   f'Target: {len(data.domain.class_vars)} categorical\\n' \\\n                   f'Metas: {len(data.domain.metas)} categorical'\n@@ -147,7 +149,7 @@ class TestUtils(unittest.TestCase):\n         )\n         n_features = len(data.domain.variables) + len(data.domain.metas)\n         details = f'{len(data)} instances, ' \\\n-                  f'{n_features} features\\n' \\\n+                  f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} ' \\\n                   f'(2 categorical, 1 numeric, 1 time)\\n' \\\n                   f'Target: {len(data.domain.class_vars)} ' \\\n@@ -158,15 +160,15 @@ class TestUtils(unittest.TestCase):\n         data = make_table([time_full, time_missing], target=[ints_missing],\n                           metas=None)\n         details = f'{len(data)} instances, ' \\\n-                  f'{len(data.domain.variables)} features\\n' \\\n-                  f'Features: {len(data.domain.attributes)} time\\n'\\\n+                  f'{len(data.domain.variables)} variables\\n' \\\n+                  f'Features: {len(data.domain.attributes)} time\\n' \\\n                   f'Target: categorical\\n' \\\n                   f'Metas: \u2014'\n         self.assertEqual(details, format_summary_details(data))\n \n         data = make_table([rgb_full, ints_full], target=None, metas=None)\n         details = f'{len(data)} instances, ' \\\n-                  f'{len(data.domain.variables)} features\\n' \\\n+                  f'{len(data.domain.variables)} variables\\n' \\\n                   f'Features: {len(data.domain.variables)} categorical\\n' \\\n                   f'Target: \u2014\\n' \\\n                   f'Metas: \u2014'\n@@ -174,7 +176,7 @@ class TestUtils(unittest.TestCase):\n \n         data = make_table([rgb_full], target=None, metas=None)\n         details = f'{len(data)} instances, ' \\\n-                  f'{len(data.domain.variables)} feature\\n' \\\n+                  f'{len(data.domain.variables)} variable\\n' \\\n                   f'Features: categorical\\n' \\\n                   f'Target: \u2014\\n' \\\n                   f'Metas: \u2014'\n@@ -182,3 +184,7 @@ class TestUtils(unittest.TestCase):\n \n         data = None\n         self.assertEqual('', format_summary_details(data))\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4492.0, "instance_id": "biolab__orange3-4492", "issue_numbers": 0, "base_commit": "1069c4f2dd4f7e9a34f6be9002c72ff56380ee35", "patch": "diff --git a/Orange/widgets/data/owdatasampler.py b/Orange/widgets/data/owdatasampler.py\nindex 74174d541..a012b0ed6 100644\n--- a/Orange/widgets/data/owdatasampler.py\n+++ b/Orange/widgets/data/owdatasampler.py\n@@ -11,6 +11,7 @@ from Orange.widgets.settings import Setting\n from Orange.data import Table\n from Orange.data.sql.table import SqlTable\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Msg, OWWidget, Input, Output\n from Orange.util import Reprable\n \n@@ -179,14 +180,14 @@ class OWDataSampler(OWWidget):\n             self.cb_seed.setVisible(not sql)\n             self.cb_stratify.setVisible(not sql)\n             self.cb_sql_dl.setVisible(sql)\n-            self.info.set_input_summary(str(len(dataset)))\n+            self.info.set_input_summary(len(dataset),\n+                                        format_summary_details(dataset))\n \n             if not sql:\n                 self._update_sample_max_size()\n                 self.updateindices()\n         else:\n             self.info.set_input_summary(self.info.NoInput)\n-            self.info.set_output_summary(self.info.NoInput)\n             self.indices = None\n             self.clear_messages()\n         self.commit()\n@@ -224,12 +225,16 @@ class OWDataSampler(OWWidget):\n                 remaining, sample = self.indices\n             elif self.sampling_type == self.CrossValidation:\n                 remaining, sample = self.indices[self.selectedFold - 1]\n-            self.info.set_output_summary(str(len(sample)))\n \n             sample = self.data[sample]\n             other = self.data[remaining]\n             self.sampled_instances = len(sample)\n             self.remaining_instances = len(other)\n+\n+        summary = len(sample) if sample else self.info.NoOutput\n+        details = format_summary_details(sample) if sample else \"\"\n+        self.info.set_output_summary(summary, details)\n+\n         self.Outputs.data_sample.send(sample)\n         self.Outputs.remaining_data.send(other)\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasampler.py b/Orange/widgets/data/tests/test_owdatasampler.py\nindex 2c4d290ee..53c016cbc 100644\n--- a/Orange/widgets/data/tests/test_owdatasampler.py\n+++ b/Orange/widgets/data/tests/test_owdatasampler.py\n@@ -5,6 +5,7 @@ from unittest.mock import Mock\n from Orange.data import Table\n from Orange.widgets.data.owdatasampler import OWDataSampler\n from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWDataSampler(WidgetTest):\n@@ -38,7 +39,6 @@ class TestOWDataSampler(WidgetTest):\n         self.assertTrue(self.widget.Warning.could_not_stratify.is_shown())\n \n     def test_bootstrap(self):\n-        output_sum = self.widget.info.set_output_summary = Mock()\n         self.select_sampling_type(self.widget.Bootstrap)\n \n         self.send_signal(\"Data\", self.iris)\n@@ -59,8 +59,6 @@ class TestOWDataSampler(WidgetTest):\n         # high probability (1-(1/150*2/150*...*150/150) ~= 1-2e-64)\n         self.assertGreater(len(in_sample), 0)\n         self.assertGreater(len(in_remaining), 0)\n-        #Check if status bar shows correct number of output data\n-        output_sum.assert_called_with(str(len(sample)))\n \n     def select_sampling_type(self, sampling_type):\n         buttons = self.widget.controls.sampling_type.group.buttons()\n@@ -68,11 +66,9 @@ class TestOWDataSampler(WidgetTest):\n \n     def test_no_intersection_in_outputs(self):\n         \"\"\" Check whether outputs intersect and whether length of outputs sums\n-        to length of original data and\n-        if status bar displays correct output for each sampling type\"\"\"\n+        to length of original data\"\"\"\n         self.send_signal(\"Data\", self.iris)\n         w = self.widget\n-        output_sum = self.widget.info.set_output_summary = Mock()\n         sampling_types = [w.FixedProportion, w.FixedSize, w.CrossValidation]\n \n         for replicable in [True, False]:\n@@ -87,7 +83,6 @@ class TestOWDataSampler(WidgetTest):\n                     other = self.get_output(\"Remaining Data\")\n                     self.assertEqual(len(self.iris), len(sample) + len(other))\n                     self.assertNoIntersection(sample, other)\n-                    output_sum.assert_called_with(str(len(sample)))\n \n     def test_bigger_size_with_replacement(self):\n         \"\"\"Allow bigger output without replacement.\"\"\"\n@@ -126,17 +121,23 @@ class TestOWDataSampler(WidgetTest):\n \n     def test_summary(self):\n         \"\"\"Check if status bar is updated when data is received\"\"\"\n-        input_sum = self.widget.info.set_input_summary = Mock()\n         data = self.iris\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n \n-        input_sum.reset_mock()\n-        self.send_signal(self.widget.Inputs.data, data[:])\n-        input_sum.assert_called_with(\"150\")\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.data_sample)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n \n         input_sum.reset_mock()\n+        output_sum.reset_mock()\n         self.send_signal(self.widget.Inputs.data, None)\n         input_sum.assert_called_once()\n         self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n \n     def set_fixed_sample_size(self, sample_size, with_replacement=False):\n         \"\"\"Set fixed sample size and return the number of gui spin.\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4708.0, "instance_id": "biolab__orange3-4708", "issue_numbers": 0, "base_commit": "d56fad8e69876152f102a928e9b17ce6b29abe73", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex c6aae7dda..7716d187c 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1242,7 +1242,10 @@ class Table(Sequence, Storage):\n         def get_col_indices():\n             cols = chain(self.domain.variables, self.domain.metas)\n             if isinstance(filter, IsDefined):\n-                return list(cols)\n+                if filter.columns is not None:\n+                    return list(filter.columns)\n+                else:\n+                    return list(cols)\n \n             if filter.column is not None:\n                 return [filter.column]\n@@ -1282,11 +1285,14 @@ class Table(Sequence, Storage):\n \n         col_indices = get_col_indices()\n         if len(col_indices) == 1:\n-            return col_filter(col_indices[0])\n+            sel = col_filter(col_indices[0])\n+        else:\n+            sel = np.ones(len(self), dtype=bool)\n+            for col_idx in col_indices:\n+                sel *= col_filter(col_idx)\n \n-        sel = np.ones(len(self), dtype=bool)\n-        for col_idx in col_indices:\n-            sel *= col_filter(col_idx)\n+        if isinstance(filter, IsDefined) and filter.negate:\n+            sel = ~sel\n         return sel\n \n     def _discrete_filter_to_indicator(self, filter, col):\n.", "test_patch": "diff --git a/Orange/data/tests/test_table.py b/Orange/data/tests/test_table.py\nindex 8a4a279a7..37b40af10 100644\n--- a/Orange/data/tests/test_table.py\n+++ b/Orange/data/tests/test_table.py\n@@ -131,6 +131,22 @@ class TestTableFilters(unittest.TestCase):\n         filtered = val_filter(self.table)\n         self.assertEqual(list(filtered.metas[:, -2].flatten()), list(\"abcdef\"))\n \n+        val_filter = Values([IsDefined()])\n+        filtered = val_filter(self.table)\n+        self.assertEqual(list(filtered.metas[:, -2].flatten()), list(\"ab\"))\n+\n+        val_filter = Values([IsDefined(negate=True)])\n+        filtered = val_filter(self.table)\n+        self.assertEqual(list(filtered.metas[:, -2].flatten()), list(\"cdefg\"))\n+\n+        val_filter = Values([IsDefined([\"c1\"])])\n+        filtered = val_filter(self.table)\n+        self.assertEqual(list(filtered.metas[:, -2].flatten()), list(\"abdefg\"))\n+\n+        val_filter = Values([IsDefined([\"c1\"], negate=True)])\n+        filtered = val_filter(self.table)\n+        self.assertEqual(list(filtered.metas[:, -2].flatten()), list(\"c\"))\n+\n     def test_row_filter_no_discrete(self):\n         val_filter = Values([FilterDiscrete(None, \"a\")])\n         self.assertRaises(ValueError, val_filter, self.table)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5233.0, "instance_id": "biolab__orange3-5233", "issue_numbers": 0, "base_commit": "2d216ee508593456e83cc1ed4c06258e72b0aa14", "patch": "diff --git a/Orange/widgets/data/owtable.py b/Orange/widgets/data/owtable.py\nindex 505145276..4e13adf4e 100644\n--- a/Orange/widgets/data/owtable.py\n+++ b/Orange/widgets/data/owtable.py\n@@ -196,6 +196,8 @@ class OWDataTable(OWWidget):\n     selected_rows = Setting([], schema_only=True)\n     selected_cols = Setting([], schema_only=True)\n \n+    settings_version = 2\n+\n     def __init__(self):\n         super().__init__()\n \n@@ -739,9 +741,9 @@ class OWDataTable(OWWidget):\n                 metas = select_vars(TableModel.Meta)\n                 domain = Orange.data.Domain(attrs, class_vars, metas)\n \n-            # Avoid a copy if none rows are selected.\n+            # Send all data by default\n             if not rowsel:\n-                selected_data = None\n+                selected_data = table\n             else:\n                 selected_data = table.from_table(domain, table, rowsel)\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owtable.py b/Orange/widgets/data/tests/test_owtable.py\nindex febbf9b6e..e4018c159 100644\n--- a/Orange/widgets/data/tests/test_owtable.py\n+++ b/Orange/widgets/data/tests/test_owtable.py\n@@ -19,7 +19,8 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n     @classmethod\n     def setUpClass(cls):\n         super().setUpClass()\n-        WidgetOutputsTestMixin.init(cls)\n+        WidgetOutputsTestMixin.init(cls,\n+                                    output_all_on_no_selection=True)\n \n         cls.signal_name = \"Data\"\n         cls.signal_data = cls.data  # pylint: disable=no-member\n@@ -130,8 +131,8 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n         summary, details = f\"{len(data)}\", format_summary_details(data)\n         self.assertEqual(info._StateInfo__input_summary.brief, summary)\n         self.assertEqual(info._StateInfo__input_summary.details, details)\n-        self.assertIsInstance(info._StateInfo__output_summary, StateInfo.Empty)\n-        self.assertEqual(info._StateInfo__output_summary.details, no_output)\n+        self.assertEqual(info._StateInfo__output_summary.brief, summary)\n+        self.assertEqual(info._StateInfo__output_summary.details, details)\n         self.widget.tabs.currentWidget().selectAll()\n         output = self.get_output(self.widget.Outputs.selected_data)\n         summary, details = f\"{len(output)}\", format_summary_details(output)\n@@ -143,8 +144,8 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n         summary, details = f\"{len(data)}\", format_summary_details(data)\n         self.assertEqual(info._StateInfo__input_summary.brief, summary)\n         self.assertEqual(info._StateInfo__input_summary.details, details)\n-        self.assertIsInstance(info._StateInfo__output_summary, StateInfo.Empty)\n-        self.assertEqual(info._StateInfo__output_summary.details, no_output)\n+        self.assertEqual(info._StateInfo__output_summary.brief, summary)\n+        self.assertEqual(info._StateInfo__output_summary.details, details)\n         self._select_data()\n         output = self.get_output(self.widget.Outputs.selected_data)\n         summary, details = f\"{len(output)}\", format_summary_details(output)\ndiff --git a/Orange/widgets/tests/base.py b/Orange/widgets/tests/base.py\nindex fa1a74dee..7075fcb51 100644\n--- a/Orange/widgets/tests/base.py\n+++ b/Orange/widgets/tests/base.py\n@@ -500,10 +500,11 @@ class WidgetOutputsTestMixin:\n     _compare_selected_annotated_domains.\n     \"\"\"\n \n-    def init(self, same_table_attributes=True):\n+    def init(self, same_table_attributes=True, output_all_on_no_selection=False):\n         self.data = Table(\"iris\")\n         self.same_input_output_domain = True\n         self.same_table_attributes = same_table_attributes\n+        self.output_all_on_no_selection = output_all_on_no_selection\n \n     def test_outputs(self, timeout=DEFAULT_TIMEOUT):\n         self.send_signal(self.signal_name, self.signal_data)\n@@ -511,7 +512,11 @@ class WidgetOutputsTestMixin:\n         self.wait_until_finished(timeout=timeout)\n \n         # check selected data output\n-        self.assertIsNone(self.get_output(\"Selected Data\"))\n+        output = self.get_output(\"Selected Data\")\n+        if self.output_all_on_no_selection:\n+            self.assertEqual(output, self.signal_data)\n+        else:\n+            self.assertIsNone(output)\n \n         # check annotated data output\n         feature_name = ANNOTATED_DATA_FEATURE_NAME\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4957.0, "instance_id": "biolab__orange3-4957", "issue_numbers": 0, "base_commit": "732f2eeaa70264ab4c93be7fcea4270db0402cd2", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 21d03ed65..34e9caff6 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -353,12 +353,15 @@ class Variable(Reprable, metaclass=VariableMeta):\n         var1 = self._get_identical_source(self)\n         var2 = self._get_identical_source(other)\n         # pylint: disable=protected-access\n-        return var1.name == var2.name \\\n-               and var1._compute_value == var2._compute_value\n+        return (\n+            self.name == other.name\n+            and var1.name == var2.name\n+            and var1._compute_value == var2._compute_value\n+        )\n \n     def __hash__(self):\n         var = self._get_identical_source(self)\n-        return hash((var.name, type(self), var._compute_value))\n+        return hash((self.name, var.name, type(self), var._compute_value))\n \n     @staticmethod\n     def _get_identical_source(var):\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex a0109c47e..c19c2616b 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -215,18 +215,25 @@ class TestVariable(unittest.TestCase):\n \n     def test_hash_eq(self):\n         a = ContinuousVariable(\"a\")\n+        a1 = ContinuousVariable(\"a\")\n         b1 = ContinuousVariable(\"b\", compute_value=Identity(a))\n         b2 = ContinuousVariable(\"b2\", compute_value=Identity(b1))\n         b3 = ContinuousVariable(\"b\")\n-        self.assertEqual(a, b2)\n-        self.assertEqual(b1, b2)\n-        self.assertEqual(a, b1)\n+        c1 = ContinuousVariable(\"c\", compute_value=Identity(a))\n+        c2 = ContinuousVariable(\"c\", compute_value=Identity(a))\n+        self.assertNotEqual(a, b2)\n+        self.assertNotEqual(b1, b2)\n+        self.assertNotEqual(a, b1)\n         self.assertNotEqual(b1, b3)\n+        self.assertEqual(a, a1)\n+        self.assertEqual(c1, c2)\n \n-        self.assertEqual(hash(a), hash(b2))\n-        self.assertEqual(hash(b1), hash(b2))\n-        self.assertEqual(hash(a), hash(b1))\n+        self.assertNotEqual(hash(a), hash(b2))\n+        self.assertNotEqual(hash(b1), hash(b2))\n+        self.assertNotEqual(hash(a), hash(b1))\n         self.assertNotEqual(hash(b1), hash(b3))\n+        self.assertEqual(hash(a), hash(a1))\n+        self.assertEqual(hash(c1), hash(c2))\n \n \n def variabletest(varcls):\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4740.0, "instance_id": "biolab__orange3-4740", "issue_numbers": 0, "base_commit": "cbe18566e0554244e6b237116e3da6ee61b28def", "patch": "diff --git a/Orange/widgets/data/owselectrows.py b/Orange/widgets/data/owselectrows.py\nindex a31606c65..b54ae8a12 100644\n--- a/Orange/widgets/data/owselectrows.py\n+++ b/Orange/widgets/data/owselectrows.py\n@@ -80,13 +80,30 @@ class SelectRowsContextHandler(DomainContextHandler):\n         conditions = context.values[\"conditions\"]\n         all_vars = attrs.copy()\n         all_vars.update(metas)\n-        # Use this after 2022/2/2:\n-        # if all(all_vars.get(name) == tpe for name, tpe, *_ in conditions):\n-        if all(all_vars.get(name) == tpe if len(rest) == 2 else name in all_vars\n-               for name, tpe, *rest in conditions):\n-            return 0.5\n+        matched = [all_vars.get(name) == tpe\n+                   # After 2022/2/2 remove this line:\n+                   if len(rest) == 2 else name in all_vars\n+                   for name, tpe, *rest in conditions]\n+        if any(matched):\n+            return 0.5 * sum(matched) / len(matched)\n         return self.NO_MATCH\n \n+    def filter_value(self, setting, data, domain, attrs, metas):\n+        if setting.name != \"conditions\":\n+            super().filter_value(setting, data, domain, attrs, metas)\n+            return\n+\n+        all_vars = attrs.copy()\n+        all_vars.update(metas)\n+        conditions = data[\"conditions\"]\n+        # Use this after 2022/2/2: if any(all_vars.get(name) == tpe:\n+        # conditions[:] = [(name, tpe, *rest) for name, tpe, *rest in conditions\n+        #                  if all_vars.get(name) == tpe]\n+        conditions[:] = [\n+            (name, tpe, *rest) for name, tpe, *rest in conditions\n+            if (all_vars.get(name) == tpe if len(rest) == 2\n+                else name in all_vars)]\n+\n \n class FilterDiscreteType(enum.Enum):\n     Equal = \"Equal\"\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectrows.py b/Orange/widgets/data/tests/test_owselectrows.py\nindex b3a04178a..bdbee4bd9 100644\n--- a/Orange/widgets/data/tests/test_owselectrows.py\n+++ b/Orange/widgets/data/tests/test_owselectrows.py\n@@ -191,6 +191,20 @@ class TestOWSelectRows(WidgetTest):\n         self.assertEqual(condition[1], 2)\n         self.assertTrue(condition[2][0].startswith(\"5.2\"))\n \n+    @override_locale(QLocale.C)\n+    def test_partial_matches_with_missing_vars(self):\n+        iris = Table(\"iris\")\n+        domain = iris.domain\n+        self.widget = self.widget_with_context(\n+            domain, [[domain[0].name, 2, (\"5.2\",)],\n+                     [domain[2].name, 2, (\"4.2\",)]])\n+        iris2 = iris.transform(Domain(domain.attributes[2:], None))\n+        self.send_signal(self.widget.Inputs.data, iris2)\n+        condition = self.widget.conditions[0]\n+        self.assertEqual(condition[0], domain[2].name)\n+        self.assertEqual(condition[1], 2)\n+        self.assertTrue(condition[2][0].startswith(\"4.2\"))\n+\n     def test_load_settings(self):\n         iris = Table(\"iris\")[:5]\n         self.send_signal(self.widget.Inputs.data, iris)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5819.0, "instance_id": "biolab__orange3-5819", "issue_numbers": 0, "base_commit": "2b857a37ba363b0472d2666ca8f77e3f9b70601a", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex af1189cf9..cec860c36 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -870,7 +870,7 @@ class TimeVariable(ContinuousVariable):\n \n     If time is specified without a date, Unix epoch is assumed.\n \n-    If time is specified wihout an UTC offset, localtime is assumed.\n+    If time is specified without an UTC offset, localtime is assumed.\n     \"\"\"\n     _all_vars = {}\n     TYPE_HEADERS = ('time', 't')\n@@ -923,15 +923,86 @@ class TimeVariable(ContinuousVariable):\n              r'\\d{1,4}(-?\\d{2,3})?'\n              r')$')\n \n+    ADDITIONAL_FORMATS = {\n+        \"2021-11-25\": ((\"%Y-%m-%d\",), 1, 0),\n+        \"25.11.2021\": ((\"%d.%m.%Y\", \"%d. %m. %Y\"), 1, 0),\n+        \"25.11.21\": ((\"%d.%m.%y\", \"%d. %m. %y\"), 1, 0),\n+        \"11/25/2021\": ((\"%m/%d/%Y\",), 1, 0),\n+        \"11/25/21\": ((\"%m/%d/%y\",), 1, 0),\n+        \"20211125\": ((\"%Y%m%d\",), 1, 0),\n+        # it would be too many options if we also include all time formats with\n+        # with lengths up to minutes, up to seconds and up to milliseconds,\n+        # joining all tree options under 00:00:00\n+        \"2021-11-25 00:00:00\": (\n+            (\n+                \"%Y-%m-%d %H:%M\",\n+                \"%Y-%m-%d %H:%M:%S\",\n+                \"%Y-%m-%d %H:%M:%S.%f\",\n+            ),\n+            1,\n+            1,\n+        ),\n+        \"25.11.2021 00:00:00\": (\n+            (\n+                \"%d.%m.%Y %H:%M\",\n+                \"%d. %m. %Y %H:%M\",\n+                \"%d.%m.%Y %H:%M:%S\",\n+                \"%d. %m. %Y %H:%M:%S\",\n+                \"%d.%m.%Y %H:%M:%S.%f\",\n+                \"%d. %m. %Y %H:%M:%S.%f\",\n+            ),\n+            1,\n+            1,\n+        ),\n+        \"25.11.21 00:00:00\": (\n+            (\n+                \"%d.%m.%y %H:%M\",\n+                \"%d. %m. %y %H:%M\",\n+                \"%d.%m.%y %H:%M:%S\",\n+                \"%d. %m. %y %H:%M:%S\",\n+                \"%d.%m.%y %H:%M:%S.%f\",\n+                \"%d. %m. %y %H:%M:%S.%f\",\n+            ),\n+            1,\n+            1,\n+        ),\n+        \"11/25/2021 00:00:00\": (\n+            (\n+                \"%m/%d/%Y %H:%M\",\n+                \"%m/%d/%Y %H:%M:%S\",\n+                \"%m/%d/%Y %H:%M:%S.%f\",\n+            ),\n+            1,\n+            1,\n+        ),\n+        \"11/25/21 00:00:00\": (\n+            (\n+                \"%m/%d/%y %H:%M\",\n+                \"%m/%d/%y %H:%M:%S\",\n+                \"%m/%d/%y %H:%M:%S.%f\",\n+            ),\n+            1,\n+            1,\n+        ),\n+        \"20211125000000\": ((\"%Y%m%d%H%M\", \"%Y%m%d%H%M%S\", \"%Y%m%d%H%M%S.%f\"), 1, 1),\n+        \"00:00:00\": ((\"%H:%M\", \"%H:%M:%S\", \"%H:%M:%S.%f\"), 0, 1),\n+        \"000000\": ((\"%H%M\", \"%H%M%S\", \"%H%M%S.%f\"), 0, 1),\n+        \"2021\": ((\"%Y\",), 1, 0),\n+        \"11-25\": ((\"%m-%d\",), 1, 0),\n+        \"25.11.\": ((\"%d.%m.\", \"%d. %m.\"), 1, 0),\n+        \"11/25\": ((\"%m/%d\",), 1, 0),\n+        \"1125\": ((\"%m%d\",), 1, 0),\n+    }\n+\n     class InvalidDateTimeFormatError(ValueError):\n         def __init__(self, date_string):\n             super().__init__(\n-                \"Invalid datetime format '{}'. \"\n-                \"Only ISO 8601 supported.\".format(date_string))\n+                f\"Invalid datetime format '{date_string}'. Only ISO 8601 supported.\"\n+            )\n \n     _matches_iso_format = re.compile(REGEX).match\n \n-    # If parsed datetime values provide an offset or timzone, it is used for display. \n+    # If parsed datetime values provide an offset or timzone, it is used for display.\n     # If not all values have the same offset, +0000 (=UTC) timezone is used\n     _timezone = None\n \n@@ -1011,6 +1082,7 @@ class TimeVariable(ContinuousVariable):\n         \"\"\"\n         if datestr in MISSING_VALUES:\n             return Unknown\n+\n         datestr = datestr.strip().rstrip('Z')\n         datestr = self._tzre_sub(datestr)\n \n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex b732e6117..22d2f12ed 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -13,6 +13,7 @@ from datetime import datetime, timezone\n from io import StringIO\n \n import numpy as np\n+import pandas as pd\n import scipy.sparse as sp\n \n from Orange.data import Variable, ContinuousVariable, DiscreteVariable, \\\n@@ -698,6 +699,117 @@ time,continuous\n         var.have_time = 1\n         return var\n \n+    def test_additional_formats(self):\n+        expected_date = datetime(2022, 2, 7)\n+        dates = {\n+            \"2021-11-25\": (\"2022-02-07\",),\n+            \"25.11.2021\": (\"07.02.2022\", \"07. 02. 2022\", \"7.2.2022\", \"7. 2. 2022\"),\n+            \"25.11.21\": (\"07.02.22\", \"07. 02. 22\", \"7.2.22\", \"7. 2. 22\"),\n+            \"11/25/2021\": (\"02/07/2022\", \"2/7/2022\"),\n+            \"11/25/21\": (\"02/07/22\", \"2/7/22\"),\n+            \"20211125\": (\"20220207\",),\n+        }\n+        expected_date_time = datetime(2022, 2, 7, 10, 11, 12)\n+        date_times = {\n+            \"2021-11-25 00:00:00\": (\n+                \"2022-02-07 10:11:12\",\n+                \"2022-02-07 10:11:12.00\",\n+            ),\n+            \"25.11.2021 00:00:00\": (\n+                \"07.02.2022 10:11:12\",\n+                \"07. 02. 2022 10:11:12\",\n+                \"7.2.2022 10:11:12\",\n+                \"7. 2. 2022 10:11:12\",\n+                \"07.02.2022 10:11:12.00\",\n+                \"07. 02. 2022 10:11:12.00\",\n+                \"7.2.2022 10:11:12.00\",\n+                \"7. 2. 2022 10:11:12.00\",\n+            ),\n+            \"25.11.21 00:00:00\": (\n+                \"07.02.22 10:11:12\",\n+                \"07. 02. 22 10:11:12\",\n+                \"7.2.22 10:11:12\",\n+                \"7. 2. 22 10:11:12\",\n+                \"07.02.22 10:11:12.00\",\n+                \"07. 02. 22 10:11:12.00\",\n+                \"7.2.22 10:11:12.00\",\n+                \"7. 2. 22 10:11:12.00\",\n+            ),\n+            \"11/25/2021 00:00:00\": (\n+                \"02/07/2022 10:11:12\",\n+                \"2/7/2022 10:11:12\",\n+                \"02/07/2022 10:11:12.00\",\n+                \"2/7/2022 10:11:12.00\",\n+            ),\n+            \"11/25/21 00:00:00\": (\n+                \"02/07/22 10:11:12\",\n+                \"2/7/22 10:11:12\",\n+                \"02/07/22 10:11:12.00\",\n+                \"2/7/22 10:11:12.00\",\n+            ),\n+            \"20211125000000\": (\"20220207101112\", \"20220207101112.00\"),\n+        }\n+        # times without seconds\n+        expected_date_time2 = datetime(2022, 2, 7, 10, 11, 0)\n+        date_times2 = {\n+            \"2021-11-25 00:00:00\": (\"2022-02-07 10:11\",),\n+            \"25.11.2021 00:00:00\": (\n+                \"07.02.2022 10:11\",\n+                \"07. 02. 2022 10:11\",\n+                \"7.2.2022 10:11\",\n+                \"7. 2. 2022 10:11\",\n+            ),\n+            \"25.11.21 00:00:00\": (\n+                \"07.02.22 10:11\",\n+                \"07. 02. 22 10:11\",\n+                \"7.2.22 10:11\",\n+                \"7. 2. 22 10:11\",\n+            ),\n+            \"11/25/2021 00:00:00\": (\"02/07/2022 10:11\", \"2/7/2022 10:11\"),\n+            \"11/25/21 00:00:00\": (\"02/07/22 10:11\", \"2/7/22 10:11\"),\n+            \"20211125000000\": (\"202202071011\",),\n+        }\n+        # datetime defaults to 1900, 01, 01\n+        expected_time = datetime(1900, 1, 1, 10, 11, 12)\n+        times = {\n+            \"00:00:00\": (\"10:11:12\", \"10:11:12.00\"),\n+            \"000000\": (\"101112\", \"101112.00\"),\n+        }\n+        expected_time2 = datetime(1900, 1, 1, 10, 11, 0)\n+        times2 = {\n+            \"00:00:00\": (\"10:11\",),\n+        }\n+        expected_year = datetime(2022, 1, 1)\n+        years = {\n+            \"2021\": (2022,),\n+        }\n+        expected_day = datetime(1900, 2, 7)\n+        days = {\n+            \"11-25\": (\"02-07\",),\n+            \"25.11.\": (\"07.02.\", \"07. 02.\", \"7.2.\", \"7. 2.\"),\n+            \"11/25\": (\"02/07\", \"2/7\"),\n+        }\n+        data = (\n+            (expected_date, dates),\n+            (expected_date_time, date_times),\n+            (expected_date_time2, date_times2),\n+            (expected_time, times),\n+            (expected_time2, times2),\n+            (expected_year, years),\n+            (expected_day, days),\n+        )\n+        for expected, dts in data:\n+            for k, dt in dts.items():\n+                for t in dt:\n+                    parsed = [\n+                        pd.to_datetime(t, format=f, errors=\"coerce\")\n+                        for f in TimeVariable.ADDITIONAL_FORMATS[k][0]\n+                    ]\n+                    # test any equal to expected\n+                    self.assertTrue(any(d == expected for d in parsed))\n+                    # test that no other equal to any other date - only nan or expected\n+                    self.assertTrue(any(d == expected or pd.isnull(d) for d in parsed))\n+\n \n PickleContinuousVariable = create_pickling_tests(\n     \"PickleContinuousVariable\",\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4421.0, "instance_id": "biolab__orange3-4421", "issue_numbers": 0, "base_commit": "9a100f34ba0865a7d9b8b88ad328fac1f0ea1c2d", "patch": "diff --git a/Orange/widgets/unsupervised/owlouvainclustering.py b/Orange/widgets/unsupervised/owlouvainclustering.py\nindex 18f322a6f..5b9fdc571 100644\n--- a/Orange/widgets/unsupervised/owlouvainclustering.py\n+++ b/Orange/widgets/unsupervised/owlouvainclustering.py\n@@ -50,6 +50,8 @@ class OWLouvainClustering(widget.OWWidget):\n     icon = \"icons/LouvainClustering.svg\"\n     priority = 2110\n \n+    settings_version = 2\n+\n     want_main_area = False\n     resizing_enabled = False\n \n@@ -466,6 +468,20 @@ class OWLouvainClustering(widget.OWWidget):\n             (\"Resolution\", self.resolution),\n         ))\n \n+    @classmethod\n+    def migrate_settings(cls, settings, version):\n+        if version < 2 and \"context_settings\" in settings:\n+            try:\n+                current_context = settings[\"context_settings\"][0]\n+                for n in ['apply_pca', 'k_neighbors', 'metric_idx',\n+                          'normalize', 'pca_components', 'resolution']:\n+                    if n in current_context.values:\n+                        settings[n] = current_context.values[n][0]\n+            except:  # pylint: disable=bare-except\n+                pass\n+            finally:\n+                del settings[\"context_settings\"]\n+\n \n class TaskState(QObject):\n \n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owlouvain.py b/Orange/widgets/unsupervised/tests/test_owlouvain.py\nindex 397e1f597..44e82b959 100644\n--- a/Orange/widgets/unsupervised/tests/test_owlouvain.py\n+++ b/Orange/widgets/unsupervised/tests/test_owlouvain.py\n@@ -1,13 +1,15 @@\n from unittest.mock import patch\n \n import numpy as np\n+from sklearn.utils import check_random_state\n+\n+from orangewidget.settings import Context\n \n from Orange.data import Table, Domain, ContinuousVariable\n from Orange.preprocess import Normalize\n from Orange.widgets.tests.base import WidgetTest\n from Orange.widgets.tests.utils import table_dense_sparse\n from Orange.widgets.unsupervised.owlouvainclustering import OWLouvainClustering\n-from sklearn.utils import check_random_state\n \n # Deterministic tests\n np.random.seed(42)\n@@ -249,3 +251,22 @@ class TestOWLouvain(WidgetTest):\n         self.send_signal(w.Inputs.data, None)\n         graph = self.get_output(w.Outputs.graph)\n         self.assertIsNone(graph)\n+\n+    def test_migrate_settings(self):\n+        # any context settings are removed\n+        settings = {\"context_settings\": []}\n+        self.widget.migrate_settings(settings, 1)\n+        self.assertEqual(len(settings), 0)\n+\n+        # context settings become ordinary settings\n+        settings = {\"context_settings\": [Context(values={'__version__': 1,\n+                                                         'apply_pca': (True, -2),\n+                                                         'k_neighbors': (29, -2),\n+                                                         'metric_idx': (1, -2),\n+                                                         'normalize': (False, -2),\n+                                                         'pca_components': (10, -2),\n+                                                         'resolution': (1.0, -2)})]}\n+        self.widget.migrate_settings(settings, 1)\n+        correct = {'apply_pca': True, 'k_neighbors': 29, 'metric_idx': 1,\n+                   'normalize': False, 'pca_components': 10, 'resolution': 1.0}\n+        self.assertEqual(sorted(settings.items()), sorted(correct.items()))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3864.0, "instance_id": "biolab__orange3-3864", "issue_numbers": 0, "base_commit": "69f08be5533fc08832ff37508b1494ed56587c92", "patch": "diff --git a/Orange/preprocess/discretize.py b/Orange/preprocess/discretize.py\nindex 26c753c86..33c106a19 100644\n--- a/Orange/preprocess/discretize.py\n+++ b/Orange/preprocess/discretize.py\n@@ -6,7 +6,7 @@ import scipy.sparse as sp\n from Orange.data import DiscreteVariable, Domain\n from Orange.data.sql.table import SqlTable\n from Orange.preprocess.util import _RefuseDataInConstructor\n-from Orange.statistics import distribution, contingency\n+from Orange.statistics import distribution, contingency, util as ut\n from Orange.statistics.basic_stats import BasicStats\n from Orange.util import Reprable\n from .transformation import Transformation\n@@ -160,7 +160,7 @@ class EqualWidth(Discretization):\n             else:\n                 values = data[:, attribute]\n                 values = values.X if values.X.size else values.Y\n-                min, max = np.nanmin(values), np.nanmax(values)\n+                min, max = ut.nanmin(values), ut.nanmax(values)\n                 points = self._split_eq_width(min, max)\n         return Discretizer.create_discretized_var(\n             data.domain[attribute], points)\n.", "test_patch": "diff --git a/Orange/tests/test_discretize.py b/Orange/tests/test_discretize.py\nindex 9d35a0475..ff755cc58 100644\n--- a/Orange/tests/test_discretize.py\n+++ b/Orange/tests/test_discretize.py\n@@ -13,6 +13,9 @@ from Orange.data import Table, Instance, Domain, ContinuousVariable, DiscreteVar\n \n \n # noinspection PyPep8Naming\n+from Orange.widgets.tests.utils import table_dense_sparse\n+\n+\n class TestEqualFreq(TestCase):\n     def test_equifreq_with_too_few_values(self):\n         s = [0] * 50 + [1] * 50\n@@ -53,9 +56,10 @@ class TestEqualWidth(TestCase):\n         self.assertEqual(len(dvar.values), 4)\n         self.assertEqual(dvar.compute_value.points, [0.25, 0.5, 0.75])\n \n-    def test_equalwidth_100_to_4(self):\n+    @table_dense_sparse\n+    def test_equalwidth_100_to_4(self, prepare_table):\n         X = np.arange(101).reshape((101, 1))\n-        table = data.Table(X)\n+        table = prepare_table(data.Table(X))\n         disc = discretize.EqualWidth(n=4)\n         dvar = disc(table, table.domain[0])\n         self.assertEqual(len(dvar.values), 4)\ndiff --git a/Orange/widgets/visualize/tests/test_owdistributions.py b/Orange/widgets/visualize/tests/test_owdistributions.py\nindex 52782421c..ddd612ee2 100644\n--- a/Orange/widgets/visualize/tests/test_owdistributions.py\n+++ b/Orange/widgets/visualize/tests/test_owdistributions.py\n@@ -5,6 +5,7 @@ from Orange.data import Table, Domain, DiscreteVariable\n from Orange.data.table import dataset_dirs\n from Orange.tests import test_dirname\n from Orange.widgets.tests.base import WidgetTest, datasets\n+from Orange.widgets.tests.utils import table_dense_sparse\n from Orange.widgets.visualize.owdistributions import OWDistributions\n \n \n@@ -85,3 +86,15 @@ class TestOWDistributions(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, None)\n         cb.setChecked(True)\n         cb.click()\n+\n+    @table_dense_sparse\n+    def test_binning_numeric_variables(self, prepare_table):\n+        \"\"\"The widget should not crash when checking `Bin numeric variables`\"\"\"\n+        data = prepare_table(self.iris)\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        self.widget.controls.disc_cont.setChecked(True)\n+        self.wait_until_stop_blocking()\n+\n+        self.widget.controls.disc_cont.setChecked(False)\n+        self.wait_until_stop_blocking()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5037.0, "instance_id": "biolab__orange3-5037", "issue_numbers": 0, "base_commit": "ac714e7e2dfb8c24cd1f21a7b9538324cea94cab", "patch": "diff --git a/Orange/widgets/visualize/utils/customizableplot.py b/Orange/widgets/visualize/utils/customizableplot.py\nindex afdc0ecfa..f9655a268 100644\n--- a/Orange/widgets/visualize/utils/customizableplot.py\n+++ b/Orange/widgets/visualize/utils/customizableplot.py\n@@ -28,8 +28,11 @@ def available_font_families() -> List:\n     if not QApplication.instance():\n         _ = QApplication(sys.argv)\n     fonts = QFontDatabase().families()\n-    default = fonts.pop(fonts.index(default_font_family()))\n+    default = default_font_family()\n+\n     defaults = [default]\n+    if default in fonts:\n+        fonts.remove(default)\n \n     guessed_name = default.split()[0]\n     i = 0\n@@ -263,7 +266,7 @@ class CommonParameterSetter:\n                 self.getAxis(axis), settings[self.TITLE_LABEL])\n \n         self.FONT_FAMILY_SETTING: SettingsType = {  # pylint: disable=invalid-name\n-            Updater.FONT_FAMILY_LABEL: (available_font_families(), QFont().family()),\n+            Updater.FONT_FAMILY_LABEL: (available_font_families(), default_font_family()),\n         }\n \n         self.FONT_SETTING: SettingsType = {  # pylint: disable=invalid-name\n.", "test_patch": "diff --git a/Orange/widgets/visualize/utils/tests/test_customizableplot.py b/Orange/widgets/visualize/utils/tests/test_customizableplot.py\nnew file mode 100644\nindex 000000000..5863ced5f\n--- /dev/null\n+++ b/Orange/widgets/visualize/utils/tests/test_customizableplot.py\n@@ -0,0 +1,38 @@\n+import unittest\n+from unittest.mock import patch, Mock\n+\n+from Orange.widgets.visualize.utils import customizableplot\n+\n+\n+class TestFonts(unittest.TestCase):\n+    def test_available_font_families(self):\n+        with patch.object(customizableplot, \"QFont\") as font, \\\n+                patch.object(customizableplot, \"QFontDatabase\") as db:\n+            font.return_value = Mock()\n+            font.return_value.family = Mock(return_value=\"mock regular\")\n+\n+            db.return_value = Mock()\n+            db.return_value.families = Mock(\n+                return_value=[\"a\", \".d\", \"e\", \".b\", \"mock regular\", \"c\"])\n+            self.assertEqual(customizableplot.available_font_families(),\n+                             [\"mock regular\", \"\", \"a\", \".b\", \"c\", \".d\", \"e\"])\n+\n+            db.return_value = Mock()\n+            db.return_value.families = Mock(\n+                return_value=[\"a\", \".d\", \"e\", \".b\", \"mock regular\",\n+                              \"mock bold\", \"mock italic\", \"c\", \"mock semi\"])\n+            self.assertEqual(customizableplot.available_font_families(),\n+                             [\"mock regular\", \"mock bold\", \"mock italic\",\n+                              \"mock semi\", \"\",\n+                              \"a\", \".b\", \"c\", \".d\", \"e\"])\n+\n+            # It seems it's possible that default font family does not exist\n+            # (see gh-5036)\n+            db.return_value.families.return_value = [\"a\", \".d\", \"e\", \".b\", \"c\"]\n+            self.assertEqual(customizableplot.available_font_families(),\n+                             [\"mock regular\", \"\", \"a\", \".b\", \"c\", \".d\", \"e\"])\n+            self.assertIn(customizableplot.default_font_family(),\n+                          customizableplot.available_font_families())\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6213.0, "instance_id": "biolab__orange3-6213", "issue_numbers": 0, "base_commit": "b5d1acaf9b4d677ca012dd45587e81fc3edbe4f7", "patch": "diff --git a/Orange/preprocess/impute.py b/Orange/preprocess/impute.py\nindex 0affc62d4..c67c4a974 100644\n--- a/Orange/preprocess/impute.py\n+++ b/Orange/preprocess/impute.py\n@@ -213,7 +213,7 @@ class ReplaceUnknownsModel(Reprable):\n                and self.model == other.model\n \n     def __hash__(self):\n-        return hash((super().__hash__(), hash(self.variable), hash(self.model)))\n+        return hash((type(self), hash(self.variable), hash(self.model)))\n \n \n class Model(BaseImputeMethod):\n.", "test_patch": "diff --git a/Orange/preprocess/tests/test_impute.py b/Orange/preprocess/tests/test_impute.py\nindex 2eeaf0e9c..b2320cc42 100644\n--- a/Orange/preprocess/tests/test_impute.py\n+++ b/Orange/preprocess/tests/test_impute.py\n@@ -6,7 +6,8 @@ from Orange.data import \\\n     Domain, Table, \\\n     DiscreteVariable, ContinuousVariable, TimeVariable, StringVariable\n from Orange.preprocess.impute import ReplaceUnknownsRandom, ReplaceUnknowns, \\\n-    FixedValueByType\n+    FixedValueByType, ReplaceUnknownsModel\n+from Orange.regression import LinearRegressionLearner\n from Orange.statistics.distribution import Discrete\n \n \n@@ -111,5 +112,36 @@ class TestFixedValuesByType(unittest.TestCase):\n             \"bar\")\n \n \n+class TestReplaceUnknownsModel(unittest.TestCase):\n+    def test_eq(self):\n+        iris = Table(\"iris\")\n+\n+        v1 = iris.domain[0]\n+        v2 = iris.domain[0]\n+        v3 = iris.domain[1]\n+\n+        l = LinearRegressionLearner()\n+        def new_target(t):\n+            dom = Domain(iris.domain[2:], class_vars=[t])\n+            return iris.transform(dom)\n+\n+        mod1 = l(new_target(v1))\n+        t1 = ReplaceUnknownsModel(v1, mod1)\n+        t1a = ReplaceUnknownsModel(v2, mod1)\n+        t2 = ReplaceUnknownsModel(v3, l(new_target(v3)))\n+\n+        self.assertEqual(t1, t1)\n+        self.assertEqual(t1, t1a)\n+        self.assertNotEqual(t1, t2)\n+\n+        # the following should be equal, but will not be unless __eq__ for that\n+        # particular model is defined\n+        t1b = ReplaceUnknownsModel(v1, l(new_target(v1)))\n+        self.assertNotEqual(t1, t1b)  # this is WRONG\n+\n+        self.assertEqual(hash(t1), hash(t1a))\n+        self.assertNotEqual(hash(t1), hash(t2))\n+\n+\n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5478.0, "instance_id": "biolab__orange3-5478", "issue_numbers": 0, "base_commit": "cb661383764ffe0bfba7f47906d8c91c227215a4", "patch": "diff --git a/Orange/widgets/data/owcreateclass.py b/Orange/widgets/data/owcreateclass.py\nindex bbf200967..d05579c16 100644\n--- a/Orange/widgets/data/owcreateclass.py\n+++ b/Orange/widgets/data/owcreateclass.py\n@@ -152,9 +152,14 @@ def unique_in_order_mapping(a):\n     - unique elements of the input list (in the order of appearance)\n     - indices of the input list onto the returned uniques\n     \"\"\"\n-    u, idx, inv = np.unique(a, return_index=True, return_inverse=True)\n-    unique_in_order = u[np.argsort(idx)]\n-    mapping = np.argsort(idx)[inv]\n+    first_position = {}\n+    unique_in_order = []\n+    mapping = []\n+    for e in a:\n+        if e not in first_position:\n+            first_position[e] = len(unique_in_order)\n+            unique_in_order.append(e)\n+        mapping.append(first_position[e])\n     return unique_in_order, mapping\n \n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcreateclass.py b/Orange/widgets/data/tests/test_owcreateclass.py\nindex 640addd72..7419bbae4 100644\n--- a/Orange/widgets/data/tests/test_owcreateclass.py\n+++ b/Orange/widgets/data/tests/test_owcreateclass.py\n@@ -89,6 +89,15 @@ class TestHelpers(unittest.TestCase):\n         u, m = unique_in_order_mapping([2, 1, 2, 3])\n         np.testing.assert_equal(u, [2, 1, 3])\n         np.testing.assert_equal(m, [0, 1, 0, 2])\n+        u, m = unique_in_order_mapping([2, 3, 1])\n+        np.testing.assert_equal(u, [2, 3, 1])\n+        np.testing.assert_equal(m, [0, 1, 2])\n+        u, m = unique_in_order_mapping([2, 3, 1, 1])\n+        np.testing.assert_equal(u, [2, 3, 1])\n+        np.testing.assert_equal(m, [0, 1, 2, 2])\n+        u, m = unique_in_order_mapping([2, 3, 1, 2])\n+        np.testing.assert_equal(u, [2, 3, 1])\n+        np.testing.assert_equal(m, [0, 1, 2, 0])\n \n     def test_value_from_string_substring(self):\n         trans = ValueFromStringSubstring(StringVariable(\"x\"), self.patterns)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6564.0, "instance_id": "biolab__orange3-6564", "issue_numbers": 0, "base_commit": "4ddff4145bd75c22bb565664cd6bf4114e2e4624", "patch": "diff --git a/Orange/classification/naive_bayes.py b/Orange/classification/naive_bayes.py\nindex 2db384f91..83054b202 100644\n--- a/Orange/classification/naive_bayes.py\n+++ b/Orange/classification/naive_bayes.py\n@@ -98,7 +98,7 @@ class NaiveBayesModel(Model):\n         zeros = np.zeros((1, probs.shape[1]))\n         for col, attr_prob in zip(data.T, self.log_cont_prob):\n             col = col.copy()\n-            col[np.isnan(col)] = attr_prob.shape[1] - 1\n+            col[np.isnan(col)] = attr_prob.shape[1]\n             col = col.astype(int)\n             probs0 = np.vstack((attr_prob.T, zeros))\n             probs += probs0[col]\n.", "test_patch": "diff --git a/Orange/tests/test_naive_bayes.py b/Orange/tests/test_naive_bayes.py\nindex 9c20e76a7..b8c097796 100644\n--- a/Orange/tests/test_naive_bayes.py\n+++ b/Orange/tests/test_naive_bayes.py\n@@ -311,6 +311,32 @@ class TestNaiveBayesLearner(unittest.TestCase):\n         np.testing.assert_almost_equal(exp_probs, probs)\n         np.testing.assert_equal(values, np.argmax(exp_probs, axis=1))\n \n+    def test_predict_missing_attributes(self):\n+        x = np.array([\n+            [1, 0, 0],\n+            [0, 1, 0],\n+            [0, 0, 0],\n+            [0, 1, 0],\n+            [1, 1, 0],\n+            [1, 2, 0],\n+            [1, 2, np.nan]])\n+        y = np.array([1,0,0,0,1,1,1])\n+        domain = Domain(\n+            [DiscreteVariable(\"a\", values=\"ab\"),\n+             DiscreteVariable(\"b\", values=\"abc\"),\n+             DiscreteVariable(\"c\", values=\"a\")],\n+            DiscreteVariable(\"y\", values=\"AB\"))\n+        data = Table.from_numpy(domain, x, y)\n+\n+        model = self.learner(data)\n+        test_x = np.array([[np.nan, np.nan, np.nan],\n+                           [np.nan, 0, np.nan],\n+                           [0, np.nan, np.nan]])\n+        probs = model(test_x, ret=model.Probs)\n+        np.testing.assert_almost_equal(probs, [[(3+1)/(7+2), (4+1)/(7+2)],\n+                                               [(1+1)/(2+2), (1+1)/(2+2)],\n+                                               [(3+1)/(3+2), (0+1)/(3+2)]])\n+\n     def test_no_attributes(self):\n         y = np.array([0, 0, 0, 1, 1, 1, 2, 2])\n         domain = Domain([], DiscreteVariable(\"y\", values=\"abc\"))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4495.0, "instance_id": "biolab__orange3-4495", "issue_numbers": 0, "base_commit": "4462394d84f5c53e8982029ff6f53d3366483c8b", "patch": "diff --git a/Orange/widgets/data/owdiscretize.py b/Orange/widgets/data/owdiscretize.py\nindex edfe15ecb..6b4fdd750 100644\n--- a/Orange/widgets/data/owdiscretize.py\n+++ b/Orange/widgets/data/owdiscretize.py\n@@ -10,6 +10,7 @@ import Orange.preprocess.discretize as disc\n from Orange.widgets import widget, gui, settings\n from Orange.widgets.utils import itemmodels, vartype\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n \n __all__ = [\"OWDiscretize\"]\n@@ -260,7 +261,8 @@ class OWDiscretize(widget.OWWidget):\n             self._restore(self.saved_var_states)\n             # Complete the induction of cut points\n             self._update_points()\n-            self.info.set_input_summary(len(data))\n+            self.info.set_input_summary(len(data),\n+                                        format_summary_details(data))\n         else:\n             self.info.set_input_summary(self.info.NoInput)\n             self._clear()\n@@ -483,9 +485,10 @@ class OWDiscretize(widget.OWWidget):\n         if self.data is not None and len(self.data):\n             domain = self.discretized_domain()\n             output = self.data.transform(domain)\n-            self.info.set_output_summary(len(output))\n-        else:\n-            self.info.set_output_summary(self.info.NoOutput)\n+\n+        summary = len(output) if output else self.info.NoOutput\n+        details = format_summary_details(output) if output else \"\"\n+        self.info.set_output_summary(summary, details)\n         self.Outputs.data.send(output)\n \n     def storeSpecificSettings(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdiscretize.py b/Orange/widgets/data/tests/test_owdiscretize.py\nindex 2a148c394..de4b46892 100644\n--- a/Orange/widgets/data/tests/test_owdiscretize.py\n+++ b/Orange/widgets/data/tests/test_owdiscretize.py\n@@ -5,7 +5,7 @@ from unittest.mock import Mock\n from Orange.data import Table\n from Orange.widgets.data.owdiscretize import OWDiscretize\n from Orange.widgets.tests.base import WidgetTest\n-from orangewidget.widget import StateInfo\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWDiscretize(WidgetTest):\n@@ -28,9 +28,10 @@ class TestOWDiscretize(WidgetTest):\n \n         data = Table(\"iris\")\n         self.send_signal(self.widget.Inputs.data, data)\n-        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n         output = self.get_output(self.widget.Outputs.data)\n-        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n \n         input_sum.reset_mock()\n         output_sum.reset_mock()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4165.0, "instance_id": "biolab__orange3-4165", "issue_numbers": 0, "base_commit": "72934a290433cebf232929ae3dffe3da65f81b4d", "patch": "diff --git a/Orange/widgets/data/owdatasampler.py b/Orange/widgets/data/owdatasampler.py\nindex cda524f64..74174d541 100644\n--- a/Orange/widgets/data/owdatasampler.py\n+++ b/Orange/widgets/data/owdatasampler.py\n@@ -70,9 +70,8 @@ class OWDataSampler(OWWidget):\n         self.indices = None\n         self.sampled_instances = self.remaining_instances = None\n \n-        box = gui.vBox(self.controlArea, \"Information\")\n-        self.dataInfoLabel = gui.widgetLabel(box, 'No data on input.')\n-        self.outputInfoLabel = gui.widgetLabel(box, ' ')\n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoInput)\n \n         self.sampling_box = gui.vBox(self.controlArea, \"Sampling Type\")\n         sampling = gui.radioButtons(self.sampling_box, self, \"sampling_type\",\n@@ -180,16 +179,14 @@ class OWDataSampler(OWWidget):\n             self.cb_seed.setVisible(not sql)\n             self.cb_stratify.setVisible(not sql)\n             self.cb_sql_dl.setVisible(sql)\n-            self.dataInfoLabel.setText(\n-                '{}{} instances in input dataset.'.format(*(\n-                    ('~', dataset.approx_len()) if sql else\n-                    ('', len(dataset)))))\n+            self.info.set_input_summary(str(len(dataset)))\n+\n             if not sql:\n                 self._update_sample_max_size()\n                 self.updateindices()\n         else:\n-            self.dataInfoLabel.setText('No data on input.')\n-            self.outputInfoLabel.setText('')\n+            self.info.set_input_summary(self.info.NoInput)\n+            self.info.set_output_summary(self.info.NoInput)\n             self.indices = None\n             self.clear_messages()\n         self.commit()\n@@ -205,7 +202,6 @@ class OWDataSampler(OWWidget):\n         if self.data is None:\n             sample = other = None\n             self.sampled_instances = self.remaining_instances = None\n-            self.outputInfoLabel.setText(\"\")\n         elif isinstance(self.data, SqlTable):\n             other = None\n             if self.sampling_type == self.SqlProportion:\n@@ -226,15 +222,10 @@ class OWDataSampler(OWWidget):\n             if self.sampling_type in (\n                     self.FixedProportion, self.FixedSize, self.Bootstrap):\n                 remaining, sample = self.indices\n-                self.outputInfoLabel.setText(\n-                    'Outputting %d instance%s.' %\n-                    (len(sample), \"s\" * (len(sample) != 1)))\n             elif self.sampling_type == self.CrossValidation:\n                 remaining, sample = self.indices[self.selectedFold - 1]\n-                self.outputInfoLabel.setText(\n-                    'Outputting fold %d, %d instance%s.' %\n-                    (self.selectedFold, len(sample), \"s\" * (len(sample) != 1))\n-                )\n+            self.info.set_output_summary(str(len(sample)))\n+\n             sample = self.data[sample]\n             other = self.data[remaining]\n             self.sampled_instances = len(sample)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasampler.py b/Orange/widgets/data/tests/test_owdatasampler.py\nindex ffb650bcb..28fbe220c 100644\n--- a/Orange/widgets/data/tests/test_owdatasampler.py\n+++ b/Orange/widgets/data/tests/test_owdatasampler.py\n@@ -1,5 +1,7 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n+# pylint: disable=missing-docstring,unsubscriptable-object\n+from unittest.mock import Mock\n+\n from Orange.data import Table\n from Orange.widgets.data.owdatasampler import OWDataSampler\n from Orange.widgets.tests.base import WidgetTest\n@@ -36,6 +38,7 @@ class TestOWDataSampler(WidgetTest):\n         self.assertTrue(self.widget.Warning.could_not_stratify.is_shown())\n \n     def test_bootstrap(self):\n+        output_sum = self.widget.info.set_output_summary = Mock()\n         self.select_sampling_type(self.widget.Bootstrap)\n \n         self.send_signal(\"Data\", self.iris)\n@@ -56,6 +59,8 @@ class TestOWDataSampler(WidgetTest):\n         # high probability (1-(1/150*2/150*...*150/150) ~= 1-2e-64)\n         self.assertGreater(len(in_sample), 0)\n         self.assertGreater(len(in_remaining), 0)\n+        #Check if status bar shows correct number of output data\n+        output_sum.assert_called_with(str(len(sample)))\n \n     def select_sampling_type(self, sampling_type):\n         buttons = self.widget.controls.sampling_type.group.buttons()\n@@ -63,9 +68,11 @@ class TestOWDataSampler(WidgetTest):\n \n     def test_no_intersection_in_outputs(self):\n         \"\"\" Check whether outputs intersect and whether length of outputs sums\n-        to length of original data \"\"\"\n+        to length of original data and\n+        if status bar displays correct output for each sampling type\"\"\"\n         self.send_signal(\"Data\", self.iris)\n         w = self.widget\n+        output_sum = self.widget.info.set_output_summary = Mock()\n         sampling_types = [w.FixedProportion, w.FixedSize, w.CrossValidation]\n \n         for replicable in [True, False]:\n@@ -80,6 +87,7 @@ class TestOWDataSampler(WidgetTest):\n                     other = self.get_output(\"Remaining Data\")\n                     self.assertEqual(len(self.iris), len(sample) + len(other))\n                     self.assertNoIntersection(sample, other)\n+                    output_sum.assert_called_with(str(len(sample)))\n \n     def test_bigger_size_with_replacement(self):\n         \"\"\"Allow bigger output without replacement.\"\"\"\n@@ -116,6 +124,20 @@ class TestOWDataSampler(WidgetTest):\n         self.assertTrue((self.iris.ids != sample.ids).any())\n         self.assertEqual(set(self.iris.ids), set(sample.ids))\n \n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        data = self.iris\n+\n+        input_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, data[:])\n+        input_sum.assert_called_with(\"150\")\n+\n+        input_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+\n     def set_fixed_sample_size(self, sample_size, with_replacement=False):\n         \"\"\"Set fixed sample size and return the number of gui spin.\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4501.0, "instance_id": "biolab__orange3-4501", "issue_numbers": 0, "base_commit": "d6ef63ae41b15730dd30b19c82bcb362981768c3", "patch": "diff --git a/Orange/widgets/data/owcolor.py b/Orange/widgets/data/owcolor.py\nindex 02b0c2c35..0381cf128 100644\n--- a/Orange/widgets/data/owcolor.py\n+++ b/Orange/widgets/data/owcolor.py\n@@ -12,6 +12,7 @@ from Orange.widgets import widget, settings, gui\n from Orange.widgets.gui import HorizontalGridDelegate\n from Orange.widgets.utils import itemmodels, colorpalettes\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n from orangewidget.settings import IncompatibleContext\n \n@@ -458,6 +459,9 @@ class OWColor(widget.OWWidget):\n         box.button.setFixedWidth(180)\n         box.layout().insertStretch(0)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n     @staticmethod\n     def sizeHint():  # pragma: no cover\n         return QSize(500, 570)\n@@ -469,8 +473,10 @@ class OWColor(widget.OWWidget):\n         self.cont_descs = []\n         if data is None:\n             self.data = self.domain = None\n+            self.info.set_input_summary(self.info.NoInput)\n         else:\n             self.data = data\n+            self.info.set_input_summary(len(data), format_summary_details(data))\n             for var in chain(data.domain.variables, data.domain.metas):\n                 if var.is_discrete:\n                     self.disc_descs.append(DiscAttrDesc(var))\n@@ -498,6 +504,7 @@ class OWColor(widget.OWWidget):\n \n         if self.data is None:\n             self.Outputs.data.send(None)\n+            self.info.set_output_summary(self.info.NoOutput)\n             return\n \n         disc_dict = {desc.var.name: desc for desc in self.disc_descs}\n@@ -507,6 +514,8 @@ class OWColor(widget.OWWidget):\n         new_domain = Orange.data.Domain(\n             make(dom.attributes), make(dom.class_vars), make(dom.metas))\n         new_data = self.data.transform(new_domain)\n+        self.info.set_output_summary(len(new_data),\n+                                     format_summary_details(new_data))\n         self.Outputs.data.send(new_data)\n \n     def send_report(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcolor.py b/Orange/widgets/data/tests/test_owcolor.py\nindex 6f4dbf359..8f133ff75 100644\n--- a/Orange/widgets/data/tests/test_owcolor.py\n+++ b/Orange/widgets/data/tests/test_owcolor.py\n@@ -1,5 +1,5 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring, protected-access\n+# pylint: disable=missing-docstring, protected-access,unsubscriptable-object\n import unittest\n from unittest.mock import patch, Mock\n \n@@ -10,6 +10,7 @@ from AnyQt.QtGui import QBrush\n from Orange.data import Table, ContinuousVariable, DiscreteVariable, Domain\n from Orange.util import color_to_hex\n from Orange.widgets.utils import colorpalettes\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.data import owcolor\n from Orange.widgets.data.owcolor import ColorRole\n from Orange.widgets.tests.base import WidgetTest\n@@ -483,6 +484,25 @@ class TestOWColor(WidgetTest):\n     def test_string_variables(self):\n         self.send_signal(self.widget.Inputs.data, Table(\"zoo\"))\n \n+    def test_summary(self):\n+        \"\"\"Check if the status bar is updated when data is received\"\"\"\n+        data = self.iris\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4473.0, "instance_id": "biolab__orange3-4473", "issue_numbers": 0, "base_commit": "9541a292c32883fcf173c2c3eeb68b92a2b827fd", "patch": "diff --git a/Orange/widgets/data/owrank.py b/Orange/widgets/data/owrank.py\nindex edbf5ffb9..0b08307b2 100644\n--- a/Orange/widgets/data/owrank.py\n+++ b/Orange/widgets/data/owrank.py\n@@ -34,6 +34,7 @@ from Orange.widgets.settings import (DomainContextHandler, Setting,\n from Orange.widgets.utils.itemmodels import PyTableModel\n from Orange.widgets.utils.sql import check_sql_input\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import (\n     OWWidget, Msg, Input, Output, AttributeList\n )\n@@ -293,6 +294,9 @@ class OWRank(OWWidget):\n \n         gui.auto_send(selMethBox, self, \"auto_apply\", box=False)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n         self.resize(690, 500)\n \n     def switchProblemType(self, index):\n@@ -325,6 +329,8 @@ class OWRank(OWWidget):\n         self.switchProblemType(ProblemType.CLASSIFICATION)\n         if self.data is not None:\n             domain = self.data.domain\n+            self.info.set_input_summary(len(self.data),\n+                                        format_summary_details(self.data))\n \n             if domain.has_discrete_class:\n                 problem_type = ProblemType.CLASSIFICATION\n@@ -346,6 +352,8 @@ class OWRank(OWWidget):\n                 max((a.name for a in domain.attributes), key=len))\n \n             self.selectionMethod = OWRank.SelectNBest\n+        else:\n+            self.info.set_input_summary(self.info.NoInput)\n \n         self.openContext(data)\n         self.selectButtons.button(self.selectionMethod).setChecked(True)\n@@ -536,6 +544,7 @@ class OWRank(OWWidget):\n             self.Outputs.reduced_data.send(None)\n             self.Outputs.features.send(None)\n             self.out_domain_desc = None\n+            self.info.set_output_summary(self.info.NoOutput)\n         else:\n             reduced_domain = Domain(\n                 selected_attrs, self.data.domain.class_var, self.data.domain.metas)\n@@ -543,6 +552,8 @@ class OWRank(OWWidget):\n             self.Outputs.reduced_data.send(data)\n             self.Outputs.features.send(AttributeList(selected_attrs))\n             self.out_domain_desc = report.describe_domain(data.domain)\n+            self.info.set_output_summary(len(data),\n+                                         format_summary_details(data))\n \n     def create_scores_table(self, labels):\n         model_list = self.ranksModel.tolist()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owrank.py b/Orange/widgets/data/tests/test_owrank.py\nindex 050ee3a0e..89aed2b97 100644\n--- a/Orange/widgets/data/tests/test_owrank.py\n+++ b/Orange/widgets/data/tests/test_owrank.py\n@@ -1,6 +1,7 @@\n+# pylint: disable=unsubscriptable-object\n import warnings\n import unittest\n-from unittest.mock import patch\n+from unittest.mock import patch, Mock\n \n import numpy as np\n from sklearn.exceptions import ConvergenceWarning\n@@ -17,6 +18,7 @@ from Orange.projection import PCA\n from Orange.widgets.data.owrank import OWRank, ProblemType, CLS_SCORES, REG_SCORES\n from Orange.widgets.tests.base import WidgetTest, datasets\n from Orange.widgets.widget import AttributeList\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWRank(WidgetTest):\n@@ -387,6 +389,26 @@ class TestOWRank(WidgetTest):\n \n         self.assertEqual(len(output), len(self.iris))\n \n+    def test_summary(self):\n+        \"\"\"Check if the status bar is updated when data is received\"\"\"\n+        data = self.iris\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.reduced_data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4454.0, "instance_id": "biolab__orange3-4454", "issue_numbers": 0, "base_commit": "bd2d33419741fa8ad24318547fdb093b4aa0685f", "patch": "diff --git a/Orange/widgets/data/owselectcolumns.py b/Orange/widgets/data/owselectcolumns.py\nindex 3835127b7..c23161aaa 100644\n--- a/Orange/widgets/data/owselectcolumns.py\n+++ b/Orange/widgets/data/owselectcolumns.py\n@@ -14,6 +14,7 @@ from Orange.widgets.data.contexthandlers import \\\n from Orange.widgets.settings import ContextSetting, Setting\n from Orange.widgets.utils.listfilter import VariablesListItemView, slices, variables_filter\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output, AttributeList, Msg\n from Orange.data.table import Table\n from Orange.widgets.utils import vartype\n@@ -266,6 +267,9 @@ class OWSelectAttributes(widget.OWWidget):\n         self.output_data = None\n         self.original_completer_items = []\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n         self.resize(600, 600)\n \n     @property\n@@ -343,11 +347,13 @@ class OWSelectAttributes(widget.OWWidget):\n             self.class_attrs[:] = classes\n             self.meta_attrs[:] = metas\n             self.available_attrs[:] = available\n+            self.info.set_input_summary(len(data), format_summary_details(data))\n         else:\n             self.used_attrs[:] = []\n             self.class_attrs[:] = []\n             self.meta_attrs[:] = []\n             self.available_attrs[:] = []\n+            self.info.set_input_summary(self.info.NoInput)\n \n     def update_domain_role_hints(self):\n         \"\"\" Update the domain hints to be stored in the widgets settings.\n@@ -522,10 +528,13 @@ class OWSelectAttributes(widget.OWWidget):\n             self.output_data = newdata\n             self.Outputs.data.send(newdata)\n             self.Outputs.features.send(AttributeList(attributes))\n+            self.info.set_output_summary(len(newdata),\n+                                         format_summary_details(newdata))\n         else:\n             self.output_data = None\n             self.Outputs.data.send(None)\n             self.Outputs.features.send(None)\n+            self.info.set_output_summary(self.info.NoOutput)\n \n     def reset(self):\n         self.enable_used_attrs()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectcolumns.py b/Orange/widgets/data/tests/test_owselectcolumns.py\nindex d9d6aed27..8dff52c2b 100644\n--- a/Orange/widgets/data/tests/test_owselectcolumns.py\n+++ b/Orange/widgets/data/tests/test_owselectcolumns.py\n@@ -1,3 +1,4 @@\n+# pylint: disable=unsubscriptable-object\n from unittest import TestCase\n from unittest.mock import Mock\n \n@@ -9,6 +10,7 @@ from Orange.widgets.data.contexthandlers import \\\n     SelectAttributesDomainContextHandler\n from Orange.widgets.settings import ContextSetting\n from Orange.widgets.utils import vartype\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.tests.base import WidgetTest\n from Orange.widgets.data.owselectcolumns \\\n     import OWSelectAttributes, VariablesListItemModel\n@@ -386,3 +388,23 @@ class TestOWSelectAttributes(WidgetTest):\n             d1.domain.attributes,\n             data.domain.attributes\n         )\n+\n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        data = Table(\"iris\")\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5022.0, "instance_id": "biolab__orange3-5022", "issue_numbers": 0, "base_commit": "7e89a72d1650188531d1b5f487edbf4f51134122", "patch": "diff --git a/Orange/widgets/data/owtable.py b/Orange/widgets/data/owtable.py\nindex c5af55864..cc6be784e 100644\n--- a/Orange/widgets/data/owtable.py\n+++ b/Orange/widgets/data/owtable.py\n@@ -743,7 +743,7 @@ class OWDataTable(OWWidget):\n                 return f\"{n} {part}s\"\n \n         if slot is None:\n-            return \"No data.\"\n+            return [\"No data.\"]\n         summary = slot.summary\n         text = []\n         if isinstance(summary, ApproxSummary):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owtable.py b/Orange/widgets/data/tests/test_owtable.py\nindex 255878514..a0d7f3479 100644\n--- a/Orange/widgets/data/tests/test_owtable.py\n+++ b/Orange/widgets/data/tests/test_owtable.py\n@@ -169,5 +169,11 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n         self.assertEqual(info._StateInfo__output_summary.brief, \"\")\n         self.assertEqual(info._StateInfo__output_summary.details, no_output)\n \n+    def test_info(self):\n+        info_text = self.widget.info_text\n+        no_input = \"No data.\"\n+        self.assertEqual(info_text.text(), no_input)\n+\n+\n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6263.0, "instance_id": "biolab__orange3-6263", "issue_numbers": 0, "base_commit": "b13363916dd9353f0893ca1c441f60a7c7d1f53c", "patch": "diff --git a/Orange/misc/distmatrix.py b/Orange/misc/distmatrix.py\nindex 68827da7c..c56fa169c 100644\n--- a/Orange/misc/distmatrix.py\n+++ b/Orange/misc/distmatrix.py\n@@ -274,15 +274,19 @@ class DistMatrix(np.ndarray):\n                           self.row_items or self.col_items,\n                           self.col_items or self.row_items)\n \n-    @staticmethod\n-    def _trivial_labels(items):\n+    def _trivial_labels(self, items):\n         # prevent circular imports, pylint: disable=import-outside-toplevel\n         from Orange.data import Table, StringVariable\n \n-        return items and \\\n-               isinstance(items, Table) and \\\n-               len(items.domain.metas) == 1 and \\\n-               isinstance(items.domain.metas[0], StringVariable)\n+        return (isinstance(items, (list, tuple))\n+                and all(isinstance(item, str) for item in items)\n+                or\n+                isinstance(items, Table)\n+                and (self.axis == 0 or\n+                     sum(isinstance(meta, StringVariable)\n+                         for meta in items.domain.metas) == 1\n+                     )\n+                )\n \n     def is_symmetric(self):\n         # prevent circular imports, pylint: disable=import-outside-toplevel\n@@ -324,13 +328,20 @@ class DistMatrix(np.ndarray):\n         return self._trivial_labels(self.col_items)\n \n     def get_labels(self, items):\n-        if self._trivial_labels(items):\n-            return items.get_column(items.domain.metas[0])\n-        elif isinstance(items, (list, tuple)) \\\n+        # prevent circular imports, pylint: disable=import-outside-toplevel\n+        from Orange.data import StringVariable\n+\n+        if not self._trivial_labels(items):\n+            return None\n+        if isinstance(items, (list, tuple)) \\\n                 and all(isinstance(x, str) for x in items):\n             return items\n+        if self.axis == 0:\n+            return [attr.name for attr in items.domain.attributes]\n         else:\n-            return None\n+            string_var = next(var for var in items.domain.metas\n+                              if isinstance(var, StringVariable))\n+            return items.get_column(string_var)\n \n     def save(self, filename):\n         if os.path.splitext(filename)[1] == \".xlsx\":\n.", "test_patch": "diff --git a/Orange/misc/tests/test_distmatrix.py b/Orange/misc/tests/test_distmatrix.py\nindex f0e8ba0b0..3da2fdbe7 100644\n--- a/Orange/misc/tests/test_distmatrix.py\n+++ b/Orange/misc/tests/test_distmatrix.py\n@@ -2,6 +2,7 @@ import unittest\n from unittest.mock import patch\n \n import numpy as np\n+from Orange.data import ContinuousVariable, StringVariable, Table, Domain\n from Orange.misc import DistMatrix\n \n \n@@ -97,6 +98,62 @@ class DistMatrixTest(unittest.TestCase):\n         matrix = DistMatrix(data, list(\"def\"), list(\"abc\"))\n         self.assertIs(matrix.auto_symmetricized(), matrix)\n \n+    def test_trivial_labels(self):\n+        matrix = DistMatrix(np.array([[1, 2, 3], [4, 5, 6]]))\n+\n+        self.assertFalse(matrix._trivial_labels(matrix.row_items))\n+        self.assertIsNone(matrix.get_labels(matrix.row_items))\n+\n+        matrix.row_items = list(\"abc\")\n+        self.assertTrue(matrix._trivial_labels(matrix.row_items))\n+        self.assertEqual(matrix.get_labels(matrix.row_items), list(\"abc\"))\n+\n+        matrix.row_items = [\"a\", 1, \"c\"]\n+        self.assertFalse(matrix._trivial_labels(matrix.row_items))\n+        self.assertIsNone(matrix.get_labels(matrix.row_items))\n+\n+        c1, c2 = (ContinuousVariable(c) for c in \"xy\")\n+        s1, s2 = (StringVariable(c) for c in \"st\")\n+        data = Table.from_list(Domain([c1], None, [c2, s1]),\n+                               [[1, 0, \"a\"], [2, 2, \"b\"], [3, 1, \"c\"]])\n+        matrix.row_items = data\n+\n+        matrix.axis = 1\n+        self.assertTrue(matrix._trivial_labels(matrix.row_items))\n+        self.assertEqual(list(matrix.get_labels(matrix.row_items)), list(\"abc\"))\n+\n+        matrix.axis = 0\n+        self.assertTrue(matrix._trivial_labels(matrix.row_items))\n+        self.assertEqual(list(matrix.get_labels(matrix.row_items)), list(\"x\"))\n+\n+\n+        data = Table.from_list(Domain([c1], None, [c2, s1, s2]),\n+                               [[1, 2, \"a\", \"2\"],\n+                                [2, 4, \"b\", \"5\"],\n+                                [3, 0, \"c\", \"g\"]])\n+        matrix.row_items = data\n+\n+        matrix.axis = 1\n+        self.assertFalse(matrix._trivial_labels(matrix.row_items))\n+        self.assertIsNone(matrix.get_labels(matrix.row_items))\n+\n+        matrix.axis = 0\n+        self.assertTrue(matrix._trivial_labels(matrix.row_items))\n+        self.assertEqual(list(matrix.get_labels(matrix.row_items)), list(\"x\"))\n+\n+        data = Table.from_list(Domain([c1], None, [c2]),\n+                               [[1, 2],\n+                                [2, 4],\n+                                [3, 0]])\n+        matrix.row_items = data\n+        matrix.axis = 1\n+        self.assertFalse(matrix._trivial_labels(matrix.row_items))\n+        self.assertIsNone(matrix.get_labels(matrix.row_items))\n+\n+        matrix.axis = 0\n+        self.assertTrue(matrix._trivial_labels(matrix.row_items))\n+        self.assertEqual(matrix.get_labels(matrix.row_items), list(\"x\"))\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4270.0, "instance_id": "biolab__orange3-4270", "issue_numbers": 0, "base_commit": "3eb28ee3f0c5feb7c4b23b5b4399c15cc86d79bb", "patch": "diff --git a/Orange/widgets/data/owsql.py b/Orange/widgets/data/owsql.py\nindex a91e2901e..0fbc7c677 100644\n--- a/Orange/widgets/data/owsql.py\n+++ b/Orange/widgets/data/owsql.py\n@@ -50,6 +50,7 @@ class OWSql(OWBaseSql):\n \n     settings_version = 2\n \n+    selected_backend = Setting(None)\n     table = Setting(None)\n     sql = Setting(\"\")\n     guess_values = Setting(True)\n@@ -89,11 +90,19 @@ class OWSql(OWBaseSql):\n         self.backendcombo = QComboBox(box)\n         if self.backends:\n             self.backendcombo.setModel(self.backends)\n+            names = [backend.display_name for backend in self.backends]\n+            if self.selected_backend and self.selected_backend in names:\n+                self.backendcombo.setCurrentText(self.selected_backend)\n         else:\n             self.Error.no_backends()\n             box.setEnabled(False)\n+        self.backendcombo.currentTextChanged.connect(self.__backend_changed)\n         box.layout().insertWidget(0, self.backendcombo)\n \n+    def __backend_changed(self):\n+        backend = self.get_backend()\n+        self.selected_backend = backend.display_name if backend else None\n+\n     def _add_tables_controls(self):\n         vbox = gui.vBox(self.controlArea, \"Tables\", addSpace=True)\n         box = gui.vBox(vbox)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owsql.py b/Orange/widgets/data/tests/test_owsql.py\nindex 7d5586f0c..f9a133449 100644\n--- a/Orange/widgets/data/tests/test_owsql.py\n+++ b/Orange/widgets/data/tests/test_owsql.py\n@@ -6,7 +6,7 @@ from unittest import mock\n \n from Orange.data import Table\n from Orange.widgets.data.owsql import OWSql\n-from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.tests.base import WidgetTest, simulate\n from Orange.tests.sql.base import DataBaseTest as dbt\n \n \n@@ -116,6 +116,33 @@ class TestOWSql(WidgetTest):\n         widget = self.create_widget(OWSql, stored_settings=settings)\n         self.assertEqual(widget.tablecombo.currentText(), \"b\")\n \n+    @mock.patch(\"Orange.data.sql.backend.base.Backend.available_backends\")\n+    def test_selected_backend(self, mocked_backends: mock.Mock):\n+        b1, b2 = mock.Mock(), mock.Mock()\n+        b1.display_name = \"B1\"\n+        b2.display_name = \"B2\"\n+        mocked_backends.return_value = [b1, b2]\n+\n+        widget = self.create_widget(OWSql)\n+        self.assertEqual(widget.backendcombo.currentText(), \"B1\")\n+\n+        simulate.combobox_activate_index(widget.backendcombo, 1)\n+        self.assertEqual(widget.backendcombo.currentText(), \"B2\")\n+\n+        settings = widget.settingsHandler.pack_data(widget)\n+        widget = self.create_widget(OWSql, stored_settings=settings)\n+        self.assertEqual(widget.backendcombo.currentText(), \"B2\")\n+\n+        settings = widget.settingsHandler.pack_data(widget)\n+        settings[\"selected_backend\"] = \"B3\"\n+        widget = self.create_widget(OWSql, stored_settings=settings)\n+        self.assertEqual(widget.backendcombo.currentText(), \"B1\")\n+\n+        mocked_backends.return_value = []\n+        settings = widget.settingsHandler.pack_data(widget)\n+        widget = self.create_widget(OWSql, stored_settings=settings)\n+        self.assertEqual(widget.backendcombo.currentText(), \"\")\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6457.0, "instance_id": "biolab__orange3-6457", "issue_numbers": 0, "base_commit": "e0ee124f82b186de0b693dadf98011ccdf449bf2", "patch": "diff --git a/Orange/data/io_base.py b/Orange/data/io_base.py\nindex 677220995..629fce528 100644\n--- a/Orange/data/io_base.py\n+++ b/Orange/data/io_base.py\n@@ -654,7 +654,7 @@ class _FileWriter:\n         if var.is_time:\n             return var.repr_val\n         elif var.is_continuous:\n-            return lambda value: \"\" if isnan(value) else value\n+            return lambda value: \"\" if isnan(value) else var.repr_val(value)\n         elif var.is_discrete:\n             return lambda value: \"\" if isnan(value) else var.values[int(value)]\n         elif var.is_string:\n.", "test_patch": "diff --git a/Orange/data/tests/test_io.py b/Orange/data/tests/test_io.py\nindex 0490a9671..061d97661 100644\n--- a/Orange/data/tests/test_io.py\n+++ b/Orange/data/tests/test_io.py\n@@ -135,9 +135,9 @@ class TestWriters(unittest.TestCase):\n c\\td\\ta\\tb\n continuous\\tstring\\tx y z\\tcontinuous\n class\\tmeta\\t\\t\n-3.0\\tfoo\\ty\\t0.5\n-1.0\\tbar\\tz\\t\n-7.0\\tbaz\\t\\t1.0625\"\"\".strip())\n+3\\tfoo\\ty\\t0.500\n+1\\tbar\\tz\\t\n+7\\tbaz\\t\\t1.06250\"\"\".strip())\n         finally:\n             os.remove(fname)\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4226.0, "instance_id": "biolab__orange3-4226", "issue_numbers": 0, "base_commit": "2e07ccf3e021f727051806315818ca07d7ef82d1", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex 15d0ca0aa..dc1606379 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -145,30 +145,39 @@ def guess_data_type(orig_values, namask=None):\n     \"\"\"\n     valuemap, values = None, orig_values\n     is_discrete = is_discrete_values(orig_values)\n+    orig_values = np.asarray(orig_values, dtype=str)\n+    if namask is None:\n+        namask = isnastr(orig_values)\n     if is_discrete:\n         valuemap = sorted(is_discrete)\n         coltype = DiscreteVariable\n     else:\n         # try to parse as float\n-        orig_values = np.asarray(orig_values)\n-        if namask is None:\n-            namask = isnastr(orig_values)\n         values = np.empty_like(orig_values, dtype=float)\n         values[namask] = np.nan\n         try:\n             np.copyto(values, orig_values, where=~namask, casting=\"unsafe\")\n         except ValueError:\n-            tvar = TimeVariable('_')\n-            try:\n-                values[~namask] = [tvar.parse(i) for i in orig_values[~namask]]\n-            except ValueError:\n-                coltype = StringVariable\n-                # return original_values\n-                values = orig_values\n-            else:\n-                coltype = TimeVariable\n+            values = orig_values\n+            coltype = StringVariable\n         else:\n             coltype = ContinuousVariable\n+\n+    if coltype is not ContinuousVariable:\n+        # when not continuous variable it can still be time variable even it\n+        # was before recognized as a discrete\n+        tvar = TimeVariable('_')\n+        # introducing new variable prevent overwriting orig_values and values\n+        temp_values = np.empty_like(orig_values, dtype=float)\n+        try:\n+            temp_values[~namask] = [\n+                tvar.parse_exact_iso(i) for i in orig_values[~namask]]\n+        except ValueError:\n+            pass\n+        else:\n+            valuemap = None\n+            coltype = TimeVariable\n+            values = temp_values\n     return valuemap, values, coltype\n \n \ndiff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex e333118b7..211bb6a44 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -889,6 +889,13 @@ class TimeVariable(ContinuousVariable):\n              r'\\d{2}\\d{2}\\d{2}\\.\\d+|'\n              r'\\d{1,4}(-?\\d{2,3})?'\n              r')$')\n+\n+    class InvalidDateTimeFormatError(ValueError):\n+        def __init__(self, date_string):\n+            super().__init__(\n+                \"Invalid datetime format '{}'. \"\n+                \"Only ISO 8601 supported.\".format(date_string))\n+\n     _matches_iso_format = re.compile(REGEX).match\n \n     # UTC offset and associated timezone. If parsed datetime values provide an\n@@ -954,8 +961,6 @@ class TimeVariable(ContinuousVariable):\n             return Unknown\n         datestr = datestr.strip().rstrip('Z')\n \n-        ERROR = ValueError(\"Invalid datetime format '{}'. \"\n-                           \"Only ISO 8601 supported.\".format(datestr))\n         if not self._matches_iso_format(datestr):\n             try:\n                 # If it is a number, assume it is a unix timestamp\n@@ -963,7 +968,7 @@ class TimeVariable(ContinuousVariable):\n                 self.have_date = self.have_time = 1\n                 return value\n             except ValueError:\n-                raise ERROR\n+                raise self.InvalidDateTimeFormatError(datestr)\n \n         for i, (have_date, have_time, fmt) in enumerate(self._ISO_FORMATS):\n             try:\n@@ -984,7 +989,7 @@ class TimeVariable(ContinuousVariable):\n                                     self.UNIX_EPOCH.day)\n                 break\n         else:\n-            raise ERROR\n+            raise self.InvalidDateTimeFormatError(datestr)\n \n         # Remember UTC offset. If not all parsed values share the same offset,\n         # remember none of it.\n@@ -1010,6 +1015,16 @@ class TimeVariable(ContinuousVariable):\n         except OverflowError:\n             return -(self.UNIX_EPOCH - dt).total_seconds()\n \n+    def parse_exact_iso(self, datestr):\n+        \"\"\"\n+        This function is a meta function to `parse` function. It checks\n+        whether the date is of the iso format - it does not accept float-like\n+        date.\n+        \"\"\"\n+        if not self._matches_iso_format(datestr):\n+            raise self.InvalidDateTimeFormatError(datestr)\n+        return self.parse(datestr)\n+\n     def to_val(self, s):\n         \"\"\"\n         Convert a value, given as an instance of an arbitrary type, to a float.\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_io.py b/Orange/data/tests/test_io.py\nindex ad0c34281..acac8e87d 100644\n--- a/Orange/data/tests/test_io.py\n+++ b/Orange/data/tests/test_io.py\n@@ -1,7 +1,8 @@\n import unittest\n import numpy as np\n \n-from Orange.data import ContinuousVariable, DiscreteVariable, StringVariable\n+from Orange.data import ContinuousVariable, DiscreteVariable, StringVariable, \\\n+    TimeVariable\n from Orange.data.io import guess_data_type\n \n \n@@ -68,3 +69,27 @@ class TestTableFilters(unittest.TestCase):\n         self.assertEqual(StringVariable, coltype)\n         self.assertIsNone(valuemap)\n         np.testing.assert_array_equal(in_values, values)\n+\n+    def test_guess_data_type_time(self):\n+        in_values = [\"2019-10-10\", \"2019-10-10\", \"2019-10-10\", \"2019-10-01\"]\n+        valuemap, _, coltype = guess_data_type(in_values)\n+        self.assertEqual(TimeVariable, coltype)\n+        self.assertIsNone(valuemap)\n+\n+        in_values = [\"2019-10-10T12:08:51\", \"2019-10-10T12:08:51\",\n+                     \"2019-10-10T12:08:51\", \"2019-10-01T12:08:51\"]\n+        valuemap, _, coltype = guess_data_type(in_values)\n+        self.assertEqual(TimeVariable, coltype)\n+        self.assertIsNone(valuemap)\n+\n+        in_values = [\"2019-10-10 12:08:51\", \"2019-10-10 12:08:51\",\n+                     \"2019-10-10 12:08:51\", \"2019-10-01 12:08:51\"]\n+        valuemap, _, coltype = guess_data_type(in_values)\n+        self.assertEqual(TimeVariable, coltype)\n+        self.assertIsNone(valuemap)\n+\n+        in_values = [\"2019-10-10 12:08\", \"2019-10-10 12:08\",\n+                     \"2019-10-10 12:08\", \"2019-10-01 12:08\"]\n+        valuemap, _, coltype = guess_data_type(in_values)\n+        self.assertEqual(TimeVariable, coltype)\n+        self.assertIsNone(valuemap)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6597.0, "instance_id": "biolab__orange3-6597", "issue_numbers": 0, "base_commit": "0597b34c77c8aeef43358cce375f9975aabe4df6", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 2edddf8d7..434e6a25e 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1325,7 +1325,7 @@ class Table(Sequence, Storage):\n         return s\n \n     @classmethod\n-    def concatenate(cls, tables, axis=0):\n+    def concatenate(cls, tables, axis=0, *, ignore_domains=None):\n         \"\"\"\n         Concatenate tables into a new table, either vertically or horizontally.\n \n@@ -1346,14 +1346,15 @@ class Table(Sequence, Storage):\n         \"\"\"\n         if axis not in (0, 1):\n             raise ValueError(\"invalid axis\")\n+        if ignore_domains is not None and axis != 0:\n+            raise ValueError(\"'ignore_domains' is incompatible with 'axis=1'\")\n         if not tables:\n             raise ValueError('need at least one table to concatenate')\n \n         if len(tables) == 1:\n             return tables[0].copy()\n-\n         if axis == 0:\n-            conc = cls._concatenate_vertical(tables)\n+            conc = cls._concatenate_vertical(tables, bool(ignore_domains))\n         else:\n             conc = cls._concatenate_horizontal(tables)\n \n@@ -1368,7 +1369,7 @@ class Table(Sequence, Storage):\n         return conc\n \n     @classmethod\n-    def _concatenate_vertical(cls, tables):\n+    def _concatenate_vertical(cls, tables, ignore_domains=False):\n         def vstack(arrs):\n             return [np, sp][any(sp.issparse(arr) for arr in arrs)].vstack(arrs)\n \n@@ -1387,7 +1388,8 @@ class Table(Sequence, Storage):\n             return [getattr(arr, attr) for arr in tables]\n \n         domain = tables[0].domain\n-        if any(table.domain != domain for table in tables):\n+        if not ignore_domains \\\n+                and any(table.domain != domain for table in tables):\n             raise ValueError('concatenated tables must have the same domain')\n \n         conc = cls.from_numpy(\n.", "test_patch": "diff --git a/Orange/data/tests/test_table.py b/Orange/data/tests/test_table.py\nindex 45a71762d..71a8f3cf8 100644\n--- a/Orange/data/tests/test_table.py\n+++ b/Orange/data/tests/test_table.py\n@@ -200,6 +200,16 @@ class TestTableInit(unittest.TestCase):\n         joined = Table.concatenate((tab1, tab2, tab3), axis=1)\n         self.assertEqual(joined.name, \"tab2\")\n \n+    def test_concatenate_check_domain(self):\n+        a, b, c, d, e, f = map(ContinuousVariable, \"abcdef\")\n+        tables = (self._new_table((a, b), (c, ), (d, e), 5),\n+                 self._new_table((a, b), (c, ), (d, e), 5),\n+                 self._new_table((a, b), (f, ), (d, e), 5))\n+\n+        with self.assertRaises(ValueError):\n+            Table.concatenate(tables, axis=0)\n+        Table.concatenate(tables, axis=0, ignore_domains=True)\n+\n     def test_with_column(self):\n         a, b, c, d, e, f, g = map(ContinuousVariable, \"abcdefg\")\n         col = np.arange(9, 14)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4717.0, "instance_id": "biolab__orange3-4717", "issue_numbers": 0, "base_commit": "cf0f69fe9535c02e71a56861edf05ae573e12cf0", "patch": "diff --git a/Orange/widgets/data/owpivot.py b/Orange/widgets/data/owpivot.py\nindex 25b973880..4c655eb45 100644\n--- a/Orange/widgets/data/owpivot.py\n+++ b/Orange/widgets/data/owpivot.py\n@@ -10,7 +10,8 @@ from AnyQt.QtCore import (Qt, QSize, QItemSelection, QItemSelectionModel,\n                           pyqtSignal)\n from AnyQt.QtGui import QStandardItem, QColor, QStandardItemModel\n from AnyQt.QtWidgets import (QTableView, QSizePolicy, QHeaderView,\n-                             QStyledItemDelegate, QCheckBox, QFrame)\n+                             QStyledItemDelegate, QCheckBox, QFrame, QWidget,\n+                             QGridLayout)\n \n from Orange.data import (Table, DiscreteVariable, Variable, Domain,\n                          ContinuousVariable)\n@@ -704,7 +705,7 @@ class OWPivot(OWWidget):\n     class Warning(OWWidget.Warning):\n         # TODO - inconsistent for different variable types\n         no_col_feature = Msg(\"Column feature should be selected.\")\n-        cannot_aggregate = Msg(\"Some aggregations ({}) cannot be performed.\")\n+        cannot_aggregate = Msg(\"Some aggregations ({}) cannot be computed.\")\n         renamed_vars = Msg(\"Some variables have been renamed in some tables\"\n                            \"to avoid duplicates.\\n{}\")\n \n@@ -718,14 +719,15 @@ class OWPivot(OWWidget):\n \n     AGGREGATIONS = (Pivot.Count,\n                     Pivot.Count_defined,\n-                    None,\n+                    None,  # separator\n                     Pivot.Sum,\n                     Pivot.Mean,\n+                    Pivot.Var,\n+                    Pivot.Median,\n+                    2,  # column break\n                     Pivot.Mode,\n                     Pivot.Min,\n                     Pivot.Max,\n-                    Pivot.Median,\n-                    Pivot.Var,\n                     None,\n                     Pivot.Majority)\n \n@@ -737,21 +739,20 @@ class OWPivot(OWWidget):\n         self._add_main_area_controls()\n \n     def _add_control_area_controls(self):\n-        box = gui.vBox(self.controlArea, \"Rows\")\n-        gui.comboBox(box, self, \"row_feature\", contentsLength=12,\n+        box = gui.vBox(self.controlArea, box=True)\n+        gui.comboBox(box, self, \"row_feature\", label=\"Rows\", contentsLength=12,\n                      searchable=True,\n                      model=DomainModel(valid_types=DomainModel.PRIMITIVE),\n                      callback=self.__feature_changed)\n-        box = gui.vBox(self.controlArea, \"Columns\")\n-        gui.comboBox(box, self, \"col_feature\", contentsLength=12,\n+        gui.comboBox(box, self, \"col_feature\", label=\"Columns\",\n+                     contentsLength=12,\n                      searchable=True,\n                      model=DomainModel(placeholder=\"(Same as rows)\",\n                                        valid_types=DiscreteVariable),\n                      callback=self.__feature_changed,)\n-        box = gui.vBox(self.controlArea, \"Values\")\n-        gui.comboBox(box, self, \"val_feature\", contentsLength=12,\n+        gui.comboBox(box, self, \"val_feature\", label=\"Values\",\n+                     contentsLength=12,\n                      searchable=True,\n-                     orientation=Qt.Horizontal,\n                      model=DomainModel(placeholder=\"(None)\"),\n                      callback=self.__val_feature_changed)\n         self.__add_aggregation_controls()\n@@ -762,7 +763,20 @@ class OWPivot(OWWidget):\n         self.info.set_output_summary(self.info.NoOutput)\n \n     def __add_aggregation_controls(self):\n+        def new_inbox():\n+            nonlocal row, col, inbox\n+            inbox = QWidget()\n+            layout = QGridLayout()\n+            inbox.setLayout(layout)\n+            layout.setContentsMargins(0, 0, 0, 0)\n+            box.layout().addWidget(inbox)\n+            row = col = 0\n+\n         box = gui.vBox(self.controlArea, \"Aggregations\")\n+        row = col = 0\n+        inbox = None\n+        new_inbox()\n+        self.aggregation_checkboxes = []  # for test purposes\n         for agg in self.AGGREGATIONS:\n             if agg is None:\n                 gui.separator(box, height=1)\n@@ -771,12 +785,19 @@ class OWPivot(OWWidget):\n                 line.setLineWidth(1)\n                 line.setFrameShadow(QFrame.Sunken)\n                 box.layout().addWidget(line)\n+                new_inbox()\n+                continue\n+            elif agg == 2:\n+                col += 1\n+                row = 0\n                 continue\n-            check_box = QCheckBox(str(agg), box)\n+            check_box = QCheckBox(str(agg), inbox)\n             check_box.setChecked(agg in self.sel_agg_functions)\n             check_box.clicked.connect(lambda *args, a=agg:\n                                       self.__aggregation_cb_clicked(a, args[0]))\n-            box.layout().addWidget(check_box)\n+            inbox.layout().addWidget(check_box, row, col)\n+            self.aggregation_checkboxes.append(check_box)\n+            row += 1\n \n     def _add_main_area_controls(self):\n         self.table_view = PivotTableView()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpivot.py b/Orange/widgets/data/tests/test_owpivot.py\nindex b5decb7b6..42cc15614 100644\n--- a/Orange/widgets/data/tests/test_owpivot.py\n+++ b/Orange/widgets/data/tests/test_owpivot.py\n@@ -18,12 +18,11 @@ from Orange.widgets.tests.base import WidgetTest\n from Orange.widgets.tests.utils import simulate\n from Orange.widgets.utils.state_summary import format_summary_details\n \n+\n class TestOWPivot(WidgetTest):\n     def setUp(self):\n         self.widget = self.create_widget(OWPivot)\n-        self.agg_checkboxes = [checkbox for checkbox in\n-                               self.widget.controlArea.children()[7].children()\n-                               if isinstance(checkbox, QCheckBox)]\n+        self.agg_checkboxes = self.widget.aggregation_checkboxes\n         self.assertGreater(len(self.agg_checkboxes), 0)\n         self.iris = Table(\"iris\")\n         self.heart_disease = Table(\"heart_disease\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4169.0, "instance_id": "biolab__orange3-4169", "issue_numbers": 0, "base_commit": "e8495a9bfb479dd69931b616711109046212062f", "patch": "diff --git a/Orange/widgets/data/owrandomize.py b/Orange/widgets/data/owrandomize.py\nindex eabebea66..c88c25337 100644\n--- a/Orange/widgets/data/owrandomize.py\n+++ b/Orange/widgets/data/owrandomize.py\n@@ -67,6 +67,9 @@ class OWRandomize(OWWidget):\n             box, self, \"random_seed\", \"Replicable shuffling\",\n             callback=self._shuffle_check_changed)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoInput)\n+\n         self.apply_button = gui.auto_apply(self.controlArea, self, box=False, commit=self.apply)\n \n     @property\n@@ -87,6 +90,8 @@ class OWRandomize(OWWidget):\n     def set_data(self, data):\n         self.data = data\n         self.unconditional_apply()\n+        text = str(len(data)) if data else self.info.NoInput\n+        self.info.set_input_summary(text)\n \n     def apply(self):\n         data = None\n@@ -100,6 +105,8 @@ class OWRandomize(OWWidget):\n             data = self.data.copy()\n             for i, instance in zip(indices, randomized):\n                 data[i] = instance\n+        text = str(len(data)) if data else self.info.NoInput\n+        self.info.set_output_summary(text)\n         self.Outputs.data.send(data)\n \n     def send_report(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owrandomize.py b/Orange/widgets/data/tests/test_owrandomize.py\nindex 5b90cff5f..173677402 100644\n--- a/Orange/widgets/data/tests/test_owrandomize.py\n+++ b/Orange/widgets/data/tests/test_owrandomize.py\n@@ -1,6 +1,6 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n-from unittest.mock import patch\n+# pylint: disable=missing-docstring,unsubscriptable-object\n+from unittest.mock import patch, Mock\n \n import numpy as np\n \n@@ -74,6 +74,24 @@ class TestOWRandomize(WidgetTest):\n         np.testing.assert_array_equal(output.Y, output2.Y)\n         np.testing.assert_array_equal(output.metas, output2.metas)\n \n+    def test_summary(self):\n+        \"\"\"\"Check if status bar displays correct input/output summary\"\"\"\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, self.zoo)\n+        input_sum.assert_called_with(str(len(self.zoo)))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(str(len(output)))\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n     def test_unconditional_commit_on_new_signal(self):\n         with patch.object(self.widget, 'unconditional_apply') as apply:\n             self.widget.auto_apply = False\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4044.0, "instance_id": "biolab__orange3-4044", "issue_numbers": 0, "base_commit": "0c039b8e57dc2a46c16e667371738697b716639c", "patch": "diff --git a/Orange/widgets/unsupervised/owpca.py b/Orange/widgets/unsupervised/owpca.py\nindex 76936fe8f..1bb96df1c 100644\n--- a/Orange/widgets/unsupervised/owpca.py\n+++ b/Orange/widgets/unsupervised/owpca.py\n@@ -199,18 +199,19 @@ class OWPCA(widget.OWWidget):\n         self._update_axis()\n \n     def _on_cut_changed(self, components):\n+        if components == self.ncomponents \\\n+                or self.ncomponents == 0 \\\n+                or self._pca is not None \\\n+                and components == len(self._variance_ratio):\n+            return\n \n-        if not (self.ncomponents == 0 and\n-                components == len(self._variance_ratio)):\n-            self.ncomponents = components\n-\n+        self.ncomponents = components\n         if self._pca is not None:\n             var = self._cumulative[components - 1]\n             if numpy.isfinite(var):\n                 self.variance_covered = int(var * 100)\n \n-        if components != self._nselected_components():\n-            self._invalidate_selection()\n+        self._invalidate_selection()\n \n     def _update_selection_component_spin(self):\n         # cut changed by \"ncomponents\" spin.\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owpca.py b/Orange/widgets/unsupervised/tests/test_owpca.py\nindex 6a1c50485..4d6b47f91 100644\n--- a/Orange/widgets/unsupervised/tests/test_owpca.py\n+++ b/Orange/widgets/unsupervised/tests/test_owpca.py\n@@ -1,6 +1,7 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n-from unittest.mock import patch\n+# pylint: disable=missing-docstring, protected-access\n+import unittest\n+from unittest.mock import patch, Mock\n \n import numpy as np\n \n@@ -203,3 +204,22 @@ class TestOWPCA(WidgetTest):\n         self.widget.set_data(data)\n         ndata = Table(\"iris.tab\")\n         self.assertEqual(data.domain[0], ndata.domain[0])\n+\n+    def test_on_cut_changed(self):\n+        widget = self.widget\n+        widget.ncomponents = 2\n+        invalidate = widget._invalidate_selection = Mock()\n+        widget._on_cut_changed(2)\n+        invalidate.assert_not_called()\n+        widget._on_cut_changed(3)\n+        invalidate.assert_called()\n+\n+        widget.ncomponents = 0  # Take all components\n+        invalidate.reset_mock()\n+        widget._on_cut_changed(1)\n+        invalidate.assert_not_called()\n+        self.assertEqual(widget.ncomponents, 0)\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6208.0, "instance_id": "biolab__orange3-6208", "issue_numbers": 0, "base_commit": "f01cc808ed5658c5cbb61bf1da454f2186c2be02", "patch": "diff --git a/Orange/widgets/data/owdatasampler.py b/Orange/widgets/data/owdatasampler.py\nindex 15cbf3f53..6f14556ce 100644\n--- a/Orange/widgets/data/owdatasampler.py\n+++ b/Orange/widgets/data/owdatasampler.py\n@@ -107,7 +107,7 @@ class OWDataSampler(OWWidget):\n         ibox = gui.indentedBox(sampling)\n         self.sampleSizeSpin = gui.spin(\n             ibox, self, \"sampleSizeNumber\", label=\"Instances: \",\n-            minv=1, maxv=self._MAX_SAMPLE_SIZE,\n+            minv=0, maxv=self._MAX_SAMPLE_SIZE,\n             callback=set_sampling_type(self.FixedSize),\n             controlWidth=90)\n         gui.checkBox(\n@@ -395,11 +395,15 @@ class SampleRandomN(Reprable):\n             o[sample] = 0\n             others = np.nonzero(o)[0]\n             return others, sample\n-        if self.n == len(table):\n+        if self.n in (0, len(table)):\n             rgen = np.random.RandomState(self.random_state)\n-            sample = np.arange(self.n)\n-            rgen.shuffle(sample)\n-            return np.array([], dtype=int), sample\n+            shuffled = np.arange(len(table))\n+            rgen.shuffle(shuffled)\n+            empty = np.array([], dtype=int)\n+            if self.n == 0:\n+                return shuffled, empty\n+            else:\n+                return empty, shuffled\n         elif self.stratified and table.domain.has_discrete_class:\n             test_size = max(len(table.domain.class_var.values), self.n)\n             splitter = skl.StratifiedShuffleSplit(\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasampler.py b/Orange/widgets/data/tests/test_owdatasampler.py\nindex c59ba5600..b0fa8bf6a 100644\n--- a/Orange/widgets/data/tests/test_owdatasampler.py\n+++ b/Orange/widgets/data/tests/test_owdatasampler.py\n@@ -131,6 +131,13 @@ class TestOWDataSampler(WidgetTest):\n         self.widget.commit()\n         return self.widget.sampleSizeSpin.value()\n \n+    def set_fixed_proportion(self, proportion):\n+        \"\"\"Set fixed sample proportion.\n+        \"\"\"\n+        self.select_sampling_type(self.widget.FixedProportion)\n+        self.widget.sampleSizePercentageSlider.setValue(proportion)\n+        self.widget.commit()\n+\n     def assertNoIntersection(self, sample, other):\n         self.assertFalse(bool(set(sample.ids) & set(other.ids)))\n \n@@ -170,6 +177,26 @@ class TestOWDataSampler(WidgetTest):\n         self.assertEqual(len(self.get_output(w.Outputs.data_sample)), 15)\n         self.assertEqual(len(self.get_output(w.Outputs.remaining_data)), 135)\n \n+    def test_empty_sample(self):\n+        w = self.widget\n+        self.send_signal(w.Inputs.data, self.iris)\n+\n+        self.set_fixed_sample_size(150)\n+        self.assertEqual(len(self.get_output(w.Outputs.data_sample)), 150)\n+        self.assertEqual(len(self.get_output(w.Outputs.remaining_data)), 0)\n+\n+        self.set_fixed_sample_size(0)\n+        self.assertEqual(len(self.get_output(w.Outputs.data_sample)), 0)\n+        self.assertEqual(len(self.get_output(w.Outputs.remaining_data)), 150)\n+\n+        self.set_fixed_proportion(100)\n+        self.assertEqual(len(self.get_output(w.Outputs.data_sample)), 150)\n+        self.assertEqual(len(self.get_output(w.Outputs.remaining_data)), 0)\n+\n+        self.set_fixed_proportion(0)\n+        self.assertEqual(len(self.get_output(w.Outputs.data_sample)), 0)\n+        self.assertEqual(len(self.get_output(w.Outputs.remaining_data)), 150)\n+\n     def test_send_report(self):\n         w = self.widget\n         self.send_signal(w.Inputs.data, self.iris)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4760.0, "instance_id": "biolab__orange3-4760", "issue_numbers": 0, "base_commit": "ef04e9fafa150a98901fe3c7a10d106b093b04c7", "patch": "diff --git a/Orange/widgets/unsupervised/owdbscan.py b/Orange/widgets/unsupervised/owdbscan.py\nindex 8253ceb18..d5cf64292 100644\n--- a/Orange/widgets/unsupervised/owdbscan.py\n+++ b/Orange/widgets/unsupervised/owdbscan.py\n@@ -1,4 +1,5 @@\n import sys\n+from itertools import chain\n \n import numpy as np\n from AnyQt.QtWidgets import QApplication\n@@ -10,6 +11,7 @@ from Orange.widgets import widget, gui\n from Orange.widgets.utils.slidergraph import SliderGraph\n from Orange.widgets.settings import Setting\n from Orange.data import Table, Domain, DiscreteVariable\n+from Orange.data.util import get_unique_names\n from Orange.clustering import DBSCAN\n from Orange.widgets.utils.annotated_data import ANNOTATED_DATA_SIGNAL_NAME\n from Orange.widgets.utils.signals import Input, Output\n@@ -196,13 +198,18 @@ class OWDBSCAN(widget.OWWidget):\n                             for i in range(len(self.data))])\n         in_core = in_core.reshape(len(self.data), 1)\n \n-        clust_var = DiscreteVariable(\n-            \"Cluster\", values=[\"C%d\" % (x + 1) for x in range(k)])\n-        in_core_var = DiscreteVariable(\"DBSCAN Core\", values=(\"0\", \"1\"))\n-\n         domain = self.data.domain\n         attributes, classes = domain.attributes, domain.class_vars\n         meta_attrs = domain.metas\n+        names = [var.name for var in chain(attributes, classes, meta_attrs) if var]\n+\n+        u_clust_var = get_unique_names(names, \"Cluster\")\n+        clust_var = DiscreteVariable(\n+            u_clust_var, values=[\"C%d\" % (x + 1) for x in range(k)])\n+\n+        u_in_core = get_unique_names(names + [u_clust_var], \"DBSCAN Core\")\n+        in_core_var = DiscreteVariable(u_in_core, values=(\"0\", \"1\"))\n+\n         x, y, metas = self.data.X, self.data.Y, self.data.metas\n \n         meta_attrs += (clust_var, )\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owdbscan.py b/Orange/widgets/unsupervised/tests/test_owdbscan.py\nindex ccb961f91..a830662ad 100644\n--- a/Orange/widgets/unsupervised/tests/test_owdbscan.py\n+++ b/Orange/widgets/unsupervised/tests/test_owdbscan.py\n@@ -4,7 +4,7 @@ from scipy.sparse import csr_matrix, csc_matrix\n from Orange.data import Table\n from Orange.distance import Euclidean\n from Orange.widgets.tests.base import WidgetTest\n-from Orange.widgets.tests.utils import simulate\n+from Orange.widgets.tests.utils import simulate, possible_duplicate_table\n from Orange.widgets.unsupervised.owdbscan import OWDBSCAN, get_kth_distances\n \n \n@@ -33,6 +33,13 @@ class TestOWDBSCAN(WidgetTest):\n         self.assertEqual(\"Cluster\", str(output.domain.metas[0]))\n         self.assertEqual(\"DBSCAN Core\", str(output.domain.metas[1]))\n \n+    def test_unique_domain(self):\n+        w = self.widget\n+        data = possible_duplicate_table(\"Cluster\")\n+        self.send_signal(w.Inputs.data, data)\n+        output = self.get_output(w.Outputs.annotated_data)\n+        self.assertEqual(output.domain.metas[0].name, \"Cluster (1)\")\n+\n     def test_bad_input(self):\n         w = self.widget\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6862.0, "instance_id": "biolab__orange3-6862", "issue_numbers": 0, "base_commit": "b981d765537d121e6cb631e14a81ea1b65704d25", "patch": "diff --git a/Orange/data/io_base.py b/Orange/data/io_base.py\nindex 914d1d337..6b74e72a9 100644\n--- a/Orange/data/io_base.py\n+++ b/Orange/data/io_base.py\n@@ -170,7 +170,8 @@ class _TableHeader:\n         \"\"\"\n \n         def is_flag(x):\n-            return bool(Flags.RE_ALL.match(cls._type_from_flag([x])[0]) or\n+            return bool(cls._type_from_flag([x])[0] and\n+                        _RE_TYPES.match(cls._type_from_flag([x])[0]) or\n                         Flags.RE_ALL.match(cls._flag_from_flag([x])[0]))\n \n         flags, names = zip(*[i.split(cls.HEADER1_FLAG_SEP, 1)\n.", "test_patch": "diff --git a/Orange/data/tests/test_io_base.py b/Orange/data/tests/test_io_base.py\nindex 737e353de..ba272c4d6 100644\n--- a/Orange/data/tests/test_io_base.py\n+++ b/Orange/data/tests/test_io_base.py\n@@ -23,6 +23,13 @@ class InitTestData(unittest.TestCase):\n                              [\"red\", \"0.5\", \"0.0\", \"0.0\", \"aa\", \"a\"],\n                              [\"red\", \"0.1\", \"1.0\", \"1.0\", \"b\", \"b\"],\n                              [\"green\", \"0.0\", \"2.0\", \"2.0\", \"c\", \"c\"]]\n+        cls.header1_flags2 = [[\"D#a1\", \"D#a2\", \"cD#a3\", \"C#a4\", \"S#a5\",\n+                               \"mS#a6\", \"T#a7\", \"mT#a8\", \"T#a9\"],\n+                              [\"\", \"0\", \"\", \"0\", \"a\", \"a\",\n+                               \"2024-01-01\", \"2024-01-01\", \"\"],\n+                              [\"\", \"1\", \"\", \"1\", \"b\", \"b\",\n+                               \"2024-01-01\", \"2024-01-01\", \"\"],\n+                              [\"green\", \"0.0\", \"2.0\", \"2.0\", \"c\", \"c\"]]\n         cls.header3 = [[\"a\", \"b\", \"c\", \"d\", \"w\", \"e\", \"f\", \"g\"],\n                        [\"d\", \"c\", \"c\", \"c\", \"c\", \"d\", \"s\", \"yes no\"],\n                        [\"meta\", \"class\", \"meta\", \"\", \"weight\", \"i\", \"\", \"\"],\n@@ -53,6 +60,16 @@ class TestTableHeader(InitTestData):\n         self.assertListEqual(types, [\"\", \"c\", \"\", \"\", \"\", \"\"])\n         self.assertListEqual(flags, [\"m\", \"c\", \"m\", \"\", \"i\", \"\"])\n \n+    def test_get_header_data_1_flags2(self):\n+        names, types, flags = _TableHeader.create_header_data(\n+            self.header1_flags2[:1])\n+        names_ = [\"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\", \"a7\", \"a8\", \"a9\"]\n+        types_ = [\"d\", \"d\", \"d\", \"c\", \"s\", \"s\", \"t\", \"t\", \"t\"]\n+        flags_ = [\"\", \"\", \"c\", \"\", \"\", \"m\", \"\", \"m\", \"\"]\n+        self.assertListEqual(names, names_)\n+        self.assertListEqual(types, types_)\n+        self.assertListEqual(flags, flags_)\n+\n     def test_get_header_data_3(self):\n         names, types, flags = _TableHeader.create_header_data(self.header3[:3])\n         self.assertListEqual(names, [\"a\", \"b\", \"c\", \"d\", \"w\", \"e\", \"f\", \"g\"])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5292.0, "instance_id": "biolab__orange3-5292", "issue_numbers": 0, "base_commit": "fc399e38b7b817ccba66b7d5a6a0b29ffb63f63b", "patch": "diff --git a/Orange/widgets/data/owcreateinstance.py b/Orange/widgets/data/owcreateinstance.py\nindex 615bbb6a6..5fdba218d 100644\n--- a/Orange/widgets/data/owcreateinstance.py\n+++ b/Orange/widgets/data/owcreateinstance.py\n@@ -510,7 +510,7 @@ class OWCreateInstance(OWWidget):\n         vbox.layout().addWidget(self.filter_edit)\n         vbox.layout().addWidget(self.view)\n \n-        box = gui.hBox(vbox)\n+        box = gui.hBox(vbox, objectName=\"buttonBox\")\n         gui.rubber(box)\n         for name in self.ACTIONS:\n             gui.button(\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcreateinstance.py b/Orange/widgets/data/tests/test_owcreateinstance.py\nindex 099aa9884..7684fc977 100644\n--- a/Orange/widgets/data/tests/test_owcreateinstance.py\n+++ b/Orange/widgets/data/tests/test_owcreateinstance.py\n@@ -3,8 +3,9 @@ from unittest.mock import Mock\n \n import numpy as np\n \n-from AnyQt.QtCore import QDateTime, QDate, QTime, QPoint\n-from AnyQt.QtWidgets import QWidget, QLineEdit, QStyleOptionViewItem, QMenu\n+from AnyQt.QtCore import QDateTime, QDate, QTime, QPoint, QObject\n+from AnyQt.QtWidgets import QWidget, QLineEdit, QStyleOptionViewItem, QMenu, \\\n+    QPushButton\n \n from orangewidget.widget import StateInfo\n from orangewidget.tests.base import GuiTest\n@@ -99,8 +100,7 @@ class TestOWCreateInstance(WidgetTest):\n     def _get_init_buttons(self, widget=None):\n         if not widget:\n             widget = self.widget\n-        box = widget.controlArea.layout().itemAt(0).widget().children()[3]\n-        return box.children()[1:]\n+        return widget.findChild(QObject, \"buttonBox\").findChildren(QPushButton)\n \n     def test_initialize_buttons(self):\n         self.widget.controls.append_to_data.setChecked(False)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5326.0, "instance_id": "biolab__orange3-5326", "issue_numbers": 0, "base_commit": "69e580d306c717804215ee3cca3d111eb9e6bab9", "patch": "diff --git a/Orange/widgets/data/owfeatureconstructor.py b/Orange/widgets/data/owfeatureconstructor.py\nindex c0e62794a..fc92cb568 100644\n--- a/Orange/widgets/data/owfeatureconstructor.py\n+++ b/Orange/widgets/data/owfeatureconstructor.py\n@@ -14,6 +14,7 @@ import random\n import logging\n import ast\n import types\n+import unicodedata\n \n from traceback import format_exception_only\n from collections import namedtuple, OrderedDict\n@@ -917,7 +918,8 @@ def bind_variable(descriptor, env, data):\n \n     exp_ast = ast.parse(descriptor.expression, mode=\"eval\")\n     freev = unique(freevars(exp_ast, []))\n-    variables = {sanitized_name(v.name): v for v in env}\n+    variables = {unicodedata.normalize(\"NFKC\", sanitized_name(v.name)): v\n+                 for v in env}\n     source_vars = [(name, variables[name]) for name in freev\n                    if name in variables]\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeatureconstructor.py b/Orange/widgets/data/tests/test_owfeatureconstructor.py\nindex dc474694b..85affd905 100644\n--- a/Orange/widgets/data/tests/test_owfeatureconstructor.py\n+++ b/Orange/widgets/data/tests/test_owfeatureconstructor.py\n@@ -133,6 +133,22 @@ class FeatureConstructorTest(unittest.TestCase):\n         np.testing.assert_array_equal(ndata.X[:, 0],\n                                       data.X[:, :2].sum(axis=1))\n \n+    @staticmethod\n+    def test_unicode_normalization():\n+        micro = \"\\u00b5\"\n+        domain = Domain([ContinuousVariable(micro)])\n+        name = 'Micro Variable'\n+        expression = micro\n+        desc = PyListModel(\n+            [ContinuousDescriptor(name=name, expression=expression,\n+                                  number_of_decimals=2)]\n+        )\n+        data = Table.from_numpy(domain, np.arange(5).reshape(5, 1))\n+        data = data.transform(Domain(data.domain.attributes,\n+                                     [],\n+                                     construct_variables(desc, data)))\n+        np.testing.assert_equal(data.X, data.metas)\n+\n \n class TestTools(unittest.TestCase):\n     def test_free_vars(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4827.0, "instance_id": "biolab__orange3-4827", "issue_numbers": 0, "base_commit": "5cd99c75ff44fccaf1ba4915ab74af56da08aad7", "patch": "diff --git a/Orange/widgets/data/owselectcolumns.py b/Orange/widgets/data/owselectcolumns.py\nindex f511fba77..312dad4d0 100644\n--- a/Orange/widgets/data/owselectcolumns.py\n+++ b/Orange/widgets/data/owselectcolumns.py\n@@ -362,9 +362,10 @@ class OWSelectAttributes(widget.OWWidget):\n         all_vars = data.domain.variables + data.domain.metas\n \n         def attrs_for_role(role):\n-            return [attr for _, attr in sorted(\n-                (domain_hints[attr][1], attr)\n-                for attr in all_vars if domain_hints[attr][0] == role)]\n+            selected_attrs = [\n+                attr for attr in all_vars if domain_hints[attr][0] == role\n+            ]\n+            return sorted(selected_attrs, key=lambda attr: domain_hints[attr][1])\n \n         domain = data.domain\n         domain_hints = {}\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectcolumns.py b/Orange/widgets/data/tests/test_owselectcolumns.py\nindex 76a1dd2d2..5a7e87cf7 100644\n--- a/Orange/widgets/data/tests/test_owselectcolumns.py\n+++ b/Orange/widgets/data/tests/test_owselectcolumns.py\n@@ -2,6 +2,7 @@\n from unittest import TestCase\n from unittest.mock import Mock\n \n+import numpy as np\n from AnyQt.QtCore import QMimeData, QPoint, Qt\n from AnyQt.QtGui import QDragEnterEvent\n \n@@ -396,3 +397,17 @@ class TestOWSelectAttributes(WidgetTest):\n         self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n         output_sum.assert_called_once()\n         self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n+    def test_domain_new_feature(self):\n+        \"\"\" Test scenario when new attribute is added at position 0 \"\"\"\n+        data = Table(\"iris\")\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        data1 = Table(\n+            Domain(\n+                (ContinuousVariable(\"a\"),) + data.domain.attributes,\n+                data.domain.class_var),\n+            np.hstack((np.ones((len(data), 1)), data.X)),\n+            data.Y\n+        )\n+        self.send_signal(self.widget.Inputs.data, data1)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4760.0, "instance_id": "biolab__orange3-4760", "issue_numbers": 0, "base_commit": "b0bfdafe85d1ee3bf6bb81739bb82aeeeb419e8e", "patch": "diff --git a/Orange/widgets/unsupervised/owpca.py b/Orange/widgets/unsupervised/owpca.py\nindex 8a9281864..4fc4046e7 100644\n--- a/Orange/widgets/unsupervised/owpca.py\n+++ b/Orange/widgets/unsupervised/owpca.py\n@@ -5,6 +5,7 @@ from AnyQt.QtWidgets import QFormLayout\n from AnyQt.QtCore import Qt\n \n from Orange.data import Table, Domain, StringVariable, ContinuousVariable\n+from Orange.data.util import get_unique_names\n from Orange.data.sql.table import SqlTable, AUTO_DL_LIMIT\n from Orange.preprocess import preprocess\n from Orange.projection import PCA\n@@ -298,10 +299,12 @@ class OWPCA(widget.OWWidget):\n             )\n             transformed = transformed.from_table(domain, transformed)\n             # prevent caching new features by defining compute_value\n+            proposed = [a.name for a in self._pca.orig_domain.attributes]\n+            meta_name = get_unique_names(proposed, 'components')\n             dom = Domain(\n-                [ContinuousVariable(a.name, compute_value=lambda _: None)\n-                 for a in self._pca.orig_domain.attributes],\n-                metas=[StringVariable(name='component')])\n+                [ContinuousVariable(name, compute_value=lambda _: None)\n+                 for name in proposed],\n+                metas=[StringVariable(name=meta_name)])\n             metas = numpy.array([['PC{}'.format(i + 1)\n                                   for i in range(self.ncomponents)]],\n                                 dtype=object).T\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owpca.py b/Orange/widgets/unsupervised/tests/test_owpca.py\nindex e6f36b6e0..01afae171 100644\n--- a/Orange/widgets/unsupervised/tests/test_owpca.py\n+++ b/Orange/widgets/unsupervised/tests/test_owpca.py\n@@ -9,7 +9,7 @@ from Orange.data import Table, Domain, ContinuousVariable, TimeVariable\n from Orange.preprocess import preprocess\n from Orange.preprocess.preprocess import Normalize\n from Orange.widgets.tests.base import WidgetTest\n-from Orange.widgets.tests.utils import table_dense_sparse\n+from Orange.widgets.tests.utils import table_dense_sparse, possible_duplicate_table\n from Orange.widgets.unsupervised.owpca import OWPCA\n from Orange.tests import test_filename\n from sklearn.utils import check_random_state\n@@ -89,6 +89,12 @@ class TestOWPCA(WidgetTest):\n         var3 = self.widget.variance_covered\n         self.assertGreater(var3, var2)\n \n+    def test_unique_domain_components(self):\n+        table = possible_duplicate_table('components')\n+        self.send_signal(self.widget.Inputs.data, table)\n+        out = self.get_output(self.widget.Outputs.components)\n+        self.assertEqual(out.domain.metas[0].name, 'components (1)')\n+\n     def test_sparse_data(self):\n         \"\"\"Check that PCA returns the same results for both dense and sparse data.\"\"\"\n         dense_data, sparse_data = self.iris, self.iris.to_sparse()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6441.0, "instance_id": "biolab__orange3-6441", "issue_numbers": 0, "base_commit": "fbc9f1142ebd639f7d8fd70bcc3dbae91152f33d", "patch": "diff --git a/Orange/widgets/gui.py b/Orange/widgets/gui.py\nindex 75b458965..ebae96e3a 100644\n--- a/Orange/widgets/gui.py\n+++ b/Orange/widgets/gui.py\n@@ -503,14 +503,14 @@ class CallBackListView(ControlledCallback):\n         if isinstance(self.view.model(), QSortFilterProxyModel):\n             selection = self.view.model().mapSelectionToSource(selection)\n         values = [i.row() for i in selection.indexes()]\n-        if values:\n-            # FIXME: irrespective of PyListModel check, this might/should always\n-            # callback with values!\n-            if isinstance(self.model, PyListModel):\n-                values = [self.model[i] for i in values]\n-            if self.view.selectionMode() == self.view.SingleSelection:\n-                values = values[0]\n-            self.acyclic_setattr(values)\n+\n+        # set attribute's values\n+        if isinstance(self.model, PyListModel):\n+            values = [self.model[i] for i in values]\n+        if self.view.selectionMode() == self.view.SingleSelection:\n+            assert len(values) <= 1\n+            values = values[0] if values else None\n+        self.acyclic_setattr(values)\n \n \n class CallBackListBox:\n.", "test_patch": "diff --git a/Orange/widgets/tests/test_gui.py b/Orange/widgets/tests/test_gui.py\nindex 1d7d46b73..6c385b7e9 100644\n--- a/Orange/widgets/tests/test_gui.py\n+++ b/Orange/widgets/tests/test_gui.py\n@@ -1,3 +1,4 @@\n+import unittest\n from unittest.mock import patch\n \n import numpy as np\n@@ -55,6 +56,10 @@ class TestListModel(GuiTest):\n         view.setCurrentIndex(self.attrs.index(1, 0))\n         self.assertEqual(widget.foo, [b])\n \n+        # unselect all\n+        sel_model.clear()\n+        self.assertEqual(widget.foo, [])\n+\n     def test_select_callfront(self):\n         widget = self.widget\n         view = self.view\n@@ -129,3 +134,7 @@ class TestRankModel(GuiTest):\n         test_array = np.array([\"Bertha\", \"daniela\", \"ann\", \"Cecilia\"])\n         assert_equal(func(test_array, Qt.AscendingOrder), [2, 0, 3, 1])\n         assert_equal(func(test_array, Qt.DescendingOrder), [1, 3, 0, 2])\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6934.0, "instance_id": "biolab__orange3-6934", "issue_numbers": 0, "base_commit": "7d69fd919e7c4d868bffbbdd840e8c7a96b5bb24", "patch": "diff --git a/Orange/widgets/visualize/utils/error_bars_dialog.py b/Orange/widgets/visualize/utils/error_bars_dialog.py\nindex 79319ec84..55c8de60c 100644\n--- a/Orange/widgets/visualize/utils/error_bars_dialog.py\n+++ b/Orange/widgets/visualize/utils/error_bars_dialog.py\n@@ -36,8 +36,9 @@ class ErrorBarsDialog(QDialog):\n         lower_combo.setModel(self.__model)\n         lower_combo.currentIndexChanged.connect(self.changed)\n \n-        button_diff = QRadioButton(\"Difference\", checked=True)\n-        button_abs = QRadioButton(\"Absolute\")\n+        button_diff = QRadioButton(\"Difference from plotted value\",\n+                                   checked=True)\n+        button_abs = QRadioButton(\"Absolute position on the plot\")\n         self.__radio_buttons = QButtonGroup()\n         self.__radio_buttons.addButton(button_diff, 0)\n         self.__radio_buttons.addButton(button_abs, 1)\n@@ -46,6 +47,7 @@ class ErrorBarsDialog(QDialog):\n         form = QFormLayout()\n         form.addRow(QLabel(\"Upper:\"), upper_combo)\n         form.addRow(QLabel(\"Lower:\"), lower_combo)\n+        form.setVerticalSpacing(10)\n         form.addRow(button_diff)\n         form.addRow(button_abs)\n \n.", "test_patch": "diff --git a/Orange/widgets/visualize/utils/tests/test_error_bars_dialog.py b/Orange/widgets/visualize/utils/tests/test_error_bars_dialog.py\nindex 5a4130795..2e5486e0e 100644\n--- a/Orange/widgets/visualize/utils/tests/test_error_bars_dialog.py\n+++ b/Orange/widgets/visualize/utils/tests/test_error_bars_dialog.py\n@@ -21,10 +21,12 @@ class TestErrorBarsDialog(GuiTest):\n         self.assertEqual(form.itemAt(2).widget().text(), \"Lower:\")\n         self.assertEqual(form.itemAt(3).widget().currentText(), \"(None)\")\n \n-        self.assertEqual(form.itemAt(4).widget().text(), \"Difference\")\n+        self.assertEqual(form.itemAt(4).widget().text(),\n+                         \"Difference from plotted value\")\n         self.assertTrue(form.itemAt(4).widget().isChecked())\n \n-        self.assertEqual(form.itemAt(5).widget().text(), \"Absolute\")\n+        self.assertEqual(form.itemAt(5).widget().text(),\n+                         \"Absolute position on the plot\")\n         self.assertFalse(form.itemAt(5).widget().isChecked())\n \n     def test_get_data(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4257.0, "instance_id": "biolab__orange3-4257", "issue_numbers": 0, "base_commit": "04b7c72740ee5ced370aa8104152c38e3245e2b1", "patch": "diff --git a/Orange/widgets/visualize/owboxplot.py b/Orange/widgets/visualize/owboxplot.py\nindex 958cc8894..5811d0244 100644\n--- a/Orange/widgets/visualize/owboxplot.py\n+++ b/Orange/widgets/visualize/owboxplot.py\n@@ -299,14 +299,14 @@ class OWBoxPlot(widget.OWWidget):\n         self.attrs[:] = [\n             var for var in chain(\n                 domain.class_vars, domain.metas, domain.attributes)\n-            if var.is_primitive()]\n+            if var.is_primitive() and not var.attributes.get(\"hidden\", False)]\n \n     def reset_groups(self):\n         domain = self.dataset.domain\n         self.group_vars[:] = [None] + [\n             var for var in chain(\n                 domain.class_vars, domain.metas, domain.attributes)\n-            if var.is_discrete]\n+            if var.is_discrete and not var.attributes.get(\"hidden\", False)]\n \n     # noinspection PyTypeChecker\n     @Inputs.data\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owboxplot.py b/Orange/widgets/visualize/tests/test_owboxplot.py\nindex 078294be8..18bb8986c 100644\n--- a/Orange/widgets/visualize/tests/test_owboxplot.py\n+++ b/Orange/widgets/visualize/tests/test_owboxplot.py\n@@ -47,6 +47,15 @@ class TestOWBoxPlot(WidgetTest, WidgetOutputsTestMixin):\n         self.assertTrue(self.widget.display_box.isHidden())\n         self.assertFalse(self.widget.stretching_box.isHidden())\n \n+    def test_dont_show_hidden_attrs(self):\n+        \"\"\"Check widget's data\"\"\"\n+        iris = Table(\"iris\")\n+        iris.domain[\"iris\"].attributes[\"hidden\"] = True\n+        iris.domain[\"petal length\"].attributes[\"hidden\"] = True\n+        self.send_signal(self.widget.Inputs.data, iris)\n+        self.assertEqual(len(self.widget.attrs), 3)\n+        self.assertEqual(len(self.widget.group_vars), 1)\n+\n     def test_primitive_metas(self):\n         new_domain = Domain(attributes=[], class_vars=[], metas=(\n             self.data.domain.attributes + self.data.domain.class_vars))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6314.0, "instance_id": "biolab__orange3-6314", "issue_numbers": 0, "base_commit": "78dc6488cd40888ffc6ec1d32b0828095a39571b", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex c37715e47..0aaf1024e 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -344,31 +344,22 @@ def stats(X, weights=None, compute_variance=False):\n \n     if X.size and is_numeric:\n         if is_sparse:\n+            nans = countnans(X, axis=0)\n             X = X.tocsc()\n+        else:\n+            nans = np.isnan(X).sum(axis=0)\n         if compute_variance:\n             means, vars = nan_mean_var(X, axis=0, weights=weights)\n         else:\n             means = nanmean(X, axis=0, weights=weights)\n             vars = np.zeros(X.shape[1] if X.ndim == 2 else 1)\n-\n-    if X.size and is_numeric and not is_sparse:\n-        nans = np.isnan(X).sum(axis=0)\n-        return np.column_stack((\n-            np.nanmin(X, axis=0),\n-            np.nanmax(X, axis=0),\n-            means,\n-            vars,\n-            nans,\n-            X.shape[0] - nans))\n-    elif is_sparse and X.size:\n-        non_zero = np.bincount(X.nonzero()[1], minlength=X.shape[1])\n         return np.column_stack((\n             nanmin(X, axis=0),\n             nanmax(X, axis=0),\n             means,\n             vars,\n-            X.shape[0] - non_zero,\n-            non_zero))\n+            nans,\n+            X.shape[0] - nans))\n     else:\n         if X.ndim == 1:\n             X = X[:, None]\n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex 121c66cee..b6ed4d568 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -107,26 +107,26 @@ class TestUtil(unittest.TestCase):\n \n     def test_stats_sparse(self):\n         X = csr_matrix(np.identity(5))\n-        np.testing.assert_equal(stats(X), [[0, 1, .2, 0, 4, 1],\n-                                           [0, 1, .2, 0, 4, 1],\n-                                           [0, 1, .2, 0, 4, 1],\n-                                           [0, 1, .2, 0, 4, 1],\n-                                           [0, 1, .2, 0, 4, 1]])\n+        np.testing.assert_equal(stats(X), [[0, 1, .2, 0, 0, 5],\n+                                           [0, 1, .2, 0, 0, 5],\n+                                           [0, 1, .2, 0, 0, 5],\n+                                           [0, 1, .2, 0, 0, 5],\n+                                           [0, 1, .2, 0, 0, 5]])\n \n         # assure last two columns have just zero elements\n         X = X[:3]\n-        np.testing.assert_equal(stats(X), [[0, 1, 1/3, 0, 2, 1],\n-                                           [0, 1, 1/3, 0, 2, 1],\n-                                           [0, 1, 1/3, 0, 2, 1],\n-                                           [0, 0, 0, 0, 3, 0],\n-                                           [0, 0, 0, 0, 3, 0]])\n+        np.testing.assert_equal(stats(X), [[0, 1, 1/3, 0, 0, 3],\n+                                           [0, 1, 1/3, 0, 0, 3],\n+                                           [0, 1, 1/3, 0, 0, 3],\n+                                           [0, 0, 0, 0, 0, 3],\n+                                           [0, 0, 0, 0, 0, 3]])\n \n         r = stats(X, compute_variance=True)\n-        np.testing.assert_almost_equal(r, [[0, 1, 1/3, 2/9, 2, 1],\n-                                           [0, 1, 1/3, 2/9, 2, 1],\n-                                           [0, 1, 1/3, 2/9, 2, 1],\n-                                           [0, 0, 0, 0, 3, 0],\n-                                           [0, 0, 0, 0, 3, 0]])\n+        np.testing.assert_almost_equal(r, [[0, 1, 1/3, 2/9, 0, 3],\n+                                           [0, 1, 1/3, 2/9, 0, 3],\n+                                           [0, 1, 1/3, 2/9, 0, 3],\n+                                           [0, 0, 0, 0, 0, 3],\n+                                           [0, 0, 0, 0, 0, 3]])\n \n     def test_stats_weights(self):\n         X = np.arange(4).reshape(2, 2).astype(float)\n@@ -152,11 +152,11 @@ class TestUtil(unittest.TestCase):\n         X = np.arange(4).reshape(2, 2).astype(float)\n         X = csr_matrix(X)\n         weights = np.array([1, 3])\n-        np.testing.assert_equal(stats(X, weights), [[0, 2, 1.5, 0, 1, 1],\n+        np.testing.assert_equal(stats(X, weights), [[0, 2, 1.5, 0, 0, 2],\n                                                     [1, 3, 2.5, 0, 0, 2]])\n \n         np.testing.assert_equal(stats(X, weights, compute_variance=True),\n-                                [[0, 2, 1.5, 0.75, 1, 1],\n+                                [[0, 2, 1.5, 0.75, 0, 2],\n                                  [1, 3, 2.5, 0.75, 0, 2]])\n \n     def test_stats_non_numeric(self):\n@@ -170,6 +170,42 @@ class TestUtil(unittest.TestCase):\n                                            [np.inf, -np.inf, 0, 0, 2, 1],\n                                            [np.inf, -np.inf, 0, 0, 0, 3]])\n \n+    def test_stats_nancounts(self):\n+        arr = np.array([[1, 4, 9],\n+                        [-2, 10, 0],\n+                        [0, np.nan, np.nan],\n+                        [0, np.nan, 0]])\n+\n+        expected = [[-2, 1, -0.25, (1.25 ** 2 + 1.75 ** 2 + .25 ** 2 + .25 ** 2) / 4, 0, 4],\n+                    [4, 10, 7, 3 ** 2, 2, 2],\n+                    [0, 9, 3, (6 ** 2 + 3 ** 2 + 3 ** 2) / 3, 1, 3]]\n+        np.testing.assert_almost_equal(stats(arr, compute_variance=True), expected)\n+\n+        sparr = csc_matrix(arr)\n+        np.testing.assert_almost_equal(stats(sparr, compute_variance=True), expected)\n+\n+        sparr = sparr.tocsr()\n+        np.testing.assert_almost_equal(stats(sparr, compute_variance=True), expected)\n+\n+        weights = np.array([1, 2, 0, 3])\n+        e0 = (1 * 1 - 2 * 2 + 0 * 0 + 3 * 0) / (1 + 2 + 0 + 3)\n+        e1 = (1 * 4 + 2 * 10) / 3\n+        e2 = (1 * 9 + 2 * 0 + 3 * 0) / 6\n+        expected = [[-2, 1, e0, ((e0 - 1) ** 2 + 2 * (e0 + 2) ** 2 + 3 * e0 ** 2) / 6, 0, 4],\n+                    [4, 10, e1, ((e1 - 4) ** 2 + 2 * (e1 - 10) ** 2) / 3, 2, 2],\n+                    [0, 9, e2, ((e2 - 9) ** 2 + 2 * e2 ** 2 + 3 * e2 ** 2) / 6, 1, 3]]\n+\n+        np.testing.assert_almost_equal(\n+            stats(arr, weights=weights, compute_variance=True), expected)\n+\n+        sparr = csc_matrix(arr)\n+        np.testing.assert_almost_equal(\n+            stats(sparr, weights=weights, compute_variance=True), expected)\n+\n+        sparr = sparr.tocsr()\n+        np.testing.assert_almost_equal(\n+            stats(sparr, weights=weights, compute_variance=True), expected)\n+\n     def test_stats_empty(self):\n         X = np.array([])\n         np.testing.assert_equal(stats(X), [[np.inf, -np.inf, 0, 0, 0, 0]])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4755.0, "instance_id": "biolab__orange3-4755", "issue_numbers": 0, "base_commit": "db06988ce5a509a658d6cb197158d19bf612f5c6", "patch": "diff --git a/Orange/widgets/data/owselectrows.py b/Orange/widgets/data/owselectrows.py\nindex b54ae8a12..4022330de 100644\n--- a/Orange/widgets/data/owselectrows.py\n+++ b/Orange/widgets/data/owselectrows.py\n@@ -339,6 +339,8 @@ class OWSelectRows(widget.OWWidget):\n \n     def set_new_operators(self, attr_combo, adding_all,\n                           selected_index=None, selected_values=None):\n+        old_combo = self.cond_list.cellWidget(attr_combo.row, 1)\n+        prev_text = old_combo.currentText() if old_combo else \"\"\n         oper_combo = QComboBox()\n         oper_combo.row = attr_combo.row\n         oper_combo.attr_combo = attr_combo\n@@ -348,7 +350,11 @@ class OWSelectRows(widget.OWWidget):\n         else:\n             var = self.data.domain[attr_name]\n             oper_combo.addItems(self.operator_names[type(var)])\n-        oper_combo.setCurrentIndex(selected_index or 0)\n+        if selected_index is None:\n+            selected_index = oper_combo.findText(prev_text)\n+            if selected_index == -1:\n+                selected_index = 0\n+        oper_combo.setCurrentIndex(selected_index)\n         self.cond_list.setCellWidget(oper_combo.row, 1, oper_combo)\n         self.set_new_values(oper_combo, adding_all, selected_values)\n         oper_combo.currentIndexChanged.connect(\n@@ -789,4 +795,4 @@ class DropDownToolButton(QToolButton):\n \n \n if __name__ == \"__main__\":  # pragma: no cover\n-    WidgetPreview(OWSelectRows).run(Table(\"zoo\"))\n+    WidgetPreview(OWSelectRows).run(Table(\"heart_disease\"))\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectrows.py b/Orange/widgets/data/tests/test_owselectrows.py\nindex bdbee4bd9..df0d6b4d9 100644\n--- a/Orange/widgets/data/tests/test_owselectrows.py\n+++ b/Orange/widgets/data/tests/test_owselectrows.py\n@@ -315,6 +315,26 @@ class TestOWSelectRows(WidgetTest):\n         new_iris = iris.transform(new_domain)\n         self.send_signal(self.widget.Inputs.data, new_iris)\n \n+    def test_keep_operator(self):\n+        data = Table(\"heart_disease\")\n+        domain = data.domain\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        self.widget.remove_all_button.click()\n+        self.enterFilter(domain[\"age\"], \"is not\", \"42\")\n+        simulate.combobox_activate_item(\n+            self.widget.cond_list.cellWidget(0, 0), \"chest pain\", delay=0)\n+        self.assertEqual(\n+            self.widget.cond_list.cellWidget(0, 1).currentText(), \"is not\")\n+\n+        self.widget.remove_all_button.click()\n+        self.enterFilter(domain[\"age\"], \"is below\", \"42\")\n+        simulate.combobox_activate_item(\n+            self.widget.cond_list.cellWidget(0, 0), \"chest pain\", delay=0)\n+        self.assertEqual(\n+            self.widget.cond_list.cellWidget(0, 1).currentText(), \"is\")\n+\n     # Uncomment this on 2022/2/2\n     #\n     # def test_migration_to_version_1(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6271.0, "instance_id": "biolab__orange3-6271", "issue_numbers": 0, "base_commit": "a0731da1fafd73a46c198ac5e373cd8da2ef4f25", "patch": "diff --git a/Orange/widgets/utils/itemmodels.py b/Orange/widgets/utils/itemmodels.py\nindex b2f165b91..a749b7115 100644\n--- a/Orange/widgets/utils/itemmodels.py\n+++ b/Orange/widgets/utils/itemmodels.py\n@@ -844,7 +844,7 @@ class TableModel(AbstractSortTableModel):\n \n         def make_basket(vars, density, role):\n             return TableModel.Basket(\n-                vars, TableModel.Attribute, brush_for_role[role], density,\n+                vars, role, brush_for_role[role], density,\n                 make_basket_formatter(vars, density)\n             )\n \n@@ -903,8 +903,7 @@ class TableModel(AbstractSortTableModel):\n         if isinstance(coldesc, self.Basket):\n             # `self.source[row:row + 1]` returns Table\n             # `self.source[row]` returns RowInstance\n-            if coldesc.role is self.ClassVar:\n-                return self.source[row:row + 1].Y\n+            # We only worry about X and metas, as Y cannot be sparse\n             if coldesc.role is self.Meta:\n                 return self.source[row:row + 1].metas\n             if coldesc.role is self.Attribute:\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_itemmodels.py b/Orange/widgets/utils/tests/test_itemmodels.py\nindex 14913e611..01b48baae 100644\n--- a/Orange/widgets/utils/tests/test_itemmodels.py\n+++ b/Orange/widgets/utils/tests/test_itemmodels.py\n@@ -3,6 +3,8 @@\n import unittest\n from unittest.mock import patch\n \n+from scipy.sparse import csr_matrix\n+\n from AnyQt.QtCore import Qt, QModelIndex\n from AnyQt.QtTest import QSignalSpy\n from AnyQt.QtGui import QBrush, QColor\n@@ -599,7 +601,7 @@ class TestTableModel(unittest.TestCase, dbt):\n         self.assertEqual(table.domain[4], data(index(0, 0), TableModel.VariableRole))\n         self.assertIsInstance(data(index(0, 0), TableModel.VariableStatsRole), BasicStats)\n \n-        # X: basket\n+        # X: sparse\n         self.assertEqual(\"sepal_length=1.5, sepal_width=5.3, petal_length=4.1, petal_width=2\",\n                          data(index(0, 3), Qt.DisplayRole))\n         self.assertIsNone(data(index(0, 3), Qt.EditRole))\n@@ -610,6 +612,20 @@ class TestTableModel(unittest.TestCase, dbt):\n         self.assertIsNone(data(index(0, 3), TableModel.VariableRole))\n         self.assertIsNone(data(index(0, 3), TableModel.VariableStatsRole))\n \n+        # X: sparse_bool\n+        table = Table.from_numpy(Domain(table.domain.class_vars, metas=table.domain.attributes),\n+                                 csr_matrix(table.Y), metas=table.X)\n+        model = TableModel(table)\n+        data, index = model.data, model.index\n+\n+        self.assertEqual(\"Iris-setosa\", data(index(0, 1), Qt.DisplayRole))\n+\n+        # metas: sparse\n+        self.assertEqual(\"sepal_length=1.5, sepal_width=5.3, petal_length=4.1, petal_width=2\",\n+                         data(index(0, 0), Qt.DisplayRole))\n+        self.assertIsInstance(data(index(0, 0), Qt.BackgroundRole), QBrush)\n+        self.assertIsInstance(data(index(0, 0), Qt.ForegroundRole), QColor)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5237.0, "instance_id": "biolab__orange3-5237", "issue_numbers": 0, "base_commit": "3c9ffc8bec02789447690e1ecf5d372d39086aa9", "patch": "diff --git a/Orange/widgets/data/owselectcolumns.py b/Orange/widgets/data/owselectcolumns.py\nindex af11f3668..3a385ba69 100644\n--- a/Orange/widgets/data/owselectcolumns.py\n+++ b/Orange/widgets/data/owselectcolumns.py\n@@ -168,7 +168,7 @@ class OWSelectAttributes(widget.OWWidget):\n     settingsHandler = SelectAttributesDomainContextHandler(first_match=False)\n     domain_role_hints = ContextSetting({})\n     use_input_features = Setting(False)\n-    select_new_features = Setting(True)\n+    ignore_new_features = Setting(False)\n     auto_commit = Setting(True)\n \n     class Warning(widget.OWWidget.Warning):\n@@ -301,7 +301,7 @@ class OWSelectAttributes(widget.OWWidget):\n \n         bbox = gui.vBox(self.controlArea, \"Additional settings\", addToLayout=False)\n         gui.checkBox(\n-            bbox, self, \"select_new_features\", \"Automatically select additional/new features\"\n+            bbox, self, \"ignore_new_features\", \"Ignore new variables by default\"\n         )\n         layout.addWidget(bbox, 3, 0, 1, 3)\n \n@@ -390,7 +390,7 @@ class OWSelectAttributes(widget.OWWidget):\n         Define hints for selected/unselected features.\n         Rules:\n         - if context available, restore new features based on checked/unchecked\n-          select_new_features, context hint should be took into account\n+          ignore_new_features, context hint should be took into account\n         - in no context, restore features based on the domain (as selected)\n \n         Parameters\n@@ -404,7 +404,7 @@ class OWSelectAttributes(widget.OWWidget):\n         should appear\n         \"\"\"\n         domain_hints = {}\n-        if self.select_new_features or len(self.domain_role_hints) == 0:\n+        if not self.ignore_new_features or len(self.domain_role_hints) == 0:\n             # select_new_features selected or no context - restore based on domain\n             domain_hints.update(\n                 self._hints_from_seq(\"attribute\", domain.attributes)\n@@ -414,7 +414,7 @@ class OWSelectAttributes(widget.OWWidget):\n                 self._hints_from_seq(\"class\", domain.class_vars)\n             )\n         else:\n-            # if context restored and select_new_features unselected - restore\n+            # if context restored and ignore_new_features selected - restore\n             # new features as available\n             d = domain.attributes + domain.metas + domain.class_vars\n             domain_hints.update(self._hints_from_seq(\"available\", d))\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectcolumns.py b/Orange/widgets/data/tests/test_owselectcolumns.py\nindex 21bb0a9c9..b7f8498ce 100644\n--- a/Orange/widgets/data/tests/test_owselectcolumns.py\n+++ b/Orange/widgets/data/tests/test_owselectcolumns.py\n@@ -415,7 +415,7 @@ class TestOWSelectAttributes(WidgetTest):\n \n     def test_select_new_features(self):\n         \"\"\"\n-        When select_new_features checked new attributes must appear in one of\n+        When ignore_new_features unchecked new attributes must appear in one of\n         selected columns. Test with fist make context remember attributes of\n         reduced domain and then testing with full domain. Features in missing\n         in reduced domain must appears as seleceted.\n@@ -445,14 +445,14 @@ class TestOWSelectAttributes(WidgetTest):\n \n         # if select_new_features checked all new features goes in the selected\n         # features columns - domain equal original\n-        self.assertTrue(self.widget.select_new_features)\n+        self.assertFalse(self.widget.ignore_new_features)\n         self.assertTupleEqual(data.domain.attributes, output.domain.attributes)\n         self.assertTupleEqual(data.domain.metas, output.domain.metas)\n         self.assertEqual(data.domain.class_var, output.domain.class_var)\n \n     def test_unselect_new_features(self):\n         \"\"\"\n-        When select_new_features not checked new attributes must appear in one\n+        When ignore_new_features checked new attributes must appear in one\n         available attributes column. Test with fist make context remember\n         attributes of reduced domain and then testing with full domain.\n         Features in missing in reduced domain must appears as not seleceted.\n@@ -468,9 +468,9 @@ class TestOWSelectAttributes(WidgetTest):\n \n         # make context remember features in reduced domain\n         self.send_signal(self.widget.Inputs.data, new_data)\n-        # unselect select_new_features\n-        self.widget.controls.select_new_features.click()\n-        self.assertFalse(self.widget.select_new_features)\n+        # select ignore_new_features\n+        self.widget.controls.ignore_new_features.click()\n+        self.assertTrue(self.widget.ignore_new_features)\n         output = self.get_output(self.widget.Outputs.data)\n \n         self.assertTupleEqual(\n@@ -483,9 +483,9 @@ class TestOWSelectAttributes(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, data)\n         output = self.get_output(self.widget.Outputs.data)\n \n-        # if select_new_features not checked all new features goes in the\n+        # if ignore_new_features checked all new features goes in the\n         # available attributes column\n-        self.assertFalse(self.widget.select_new_features)\n+        self.assertTrue(self.widget.ignore_new_features)\n         self.assertTupleEqual(new_domain.attributes, output.domain.attributes)\n         self.assertTupleEqual(new_domain.metas, output.domain.metas)\n         self.assertEqual(new_domain.class_var, output.domain.class_var)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5309.0, "instance_id": "biolab__orange3-5309", "issue_numbers": 0, "base_commit": "343f80b12d17bbfaf362ca20ca1a46ea91edf213", "patch": "diff --git a/Orange/data/io_base.py b/Orange/data/io_base.py\nindex 22d1b1611..8149ec962 100644\n--- a/Orange/data/io_base.py\n+++ b/Orange/data/io_base.py\n@@ -61,6 +61,9 @@ class Flags:\n                         except SyntaxError:\n                             # If parsing failed, treat value as string\n                             pass\n+                    # map True and False to booleans\n+                    if v in (\"True\", \"False\"):\n+                        v = {\"True\": True, \"False\": False}[v]\n                     self.attributes[k] = v\n                 else:\n                     setattr(self, flag, True)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex 57f92634a..e9a386289 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -217,6 +217,30 @@ class TestOWEditDomain(WidgetTest):\n         t2 = self.get_output(self.widget.Outputs.data)\n         self.assertEqual(t2.domain[\"a\"].attributes[\"list\"], [1, 2, 4])\n \n+    def test_annotation_bool(self):\n+        \"\"\"Check if bool labels remain bool\"\"\"\n+        a = ContinuousVariable(\"a\")\n+        a.attributes[\"hidden\"] = True\n+        d = Domain([a])\n+        t = Table.from_domain(d)\n+\n+        self.send_signal(self.widget.Inputs.data, t)\n+\n+        assert isinstance(self.widget, OWEditDomain)\n+        # select first variable\n+        idx = self.widget.domain_view.model().index(0)\n+        self.widget.domain_view.setCurrentIndex(idx)\n+\n+        # change first attribute value\n+        editor = self.widget.findChild(ContinuousVariableEditor)\n+        assert isinstance(editor, ContinuousVariableEditor)\n+        idx = editor.labels_model.index(0, 1)\n+        editor.labels_model.setData(idx, \"False\", Qt.EditRole)\n+\n+        self.widget.commit()\n+        t2 = self.get_output(self.widget.Outputs.data)\n+        self.assertFalse(t2.domain[\"a\"].attributes[\"hidden\"])\n+\n     def test_duplicate_names(self):\n         \"\"\"\n         Tests if widget shows error when duplicate name is entered.\n@@ -277,8 +301,6 @@ class TestOWEditDomain(WidgetTest):\n         self.assertIsNone(out1.compute_value)\n         self.assertIsNone(out2.compute_value)\n \n-\n-\n     def test_time_variable_preservation(self):\n         \"\"\"Test if time variables preserve format specific attributes\"\"\"\n         table = Table(test_filename(\"datasets/cyber-security-breaches.tab\"))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": NaN, "instance_id": "biolab__orange3-None", "issue_numbers": 0, "base_commit": "c08c34b7c891f4c5077445a6d6d7bbcccc53a1e8", "patch": "diff --git a/Orange/widgets/data/owgroupby.py b/Orange/widgets/data/owgroupby.py\nindex 56e258cb9..8c665b370 100644\n--- a/Orange/widgets/data/owgroupby.py\n+++ b/Orange/widgets/data/owgroupby.py\n@@ -5,6 +5,7 @@ from functools import partial\n from typing import Any, Dict, List, Optional, Set\n \n import pandas as pd\n+from numpy import nan\n from AnyQt.QtCore import (\n     QAbstractTableModel,\n     QEvent,\n@@ -58,7 +59,7 @@ AGGREGATIONS = {\n     \"Mean\": Aggregation(\"mean\", {ContinuousVariable, TimeVariable}),\n     \"Median\": Aggregation(\"median\", {ContinuousVariable, TimeVariable}),\n     \"Mode\": Aggregation(\n-        lambda x: pd.Series.mode(x)[0], {ContinuousVariable, TimeVariable}\n+        lambda x: pd.Series.mode(x).get(0, nan), {ContinuousVariable, TimeVariable}\n     ),\n     \"Standard deviation\": Aggregation(\"std\", {ContinuousVariable, TimeVariable}),\n     \"Variance\": Aggregation(\"var\", {ContinuousVariable, TimeVariable}),\n@@ -404,7 +405,7 @@ class OWGroupBy(OWWidget, ConcurrentWidgetMixin):\n         self.gb_attrs = [values[row.row()] for row in sorted(rows)]\n         # everything cached in result should be recomputed on gb change\n         self.result = Result()\n-        self.commit()\n+        self.commit.deferred()\n \n     def __aggregation_changed(self, agg: str) -> None:\n         \"\"\"\n@@ -420,7 +421,7 @@ class OWGroupBy(OWWidget, ConcurrentWidgetMixin):\n             else:\n                 self.aggregations[attr].discard(agg)\n             self.agg_table_model.update_aggregation(attr)\n-        self.commit()\n+        self.commit.deferred()\n \n     @Inputs.data\n     def set_data(self, data: Table) -> None:\n@@ -448,11 +449,12 @@ class OWGroupBy(OWWidget, ConcurrentWidgetMixin):\n         self.agg_table_model.set_domain(data.domain if data else None)\n         self._set_gb_selection()\n \n-        self.commit()\n+        self.commit.now()\n \n     #########################\n     # Task connected methods\n \n+    @gui.deferred\n     def commit(self) -> None:\n         self.Error.clear()\n         self.Warning.clear()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owgroupby.py b/Orange/widgets/data/tests/test_owgroupby.py\nindex a85bb4cac..4356622ac 100644\n--- a/Orange/widgets/data/tests/test_owgroupby.py\n+++ b/Orange/widgets/data/tests/test_owgroupby.py\n@@ -12,6 +12,8 @@ from AnyQt.QtWidgets import QListView\n from Orange.data import (\n     Table,\n     table_to_frame,\n+    Domain,\n+    ContinuousVariable,\n )\n from Orange.data.tests.test_aggregate import create_sample_data\n from Orange.widgets.data.owgroupby import OWGroupBy\n@@ -689,6 +691,65 @@ class TestOWGropBy(WidgetTest):\n         output = self.get_output(self.widget.Outputs.data)\n         self.assertEqual(2, len(output))\n \n+    def test_only_nan_in_group(self):\n+        data = Table(\n+            Domain([ContinuousVariable(\"A\"), ContinuousVariable(\"B\")]),\n+            np.array([[1, np.nan], [2, 1], [1, np.nan], [2, 1]]),\n+        )\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        # select feature A as group-by\n+        self._set_selection(self.widget.gb_attrs_view, [0])\n+        # select all aggregations for feature B\n+        self.select_table_rows(self.widget.agg_table_view, [1])\n+        for cb in self.widget.agg_checkboxes.values():\n+            while not cb.isChecked():\n+                cb.click()\n+\n+        # unselect all aggregations for attr A\n+        self.select_table_rows(self.widget.agg_table_view, [0])\n+        for cb in self.widget.agg_checkboxes.values():\n+            while cb.isChecked():\n+                cb.click()\n+\n+        expected_columns = [\n+            \"B - Mean\",\n+            \"B - Median\",\n+            \"B - Mode\",\n+            \"B - Standard deviation\",\n+            \"B - Variance\",\n+            \"B - Sum\",\n+            \"B - Min. value\",\n+            \"B - Max. value\",\n+            \"B - Span\",\n+            \"B - First value\",\n+            \"B - Last value\",\n+            \"B - Random value\",\n+            \"B - Count defined\",\n+            \"B - Count\",\n+            \"B - Proportion defined\",\n+            \"B - Concatenate\",\n+            \"A\",\n+        ]\n+        n = np.nan\n+        expected_df = pd.DataFrame(\n+            [\n+                [n, n, n, n, n, 0, n, n, n, n, n, n, 0, 2, 0, \"\", 1],\n+                [1, 1, 1, 0, 0, 2, 1, 1, 0, 1, 1, 1, 2, 2, 1, \"1.0 1.0\", 2],\n+            ],\n+            columns=expected_columns,\n+        )\n+        output_df = table_to_frame(\n+            self.get_output(self.widget.Outputs.data), include_metas=True\n+        )\n+        pd.testing.assert_frame_equal(\n+            output_df,\n+            expected_df,\n+            check_dtype=False,\n+            check_column_type=False,\n+            check_categorical=False,\n+        )\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6063.0, "instance_id": "biolab__orange3-6063", "issue_numbers": 0, "base_commit": "9b2e5b0fcbe31ee08fb5506dc1dadbd48c5b290f", "patch": "diff --git a/Orange/widgets/data/owfeatureconstructor.py b/Orange/widgets/data/owfeatureconstructor.py\nindex 72704e972..74270b709 100644\n--- a/Orange/widgets/data/owfeatureconstructor.py\n+++ b/Orange/widgets/data/owfeatureconstructor.py\n@@ -1266,7 +1266,7 @@ class FeatureFunc:\n     def extract_column(self, table: Table, var: Variable):\n         data, _ = table.get_column_view(var)\n         if var.is_string:\n-            return list(map(var.str_val, data))\n+            return data\n         elif var.is_discrete and not self.use_values:\n             values = np.array([*var.values, None], dtype=object)\n             idx = data.astype(int)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeatureconstructor.py b/Orange/widgets/data/tests/test_owfeatureconstructor.py\nindex 3de43bae6..7ee9ee628 100644\n--- a/Orange/widgets/data/tests/test_owfeatureconstructor.py\n+++ b/Orange/widgets/data/tests/test_owfeatureconstructor.py\n@@ -20,7 +20,7 @@ from Orange.widgets.data.owfeatureconstructor import (\n     DiscreteDescriptor, ContinuousDescriptor, StringDescriptor,\n     construct_variables, OWFeatureConstructor,\n     FeatureEditor, DiscreteFeatureEditor, FeatureConstructorHandler,\n-    DateTimeDescriptor)\n+    DateTimeDescriptor, StringFeatureEditor)\n \n from Orange.widgets.data.owfeatureconstructor import (\n     freevars, validate_exp, FeatureFunc\n@@ -405,6 +405,20 @@ class OWFeatureConstructorTests(WidgetTest):\n         self.wait_until_finished(self.widget)\n         self.assertTrue(self.widget.Error.more_values_needed.is_shown())\n \n+    def test_missing_strings(self):\n+        domain = Domain([], metas=[StringVariable(\"S1\")])\n+        data = Table.from_list(domain, [[\"A\"], [\"B\"], [None]])\n+        self.widget.setData(data)\n+\n+        editor = StringFeatureEditor()\n+        editor.nameedit.setText(\"S2\")\n+        editor.expressionedit.setText(\"S1 + S1\")\n+        self.widget.addFeature(editor.editorData())\n+        self.widget.apply()\n+        output = self.get_output(self.widget.Outputs.data)\n+        np.testing.assert_equal(output.metas,\n+                                [[\"A\", \"AA\"], [\"B\", \"BB\"], [\"\", \"\"]])\n+\n     @patch(\"Orange.widgets.data.owfeatureconstructor.QMessageBox\")\n     def test_fix_values(self, msgbox):\n         w = self.widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4760.0, "instance_id": "biolab__orange3-4760", "issue_numbers": 0, "base_commit": "3be8d0eba7cc2f9704d65ea76938b63d3a57ca0e", "patch": "diff --git a/Orange/widgets/unsupervised/owpca.py b/Orange/widgets/unsupervised/owpca.py\nindex 8a9281864..e3640739a 100644\n--- a/Orange/widgets/unsupervised/owpca.py\n+++ b/Orange/widgets/unsupervised/owpca.py\n@@ -1,4 +1,5 @@\n import numbers\n+from itertools import chain\n \n import numpy\n from AnyQt.QtWidgets import QFormLayout\n@@ -6,6 +7,7 @@ from AnyQt.QtCore import Qt\n \n from Orange.data import Table, Domain, StringVariable, ContinuousVariable\n from Orange.data.sql.table import SqlTable, AUTO_DL_LIMIT\n+from Orange.data.util import get_unique_names\n from Orange.preprocess import preprocess\n from Orange.projection import PCA\n from Orange.widgets import widget, gui, settings\n@@ -290,18 +292,33 @@ class OWPCA(widget.OWWidget):\n                 # Compute the full transform (MAX_COMPONENTS components) once.\n                 self._transformed = self._pca(self.data)\n             transformed = self._transformed\n+            d = self.data.domain\n+\n+            names = [var.name for var in chain(d.attributes, d.class_vars, d.metas) if var]\n+            proposed = [var.name for var in transformed.domain.attributes[:self.ncomponents]]\n+            unique = get_unique_names(names, proposed)\n+\n+            transformed_attributes = []\n+            for var, u in zip(transformed.domain.attributes[:self.ncomponents], unique):\n+                if var.name != u:\n+                    transformed_attributes.append(var.copy(u))\n+                else:\n+                    transformed_attributes.append(var)\n \n             domain = Domain(\n-                transformed.domain.attributes[:self.ncomponents],\n+                transformed_attributes,\n                 self.data.domain.class_vars,\n                 self.data.domain.metas\n             )\n             transformed = transformed.from_table(domain, transformed)\n             # prevent caching new features by defining compute_value\n+            comp_names = [a.name for a in self._pca.orig_domain.attributes]\n+            meta_var = get_unique_names(comp_names, 'component')\n+\n             dom = Domain(\n                 [ContinuousVariable(a.name, compute_value=lambda _: None)\n                  for a in self._pca.orig_domain.attributes],\n-                metas=[StringVariable(name='component')])\n+                metas=[StringVariable(name=meta_var)])\n             metas = numpy.array([['PC{}'.format(i + 1)\n                                   for i in range(self.ncomponents)]],\n                                 dtype=object).T\n@@ -312,7 +329,7 @@ class OWPCA(widget.OWWidget):\n             data_dom = Domain(\n                 self.data.domain.attributes,\n                 self.data.domain.class_vars,\n-                self.data.domain.metas + domain.attributes)\n+                self.data.domain.metas + tuple(transformed_attributes))\n             data = Table.from_numpy(\n                 data_dom, self.data.X, self.data.Y,\n                 numpy.hstack((self.data.metas, transformed.X)))\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owpca.py b/Orange/widgets/unsupervised/tests/test_owpca.py\nindex e6f36b6e0..77895fad9 100644\n--- a/Orange/widgets/unsupervised/tests/test_owpca.py\n+++ b/Orange/widgets/unsupervised/tests/test_owpca.py\n@@ -9,7 +9,7 @@ from Orange.data import Table, Domain, ContinuousVariable, TimeVariable\n from Orange.preprocess import preprocess\n from Orange.preprocess.preprocess import Normalize\n from Orange.widgets.tests.base import WidgetTest\n-from Orange.widgets.tests.utils import table_dense_sparse\n+from Orange.widgets.tests.utils import table_dense_sparse, possible_duplicate_table\n from Orange.widgets.unsupervised.owpca import OWPCA\n from Orange.tests import test_filename\n from sklearn.utils import check_random_state\n@@ -26,6 +26,12 @@ class TestOWPCA(WidgetTest):\n         self.widget.variance_covered = 100\n         self.widget._update_selection_variance_spin()\n \n+    def test_renaming_of_vars(self):\n+        data = possible_duplicate_table('component')\n+        self.widget.set_data(data)\n+        out = self.get_output(self.widget.Outputs.components)\n+        self.assertEqual(out.domain.metas[0].name, 'component (1)')\n+\n     def test_constant_data(self):\n         data = self.iris[::5]\n         data.X[:, :] = 1.0\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6278.0, "instance_id": "biolab__orange3-6278", "issue_numbers": 0, "base_commit": "35f23ed44d313c1a36079ce2f2510a33a31ed70e", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 736369919..0ebd750a9 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -734,6 +734,9 @@ class Table(Sequence, Storage):\n                     table = assure_domain_conversion_sparsity(table, source)\n                 return table\n \n+            # avoid boolean indices; also convert to slices if possible\n+            row_indices = _optimize_indices(row_indices, len(source))\n+\n             if row_indices is ...:\n                 n_rows = len(source)\n             elif isinstance(row_indices, slice):\n@@ -2421,12 +2424,16 @@ def _subarray(arr, rows, cols):\n         # so they need to be reshaped to produce an open mesh\n         return arr[np.ix_(rows, cols)]\n \n-def _optimize_indices(indices, maxlen):\n+\n+def _optimize_indices(indices, size):\n     \"\"\"\n-    Convert integer indices to slice if possible. It only converts increasing\n-    integer ranges with positive steps and valid starts and ends.\n-    Only convert valid ends so that invalid ranges will still raise\n-    an exception.\n+    Convert boolean indices to integer indices and convert these to a slice\n+    if possible.\n+\n+    A slice is created from only from indices with positive steps and\n+    valid starts and ends (so that invalid ranges will still raise an\n+    exception. An IndexError is raised if boolean indices do not conform\n+    to input size.\n \n     Allows numpy to reuse the data array, because it defaults to copying\n     if given indices.\n@@ -2434,6 +2441,7 @@ def _optimize_indices(indices, maxlen):\n     Parameters\n     ----------\n     indices : 1D sequence, slice or Ellipsis\n+    size : int\n     \"\"\"\n     if isinstance(indices, slice):\n         return indices\n@@ -2450,15 +2458,22 @@ def _optimize_indices(indices, maxlen):\n \n     if len(indices) >= 1:\n         indices = np.asarray(indices)\n-        if indices.dtype != bool:\n-            begin = indices[0]\n-            end = indices[-1]\n-            steps = np.diff(indices) if len(indices) > 1 else np.array([1])\n-            step = steps[0]\n-\n-            # continuous ranges with constant step and valid start and stop index can be slices\n-            if np.all(steps == step) and step > 0 and begin >= 0 and end < maxlen:\n-                return slice(begin, end + step, step)\n+        if indices.dtype == bool:\n+            if len(indices) == size:\n+                indices = np.nonzero(indices)[0]\n+            else:\n+                # raise an exception that numpy would if boolean indices were used\n+                raise IndexError(\"boolean indices did not match dimension\")\n+\n+    if len(indices) >= 1:  # conversion from boolean indices could result in an empty array\n+        begin = indices[0]\n+        end = indices[-1]\n+        steps = np.diff(indices) if len(indices) > 1 else np.array([1])\n+        step = steps[0]\n+\n+        # continuous ranges with constant step and valid start and stop index can be slices\n+        if np.all(steps == step) and step > 0 and begin >= 0 and end < size:\n+            return slice(begin, end + step, step)\n \n     return indices\n \n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex a4a88b889..f352760f4 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -2083,7 +2083,6 @@ class TableIndexingTests(TableTests):\n                 np.testing.assert_almost_equal(table.metas,\n                                                self.table.metas[r, metas])\n \n-\n     def test_optimize_indices(self):\n         # ordinary conversion\n         self.assertEqual(_optimize_indices([1, 2, 3], 4), slice(1, 4, 1))\n@@ -2094,8 +2093,14 @@ class TableIndexingTests(TableTests):\n         np.testing.assert_equal(_optimize_indices([1, 2, 4], 5), [1, 2, 4])\n         np.testing.assert_equal(_optimize_indices((1, 2, 4), 5), [1, 2, 4])\n \n-        # leave boolean arrays\n-        np.testing.assert_equal(_optimize_indices([True, False, True], 3), [True, False, True])\n+        # internally convert boolean arrays into indices\n+        np.testing.assert_equal(_optimize_indices([False, False, False, False], 4), [])\n+        np.testing.assert_equal(_optimize_indices([True, False, True, True], 4), [0, 2, 3])\n+        np.testing.assert_equal(_optimize_indices([True, False, True], 3), slice(0, 4, 2))\n+        with self.assertRaises(IndexError):\n+            _optimize_indices([True, False, True], 2)\n+        with self.assertRaises(IndexError):\n+            _optimize_indices([True, False, True], 4)\n \n         # do not convert if step is negative\n         np.testing.assert_equal(_optimize_indices([4, 2, 0], 5), [4, 2, 0])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6849.0, "instance_id": "biolab__orange3-6849", "issue_numbers": 0, "base_commit": "4b68a842dc7d54305ae6461a6b1a427bdb16b391", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex beb460893..c82f3e102 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -792,6 +792,16 @@ class Table(Sequence, Storage):\n         :return: a new table\n         :rtype: Orange.data.Table\n         \"\"\"\n+        if domain is source.domain:\n+            table = cls.from_table_rows(source, row_indices)\n+            # assure resulting domain is the instance passed on input\n+            table.domain = domain\n+            # since sparse flags are not considered when checking for\n+            # domain equality, fix manually.\n+            with table.unlocked_reference():\n+                table = assure_domain_conversion_sparsity(table, source)\n+            return table\n+\n         new_cache = _thread_local.conversion_cache is None\n         try:\n             if new_cache:\n@@ -801,15 +811,6 @@ class Table(Sequence, Storage):\n                 cached = _idcache_restore(_thread_local.conversion_cache, (domain, source))\n                 if cached is not None:\n                     return cached\n-            if domain is source.domain:\n-                table = cls.from_table_rows(source, row_indices)\n-                # assure resulting domain is the instance passed on input\n-                table.domain = domain\n-                # since sparse flags are not considered when checking for\n-                # domain equality, fix manually.\n-                with table.unlocked_reference():\n-                    table = assure_domain_conversion_sparsity(table, source)\n-                return table\n \n             # avoid boolean indices; also convert to slices if possible\n             row_indices = _optimize_indices(row_indices, len(source))\n@@ -834,7 +835,9 @@ class Table(Sequence, Storage):\n                 self.W = source.W[row_indices]\n                 self.name = getattr(source, 'name', '')\n                 self.ids = source.ids[row_indices]\n-                self.attributes = deepcopy(getattr(source, 'attributes', {}))\n+                self.attributes = getattr(source, 'attributes', {})\n+                if new_cache:  # only deepcopy attributes for the outermost transformation\n+                    self.attributes = deepcopy(self.attributes)\n                 _idcache_save(_thread_local.conversion_cache, (domain, source), self)\n             return self\n         finally:\n@@ -879,6 +882,7 @@ class Table(Sequence, Storage):\n         :return: a new table\n         :rtype: Orange.data.Table\n         \"\"\"\n+        is_outermost_transformation = _thread_local.conversion_cache is None\n         self = cls()\n         self.domain = source.domain\n         with self.unlocked_reference():\n@@ -892,7 +896,9 @@ class Table(Sequence, Storage):\n             self.W = source.W[row_indices]\n             self.name = getattr(source, 'name', '')\n             self.ids = source.ids[row_indices]\n-            self.attributes = deepcopy(getattr(source, 'attributes', {}))\n+            self.attributes = getattr(source, 'attributes', {})\n+            if is_outermost_transformation:\n+                self.attributes = deepcopy(self.attributes)\n         return self\n \n     @classmethod\n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex a9b237259..a86e27ba8 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -2068,6 +2068,24 @@ class CreateTableWithDomainAndTable(TableTests):\n         # attributes dict of old table not be changed since new dist is a copy\n         self.assertDictEqual(self.table.attributes, {\"A\": \"Test\", \"B\": []})\n \n+    def test_attributes_copied_once(self):\n+        A = Mock()\n+        A.__deepcopy__ = Mock()\n+        self.table.attributes = {\"A\": A}\n+\n+        # a single direct transformation\n+        self.table.from_table(self.table.domain, self.table)\n+        self.assertEqual(1, A.__deepcopy__.call_count)\n+        A.__deepcopy__.reset_mock()\n+\n+        # hierarchy of transformations\n+        ndom = Domain([a.copy(compute_value=lambda x: x.transform(Domain([a])))\n+                       for a in self.table.domain.attributes])\n+        self.table.from_table(ndom, self.table)\n+        self.assertEqual(1, A.__deepcopy__.call_count)\n+        # HISTORIC: before only the outermost transformation deepcopied the\n+        # attributes, here were 23 calls to __deepcopy__ instead of 1\n+\n \n def isspecial(s):\n     return isinstance(s, slice) or s is Ellipsis\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4738.0, "instance_id": "biolab__orange3-4738", "issue_numbers": 0, "base_commit": "401539130b0595e69d4dfb305071fe7d66ce23f7", "patch": "diff --git a/Orange/widgets/evaluate/owtestandscore.py b/Orange/widgets/evaluate/owtestandscore.py\nindex 03fb23a3d..bffccdb6a 100644\n--- a/Orange/widgets/evaluate/owtestandscore.py\n+++ b/Orange/widgets/evaluate/owtestandscore.py\n@@ -32,6 +32,7 @@ import Orange.evaluation\n from Orange.evaluation import Results\n from Orange.preprocess.preprocess import Preprocess\n import Orange.regression\n+from Orange.statistics.util import unique\n from Orange.widgets import gui, settings, widget\n from Orange.widgets.evaluate.utils import \\\n     usable_scorers, ScoreTable, learner_name, scorer_caller\n@@ -189,19 +190,15 @@ class OWTestAndScore(OWWidget):\n     class_selection = settings.ContextSetting(TARGET_AVERAGE)\n \n     class Error(OWWidget.Error):\n-        train_data_empty = Msg(\"Train dataset is empty.\")\n         test_data_empty = Msg(\"Test dataset is empty.\")\n-        class_required = Msg(\"Train data input requires a target variable.\")\n-        too_many_classes = Msg(\"Too many target variables.\")\n         class_required_test = Msg(\"Test data input requires a target variable.\")\n         too_many_folds = Msg(\"Number of folds exceeds the data size\")\n         class_inconsistent = Msg(\"Test and train datasets \"\n                                  \"have different target variables.\")\n         memory_error = Msg(\"Not enough memory.\")\n-        no_class_values = Msg(\"Target variable has no values.\")\n-        only_one_class_var_value = Msg(\"Target variable has only one value.\")\n         test_data_incompatible = Msg(\n             \"Test data may be incompatible with train data.\")\n+        train_data_error = Msg(\"{}\")\n \n     class Warning(OWWidget.Warning):\n         missing_data = \\\n@@ -387,26 +384,27 @@ class OWTestAndScore(OWWidget):\n         \"\"\"\n         self.cancel()\n         self.Information.data_sampled.clear()\n-        self.Error.train_data_empty.clear()\n-        self.Error.class_required.clear()\n-        self.Error.too_many_classes.clear()\n-        self.Error.no_class_values.clear()\n-        self.Error.only_one_class_var_value.clear()\n-        if data is not None and not data:\n-            self.Error.train_data_empty()\n-            data = None\n-        if data:\n-            conds = [not data.domain.class_vars,\n-                     len(data.domain.class_vars) > 1,\n-                     np.isnan(data.Y).all(),\n-                     data.domain.has_discrete_class and len(data.domain.class_var.values) == 1]\n-            errors = [self.Error.class_required,\n-                      self.Error.too_many_classes,\n-                      self.Error.no_class_values,\n-                      self.Error.only_one_class_var_value]\n-            for cond, error in zip(conds, errors):\n+        self.Error.train_data_error.clear()\n+\n+        if data is not None:\n+            data_errors = [\n+                (\"Train dataset is empty.\", len(data) == 0),\n+                (\n+                    \"Train data input requires a target variable.\",\n+                    not data.domain.class_vars\n+                ),\n+                (\"Too many target variables.\", len(data.domain.class_vars) > 1),\n+                (\"Target variable has no values.\", np.isnan(data.Y).all()),\n+                (\n+                    \"Target variable has only one value.\",\n+                    data.domain.has_discrete_class and len(unique(data.Y)) < 2\n+                ),\n+                (\"Data has no features to learn from.\", data.X.shape[1] == 0),\n+            ]\n+\n+            for error_msg, cond in data_errors:\n                 if cond:\n-                    error()\n+                    self.Error.train_data_error(error_msg)\n                     data = None\n                     break\n \n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owtestandscore.py b/Orange/widgets/evaluate/tests/test_owtestandscore.py\nindex b351ec254..f63148342 100644\n--- a/Orange/widgets/evaluate/tests/test_owtestandscore.py\n+++ b/Orange/widgets/evaluate/tests/test_owtestandscore.py\n@@ -168,25 +168,38 @@ class TestOWTestAndScore(WidgetTest):\n                 \"yyyy\"))\n         )\n         self.widget.n_folds = 0\n-        self.assertFalse(self.widget.Error.only_one_class_var_value.is_shown())\n+        self.assertFalse(self.widget.Error.train_data_error.is_shown())\n         self.send_signal(\"Data\", table)\n         self.send_signal(\"Learner\", MajorityLearner(), 0, wait=1000)\n-        self.assertTrue(self.widget.Error.only_one_class_var_value.is_shown())\n+        self.assertTrue(self.widget.Error.train_data_error.is_shown())\n \n-    def test_nan_class(self):\n-        \"\"\"\n-        Do not crash on a data with only nan class values.\n-        GH-2751\n-        \"\"\"\n-        def assertErrorShown(data, is_shown):\n+    def test_data_errors(self):\n+        \"\"\" Test all data_errors \"\"\"\n+        def assertErrorShown(data, is_shown, message):\n             self.send_signal(\"Data\", data)\n-            self.assertEqual(is_shown, self.widget.Error.no_class_values.is_shown())\n+            self.assertEqual(is_shown, self.widget.Error.train_data_error.is_shown())\n+            self.assertEqual(message, str(self.widget.Error.train_data_error))\n \n         data = Table(\"iris\")[::30]\n         data.Y[:] = np.nan\n \n-        for data, is_shown in zip([None, data, Table(\"iris\")[:30]], [False, True, False]):\n-            assertErrorShown(data, is_shown)\n+        iris_empty_x = Table.from_table(\n+            Domain([], data.domain.class_var), Table(\"iris\")\n+        )\n+\n+        for data, is_shown, message in zip(\n+                [None, data, Table(\"iris\")[:30], iris_empty_x, data[:0]],\n+                [False, True, True, True, True],\n+                [\n+                    \"\",\n+                    \"Target variable has no values.\",\n+                    \"Target variable has only one value.\",\n+                    \"Data has no features to learn from.\",\n+                    \"Train dataset is empty.\"\n+                ]\n+\n+        ):\n+            assertErrorShown(data, is_shown, message)\n \n     def test_addon_scorers(self):\n         try:\n@@ -321,15 +334,19 @@ class TestOWTestAndScore(WidgetTest):\n         self.send_signal(self.widget.Inputs.learner, learner, 0, wait=5000)\n         return self._retrieve_scores()\n \n-    def test_scores_constant_all_same(self):\n+    def test_scores_constant(self):\n         table = Table.from_list(\n             self.scores_domain,\n-            list(zip(*self.scores_table_values + [list(\"yyyy\")]))\n+            list(zip(*self.scores_table_values + [list(\"yyyn\")]))\n         )\n \n-        self.assertTupleEqual(self._test_scores(\n-            table, table, ConstantLearner(), OWTestAndScore.TestOnTest, None),\n-                              (None, 1, 1, 1, 1))\n+        self.assertTupleEqual(\n+            self._test_scores(\n+                table, table[:3], ConstantLearner(),\n+                OWTestAndScore.TestOnTest, None\n+            ),\n+            (None, 1, 1, 1, 1)\n+        )\n \n     def test_scores_log_reg_overfitted(self):\n         table = Table.from_list(\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6233.0, "instance_id": "biolab__orange3-6233", "issue_numbers": 0, "base_commit": "eca9c467cdf28299cf94aa053ea0842fab99eb7b", "patch": "diff --git a/Orange/widgets/unsupervised/owdistancematrix.py b/Orange/widgets/unsupervised/owdistancematrix.py\nindex a6b465c38..d56cf4ba3 100644\n--- a/Orange/widgets/unsupervised/owdistancematrix.py\n+++ b/Orange/widgets/unsupervised/owdistancematrix.py\n@@ -252,8 +252,7 @@ class OWDistanceMatrix(widget.OWWidget):\n         elif isinstance(items, Table):\n             annotations.extend(\n                 itertools.chain(items.domain.variables, items.domain.metas))\n-            if items.domain.class_var:\n-                pending_idx = 2 + len(items.domain.attributes)\n+            pending_idx = annotations.index(self._choose_label(items))\n         self.annot_combo.model()[:] = annotations\n         self.annotation_idx = pending_idx\n \n@@ -263,6 +262,14 @@ class OWDistanceMatrix(widget.OWWidget):\n             self.tableview.resizeColumnsToContents()\n         self.commit.now()\n \n+    @staticmethod\n+    def _choose_label(data: Table):\n+        attr = max((attr for attr in data.domain.metas\n+                    if isinstance(attr, StringVariable)),\n+                   key=lambda x: len(set(data.get_column(x))),\n+                   default=None)\n+        return attr or data.domain.class_var or \"Enumerate\"\n+\n     def _invalidate_annotations(self):\n         if self.distances is not None:\n             self._update_labels()\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owdistancematrix.py b/Orange/widgets/unsupervised/tests/test_owdistancematrix.py\nindex acd31c5ea..ef35a5e66 100644\n--- a/Orange/widgets/unsupervised/tests/test_owdistancematrix.py\n+++ b/Orange/widgets/unsupervised/tests/test_owdistancematrix.py\n@@ -84,6 +84,30 @@ class TestOWDistanceMatrix(WidgetTest):\n         ac.activated.emit(idx)\n         self.assertEqual(self.widget.tablemodel.labels, [\"1\", \"?\"])\n \n+    def test_choose_label(self):\n+        self.assertIs(OWDistanceMatrix._choose_label(self.iris),\n+                      self.iris.domain.class_var)\n+\n+        domain = Domain([ContinuousVariable(x) for x in \"xyz\"],\n+                        ContinuousVariable(\"t\"),\n+                        [ContinuousVariable(\"m\")] +\n+                        [StringVariable(c) for c in \"abc\"]\n+                        )\n+        data = Table.from_numpy(\n+            domain,\n+            np.zeros((4, 3), dtype=float),\n+            np.arange(4, dtype=float),\n+            np.array([[0, \"a\", \"a\", \"a\"],\n+                      [1, \"b\", \"b\", \"b\"],\n+                      [2, \"a\", \"c\", \"b\"],\n+                      [0, \"b\", \"a\", \"a\"]])\n+        )\n+        self.assertIs(OWDistanceMatrix._choose_label(data),\n+                      domain.metas[2])\n+        domain2 = Domain(domain.attributes, domain.class_var, domain.metas[:-2])\n+        self.assertIs(OWDistanceMatrix._choose_label(data.transform(domain2)),\n+                      domain.metas[1])\n+\n \n class TestDelegates(GuiTest):\n     def test_delegate(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5736.0, "instance_id": "biolab__orange3-5736", "issue_numbers": 0, "base_commit": "06d7f24352088e4d2e7ccc8212d1d63d58ec05e2", "patch": "diff --git a/Orange/widgets/data/owfile.py b/Orange/widgets/data/owfile.py\nindex ba3d3b9fa..1db2a5cd2 100644\n--- a/Orange/widgets/data/owfile.py\n+++ b/Orange/widgets/data/owfile.py\n@@ -121,6 +121,9 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n \n     domain_editor = SettingProvider(DomainEditor)\n \n+    class Information(widget.OWWidget.Information):\n+        no_file_selected = Msg(\"No file selected.\")\n+\n     class Warning(widget.OWWidget.Warning):\n         file_too_big = Msg(\"The file is too large to load automatically.\"\n                            \" Press Reload to load.\")\n@@ -137,9 +140,6 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n         sheet_error = Msg(\"Error listing available sheets.\")\n         unknown = Msg(\"Read error:\\n{}\")\n \n-    class NoFileSelected:\n-        pass\n-\n     UserAdviceMessages = [\n         widget.Message(\n             \"Use CSV File Import widget for advanced options \"\n@@ -343,8 +343,15 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n \n     def _try_load(self):\n         # pylint: disable=broad-except\n-        if self.last_path() and not os.path.exists(self.last_path()):\n-            return self.Error.file_not_found\n+        if self.source == self.LOCAL_FILE:\n+            if self.last_path() is None:\n+                return self.Information.no_file_selected\n+            elif not os.path.exists(self.last_path()):\n+                return self.Error.file_not_found\n+        else:\n+            url = self.url_combo.currentText().strip()\n+            if not url:\n+                return self.Information.no_file_selected\n \n         try:\n             self.reader = self._get_reader()\n@@ -352,10 +359,6 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n         except Exception:\n             return self.Error.missing_reader\n \n-        if self.reader is self.NoFileSelected:\n-            self.Outputs.data.send(None)\n-            return None\n-\n         try:\n             self._update_sheet_combo()\n         except Exception:\n@@ -382,8 +385,6 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n     def _get_reader(self) -> FileFormat:\n         if self.source == self.LOCAL_FILE:\n             path = self.last_path()\n-            if path is None:\n-                return self.NoFileSelected\n             if self.recent_paths and self.recent_paths[0].file_format:\n                 qname = self.recent_paths[0].file_format\n                 reader_class = class_from_qualified_name(qname)\n@@ -395,10 +396,7 @@ class OWFile(widget.OWWidget, RecentPathsWComboMixin):\n             return reader\n         else:\n             url = self.url_combo.currentText().strip()\n-            if url:\n-                return UrlReader(url)\n-            else:\n-                return self.NoFileSelected\n+            return UrlReader(url)\n \n     def _update_sheet_combo(self):\n         if len(self.reader.sheets) < 2:\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfile.py b/Orange/widgets/data/tests/test_owfile.py\nindex 1c409a0ab..772b9af67 100644\n--- a/Orange/widgets/data/tests/test_owfile.py\n+++ b/Orange/widgets/data/tests/test_owfile.py\n@@ -253,12 +253,14 @@ class TestOWFile(WidgetTest):\n             self.create_widget(OWFile, stored_settings={\"recent_paths\": []})\n \n         widget.Outputs.data.send = Mock()\n-        widget._try_load()\n+        widget.load_data()\n+        self.assertTrue(widget.Information.no_file_selected.is_shown())\n         widget.Outputs.data.send.assert_called_with(None)\n \n         widget.Outputs.data.send.reset_mock()\n         widget.source = widget.URL\n-        widget._try_load()\n+        widget.load_data()\n+        self.assertTrue(widget.Information.no_file_selected.is_shown())\n         widget.Outputs.data.send.assert_called_with(None)\n \n     def test_check_column_noname(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5382.0, "instance_id": "biolab__orange3-5382", "issue_numbers": 0, "base_commit": "704a8379ee7d6345df39f44c8e6cbd5f6ec9ed0d", "patch": "diff --git a/Orange/widgets/visualize/ownomogram.py b/Orange/widgets/visualize/ownomogram.py\nindex b1a34112d..faaa631d6 100644\n--- a/Orange/widgets/visualize/ownomogram.py\n+++ b/Orange/widgets/visualize/ownomogram.py\n@@ -1285,6 +1285,7 @@ class OWNomogram(OWWidget):\n         for attr in preprocessed.attributes:\n             cv = attr._compute_value.variable._compute_value\n             var = cv.variable if cv else original[attr.name]\n+            var = original[var.name] if var.name in original else attr\n             if var in attrs:    # the reason for OrderedDict\n                 continue\n             attrs[var] = None   # we only need keys\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_ownomogram.py b/Orange/widgets/visualize/tests/test_ownomogram.py\nindex b2d51c4dc..9409cb8a9 100644\n--- a/Orange/widgets/visualize/tests/test_ownomogram.py\n+++ b/Orange/widgets/visualize/tests/test_ownomogram.py\n@@ -13,6 +13,7 @@ from Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n from Orange.classification import (\n     NaiveBayesLearner, LogisticRegressionLearner, MajorityLearner\n )\n+from Orange.preprocess import Scale, Continuize\n from Orange.tests import test_filename\n from Orange.widgets.tests.base import WidgetTest\n from Orange.widgets.utils.state_summary import format_summary_details\n@@ -306,6 +307,28 @@ class TestOWNomogram(WidgetTest):\n         anim = animator._GraphicsColorAnimator__animation\n         self.assertNotEqual(anim.state(), QPropertyAnimation.Running)\n \n+    def test_reconstruct_domain(self):\n+        data = Table(\"heart_disease\")\n+        cls = LogisticRegressionLearner()(data)\n+        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        transformed_data = cls.original_data.transform(domain)\n+        self.assertEqual(transformed_data.X.shape, data.X.shape)\n+        self.assertFalse(np.isnan(transformed_data.X[0]).any())\n+\n+        scaled_data = Scale()(data)\n+        cls = LogisticRegressionLearner()(scaled_data)\n+        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        transformed_data = cls.original_data.transform(domain)\n+        self.assertEqual(transformed_data.X.shape, scaled_data.X.shape)\n+        self.assertFalse(np.isnan(transformed_data.X[0]).any())\n+\n+        disc_data = Continuize()(data)\n+        cls = LogisticRegressionLearner()(disc_data)\n+        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        transformed_data = cls.original_data.transform(domain)\n+        self.assertEqual(transformed_data.X.shape, disc_data.X.shape)\n+        self.assertFalse(np.isnan(transformed_data.X[0]).any())\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4078.0, "instance_id": "biolab__orange3-4078", "issue_numbers": 0, "base_commit": "27c9a8b4c2baf5eb5910fa706807f4e3fa607859", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex 505f792b3..355922765 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -1208,7 +1208,15 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n         cont_color = self.master.is_continuous_color()\n         shape_labels = self.master.get_shape_labels()\n         color_labels = self.master.get_color_labels()\n-        if shape_labels == color_labels and shape_labels is not None:\n+        if not cont_color and shape_labels is not None \\\n+                and shape_labels == color_labels:\n+            colors = self.master.get_color_data()\n+            shapes = self.master.get_shape_data()\n+            mask = np.isfinite(colors) * np.isfinite(shapes)\n+            combined = (colors == shapes)[mask].all()\n+        else:\n+            combined = False\n+        if combined:\n             self._update_combined_legend(shape_labels)\n         else:\n             self._update_shape_legend(shape_labels)\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplotbase.py b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\nindex ed1b780a8..080f83a71 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n@@ -1105,6 +1105,10 @@ class TestOWScatterPlotBase(WidgetTest):\n     def test_legend_combine(self):\n         master = self.master\n         graph = self.graph\n+\n+        master.get_shape_data = lambda: np.arange(10, dtype=float) % 3\n+        master.get_color_data = lambda: 2 * np.arange(10, dtype=float) % 3\n+\n         graph.reset_graph()\n \n         shape_legend = self.graph.shape_legend.setVisible = Mock()\n@@ -1119,6 +1123,12 @@ class TestOWScatterPlotBase(WidgetTest):\n         master.get_color_labels = lambda: [\"a\", \"b\"]\n         graph.update_legends()\n         self.assertTrue(shape_legend.call_args[0][0])\n+        self.assertTrue(color_legend.call_args[0][0])\n+        self.assertEqual(len(graph.shape_legend.items), 2)\n+\n+        master.get_color_data = lambda: np.arange(10, dtype=float) % 3\n+        graph.update_legends()\n+        self.assertTrue(shape_legend.call_args[0][0])\n         self.assertFalse(color_legend.call_args[0][0])\n         self.assertEqual(len(graph.shape_legend.items), 2)\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5324.0, "instance_id": "biolab__orange3-5324", "issue_numbers": 0, "base_commit": "be9237eea2dc3e0be1cd5c66ae5614ee0de380a3", "patch": "diff --git a/Orange/widgets/data/owmergedata.py b/Orange/widgets/data/owmergedata.py\nindex 17ca69559..e48f37d8c 100644\n--- a/Orange/widgets/data/owmergedata.py\n+++ b/Orange/widgets/data/owmergedata.py\n@@ -10,7 +10,7 @@ from AnyQt.QtWidgets import (\n from orangewidget.utils.combobox import ComboBoxSearch\n \n import Orange\n-from Orange.data import StringVariable, ContinuousVariable, Variable\n+from Orange.data import StringVariable, ContinuousVariable, Variable, Domain\n from Orange.data.util import hstack, get_unique_names_duplicates\n from Orange.widgets import widget, gui\n from Orange.widgets.settings import Setting, ContextHandler, ContextSetting\n@@ -207,6 +207,8 @@ class MergeDataContextHandler(ContextHandler):\n     def _encode_domain(self, domain):\n         if domain is None:\n             return {}\n+        if not isinstance(domain, Domain):\n+            domain = domain.domain\n         all_vars = chain(domain.variables, domain.metas)\n         return dict(self.encode_variables(all_vars))\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owmergedata.py b/Orange/widgets/data/tests/test_owmergedata.py\nindex 29fb9852e..2da8f97d3 100644\n--- a/Orange/widgets/data/tests/test_owmergedata.py\n+++ b/Orange/widgets/data/tests/test_owmergedata.py\n@@ -1063,6 +1063,12 @@ class TestOWMergeData(WidgetTest):\n         self.assertIsInstance(info._StateInfo__output_summary, StateInfo.Empty)\n         self.assertEqual(info._StateInfo__output_summary.details, no_output)\n \n+    def test_empty_tables(self):\n+        widget = self.widget\n+        self.send_signal(widget.Inputs.data, self.dataA[:0])\n+        self.send_signal(widget.Inputs.extra_data, self.dataB[:0])\n+\n+\n class MergeDataContextHandlerTest(unittest.TestCase):\n     # These units are too small to test individually, so they are tested\n     # within their function in the widget.\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6181.0, "instance_id": "biolab__orange3-6181", "issue_numbers": 0, "base_commit": "845e1c715272c8567ad8871891a7f6f4520d6d6c", "patch": "diff --git a/Orange/widgets/data/owcontinuize.py b/Orange/widgets/data/owcontinuize.py\nindex 123f238f3..806ae11c0 100644\n--- a/Orange/widgets/data/owcontinuize.py\n+++ b/Orange/widgets/data/owcontinuize.py\n@@ -732,10 +732,22 @@ class OWContinuize(widget.OWWidget):\n             settings[\"cont_var_hints\"] = \\\n                 {DefaultKey:\n                  settings.pop(\"continuous_treatment\", Normalize.Leave)}\n+\n+            # DISC OPS: Default=99, Indicators=1, FirstAsBase=2, FrequentAsBase=3, Remove=4,\n+            # RemoveMultinomial=5, ReportError=6, AsOrdinal=7, AsNormalizedOrdinal=8, Leave=9\n+\n+            # OLD ORDER: [FirstAsBase, FrequentAsBase, Indicators, RemoveMultinomial, Remove,\n+            # AsOrdinal, AsNormalizedOrdinal]\n+            old_to_new = [2, 3, 1, 5, 4, 7, 8]\n+\n             settings[\"disc_var_hints\"] = \\\n                 {DefaultKey:\n-                 settings.pop(\"multinomial_treatment\", Continuize.FirstAsBase)}\n-            class_treatment = settings.pop(\"class_treatment\", Continuize.Leave)\n+                 old_to_new[settings.pop(\"multinomial_treatment\", 0)]}\n+\n+            # OLD ORDER: [Leave, AsOrdinal, AsNormalizedOrdinal, Indicators]\n+            old_to_new = [9, 7, 8, 1]\n+\n+            class_treatment = old_to_new[settings.pop(\"class_treatment\", 0)]\n             if class_treatment != Continuize.Leave:\n                 settings[\"disc_var_hints\"][BackCompatClass] = class_treatment\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcontinuize.py b/Orange/widgets/data/tests/test_owcontinuize.py\nindex 8613e6066..af84bd1d5 100644\n--- a/Orange/widgets/data/tests/test_owcontinuize.py\n+++ b/Orange/widgets/data/tests/test_owcontinuize.py\n@@ -760,7 +760,7 @@ class TestOWContinuize(WidgetTest):\n \n         widget = self.create_widget(\n             OWContinuize,\n-            stored_settings=dict(multinomial_treatment=Continuize.Indicators)\n+            stored_settings=dict(multinomial_treatment=2)\n         )\n         self.assertEqual(widget.disc_var_hints[DefaultKey],\n                          Continuize.Indicators)\n@@ -773,8 +773,8 @@ class TestOWContinuize(WidgetTest):\n \n         widget = self.create_widget(\n             OWContinuize,\n-            stored_settings=dict(multinomial_treatment=Continuize.Remove,\n-                                 class_treatment=Continuize.Indicators)\n+            stored_settings=dict(multinomial_treatment=4,\n+                                 class_treatment=3)\n         )\n         self.send_signal(widget.Inputs.data, data)\n         self.assertEqual(widget.disc_var_hints[\"y\"], Continuize.Indicators)\n@@ -782,12 +782,12 @@ class TestOWContinuize(WidgetTest):\n \n         widget = self.create_widget(\n             OWContinuize,\n-            stored_settings=dict(multinomial_treatment=Continuize.Remove,\n-                                 class_treatment=Continuize.Leave)\n+            stored_settings=dict(multinomial_treatment=4,\n+                                 class_treatment=0)\n         )\n         self.send_signal(widget.Inputs.data, data)\n         self.assertNotIn(\"y\", widget.disc_var_hints)\n-        self.assertEqual(widget.disc_var_hints[DefaultKey], Continuize.Remove)\n+        self.assertEqual(widget.disc_var_hints[DefaultKey], 4)\n \n         widget = self.create_widget(\n             OWContinuize,\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6887.0, "instance_id": "biolab__orange3-6887", "issue_numbers": 0, "base_commit": "e67cddb2cb6a2ee222e190832d1c529c025c9ec8", "patch": "diff --git a/Orange/widgets/unsupervised/owhierarchicalclustering.py b/Orange/widgets/unsupervised/owhierarchicalclustering.py\nindex f71cc12ba..dd73e5a70 100644\n--- a/Orange/widgets/unsupervised/owhierarchicalclustering.py\n+++ b/Orange/widgets/unsupervised/owhierarchicalclustering.py\n@@ -240,6 +240,9 @@ class OWHierarchicalClustering(widget.OWWidget):\n             Msg(\"Subset data refers to a different table\")\n         pruning_disables_colors = \\\n             Msg(\"Pruned cluster doesn't show colors and indicate subset\")\n+        many_clusters = \\\n+            Msg(\"Variables with too many values may \"\n+                \"degrade the performance of downstream widgets.\")\n \n     #: Stored (manual) selection state (from a saved workflow) to restore.\n     __pending_selection_restore = None  # type: Optional[SelectionState]\n@@ -361,7 +364,7 @@ class OWHierarchicalClustering(widget.OWWidget):\n             2, 0\n         )\n         self.top_n_spin = gui.spin(\n-            self.selection_box, self, \"top_n\", 1, 20,\n+            self.selection_box, self, \"top_n\", 1, 1000,\n             controlWidth=spin_width, alignment=Qt.AlignRight,\n             callback=self._top_n_changed, addToLayout=False)\n         self.top_n_spin.lineEdit().returnPressed.connect(self._top_n_return)\n@@ -766,6 +769,7 @@ class OWHierarchicalClustering(widget.OWWidget):\n     @gui.deferred\n     def commit(self):\n         items = getattr(self.matrix, \"items\", self.items)\n+        self.Warning.many_clusters.clear()\n         if not items:\n             self.Outputs.selected_data.send(None)\n             self.Outputs.annotated_data.send(None)\n@@ -778,6 +782,8 @@ class OWHierarchicalClustering(widget.OWWidget):\n \n         maps = [indices[node.value.first:node.value.last]\n                 for node in selection]\n+        if len(maps) > 20:\n+            self.Warning.many_clusters()\n \n         selected_indices = list(chain(*maps))\n \n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py b/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py\nindex c0b977b53..baca8198e 100644\n--- a/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py\n+++ b/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py\n@@ -207,3 +207,22 @@ class TestOWHierarchicalClustering(WidgetTest, WidgetOutputsTestMixin):\n         annotated = [(a.name, a.attributes['cluster']) for a in o.domain.attributes]\n         self.assertEqual(annotated, [('sepal length', 1), ('petal width', 2),\n                                      ('sepal width', 3), ('petal length', 3)])\n+\n+    def test_many_values_warning(self):\n+        w = self.widget\n+\n+        self.send_signal(self.widget.Inputs.distances, self.distances)\n+        w.top_n = 21\n+        w.selection_box.buttons[2].click()\n+        self.assertTrue(w.Warning.many_clusters.is_shown())\n+\n+        w.top_n = 20\n+        w.selection_box.buttons[2].click()\n+        self.assertFalse(w.Warning.many_clusters.is_shown())\n+\n+        w.top_n = 21\n+        w.selection_box.buttons[2].click()\n+        self.assertTrue(w.Warning.many_clusters.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.distances, None)\n+        self.assertFalse(w.Warning.many_clusters.is_shown())\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6425.0, "instance_id": "biolab__orange3-6425", "issue_numbers": 0, "base_commit": "6b47e029b4bdd16c59d78d5dd19e105fc4dff205", "patch": "diff --git a/Orange/widgets/data/owneighbors.py b/Orange/widgets/data/owneighbors.py\nindex 62d98a95c..ecf99fc5b 100644\n--- a/Orange/widgets/data/owneighbors.py\n+++ b/Orange/widgets/data/owneighbors.py\n@@ -153,7 +153,12 @@ class OWNeighbors(OWWidget):\n         up_to = len(dist) - np.sum(inrefs)\n         if self.limit_neighbors and self.n_neighbors < up_to:\n             up_to = self.n_neighbors\n-        return np.argpartition(dist, up_to - 1)[:up_to]\n+        # get indexes of N neighbours in unsorted order - faster than argsort\n+        idx = np.argpartition(dist, up_to - 1)[:up_to]\n+        # sort selected N neighbours according to distances\n+        sorted_subset_idx = np.argsort(dist[idx])\n+        # map sorted indexes back to original index space\n+        return idx[sorted_subset_idx]\n \n     def _data_with_similarity(self, indices):\n         domain = self.data.domain\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owneighbors.py b/Orange/widgets/data/tests/test_owneighbors.py\nindex ce6442852..e66f5337b 100644\n--- a/Orange/widgets/data/tests/test_owneighbors.py\n+++ b/Orange/widgets/data/tests/test_owneighbors.py\n@@ -452,6 +452,25 @@ class TestOWNeighbors(WidgetTest):\n         self.send_signal(self.widget.Inputs.reference, data[0:1])\n         self.assertIsInstance(self.get_output(self.widget.Outputs.data), Table2)\n \n+    def test_order_by_distance(self):\n+        domain = Domain([ContinuousVariable(x) for x in \"ab\"])\n+        reference = Table.from_numpy(domain, [[1, 0]])\n+        data = Table.from_numpy(domain, [[1, 0.1], [2, 0], [1, 0], [0, 0.1], [0.1, 0]])\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.send_signal(self.widget.Inputs.reference, reference)\n+\n+        output = self.get_output(self.widget.Outputs.data)\n+        expected = [[1, 0], [1, 0.1], [0.1, 0], [2, 0], [0, 0.1]]\n+        np.testing.assert_array_equal(output.X, expected)\n+        dst = output.get_column(\"distance\").tolist()\n+        self.assertTrue(dst == sorted(dst))  # check distance in ascending order\n+\n+        # test on bigger set\n+        self.send_signal(self.widget.Inputs.data, self.iris)\n+        self.send_signal(self.widget.Inputs.reference, self.iris[:1])\n+        dst = self.get_output(self.widget.Outputs.data).get_column(\"distance\").tolist()\n+        self.assertTrue(dst == sorted(dst))  # check distance in ascending order\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5823.0, "instance_id": "biolab__orange3-5823", "issue_numbers": 0, "base_commit": "d6c3792e10e9513a4e3c7330a30530128f11d2f2", "patch": "diff --git a/Orange/widgets/data/owgroupby.py b/Orange/widgets/data/owgroupby.py\nindex 07821aec2..ad160b55f 100644\n--- a/Orange/widgets/data/owgroupby.py\n+++ b/Orange/widgets/data/owgroupby.py\n@@ -443,9 +443,14 @@ class OWGroupBy(OWWidget, ConcurrentWidgetMixin):\n             if data\n             else {}\n         )\n+        default_aggregations = self.aggregations.copy()\n \n         self.openContext(self.data)\n \n+        # restore aggregations\n+        self.aggregations.update({k: v for k, v in default_aggregations.items()\n+                                  if k not in self.aggregations})\n+\n         # update selections in widgets and re-plot\n         self.agg_table_model.set_domain(data.domain if data else None)\n         self._set_gb_selection()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owgroupby.py b/Orange/widgets/data/tests/test_owgroupby.py\nindex 4356622ac..b2c6c2c6d 100644\n--- a/Orange/widgets/data/tests/test_owgroupby.py\n+++ b/Orange/widgets/data/tests/test_owgroupby.py\n@@ -20,7 +20,7 @@ from Orange.widgets.data.owgroupby import OWGroupBy\n from Orange.widgets.tests.base import WidgetTest\n \n \n-class TestOWGropBy(WidgetTest):\n+class TestOWGroupBy(WidgetTest):\n     def setUp(self) -> None:\n         self.widget = self.create_widget(OWGroupBy)\n         self.iris = Table(\"iris\")\n@@ -46,6 +46,14 @@ class TestOWGropBy(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, None)\n         self.assertIsNone(self.get_output(self.widget.Outputs.data))\n \n+    def test_data_domain_changed(self):\n+        self.send_signal(self.widget.Inputs.data, self.iris[:, -2:])\n+        self.assert_aggregations_equal([\"Mean\", \"Concatenate\"])\n+\n+        self.send_signal(self.widget.Inputs.data, self.iris[:, -3:])\n+        self.assert_aggregations_equal([\"Mean\", \"Mean\", \"Concatenate\"])\n+        self.select_table_rows(self.widget.agg_table_view, [0])\n+\n     @staticmethod\n     def _set_selection(view: QListView, indices: List[int]):\n         view.clearSelection()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6697.0, "instance_id": "biolab__orange3-6697", "issue_numbers": 0, "base_commit": "72335334905912c6501f12d63752734a06084032", "patch": "diff --git a/Orange/widgets/data/owcorrelations.py b/Orange/widgets/data/owcorrelations.py\nindex b1e969228..aeaef49b5 100644\n--- a/Orange/widgets/data/owcorrelations.py\n+++ b/Orange/widgets/data/owcorrelations.py\n@@ -153,12 +153,16 @@ class CorrelationRank(VizRankDialogAttrPair):\n     def row_for_state(self, score, state):\n         attrs = sorted((self.attrs[x] for x in state), key=attrgetter(\"name\"))\n         attr_items = []\n-        for attr in attrs:\n+        for attr, halign in zip(attrs, (Qt.AlignRight, Qt.AlignLeft)):\n             item = QStandardItem(attr.name)\n             item.setData(attrs, self._AttrRole)\n-            item.setData(Qt.AlignLeft + Qt.AlignCenter, Qt.TextAlignmentRole)\n+            item.setData(halign + Qt.AlignVCenter, Qt.TextAlignmentRole)\n             item.setToolTip(attr.name)\n             attr_items.append(item)\n+            if halign is Qt.AlignRight:\n+                colon = QStandardItem(\":\")\n+                colon.setData(Qt.AlignCenter, Qt.TextAlignmentRole)\n+                attr_items.append(colon)\n         correlation_item = QStandardItem(\"{:+.3f}\".format(score[1]))\n         correlation_item.setData(score[2], self.PValRole)\n         correlation_item.setData(attrs, self._AttrRole)\n@@ -195,6 +199,7 @@ class CorrelationRank(VizRankDialogAttrPair):\n         self.threadStopped.emit()\n         header = self.rank_table.horizontalHeader()\n         header.setSectionResizeMode(1, QHeaderView.Stretch)\n+        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)\n \n     def start(self, task, *args, **kwargs):\n         self._set_empty_status()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcorrelations.py b/Orange/widgets/data/tests/test_owcorrelations.py\nindex 17b7bd4f9..859e9988e 100644\n--- a/Orange/widgets/data/tests/test_owcorrelations.py\n+++ b/Orange/widgets/data/tests/test_owcorrelations.py\n@@ -38,7 +38,7 @@ class TestOWCorrelations(WidgetTest):\n         self.wait_until_finished()\n         n_attrs = len(self.data_cont.domain.attributes)\n         self.process_events()\n-        self.assertEqual(self.widget.vizrank.rank_model.columnCount(), 3)\n+        self.assertEqual(self.widget.vizrank.rank_model.columnCount(), 4)\n         self.assertEqual(self.widget.vizrank.rank_model.rowCount(),\n                          n_attrs * (n_attrs - 1) / 2)\n         self.send_signal(self.widget.Inputs.data, None)\n@@ -60,7 +60,7 @@ class TestOWCorrelations(WidgetTest):\n         n_attrs = len([a for a in domain.attributes if a.is_continuous])\n         self.wait_until_finished()\n         self.process_events()\n-        self.assertEqual(self.widget.vizrank.rank_model.columnCount(), 3)\n+        self.assertEqual(self.widget.vizrank.rank_model.columnCount(), 4)\n         self.assertEqual(self.widget.vizrank.rank_model.rowCount(),\n                          n_attrs * (n_attrs - 1) / 2)\n \n@@ -328,7 +328,7 @@ class TestCorrelationRank(WidgetTest):\n         self.assertEqual(row[0].data(Qt.DisplayRole), \"+0.200\")\n         self.assertEqual(row[0].data(CorrelationRank.PValRole), 0.1)\n         self.assertEqual(row[1].data(Qt.DisplayRole), self.attrs[0].name)\n-        self.assertEqual(row[2].data(Qt.DisplayRole), self.attrs[1].name)\n+        self.assertEqual(row[3].data(Qt.DisplayRole), self.attrs[1].name)\n \n     def test_iterate_states(self):\n         self.assertListEqual(list(self.vizrank.iterate_states(None)),\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6324.0, "instance_id": "biolab__orange3-6324", "issue_numbers": 0, "base_commit": "b78ff8ca9fce901bacdfbc845ff2cc88c35d6ee5", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex 30918cb33..8443687b5 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -1547,7 +1547,7 @@ class TimeVariableEditor(VariableEditor):\n \n     def set_data(self, var, transform=()):\n         super().set_data(var, transform)\n-        if self.parent() is not None and isinstance(self.parent().var, Time):\n+        if self.parent() is not None and isinstance(self.parent().var, (Time, Real)):\n             # when transforming from time to time disable format selection combo\n             self.format_cb.setEnabled(False)\n         else:\n@@ -2730,11 +2730,13 @@ def apply_reinterpret_c(var, tr, data: MArray):\n     elif isinstance(tr, AsContinuous):\n         return var\n     elif isinstance(tr, AsString):\n-        # TimeVar will be interpreted by StrpTime later\n         tstr = ToStringTransform(var)\n         rvar = Orange.data.StringVariable(name=var.name, compute_value=tstr)\n     elif isinstance(tr, AsTime):\n-        rvar = Orange.data.TimeVariable(name=var.name, compute_value=Identity(var))\n+        # continuous variable is always transformed to time as UNIX epoch\n+        rvar = Orange.data.TimeVariable(\n+            name=var.name, compute_value=Identity(var), have_time=1, have_date=1\n+        )\n     else:\n         assert False\n     return copy_attributes(rvar, var)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex 6c14ef279..3e41baae5 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -1015,6 +1015,20 @@ class TestReinterpretTransforms(TestCase):\n         v = apply_transform(domain.metas[0],table, [])\n         self.assertIs(v, domain.metas[0])\n \n+    def test_to_time_variable(self):\n+        table = self.data\n+        tr = AsTime()\n+        dtr = []\n+        for v in table.domain:\n+            strp = StrpTime(\"Detect automatically\", None, 1, 1)\n+            vtr = apply_transform_var(\n+                apply_reinterpret(v, tr, table_column_data(table, v)), [strp]\n+            )\n+            dtr.append(vtr)\n+        ttable = table.transform(Domain([], metas=dtr))\n+        for var in ttable.domain:\n+            self.assertTrue(var.have_date or var.have_time)\n+\n \n class TestUtils(TestCase):\n     def test_mapper(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6331.0, "instance_id": "biolab__orange3-6331", "issue_numbers": 0, "base_commit": "ce13f5a65642a8ff13647ab2e6391e1483d0b439", "patch": "diff --git a/Orange/widgets/data/owconcatenate.py b/Orange/widgets/data/owconcatenate.py\nindex 4904a33ea..8c3958923 100644\n--- a/Orange/widgets/data/owconcatenate.py\n+++ b/Orange/widgets/data/owconcatenate.py\n@@ -263,6 +263,7 @@ class OWConcatenate(widget.OWWidget):\n                 dumb_domain,\n                 table.X, table.Y, table.metas, table.W,\n                 table.attributes, table.ids)\n+            dumb_table.name = table.name\n             dumb_tables.append(dumb_table)\n         return dumb_tables\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owconcatenate.py b/Orange/widgets/data/tests/test_owconcatenate.py\nindex d2c1d3507..3eb2f7598 100644\n--- a/Orange/widgets/data/tests/test_owconcatenate.py\n+++ b/Orange/widgets/data/tests/test_owconcatenate.py\n@@ -71,36 +71,54 @@ class TestOWConcatenate(WidgetTest):\n         outvars = output.domain.variables\n         self.assertEqual(0, len(outvars))\n \n+    def get_source_var(self, vars_before):\n+        output = self.get_output(self.widget.Outputs.data)\n+        outvars = output.domain.variables + output.domain.metas\n+        return (set(outvars) - set(vars_before)).pop()\n+\n     def test_source(self):\n         self.send_signal(self.widget.Inputs.additional_data, self.iris, 0)\n         self.send_signal(self.widget.Inputs.additional_data, self.titanic, 1)\n         outputb = self.get_output(self.widget.Outputs.data)\n         outvarsb = outputb.domain.variables\n-        def get_source():\n-            output = self.get_output(self.widget.Outputs.data)\n-            outvars = output.domain.variables + output.domain.metas\n-            return (set(outvars) - set(outvarsb)).pop()\n         # test adding source\n         self.widget.controls.append_source_column.toggle()\n-        source = get_source()\n+        source = self.get_source_var(outvarsb)\n         self.assertEqual(source.name, \"Source ID\")\n         # test name changing\n         self.widget.controls.source_attr_name.setText(\"Source\")\n         self.widget.controls.source_attr_name.callback()\n-        source = get_source()\n+        source = self.get_source_var(outvarsb)\n         self.assertEqual(source.name, \"Source\")\n         # test source_column role\n         places = [\"class_vars\", \"attributes\", \"metas\"]\n         for i, place in enumerate(places):\n             self.widget.source_column_role = i\n             self.widget.commit.now()\n-            source = get_source()\n+            source = self.get_source_var(outvarsb)\n             output = self.get_output(self.widget.Outputs.data)\n             self.assertTrue(source in getattr(output.domain, place))\n             data = output.transform(Domain([source]))\n+            self.assertTupleEqual((\"iris\", \"titanic\"), source.values)\n             np.testing.assert_equal(data[:len(self.iris)].X, 0)\n             np.testing.assert_equal(data[len(self.iris):].X, 1)\n \n+    def test_source_ignore_compute_value(self):\n+        \"\"\"Test source variable correct also when ignore_compute_value on\"\"\"\n+        self.send_signal(self.widget.Inputs.additional_data, self.iris, 0)\n+        self.send_signal(self.widget.Inputs.additional_data, self.titanic, 1)\n+        outputb = self.get_output(self.widget.Outputs.data)\n+        outvarsb = outputb.domain.variables\n+\n+        self.widget.controls.append_source_column.toggle()\n+        self.widget.controls.ignore_compute_value.toggle()  # on\n+        source = self.get_source_var(outvarsb)\n+        output = self.get_output(self.widget.Outputs.data)\n+        data = output.transform(Domain([source]))\n+        self.assertTupleEqual((\"iris\", \"titanic\"), source.values)\n+        np.testing.assert_equal(data[: len(self.iris)].X, 0)\n+        np.testing.assert_equal(data[len(self.iris) :].X, 1)\n+\n     def test_singleclass_source_class(self):\n         self.send_signal(self.widget.Inputs.primary_data, self.iris)\n         # add source into a class variable\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6723.0, "instance_id": "biolab__orange3-6723", "issue_numbers": 0, "base_commit": "c17d656ad562743178e62bda5bc004a152e4f45d", "patch": "diff --git a/Orange/ensembles/stack.py b/Orange/ensembles/stack.py\nindex 17e22362c..37cb94b61 100644\n--- a/Orange/ensembles/stack.py\n+++ b/Orange/ensembles/stack.py\n@@ -81,7 +81,7 @@ class StackedLearner(Learner):\n         dom = Domain([ContinuousVariable('f{}'.format(i + 1))\n                       for i in range(X.shape[1])],\n                      data.domain.class_var)\n-        stacked_data = data.transform(dom).copy()\n+        stacked_data = Table.from_table(dom, data)\n         with stacked_data.unlocked_reference():\n             stacked_data.X = X\n             stacked_data.Y = res.actual\n.", "test_patch": "diff --git a/Orange/tests/test_stack.py b/Orange/tests/test_stack.py\nindex c52ff229d..48ccdcbc1 100644\n--- a/Orange/tests/test_stack.py\n+++ b/Orange/tests/test_stack.py\n@@ -1,7 +1,7 @@\n import unittest\n \n from Orange.data import Table\n-from Orange.ensembles.stack import StackedFitter\n+from Orange.ensembles.stack import StackedFitter, StackedLearner\n from Orange.evaluation import CA, CrossValidation, MSE\n from Orange.modelling import KNNLearner, TreeLearner\n \n@@ -26,3 +26,16 @@ class TestStackedFitter(unittest.TestCase):\n         mse = MSE()(results)\n         self.assertLess(mse[0], mse[1])\n         self.assertLess(mse[0], mse[2])\n+\n+    def test_timeseries(self):\n+        def aggregate(data):\n+            assert type(data) is Table\n+\n+        class CustomTable(Table):\n+            pass\n+\n+        sl = StackedLearner([TreeLearner(), KNNLearner()],\n+                             aggregate=aggregate)\n+\n+        data = CustomTable(self.iris)\n+        sl(data)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5952.0, "instance_id": "biolab__orange3-5952", "issue_numbers": 0, "base_commit": "bc523726010041b56570ef7e04f37ab4c98a74b6", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex e66e4fc60..3842a0c60 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -1064,17 +1064,17 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n         Returns:\n             (tuple): a list of pens and list of brushes\n         \"\"\"\n-\n+        alpha_subset, alpha_unset = self._alpha_for_subsets()\n         if subset is not None:\n-            colors = [QColor(*color, alpha)\n-                      for alpha in self._alpha_for_subsets()]\n-            brushes = [QBrush(color) for color in colors]\n-            brush = np.where(subset, *brushes)\n+            qcolor = QColor(*color, alpha_subset)\n+            brush = np.where(subset, QBrush(qcolor), QBrush(QColor(0, 0, 0, 0)))\n+            pen = np.where(subset,\n+                           _make_pen(qcolor, 1.5),\n+                           _make_pen(QColor(*color, alpha_unset), 1.5))\n         else:\n             qcolor = QColor(*color, self.alpha_value)\n             brush = np.full(self.n_shown, QBrush(qcolor))\n-        qcolor = QColor(*color, self.alpha_value)\n-        pen = [_make_pen(qcolor, 1.5)] * self.n_shown\n+            pen = [_make_pen(qcolor, 1.5)] * self.n_shown\n         return pen, brush\n \n     def _get_continuous_colors(self, c_data, subset):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplotbase.py b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\nindex 1f737450f..eeb8cdcf3 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n@@ -681,8 +681,14 @@ class TestOWScatterPlotBase(WidgetTest):\n         data = graph.scatterplot_item.data\n         self.assertTrue(all(pen.color().hue() == hue for pen in data[\"pen\"]))\n         self.assertTrue(all(pen.color().hue() == hue for pen in data[\"brush\"]))\n-        self.assertEqual(len(set(map(id, data[\"pen\"]))), 1)\n+        self.assertEqual(len(set(map(id, data[\"pen\"]))), 2)\n+        self.assertEqual(data[\"pen\"][3].color(), data[\"pen\"][4].color())\n+        self.assertNotEqual(data[\"pen\"][4].color().alpha(),\n+                            data[\"pen\"][5].color().alpha())\n         self.assertEqual(len(set(map(id, data[\"brush\"]))), 2)  # transparent and colored\n+        self.assertEqual(data[\"brush\"][3].color(), data[\"brush\"][4].color())\n+        self.assertNotEqual(data[\"brush\"][4].color().alpha(),\n+                            data[\"brush\"][5].color().alpha())\n \n     def test_colors_update_legend_and_density(self):\n         graph = self.graph\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4900.0, "instance_id": "biolab__orange3-4900", "issue_numbers": 0, "base_commit": "74a11541f436d24a4233ddc0ec1209677e55fc3f", "patch": "diff --git a/Orange/widgets/unsupervised/owpca.py b/Orange/widgets/unsupervised/owpca.py\nindex f03b52167..6aced939b 100644\n--- a/Orange/widgets/unsupervised/owpca.py\n+++ b/Orange/widgets/unsupervised/owpca.py\n@@ -116,6 +116,8 @@ class OWPCA(widget.OWWidget):\n         self.clear()\n         self.information()\n         self.data = None\n+        if not data:\n+            self.clear_outputs()\n         if isinstance(data, SqlTable):\n             if data.approx_len() < AUTO_DL_LIMIT:\n                 data = Table(data)\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owpca.py b/Orange/widgets/unsupervised/tests/test_owpca.py\nindex 01afae171..55ced0798 100644\n--- a/Orange/widgets/unsupervised/tests/test_owpca.py\n+++ b/Orange/widgets/unsupervised/tests/test_owpca.py\n@@ -248,6 +248,10 @@ class TestOWPCA(WidgetTest):\n         self.assertEqual(trans.domain.attributes, outdom.metas[1:])\n         np.testing.assert_equal(trans.X, output.metas[:, 1:])\n \n+        self.send_signal(widget.Inputs.data, None)\n+        output = self.get_output(widget.Outputs.data)\n+        self.assertIsNone(output)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6221.0, "instance_id": "biolab__orange3-6221", "issue_numbers": 0, "base_commit": "e3440f9cfc0d748479e65d2e7bcbac1ba08def17", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex 979be60d7..c37715e47 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -370,6 +370,8 @@ def stats(X, weights=None, compute_variance=False):\n             X.shape[0] - non_zero,\n             non_zero))\n     else:\n+        if X.ndim == 1:\n+            X = X[:, None]\n         nans = (pandas.isnull(X).sum(axis=0) + (X == \"\").sum(axis=0)) \\\n             if X.size else np.zeros(X.shape[1])\n         return np.column_stack((\n.", "test_patch": "diff --git a/Orange/tests/test_basic_stats.py b/Orange/tests/test_basic_stats.py\nindex 3b5ec1879..fb234a84e 100644\n--- a/Orange/tests/test_basic_stats.py\n+++ b/Orange/tests/test_basic_stats.py\n@@ -28,6 +28,10 @@ class TestDomainBasicStats(TestCase):\n         self.assertStatsEqual(domain_stats.stats,\n                               attr_stats + class_var_stats + meta_stats)\n \n+    def test_empty_table(self):\n+        domain_stats = DomainBasicStats(self.zoo[:0])\n+        self.assertEqual(len(domain_stats.stats), 17)\n+\n     def test_speed(self):\n         n, m = 10, 10000\n         data = Table.from_numpy(None, np.random.rand(n, m))\ndiff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex 0e5ee9c19..121c66cee 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -170,6 +170,18 @@ class TestUtil(unittest.TestCase):\n                                            [np.inf, -np.inf, 0, 0, 2, 1],\n                                            [np.inf, -np.inf, 0, 0, 0, 3]])\n \n+    def test_stats_empty(self):\n+        X = np.array([])\n+        np.testing.assert_equal(stats(X), [[np.inf, -np.inf, 0, 0, 0, 0]])\n+\n+        X = np.zeros((0,))\n+        np.testing.assert_equal(stats(X), [[np.inf, -np.inf, 0, 0, 0, 0]])\n+\n+        X = np.zeros((0, 4))\n+        np.testing.assert_equal(stats(X), [[np.inf, -np.inf, 0, 0, 0, 0]] * 4)\n+\n+\n+\n     def test_stats_long_string_mem_use(self):\n         X = np.full((1000, 1000), \"a\", dtype=object)\n         t = time.time()\ndiff --git a/Orange/widgets/data/tests/test_owtable.py b/Orange/widgets/data/tests/test_owtable.py\nindex 18ec1e60e..61dde5f33 100644\n--- a/Orange/widgets/data/tests/test_owtable.py\n+++ b/Orange/widgets/data/tests/test_owtable.py\n@@ -46,6 +46,12 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n         self.send_signal(self.widget.Inputs.data, None, 1)\n         self.assertEqual(self.widget.tabs.count(), 1)\n \n+    def test_input_data_empty(self):\n+        self.send_signal(self.widget.Inputs.data, self.data[:0])\n+        output = self.get_output(self.widget.Outputs.annotated_data)\n+        self.assertIsInstance(output, Table)\n+        self.assertEqual(len(output), 0)\n+\n     def test_data_model(self):\n         self.send_signal(self.widget.Inputs.data, self.data, 1)\n         self.assertEqual(self.widget.tabs.widget(0).model().rowCount(),\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5206.0, "instance_id": "biolab__orange3-5206", "issue_numbers": 0, "base_commit": "a6e34b28ebe636296b7151cc69ece369d7563728", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex 49ff86167..aa54cebf6 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -642,12 +642,18 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n         self.tip_textitem.setHtml(text)\n \n     def suspend_jittering(self):\n+        if self.jittering_suspended:\n+            return\n         self.jittering_suspended = True\n-        self.update_jittering()\n+        if self.jitter_size != 0:\n+            self.update_jittering()\n \n     def unsuspend_jittering(self):\n+        if not self.jittering_suspended:\n+            return\n         self.jittering_suspended = False\n-        self.update_jittering()\n+        if self.jitter_size != 0:\n+            self.update_jittering()\n \n     def update_jittering(self):\n         x, y = self.get_coordinates()\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplotbase.py b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\nindex 7209a9aef..3e32b3abf 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n@@ -364,6 +364,29 @@ class TestOWScatterPlotBase(WidgetTest):\n         x, y = scatterplot_item.getData()\n         np.testing.assert_equal(a10, x)\n \n+    def test_suspend_jittering(self):\n+        graph = self.graph\n+        graph.jitter_size = 10\n+        graph.reset_graph()\n+        uj = graph.update_jittering = Mock()\n+        graph.unsuspend_jittering()\n+        uj.assert_not_called()\n+        graph.suspend_jittering()\n+        uj.assert_called()\n+        uj.reset_mock()\n+        graph.suspend_jittering()\n+        uj.assert_not_called()\n+        graph.unsuspend_jittering()\n+        uj.assert_called()\n+        uj.reset_mock()\n+\n+        graph.jitter_size = 0\n+        graph.reset_graph()\n+        graph.suspend_jittering()\n+        uj.assert_not_called()\n+        graph.unsuspend_jittering()\n+        uj.assert_not_called()\n+\n     def test_size_normalization(self):\n         graph = self.graph\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6867.0, "instance_id": "biolab__orange3-6867", "issue_numbers": 0, "base_commit": "eed39efcdf5e638da28025812f63631f96ff7473", "patch": "diff --git a/Orange/widgets/model/owpls.py b/Orange/widgets/model/owpls.py\nindex f3f548966..14a20a3bf 100644\n--- a/Orange/widgets/model/owpls.py\n+++ b/Orange/widgets/model/owpls.py\n@@ -68,15 +68,15 @@ class OWPLS(OWBaseLearner):\n \n     def _create_output_coeffs_loadings(self) -> Table:\n         intercept = self.model.intercept.T[None, :]\n-        coefficients = self.model.coefficients.T\n+        coefficients = self.model.coefficients\n         _, y_loadings = self.model.loadings\n         x_rotations, _ = self.model.rotations\n \n-        n_features, n_targets = coefficients.shape\n+        n_targets, n_features = coefficients.shape\n         n_components = x_rotations.shape[1]\n \n         names = [f\"coef ({v.name})\" for v in self.model.domain.class_vars]\n-        names += [f\"coef/X_sd ({v.name})\" for v in self.model.domain.class_vars]\n+        names += [f\"coef * X_sd ({v.name})\" for v in self.model.domain.class_vars]\n         names += [f\"w*c {i + 1}\" for i in range(n_components)]\n         domain = Domain(\n             [ContinuousVariable(n) for n in names],\n@@ -85,18 +85,16 @@ class OWPLS(OWBaseLearner):\n         )\n \n         data = self.model.data_to_model_domain(self.data)\n-        x_std = np.std(data.X, axis=0)\n-        coeffs_x_std = coefficients.T / x_std\n-        X_features = np.hstack((coefficients,\n-                                coeffs_x_std.T,\n+        X_features = np.hstack((coefficients.T,\n+                                (coefficients * np.std(data.X, axis=0)).T,\n                                 x_rotations))\n         X_targets = np.hstack((np.full((n_targets, n_targets), np.nan),\n                                np.full((n_targets, n_targets), np.nan),\n                                y_loadings))\n \n-        coeffs = coeffs_x_std * np.mean(data.X, axis=0)\n-        X_intercepts = np.hstack((intercept,\n-                                  intercept - coeffs.sum(),\n+        coeffs = coefficients * np.mean(data.X, axis=0)\n+        X_intercepts = np.hstack((intercept - coeffs.sum(),\n+                                  intercept,\n                                   np.full((1, n_components), np.nan)))\n         X = np.vstack((X_features, X_targets, X_intercepts))\n \n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owpls.py b/Orange/widgets/model/tests/test_owpls.py\nindex c0055a90e..c7dfa19dd 100644\n--- a/Orange/widgets/model/tests/test_owpls.py\n+++ b/Orange/widgets/model/tests/test_owpls.py\n@@ -1,5 +1,6 @@\n import unittest\n import numpy as np\n+from sklearn.cross_decomposition import PLSRegression\n \n from Orange.data import Table, Domain, StringVariable\n from Orange.widgets.model.owpls import OWPLS\n@@ -30,6 +31,19 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n             ParameterMapping('n_components', self.widget.controls.n_components)\n         ]\n \n+    def test_coeffs_compare_sklearn(self):\n+        self.send_signal(self.widget.Inputs.data, self._data)\n+        coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n+        intercept = coefsdata.X[-1, 0]\n+        coeffs = coefsdata.X[:-2, 0]\n+        Y_orange = self._data.X @ coeffs + intercept\n+\n+        pls = PLSRegression(n_components=2)\n+        pls.fit(self._data.X, self._data.Y)\n+        Y_sklearn = pls.predict(self._data.X)\n+\n+        np.testing.assert_almost_equal(Y_sklearn, Y_orange)\n+\n     def test_output_coefsdata(self):\n         self.send_signal(self.widget.Inputs.data, self._data)\n         coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n@@ -38,7 +52,7 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertEqual(coefsdata.Y.shape, (15, 0))\n         self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n-        self.assertEqual([\"coef (MEDV)\", \"coef/X_sd (MEDV)\", \"w*c 1\", \"w*c 2\"],\n+        self.assertEqual([\"coef (MEDV)\", \"coef * X_sd (MEDV)\", \"w*c 1\", \"w*c 2\"],\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n                          [v.name for v in coefsdata.domain.metas])\n@@ -47,9 +61,9 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertTrue((coefsdata.metas[:-2, 1] == 0).all())\n         self.assertTrue((coefsdata.metas[-2, 1] == 1))\n         self.assertTrue(np.isnan(coefsdata.metas[-1, 1]))\n-        self.assertAlmostEqual(coefsdata.X[0, 2], 0.237, 3)\n-        self.assertAlmostEqual(coefsdata.X[13, 2], -0.304, 3)\n-        self.assertAlmostEqual(coefsdata.X[-1, 0], 22.5, 1)\n+        self.assertAlmostEqual(coefsdata.X[0, 3], 0.012, 3)\n+        self.assertAlmostEqual(coefsdata.X[13, 3], 0.389, 3)\n+        self.assertAlmostEqual(coefsdata.X[-1, 0], 13.7, 1)\n         self.assertTrue(np.isnan(coefsdata.X[-1, 2:]).all())\n \n     def test_output_coefsdata_multi_target(self):\n@@ -60,8 +74,8 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertEqual(coefsdata.Y.shape, (15, 0))\n         self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n-        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"coef/X_sd (MEDV)\",\n-                      \"coef/X_sd (CRIM)\", \"w*c 1\", \"w*c 2\"]\n+        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"coef * X_sd (MEDV)\",\n+                      \"coef * X_sd (CRIM)\", \"w*c 1\", \"w*c 2\"]\n         self.assertEqual(attr_names,\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n@@ -75,8 +89,8 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertAlmostEqual(coefsdata.X[0, 4], -0.198, 3)\n         self.assertAlmostEqual(coefsdata.X[12, 4], -0.288, 3)\n         self.assertAlmostEqual(coefsdata.X[13, 4], 0.243, 3)\n-        self.assertAlmostEqual(coefsdata.X[-1, 0], 22.5, 1)\n-        self.assertAlmostEqual(coefsdata.X[-1, 1], 3.6, 1)\n+        self.assertAlmostEqual(coefsdata.X[-1, 0], 6.7, 1)\n+        self.assertAlmostEqual(coefsdata.X[-1, 1], -12.2, 1)\n         self.assertTrue(np.isnan(coefsdata.X[-1, 4:]).all())\n \n     def test_output_data(self):\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6270.0, "instance_id": "biolab__orange3-6270", "issue_numbers": 0, "base_commit": "f1fcd72d2f71cc1f94bdbac27fe12b1bf67d33a0", "patch": "diff --git a/Orange/widgets/visualize/owbarplot.py b/Orange/widgets/visualize/owbarplot.py\nindex 9d9e9dcac..45ec95ead 100644\n--- a/Orange/widgets/visualize/owbarplot.py\n+++ b/Orange/widgets/visualize/owbarplot.py\n@@ -572,7 +572,10 @@ class OWBarPlot(OWWidget):\n         elif not self.annot_var:\n             return []\n         elif self.annot_var == self.enumeration:\n-            return np.arange(1, len(self.data) + 1)[self.grouped_indices]\n+            return [\n+                str(x)\n+                for x in np.arange(1, len(self.data) + 1)[self.grouped_indices]\n+            ]\n         else:\n             return [self.annot_var.str_val(row[self.annot_var])\n                     for row in self.grouped_data]\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owbarplot.py b/Orange/widgets/visualize/tests/test_owbarplot.py\nindex 0ff75962a..f3294b3bb 100644\n--- a/Orange/widgets/visualize/tests/test_owbarplot.py\n+++ b/Orange/widgets/visualize/tests/test_owbarplot.py\n@@ -137,6 +137,21 @@ class TestOWBarPlot(WidgetTest, WidgetOutputsTestMixin):\n         self.assertFalse(group_axis.isVisible())\n         self.assertFalse(annot_axis.isVisible())\n \n+    def test_annotate_by_enumeration(self):\n+        widget = self.widget\n+\n+        self.send_signal(widget.Inputs.data, self.data)\n+        combo = widget.controls.annot_var\n+        for i in range(combo.count()):\n+            try:\n+                simulate.combobox_activate_index(combo, i)\n+            except AssertionError:  # skip disabled items\n+                pass\n+            else:\n+                labels = widget.get_labels()\n+                self.assertTrue(not labels\n+                                or all(isinstance(x, str) for x in labels))\n+\n     def test_datasets(self):\n         controls = self.widget.controls\n         for ds in datasets.datasets():\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5513.0, "instance_id": "biolab__orange3-5513", "issue_numbers": 0, "base_commit": "f9d78d6cb3606473f07f437c512ce16f30ba5f5b", "patch": "diff --git a/Orange/widgets/unsupervised/owpca.py b/Orange/widgets/unsupervised/owpca.py\nindex d1904b259..1233aba41 100644\n--- a/Orange/widgets/unsupervised/owpca.py\n+++ b/Orange/widgets/unsupervised/owpca.py\n@@ -293,22 +293,36 @@ class OWPCA(widget.OWWidget):\n                 self._transformed = self._pca(self.data)\n             transformed = self._transformed\n \n+            if self._variance_ratio is not None:\n+                for var, explvar in zip(\n+                        transformed.domain.attributes,\n+                        self._variance_ratio[:self.ncomponents]):\n+                    var.attributes[\"variance\"] = round(explvar, 6)\n             domain = Domain(\n                 transformed.domain.attributes[:self.ncomponents],\n                 self.data.domain.class_vars,\n                 self.data.domain.metas\n             )\n             transformed = transformed.from_table(domain, transformed)\n+\n             # prevent caching new features by defining compute_value\n             proposed = [a.name for a in self._pca.orig_domain.attributes]\n             meta_name = get_unique_names(proposed, 'components')\n-            dom = Domain(\n-                [ContinuousVariable(name, compute_value=lambda _: None)\n-                 for name in proposed],\n-                metas=[StringVariable(name=meta_name)])\n+            meta_vars = [StringVariable(name=meta_name)]\n             metas = numpy.array([['PC{}'.format(i + 1)\n                                   for i in range(self.ncomponents)]],\n                                 dtype=object).T\n+            if self._variance_ratio is not None:\n+                variance_name = get_unique_names(proposed, \"variance\")\n+                meta_vars.append(ContinuousVariable(variance_name))\n+                metas = numpy.hstack(\n+                    (metas,\n+                     self._variance_ratio[:self.ncomponents, None]))\n+\n+            dom = Domain(\n+                [ContinuousVariable(name, compute_value=lambda _: None)\n+                 for name in proposed],\n+                metas=meta_vars)\n             components = Table(dom, self._pca.components_[:self.ncomponents],\n                                metas=metas)\n             components.name = 'components'\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owpca.py b/Orange/widgets/unsupervised/tests/test_owpca.py\nindex 55ced0798..9efb58876 100644\n--- a/Orange/widgets/unsupervised/tests/test_owpca.py\n+++ b/Orange/widgets/unsupervised/tests/test_owpca.py\n@@ -95,6 +95,27 @@ class TestOWPCA(WidgetTest):\n         out = self.get_output(self.widget.Outputs.components)\n         self.assertEqual(out.domain.metas[0].name, 'components (1)')\n \n+    def test_variance_attr(self):\n+        self.widget.ncomponents = 2\n+        self.send_signal(self.widget.Inputs.data, self.iris)\n+        self.wait_until_stop_blocking()\n+        self.widget._variance_ratio = np.array([0.5, 0.25, 0.2, 0.05])\n+        self.widget.unconditional_commit()\n+\n+        result = self.get_output(self.widget.Outputs.transformed_data)\n+        pc1, pc2 = result.domain.attributes\n+        self.assertEqual(pc1.attributes[\"variance\"], 0.5)\n+        self.assertEqual(pc2.attributes[\"variance\"], 0.25)\n+\n+        result = self.get_output(self.widget.Outputs.data)\n+        pc1, pc2 = result.domain.metas\n+        self.assertEqual(pc1.attributes[\"variance\"], 0.5)\n+        self.assertEqual(pc2.attributes[\"variance\"], 0.25)\n+\n+        result = self.get_output(self.widget.Outputs.components)\n+        np.testing.assert_almost_equal(result.get_column_view(\"variance\")[0].T,\n+                                       [0.5, 0.25])\n+\n     def test_sparse_data(self):\n         \"\"\"Check that PCA returns the same results for both dense and sparse data.\"\"\"\n         dense_data, sparse_data = self.iris, self.iris.to_sparse()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6866.0, "instance_id": "biolab__orange3-6866", "issue_numbers": 0, "base_commit": "09df730fdec7230f6994971d7de241a6b784e23b", "patch": "diff --git a/Orange/widgets/model/owsvm.py b/Orange/widgets/model/owsvm.py\nindex ae492e774..5b55d114c 100644\n--- a/Orange/widgets/model/owsvm.py\n+++ b/Orange/widgets/model/owsvm.py\n@@ -35,6 +35,8 @@ class OWSVM(OWBaseLearner):\n     class Warning(OWBaseLearner.Warning):\n         sparse_data = Msg('Input data is sparse, default preprocessing is to scale it.')\n \n+    settings_version = 2\n+\n     #: Different types of SVMs\n     SVM, Nu_SVM = range(2)\n     #: SVM type\n@@ -156,8 +158,8 @@ class OWSVM(OWBaseLearner):\n         gamma.setSpecialValueText(self._default_gamma)\n         coef0 = gui.doubleSpin(\n             inbox, self, \"coef0\", 0.0, 10.0, 0.01, label=\" c: \", **common)\n-        degree = gui.doubleSpin(\n-            inbox, self, \"degree\", 0.0, 10.0, 0.5, label=\" d: \", **common)\n+        degree = gui.spin(\n+            inbox, self, \"degree\", 0, 10, 1, label=\" d: \", **common)\n         self._kernel_params = [gamma, coef0, degree]\n         gui.rubber(parambox)\n \n@@ -255,6 +257,12 @@ class OWSVM(OWBaseLearner):\n             items[\"Kernel\"] = \"Sigmoid, tanh({g:.4} x\u22c5y + {c:.4})\".format(\n                 g=gamma, c=self.coef0)\n \n+    @classmethod\n+    def migrate_settings(cls, settings, version):\n+        if version < 2:\n+            if \"degree\" in settings:\n+                settings[\"degree\"] = int(settings[\"degree\"])\n+\n \n if __name__ == \"__main__\":  # pragma: no cover\n     WidgetPreview(OWSVM).run(Table(\"iris\"))\n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owsvm.py b/Orange/widgets/model/tests/test_owsvm.py\nindex e6602da30..b165e4751 100644\n--- a/Orange/widgets/model/tests/test_owsvm.py\n+++ b/Orange/widgets/model/tests/test_owsvm.py\n@@ -102,3 +102,22 @@ class TestOWSVMClassification(WidgetTest, WidgetLearnerTestMixin):\n             data.X = csr_matrix(data.X)\n         self.send_signal(self.widget.Inputs.data, data)\n         self.assertTrue(self.widget.Warning.sparse_data.is_shown())\n+\n+    def test_change_degree(self):\n+        data = Table(\"iris\")\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.widget.kernel_box.buttons[1].click()\n+        degree_spin = self.widget._kernel_params[2]  # pylint: disable=protected-access\n+        degree_spin.stepUp()\n+        self.assertEqual(self.widget.degree, 4)\n+        self.click_apply()\n+        self.wait_until_stop_blocking()\n+        self.assertFalse(self.widget.Error.fitting_failed.is_shown())\n+\n+    def test_migrate_degree(self):\n+        settings = {}\n+        OWSVM.migrate_settings(settings, 1)\n+\n+        settings = {\"degree\": 4.0}\n+        OWSVM.migrate_settings(settings, 1)\n+        self.assertIsInstance(settings[\"degree\"], int)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5568.0, "instance_id": "biolab__orange3-5568", "issue_numbers": 0, "base_commit": "79ac616c6429614d1c47d2cbb8cece1982c99e72", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex 4be4959c0..3f63a4b73 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -411,8 +411,6 @@ class OWPredictions(OWWidget):\n                 self._update_data_sort_order, self.predictionsview,\n                 self.dataview))\n \n-        self.predictionsview.resizeColumnsToContents()\n-\n     def _update_data_sort_order(self, sort_source_view, sort_dest_view):\n         sort_dest = sort_dest_view.model()\n         sort_source = sort_source_view.model()\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex 28b2e15f5..125f9d49d 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -175,6 +175,21 @@ class TestOWPredictions(WidgetTest):\n         self.send_signal(self.widget.Inputs.predictors, cl_data, 1)\n         self.send_signal(self.widget.Inputs.data, data)\n \n+    def test_changed_class_var(self):\n+        def set_input(data, model):\n+            self.send_signals([\n+                (self.widget.Inputs.data, data),\n+                (self.widget.Inputs.predictors, model)\n+            ])\n+        iris = self.iris\n+        learner = ConstantLearner()\n+        heart_disease = Table(\"heart_disease\")\n+        # catch exceptions in item delegates etc. during switching inputs\n+        with excepthook_catch():\n+            set_input(iris[:5], learner(iris))\n+            set_input(Table(\"housing\"), None)\n+            set_input(heart_disease[:5], learner(heart_disease))\n+\n     def test_predictor_fails(self):\n         titanic = Table(\"titanic\")\n         failing_model = ConstantLearner()(titanic)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6262.0, "instance_id": "biolab__orange3-6262", "issue_numbers": 0, "base_commit": "6f54f250a4f286f1db1bdb9de99547cb1e8ba44a", "patch": "diff --git a/Orange/widgets/visualize/ownomogram.py b/Orange/widgets/visualize/ownomogram.py\nindex 622d77107..c1938412f 100644\n--- a/Orange/widgets/visualize/ownomogram.py\n+++ b/Orange/widgets/visualize/ownomogram.py\n@@ -18,7 +18,8 @@ from AnyQt.QtGui import QColor, QPainter, QFont, QPen, QBrush, QFontMetrics\n from AnyQt.QtCore import Qt, QRectF, QSize, QPropertyAnimation, QObject, \\\n     pyqtProperty\n \n-from Orange.data import Table, Domain, DiscreteVariable, ContinuousVariable\n+from Orange.data import Table, Domain, DiscreteVariable, ContinuousVariable, \\\n+    Variable\n from Orange.statistics.util import nanmin, nanmax, nanmean, unique\n from Orange.classification import Model\n from Orange.classification.naive_bayes import NaiveBayesModel\n@@ -1311,7 +1312,10 @@ class OWNomogram(OWWidget):\n         attrs = OrderedDict()\n         for attr in preprocessed.attributes:\n             cv = attr._compute_value.variable._compute_value\n-            var = cv.variable if cv else original[attr.name]\n+            if cv and isinstance(getattr(cv, \"variable\", None), Variable):\n+                var = cv.variable\n+            else:\n+                var = original[attr.name]\n             var = original[var.name] if var.name in original else attr\n             if var in attrs:    # the reason for OrderedDict\n                 continue\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_ownomogram.py b/Orange/widgets/visualize/tests/test_ownomogram.py\nindex 36eadc878..5f8ddb0f5 100644\n--- a/Orange/widgets/visualize/tests/test_ownomogram.py\n+++ b/Orange/widgets/visualize/tests/test_ownomogram.py\n@@ -339,6 +339,19 @@ class TestOWNomogram(WidgetTest):\n         self.assertEqual(target_cb.currentIndex(), 2)\n         self.assertEqual(target_cb.count(), 3)\n \n+    def test_compute_value(self):\n+        class ComputeValue:\n+            def __call__(self, table):\n+                return table.get_column(0)\n+\n+        iris = Table(\"iris\")\n+        attrs = list(iris.domain.attributes)\n+        attrs[0] = ContinuousVariable(attrs[0].name, 1, ComputeValue())\n+        domain = Domain(attrs, iris.domain.class_vars)\n+        data = iris.transform(domain)\n+        lr = LogisticRegressionLearner()(data)\n+        self.send_signal(self.widget.Inputs.classifier, lr)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5972.0, "instance_id": "biolab__orange3-5972", "issue_numbers": 0, "base_commit": "369f2c336fa55601d59ad5f6f02ea3283c5aeede", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex ad3d0923e..09522175f 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -215,8 +215,7 @@ class OWPredictions(OWWidget):\n                     self.predictionsview))\n \n         self._set_target_combos()\n-        if self.is_discrete_class:\n-            self.openContext(self.class_var.values)\n+        self.openContext(self.class_var.values if self.is_discrete_class else ())\n         self._invalidate_predictions()\n \n     def _store_selection(self):\n@@ -267,10 +266,16 @@ class OWPredictions(OWWidget):\n             self.target_class = self.TARGET_AVERAGE\n         else:\n             self.shown_probs = self.NO_PROBS\n+            model = prob_combo.model()\n+            for v in (self.DATA_PROBS, self.BOTH_PROBS):\n+                item = model.item(v)\n+                item.setFlags(item.flags() & ~Qt.ItemIsEnabled)\n \n     def _update_control_visibility(self):\n         for widget in self._prob_controls:\n-            widget.setVisible(self.is_discrete_class)\n+            widget.setVisible(self.is_discrete_class\n+                              or any(slot.predictor.domain.has_discrete_class\n+                                     for slot in self.predictors))\n \n         for widget in self._target_controls:\n             widget.setVisible(self.is_discrete_class and self.show_scores)\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex d12f85449..5be547582 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -39,6 +39,7 @@ class TestOWPredictions(WidgetTest):\n     def setUp(self):\n         self.widget = self.create_widget(OWPredictions)  # type: OWPredictions\n         self.iris = Table(\"iris\")\n+        self.iris_classless = self.iris.transform(Domain(self.iris.domain.attributes, []))\n         self.housing = Table(\"housing\")\n \n     def test_rowCount_from_model(self):\n@@ -624,12 +625,12 @@ class TestOWPredictions(WidgetTest):\n     def _mock_predictors(self):\n         def pred(values):\n             slot = Mock()\n-            slot.predictor.domain.class_var = DiscreteVariable(\"c\", tuple(values))\n+            slot.predictor.domain = Domain([], DiscreteVariable(\"c\", tuple(values)))\n             return slot\n \n         def predc():\n             slot = Mock()\n-            slot.predictor.domain.class_var = ContinuousVariable(\"c\")\n+            slot.predictor.domain = Domain([], ContinuousVariable(\"c\"))\n             return slot\n \n         widget = self.widget\n@@ -746,16 +747,32 @@ class TestOWPredictions(WidgetTest):\n \n         widget.data = Table.from_list(Domain([], ContinuousVariable(\"c\")), [])\n \n+        # only regression\n+        all_predictors = widget.predictors\n+        widget.predictors = [widget.predictors[-1]]\n         widget._update_control_visibility()\n         self.assertTrue(widget.controls.shown_probs.isHidden())\n         self.assertTrue(widget.controls.target_class.isHidden())\n \n+        # regression and classification\n+        widget.predictors = all_predictors\n+        widget._update_control_visibility()\n+        self.assertFalse(widget.controls.shown_probs.isHidden())\n+        self.assertTrue(widget.controls.target_class.isHidden())\n+\n         widget._set_class_values()\n         self.assertEqual(widget.class_values, list(\"abcde\"))\n \n         widget._set_target_combos()\n         self.assertEqual(widget.shown_probs, widget.NO_PROBS)\n \n+        def is_enabled(prob_item):\n+            return widget.controls.shown_probs.model().item(prob_item).flags() & Qt.ItemIsEnabled\n+        self.assertTrue(is_enabled(widget.NO_PROBS))\n+        self.assertTrue(is_enabled(widget.MODEL_PROBS))\n+        self.assertFalse(is_enabled(widget.DATA_PROBS))\n+        self.assertFalse(is_enabled(widget.BOTH_PROBS))\n+\n     def test_delegate_ranges(self):\n         widget = self.widget\n \n@@ -816,7 +833,6 @@ class TestOWPredictions(WidgetTest):\n         delegate = widget.predictionsview.itemDelegateForColumn(2)\n         self.assertIsInstance(delegate, ClassificationItemDelegate)\n \n-\n     class _Scorer(TargetScore):\n         # pylint: disable=arguments-differ\n         def compute_score(self, _, target, **__):\n@@ -940,6 +956,37 @@ class TestOWPredictions(WidgetTest):\n             out.metas,\n             np.hstack([pred.results.predicted.T for pred in widget.predictors]))\n \n+    def test_classless(self):\n+        widget = self.widget\n+        iris012 = self.iris\n+        purge = Remove(class_flags=Remove.RemoveUnusedValues)\n+        iris01 = purge(iris012[:100])\n+        iris12 = purge(iris012[50:])\n+\n+        bayes01 = NaiveBayesLearner()(iris01)\n+        bayes12 = NaiveBayesLearner()(iris12)\n+        bayes012 = NaiveBayesLearner()(iris012)\n+\n+        self.send_signal(widget.Inputs.data, self.iris_classless)\n+        self.send_signal(widget.Inputs.predictors, bayes01, 0)\n+        self.send_signal(widget.Inputs.predictors, bayes12, 1)\n+        self.send_signal(widget.Inputs.predictors, bayes012, 2)\n+\n+        for i, pred in enumerate(widget.predictors):\n+            p = pred.results.unmapped_probabilities\n+            p[0] = 10 + 100 * i + np.arange(p.shape[1])\n+            pred.results.unmapped_predicted[:] = i\n+\n+        widget.shown_probs = widget.NO_PROBS\n+        widget._commit_predictions()\n+        out = self.get_output(widget.Outputs.predictions)\n+        self.assertEqual(list(out.metas[0]), [0, 1, 2])\n+\n+        widget.shown_probs = widget.MODEL_PROBS\n+        widget._commit_predictions()\n+        out = self.get_output(widget.Outputs.predictions)\n+        self.assertEqual(list(out.metas[0]), [0, 10, 11, 1, 110, 111, 2, 210, 211, 212])\n+\n     @patch(\"Orange.widgets.evaluate.owpredictions.usable_scorers\",\n            Mock(return_value=[_Scorer]))\n     def test_change_target(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6450.0, "instance_id": "biolab__orange3-6450", "issue_numbers": 0, "base_commit": "d055e8f181f435b34eb78b99d0d5259f2c3e16bb", "patch": "diff --git a/Orange/widgets/data/owcorrelations.py b/Orange/widgets/data/owcorrelations.py\nindex 1b4d5f301..4779ad8a8 100644\n--- a/Orange/widgets/data/owcorrelations.py\n+++ b/Orange/widgets/data/owcorrelations.py\n@@ -393,18 +393,24 @@ class OWCorrelations(OWWidget):\n             self.Outputs.correlations.send(None)\n             return\n \n-        attrs = [ContinuousVariable(\"Correlation\"), ContinuousVariable(\"FDR\")]\n+        attrs = [ContinuousVariable(\"Correlation\"),\n+                 ContinuousVariable(\"uncorrected p\"),\n+                 ContinuousVariable(\"FDR\")]\n         metas = [StringVariable(\"Feature 1\"), StringVariable(\"Feature 2\")]\n         domain = Domain(attrs, metas=metas)\n         model = self.vizrank.rank_model\n-        x = np.array([[float(model.data(model.index(row, 0), role))\n-                       for role in (Qt.DisplayRole, CorrelationRank.PValRole)]\n-                      for row in range(model.rowCount())])\n-        x[:, 1] = FDR(list(x[:, 1]))\n+        count = model.rowCount()\n+        index = model.index\n+        corr = np.array([float(index(row, 0).data())\n+                         for row in range(count)])\n+        p = np.array([index(row, 0).data(CorrelationRank.PValRole)\n+                      for row in range(count)])\n+        fdr = FDR(p)\n+        x = np.vstack((corr, p, fdr)).T\n         # pylint: disable=protected-access\n-        m = np.array([[a.name for a in model.data(model.index(row, 0),\n-                                                  CorrelationRank._AttrRole)]\n-                      for row in range(model.rowCount())], dtype=object)\n+        m = np.array([[a.name\n+                       for a in index(row, 0).data(CorrelationRank._AttrRole)]\n+                      for row in range(count)], dtype=object)\n         corr_table = Table(domain, x, metas=m)\n         corr_table.name = \"Correlations\"\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcorrelations.py b/Orange/widgets/data/tests/test_owcorrelations.py\nindex 650213686..f8b31b157 100644\n--- a/Orange/widgets/data/tests/test_owcorrelations.py\n+++ b/Orange/widgets/data/tests/test_owcorrelations.py\n@@ -158,10 +158,14 @@ class TestOWCorrelations(WidgetTest):\n         self.assertIsInstance(correlations, Table)\n         self.assertEqual(len(correlations), 6)\n         self.assertEqual(len(correlations.domain.metas), 2)\n-        self.assertListEqual([\"Correlation\", \"FDR\"],\n+        self.assertListEqual([\"Correlation\", \"uncorrected p\", \"FDR\"],\n                              [m.name for m in correlations.domain.attributes])\n-        array = np.array([[0.963, 0], [0.872, 0], [0.818, 0], [-0.421, 0],\n-                          [-0.357, 0.000009], [-0.109, 0.1827652]])\n+        array = np.array([[0.963, 0, 0],\n+                          [0.872, 0, 0],\n+                          [0.818, 0, 0],\n+                          [-0.421, 0, 0],\n+                          [-0.357, 7.52e-6, 0.000009],\n+                          [-0.109, 0.1827652, 0.1827652]])\n         npt.assert_almost_equal(correlations.X, array)\n \n     def test_input_changed(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6593.0, "instance_id": "biolab__orange3-6593", "issue_numbers": 0, "base_commit": "419b1882cef9856fa26bf6c847b7a1630e2bc996", "patch": "diff --git a/Orange/widgets/visualize/owlinearprojection.py b/Orange/widgets/visualize/owlinearprojection.py\nindex 3ac282b69..7054726d8 100644\n--- a/Orange/widgets/visualize/owlinearprojection.py\n+++ b/Orange/widgets/visualize/owlinearprojection.py\n@@ -93,6 +93,7 @@ class LinearProjectionVizRank(VizRankDialog, OWComponent):\n         n_cont_var = len([v for v in master.continuous_variables\n                           if v is not master.attr_color])\n         self.n_attrs_spin.setMaximum(n_cont_var)\n+        self.n_attrs_spin.setValue(self.n_attrs)\n         return True\n \n     def state_count(self):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owlinearprojection.py b/Orange/widgets/visualize/tests/test_owlinearprojection.py\nindex 92438d39a..8a9ebd1e3 100644\n--- a/Orange/widgets/visualize/tests/test_owlinearprojection.py\n+++ b/Orange/widgets/visualize/tests/test_owlinearprojection.py\n@@ -256,6 +256,16 @@ class LinProjVizRankTests(WidgetTest):\n         c2 = self.get_output(self.widget.Outputs.components)\n         self.assertNotEqual(c1.domain.attributes, c2.domain.attributes)\n \n+    def test_vizrank_n_attrs(self):\n+        self.send_signal(self.widget.Inputs.data, self.data)\n+        self.vizrank.n_attrs_spin.setValue(4)\n+        settings = self.widget.settingsHandler.pack_data(self.widget)\n+        widget = self.create_widget(OWLinearProjection,\n+                                    stored_settings=settings)\n+        self.send_signal(widget.Inputs.data, self.data, widget=widget)\n+        self.assertEqual(widget.vizrank.n_attrs_spin.value(),\n+                         self.vizrank.n_attrs_spin.value())\n+\n \n if __name__ == \"__main__\":\n     import unittest\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6537.0, "instance_id": "biolab__orange3-6537", "issue_numbers": 0, "base_commit": "49dc3fd007ab67773ca1f7301dcef4a0724d8429", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex b9b5ec36e..69797905a 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -9,7 +9,7 @@ from typing import Set, Sequence, Union, Optional, List, NamedTuple\n import numpy\n from AnyQt.QtWidgets import (\n     QTableView, QSplitter, QToolTip, QStyle, QApplication, QSizePolicy,\n-    QPushButton, QAbstractItemDelegate)\n+    QPushButton, QStyledItemDelegate)\n from AnyQt.QtGui import QPainter, QStandardItem, QPen, QColor, QBrush\n from AnyQt.QtCore import (\n     Qt, QSize, QRect, QRectF, QPoint, QPointF, QLocale,\n@@ -1117,14 +1117,16 @@ class ErrorDelegate(PredictionsBarItemDelegate):\n         return cls.__size_hint\n \n \n-class NoopItemDelegate(QAbstractItemDelegate):\n+class NoopItemDelegate(QStyledItemDelegate):\n     def paint(self, *_):\n         pass\n \n-    @staticmethod\n-    def sizeHint(*_):\n+    def sizeHint(self, *_):\n         return QSize(0, 0)\n \n+    def displayText(self, *_):\n+        return \"\"\n+\n \n class ClassificationErrorDelegate(ErrorDelegate):\n     def displayText(self, value, _):\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex fcb5ecfef..a6ab9b15d 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -152,6 +152,14 @@ class TestOWPredictions(WidgetTest):\n             predmodel.data(predmodel.index(0, 0), Qt.UserRole)))\n         self.assertIn(predmodel.data(predmodel.index(0, 0))[0],\n                       titanic.domain.class_var.values)\n+        self.widget.send_report()\n+\n+        housing = self.housing[::5]\n+        mean_housing = ConstantLearner()(housing)\n+        no_target = housing.transform(Domain(housing.domain.attributes, None))\n+        self.send_signal(self.widget.Inputs.data, no_target)\n+        self.send_signal(self.widget.Inputs.predictors, mean_housing, 1)\n+        self.widget.send_report()\n \n     def test_invalid_regression_target(self):\n         widget = self.widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5517.0, "instance_id": "biolab__orange3-5517", "issue_numbers": 0, "base_commit": "f9d78d6cb3606473f07f437c512ce16f30ba5f5b", "patch": "diff --git a/Orange/widgets/visualize/owheatmap.py b/Orange/widgets/visualize/owheatmap.py\nindex a51c747a1..7228d910e 100644\n--- a/Orange/widgets/visualize/owheatmap.py\n+++ b/Orange/widgets/visualize/owheatmap.py\n@@ -662,8 +662,8 @@ class OWHeatMap(widget.OWWidget):\n \n         self.update_heatmaps()\n         if data is not None and self.__pending_selection is not None:\n-            assert self.scene.widget is not None\n-            self.scene.widget.selectRows(self.__pending_selection)\n+            if self.scene.widget is not None:\n+                self.scene.widget.selectRows(self.__pending_selection)\n             self.selected_rows = self.__pending_selection\n             self.__pending_selection = None\n \n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owheatmap.py b/Orange/widgets/visualize/tests/test_owheatmap.py\nindex c61075f77..cd0a3c246 100644\n--- a/Orange/widgets/visualize/tests/test_owheatmap.py\n+++ b/Orange/widgets/visualize/tests/test_owheatmap.py\n@@ -205,6 +205,20 @@ class TestOWHeatMap(WidgetTest, WidgetOutputsTestMixin):\n         self.send_signal(w.Inputs.data, iris, widget=w)\n         self.assertEqual(len(self.get_output(w.Outputs.selected_data)), 21)\n \n+    def test_saved_selection_when_not_possible(self):\n+        # Has stored selection but ot enough columns for clustering.\n+        iris = Table(\"iris\")[:, [\"petal width\"]]\n+        w = self.create_widget(\n+            OWHeatMap, stored_settings={\n+                \"__version__\": 3,\n+                \"col_clustering_method\": \"Clustering\",\n+                \"selected_rows\": [1, 2, 3],\n+            }\n+        )\n+        self.send_signal(w.Inputs.data, iris)\n+        out = self.get_output(w.Outputs.selected_data)\n+        self.assertSequenceEqual(list(out.ids), list(iris.ids[[1, 2, 3]]))\n+\n     def test_set_split_var(self):\n         data = self.brown_selected[::3]\n         w = self.widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6000.0, "instance_id": "biolab__orange3-6000", "issue_numbers": 0, "base_commit": "70d2572a2df07dd096cbc63ee572267dd6b6a7cf", "patch": "diff --git a/Orange/widgets/visualize/owheatmap.py b/Orange/widgets/visualize/owheatmap.py\nindex 81b04bd6a..fac4bd15a 100644\n--- a/Orange/widgets/visualize/owheatmap.py\n+++ b/Orange/widgets/visualize/owheatmap.py\n@@ -692,7 +692,11 @@ class OWHeatMap(widget.OWWidget):\n     def update_heatmaps(self):\n         if self.data is not None:\n             self.clear_scene()\n-            self.clear_messages()\n+            self.Error.clear()\n+            self.Warning.clear()\n+            self.Information.row_clust.clear()\n+            self.Information.col_clust.clear()\n+            self.Information.sampled.clear()\n             if self.col_clustering != Clustering.None_ and \\\n                     len(self.data.domain.attributes) < 2:\n                 self.Error.not_enough_features()\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owheatmap.py b/Orange/widgets/visualize/tests/test_owheatmap.py\nindex 53f4fd667..2f3eece77 100644\n--- a/Orange/widgets/visualize/tests/test_owheatmap.py\n+++ b/Orange/widgets/visualize/tests/test_owheatmap.py\n@@ -72,6 +72,9 @@ class TestOWHeatMap(WidgetTest, WidgetOutputsTestMixin):\n         self.assertFalse(self.widget.Information.active)\n         self.send_signal(self.widget.Inputs.data, data[:21])\n         self.assertTrue(self.widget.Information.active)\n+        data = Table(\"heart_disease.tab\")[:10]\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.assertTrue(self.widget.Information.discrete_ignored.is_shown())\n \n     def test_settings_changed(self):\n         self.send_signal(self.widget.Inputs.data, self.data)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5810.0, "instance_id": "biolab__orange3-5810", "issue_numbers": 0, "base_commit": "dfd2734de0586e7b92d1a0f7749e0926695f5a02", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex 069316139..d181f6454 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -277,6 +277,7 @@ class ExcelReader(_BaseExcelReader):\n     EXTENSIONS = ('.xlsx',)\n     DESCRIPTION = 'Microsoft Excel spreadsheet'\n     ERRORS = (\"#VALUE!\", \"#DIV/0!\", \"#REF!\", \"#NUM!\", \"#NULL!\", \"#NAME?\")\n+    OPTIONAL_TYPE_ANNOTATIONS = True\n \n     def __init__(self, filename):\n         super().__init__(filename)\n@@ -319,7 +320,7 @@ class ExcelReader(_BaseExcelReader):\n             return self.workbook.active\n \n     @classmethod\n-    def write_file(cls, filename, data):\n+    def write_file(cls, filename, data, with_annotations=False):\n         vars = list(chain((ContinuousVariable('_w'),) if data.has_weights() else (),\n                           data.domain.attributes,\n                           data.domain.class_vars,\n@@ -329,12 +330,20 @@ class ExcelReader(_BaseExcelReader):\n                                data.X,\n                                data.Y if data.Y.ndim > 1 else data.Y[:, np.newaxis],\n                                data.metas)\n-        headers = cls.header_names(data)\n+        names = cls.header_names(data)\n+        headers = (names,)\n+        if with_annotations:\n+            types = cls.header_types(data)\n+            flags = cls.header_flags(data)\n+            headers = (names, types, flags)\n+\n         workbook = xlsxwriter.Workbook(filename)\n         sheet = workbook.add_worksheet()\n-        for c, header in enumerate(headers):\n-            sheet.write(0, c, header)\n-        for i, row in enumerate(zipped_list_data, 1):\n+\n+        for r, parts in enumerate(headers):\n+            for c, part in enumerate(parts):\n+                sheet.write(r, c, part)\n+        for i, row in enumerate(zipped_list_data, len(headers)):\n             for j, (fmt, v) in enumerate(zip(formatters, flatten(row))):\n                 sheet.write(i, j, fmt(v))\n         workbook.close()\ndiff --git a/Orange/widgets/data/owsave.py b/Orange/widgets/data/owsave.py\nindex 80fe7f948..b1a1ca707 100644\n--- a/Orange/widgets/data/owsave.py\n+++ b/Orange/widgets/data/owsave.py\n@@ -20,7 +20,7 @@ class OWSave(OWSaveBase):\n     category = \"Data\"\n     keywords = [\"export\"]\n \n-    settings_version = 2\n+    settings_version = 3\n \n     class Inputs:\n         data = Input(\"Data\", Table)\n@@ -120,6 +120,12 @@ class OWSave(OWSaveBase):\n         if version < 2:\n             migrate_to_version_2()\n \n+        if version < 3:\n+            if settings.get(\"add_type_annotations\") and \\\n+                    settings.get(\"stored_name\") and \\\n+                    os.path.splitext(settings[\"stored_name\"])[1] == \".xlsx\":\n+                settings[\"add_type_annotations\"] = False\n+\n     def initial_start_dir(self):\n         if self.filename and os.path.exists(os.path.split(self.filename)[0]):\n             return self.filename\n.", "test_patch": "diff --git a/Orange/tests/test_xlsx_reader.py b/Orange/tests/test_xlsx_reader.py\nindex 46f89ef36..feb913a11 100644\n--- a/Orange/tests/test_xlsx_reader.py\n+++ b/Orange/tests/test_xlsx_reader.py\n@@ -4,6 +4,7 @@\n import unittest\n import os\n from functools import wraps\n+from tempfile import mkstemp\n from typing import Callable\n \n import numpy as np\n@@ -46,6 +47,35 @@ class TestExcelReader(unittest.TestCase):\n         self.assertIsInstance(domain[1], ContinuousVariable)\n         self.assertEqual(domain[2].values, (\"1\", \"2\"))\n \n+    def test_write_file(self):\n+        fd, filename = mkstemp(suffix=\".xlsx\")\n+        os.close(fd)\n+\n+        data = Table(\"zoo\")\n+        io.ExcelReader.write_file(filename, data, with_annotations=True)\n+\n+        reader = io.ExcelReader(filename)\n+        read_data = reader.read()\n+\n+        domain1 = data.domain\n+        domain2 = read_data.domain\n+        self.assertEqual(len(domain1.attributes), len(domain2.attributes))\n+        self.assertEqual(len(domain1.class_vars), len(domain2.class_vars))\n+        self.assertEqual(len(domain1.metas), len(domain2.metas))\n+        for var1, var2 in zip(domain1.variables + domain1.metas,\n+                              domain2.variables + domain2.metas):\n+            self.assertEqual(type(var1), type(var2))\n+            self.assertEqual(var1.name, var2.name)\n+            if var1.is_discrete:\n+                self.assertEqual(var1.values, var2.values)\n+\n+        np.testing.assert_array_equal(data.X, read_data.X)\n+        np.testing.assert_array_equal(data.Y, read_data.Y)\n+        np.testing.assert_array_equal(data.metas, read_data.metas)\n+        np.testing.assert_array_equal(data.W, read_data.W)\n+\n+        os.unlink(filename)\n+\n \n class TestExcelHeader0(unittest.TestCase):\n     @test_xlsx_xls\ndiff --git a/Orange/widgets/data/tests/test_owsave.py b/Orange/widgets/data/tests/test_owsave.py\nindex de52ccd6c..2082c6efc 100644\n--- a/Orange/widgets/data/tests/test_owsave.py\n+++ b/Orange/widgets/data/tests/test_owsave.py\n@@ -374,6 +374,31 @@ class TestOWSave(OWSaveTestBase):\n         OWSave.migrate_settings(settings)\n         self.assertTrue(settings[\"filter\"] in OWSave.get_filters())\n \n+    def test_migration_to_version_3(self):\n+        settings = {\"add_type_annotations\": True,\n+                    \"stored_name\": \"zoo.xlsx\",\n+                    \"__version__\": 2}\n+        widget = self.create_widget(OWSave, stored_settings=settings)\n+        self.assertFalse(widget.add_type_annotations)\n+\n+        settings = {\"add_type_annotations\": True,\n+                    \"stored_name\": \"zoo.tab\",\n+                    \"__version__\": 2}\n+        widget = self.create_widget(OWSave, stored_settings=settings)\n+        self.assertTrue(widget.add_type_annotations)\n+\n+        settings = {\"add_type_annotations\": False,\n+                    \"stored_name\": \"zoo.xlsx\",\n+                    \"__version__\": 2}\n+        widget = self.create_widget(OWSave, stored_settings=settings)\n+        self.assertFalse(widget.add_type_annotations)\n+\n+        settings = {\"add_type_annotations\": False,\n+                    \"stored_name\": \"zoo.tab\",\n+                    \"__version__\": 2}\n+        widget = self.create_widget(OWSave, stored_settings=settings)\n+        self.assertFalse(widget.add_type_annotations)\n+\n \n class TestFunctionalOWSave(WidgetTest):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5810.0, "instance_id": "biolab__orange3-5810", "issue_numbers": 0, "base_commit": "aa14e9460d26cf1ad1413dcd3161821fe6730270", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex 069316139..d181f6454 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -277,6 +277,7 @@ class ExcelReader(_BaseExcelReader):\n     EXTENSIONS = ('.xlsx',)\n     DESCRIPTION = 'Microsoft Excel spreadsheet'\n     ERRORS = (\"#VALUE!\", \"#DIV/0!\", \"#REF!\", \"#NUM!\", \"#NULL!\", \"#NAME?\")\n+    OPTIONAL_TYPE_ANNOTATIONS = True\n \n     def __init__(self, filename):\n         super().__init__(filename)\n@@ -319,7 +320,7 @@ class ExcelReader(_BaseExcelReader):\n             return self.workbook.active\n \n     @classmethod\n-    def write_file(cls, filename, data):\n+    def write_file(cls, filename, data, with_annotations=False):\n         vars = list(chain((ContinuousVariable('_w'),) if data.has_weights() else (),\n                           data.domain.attributes,\n                           data.domain.class_vars,\n@@ -329,12 +330,20 @@ class ExcelReader(_BaseExcelReader):\n                                data.X,\n                                data.Y if data.Y.ndim > 1 else data.Y[:, np.newaxis],\n                                data.metas)\n-        headers = cls.header_names(data)\n+        names = cls.header_names(data)\n+        headers = (names,)\n+        if with_annotations:\n+            types = cls.header_types(data)\n+            flags = cls.header_flags(data)\n+            headers = (names, types, flags)\n+\n         workbook = xlsxwriter.Workbook(filename)\n         sheet = workbook.add_worksheet()\n-        for c, header in enumerate(headers):\n-            sheet.write(0, c, header)\n-        for i, row in enumerate(zipped_list_data, 1):\n+\n+        for r, parts in enumerate(headers):\n+            for c, part in enumerate(parts):\n+                sheet.write(r, c, part)\n+        for i, row in enumerate(zipped_list_data, len(headers)):\n             for j, (fmt, v) in enumerate(zip(formatters, flatten(row))):\n                 sheet.write(i, j, fmt(v))\n         workbook.close()\ndiff --git a/Orange/widgets/data/owsave.py b/Orange/widgets/data/owsave.py\nindex 80fe7f948..b1a1ca707 100644\n--- a/Orange/widgets/data/owsave.py\n+++ b/Orange/widgets/data/owsave.py\n@@ -20,7 +20,7 @@ class OWSave(OWSaveBase):\n     category = \"Data\"\n     keywords = [\"export\"]\n \n-    settings_version = 2\n+    settings_version = 3\n \n     class Inputs:\n         data = Input(\"Data\", Table)\n@@ -120,6 +120,12 @@ class OWSave(OWSaveBase):\n         if version < 2:\n             migrate_to_version_2()\n \n+        if version < 3:\n+            if settings.get(\"add_type_annotations\") and \\\n+                    settings.get(\"stored_name\") and \\\n+                    os.path.splitext(settings[\"stored_name\"])[1] == \".xlsx\":\n+                settings[\"add_type_annotations\"] = False\n+\n     def initial_start_dir(self):\n         if self.filename and os.path.exists(os.path.split(self.filename)[0]):\n             return self.filename\n.", "test_patch": "diff --git a/Orange/tests/test_xlsx_reader.py b/Orange/tests/test_xlsx_reader.py\nindex 46f89ef36..feb913a11 100644\n--- a/Orange/tests/test_xlsx_reader.py\n+++ b/Orange/tests/test_xlsx_reader.py\n@@ -4,6 +4,7 @@\n import unittest\n import os\n from functools import wraps\n+from tempfile import mkstemp\n from typing import Callable\n \n import numpy as np\n@@ -46,6 +47,35 @@ class TestExcelReader(unittest.TestCase):\n         self.assertIsInstance(domain[1], ContinuousVariable)\n         self.assertEqual(domain[2].values, (\"1\", \"2\"))\n \n+    def test_write_file(self):\n+        fd, filename = mkstemp(suffix=\".xlsx\")\n+        os.close(fd)\n+\n+        data = Table(\"zoo\")\n+        io.ExcelReader.write_file(filename, data, with_annotations=True)\n+\n+        reader = io.ExcelReader(filename)\n+        read_data = reader.read()\n+\n+        domain1 = data.domain\n+        domain2 = read_data.domain\n+        self.assertEqual(len(domain1.attributes), len(domain2.attributes))\n+        self.assertEqual(len(domain1.class_vars), len(domain2.class_vars))\n+        self.assertEqual(len(domain1.metas), len(domain2.metas))\n+        for var1, var2 in zip(domain1.variables + domain1.metas,\n+                              domain2.variables + domain2.metas):\n+            self.assertEqual(type(var1), type(var2))\n+            self.assertEqual(var1.name, var2.name)\n+            if var1.is_discrete:\n+                self.assertEqual(var1.values, var2.values)\n+\n+        np.testing.assert_array_equal(data.X, read_data.X)\n+        np.testing.assert_array_equal(data.Y, read_data.Y)\n+        np.testing.assert_array_equal(data.metas, read_data.metas)\n+        np.testing.assert_array_equal(data.W, read_data.W)\n+\n+        os.unlink(filename)\n+\n \n class TestExcelHeader0(unittest.TestCase):\n     @test_xlsx_xls\ndiff --git a/Orange/widgets/data/tests/test_owsave.py b/Orange/widgets/data/tests/test_owsave.py\nindex de52ccd6c..2082c6efc 100644\n--- a/Orange/widgets/data/tests/test_owsave.py\n+++ b/Orange/widgets/data/tests/test_owsave.py\n@@ -374,6 +374,31 @@ class TestOWSave(OWSaveTestBase):\n         OWSave.migrate_settings(settings)\n         self.assertTrue(settings[\"filter\"] in OWSave.get_filters())\n \n+    def test_migration_to_version_3(self):\n+        settings = {\"add_type_annotations\": True,\n+                    \"stored_name\": \"zoo.xlsx\",\n+                    \"__version__\": 2}\n+        widget = self.create_widget(OWSave, stored_settings=settings)\n+        self.assertFalse(widget.add_type_annotations)\n+\n+        settings = {\"add_type_annotations\": True,\n+                    \"stored_name\": \"zoo.tab\",\n+                    \"__version__\": 2}\n+        widget = self.create_widget(OWSave, stored_settings=settings)\n+        self.assertTrue(widget.add_type_annotations)\n+\n+        settings = {\"add_type_annotations\": False,\n+                    \"stored_name\": \"zoo.xlsx\",\n+                    \"__version__\": 2}\n+        widget = self.create_widget(OWSave, stored_settings=settings)\n+        self.assertFalse(widget.add_type_annotations)\n+\n+        settings = {\"add_type_annotations\": False,\n+                    \"stored_name\": \"zoo.tab\",\n+                    \"__version__\": 2}\n+        widget = self.create_widget(OWSave, stored_settings=settings)\n+        self.assertFalse(widget.add_type_annotations)\n+\n \n class TestFunctionalOWSave(WidgetTest):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5224.0, "instance_id": "biolab__orange3-5224", "issue_numbers": 0, "base_commit": "44673165e80ed30ae74b591bbe0a51e64807968f", "patch": "diff --git a/Orange/widgets/utils/owlearnerwidget.py b/Orange/widgets/utils/owlearnerwidget.py\nindex d306500c8..881035183 100644\n--- a/Orange/widgets/utils/owlearnerwidget.py\n+++ b/Orange/widgets/utils/owlearnerwidget.py\n@@ -136,8 +136,14 @@ class OWBaseLearner(OWWidget, metaclass=OWBaseLearnerMeta, openclass=True):\n         self.set_input_summary()\n \n         if data is not None and data.domain.class_var is None:\n-            self.Error.data_error(\"Data has no target variable.\\n\"\n-                                  \"You can set a target variable with the Select Columns widget.\")\n+            if data.domain.class_vars:\n+                self.Error.data_error(\n+                    \"Data contains multiple target variables.\\n\"\n+                    \"Select a single one with the Select Columns widget.\")\n+            else:\n+                self.Error.data_error(\n+                    \"Data has no target variable.\\n\"\n+                    \"Select one with the Select Columns widget.\")\n             self.data = None\n \n         self.update_model()\ndiff --git a/Orange/widgets/visualize/owfreeviz.py b/Orange/widgets/visualize/owfreeviz.py\nindex 6d0159029..99387114f 100644\n--- a/Orange/widgets/visualize/owfreeviz.py\n+++ b/Orange/widgets/visualize/owfreeviz.py\n@@ -139,14 +139,16 @@ class OWFreeViz(OWAnchorProjectionWidget, ConcurrentWidgetMixin):\n     graph = settings.SettingProvider(OWFreeVizGraph)\n \n     class Error(OWAnchorProjectionWidget.Error):\n-        no_class_var = widget.Msg(\"Data has no target variable\")\n+        no_class_var = widget.Msg(\"Data must have a target variable.\")\n+        multiple_class_vars = widget.Msg(\n+            \"Data must have a single target variable.\")\n         not_enough_class_vars = widget.Msg(\n-            \"Target variable is not at least binary\")\n+            \"Target variable must have at least two unique values.\")\n         features_exceeds_instances = widget.Msg(\n             \"Number of features exceeds the number of instances.\")\n         too_many_data_instances = widget.Msg(\"Data is too large.\")\n         constant_data = widget.Msg(\"All data columns are constant.\")\n-        not_enough_features = widget.Msg(\"At least two features are required\")\n+        not_enough_features = widget.Msg(\"At least two features are required.\")\n \n     class Warning(OWAnchorProjectionWidget.Warning):\n         removed_features = widget.Msg(\"Categorical features with more than\"\n@@ -257,10 +259,12 @@ class OWFreeViz(OWAnchorProjectionWidget, ConcurrentWidgetMixin):\n \n         super().check_data()\n         if self.data is not None:\n-            class_var, domain = self.data.domain.class_var, self.data.domain\n-            if class_var is None:\n+            class_vars, domain = self.data.domain.class_vars, self.data.domain\n+            if not class_vars:\n                 error(self.Error.no_class_var)\n-            elif class_var.is_discrete and len(np.unique(self.data.Y)) < 2:\n+            elif len(class_vars) > 1:\n+                error(self.Error.multiple_class_vars)\n+            elif class_vars[0].is_discrete and len(np.unique(self.data.Y)) < 2:\n                 error(self.Error.not_enough_class_vars)\n             elif len(self.data.domain.attributes) < 2:\n                 error(self.Error.not_enough_features)\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_owlearnerwidget.py b/Orange/widgets/utils/tests/test_owlearnerwidget.py\nindex 3cceadc80..da11571be 100644\n--- a/Orange/widgets/utils/tests/test_owlearnerwidget.py\n+++ b/Orange/widgets/utils/tests/test_owlearnerwidget.py\n@@ -1,10 +1,12 @@\n+from unittest.mock import Mock\n+\n import scipy.sparse as sp\n \n # pylint: disable=missing-docstring, protected-access\n from Orange.base import Learner, Model\n from Orange.classification import KNNLearner\n from Orange.data import Table, Domain\n-from Orange.modelling import TreeLearner\n+from Orange.modelling import TreeLearner, Fitter\n from Orange.preprocess import continuize\n from Orange.regression import MeanLearner, LinearRegressionLearner\n from Orange.widgets.utils.owlearnerwidget import OWBaseLearner\n@@ -149,3 +151,52 @@ class TestOWBaseLearner(WidgetTest):\n         self.send_signal(widget.Inputs.data, None)\n         self.assertEqual(info._StateInfo__input_summary.brief, \"-\")\n         self.assertEqual(info._StateInfo__input_summary.details, no_input)\n+\n+    def test_invalid_number_of_targets(self):\n+        class MockLearner(Fitter):\n+            name = 'mock'\n+            __fits__ = {'classification': Mock()}\n+            __returns__ = Mock()\n+\n+        class WidgetLR(OWBaseLearner):\n+            name = \"lr\"\n+            LEARNER = MockLearner\n+\n+        w = self.create_widget(WidgetLR)\n+        error = w.Error.data_error\n+        heart = Table(\"heart_disease\")\n+        domain = heart.domain\n+\n+        no_target = heart.transform(\n+            Domain(domain.attributes,\n+                   []))\n+        two_targets = heart.transform(\n+            Domain([domain[\"age\"]],\n+                   [domain[\"gender\"], domain[\"chest pain\"]]))\n+\n+        self.send_signal(w.Inputs.data, heart)\n+        self.assertFalse(error.is_shown())\n+        self.assertIs(w.data, heart)\n+\n+        self.send_signal(w.Inputs.data, no_target)\n+        self.assertTrue(error.is_shown())\n+        self.assertIsNone(w.data)\n+        err_no_target = str(error)\n+        self.assertIn(\"target\", err_no_target)\n+\n+        self.send_signal(w.Inputs.data, two_targets)\n+        self.assertTrue(error.is_shown())\n+        self.assertIsNone(w.data)\n+        err_two_targets = str(error)\n+        self.assertIn(\"target\", err_no_target)\n+        self.assertNotEqual(err_no_target, err_two_targets)\n+\n+        self.send_signal(w.Inputs.data, None)\n+        self.assertIsNone(w.data)\n+        self.assertFalse(error.is_shown())\n+\n+        self.send_signal(w.Inputs.data, two_targets)\n+        self.assertTrue(error.is_shown())\n+\n+        self.send_signal(w.Inputs.data, None)\n+        self.assertFalse(error.is_shown())\ndiff --git a/Orange/widgets/visualize/tests/test_owfreeviz.py b/Orange/widgets/visualize/tests/test_owfreeviz.py\nindex 408eade94..c524847f9 100644\n--- a/Orange/widgets/visualize/tests/test_owfreeviz.py\n+++ b/Orange/widgets/visualize/tests/test_owfreeviz.py\n@@ -5,7 +5,7 @@ from unittest.mock import Mock\n \n import numpy as np\n \n-from Orange.data import Table\n+from Orange.data import Table, Domain\n from Orange.projection import FreeViz\n from Orange.projection.freeviz import FreeVizModel\n from Orange.widgets.tests.base import (\n@@ -48,6 +48,41 @@ class TestOWFreeViz(WidgetTest, AnchorProjectionWidgetTestMixin,\n         self.assertFalse(self.widget.Error.no_class_var.is_shown())\n         self.assertFalse(self.widget.Error.not_enough_class_vars.is_shown())\n \n+    def test_number_of_targets(self):\n+        data = self.heart_disease\n+        domain = data.domain\n+\n+        no_target = data.transform(\n+            Domain(domain.attributes,\n+                   []))\n+        two_targets = data.transform(\n+            Domain([domain[\"age\"]],\n+                   [domain[\"gender\"], domain[\"chest pain\"]]))\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.assertFalse(self.widget.Error.no_class_var.is_shown())\n+        self.assertFalse(self.widget.Error.multiple_class_vars.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.data, no_target)\n+        self.assertTrue(self.widget.Error.no_class_var.is_shown())\n+        self.assertFalse(self.widget.Error.multiple_class_vars.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.data, two_targets)\n+        self.assertFalse(self.widget.Error.no_class_var.is_shown())\n+        self.assertTrue(self.widget.Error.multiple_class_vars.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.assertFalse(self.widget.Error.no_class_var.is_shown())\n+        self.assertFalse(self.widget.Error.multiple_class_vars.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.data, two_targets)\n+        self.assertFalse(self.widget.Error.no_class_var.is_shown())\n+        self.assertTrue(self.widget.Error.multiple_class_vars.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.data, None)\n+        self.assertFalse(self.widget.Error.no_class_var.is_shown())\n+        self.assertFalse(self.widget.Error.multiple_class_vars.is_shown())\n+\n     def test_optimization(self):\n         self.send_signal(self.widget.Inputs.data, self.heart_disease)\n         self.widget.run_button.click()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5859.0, "instance_id": "biolab__orange3-5859", "issue_numbers": 0, "base_commit": "5c5c3be3dee4a15dbb6387495f5a14c3498c3a97", "patch": "diff --git a/Orange/widgets/evaluate/owcalibrationplot.py b/Orange/widgets/evaluate/owcalibrationplot.py\nindex 72c2822d8..853c7ae3c 100644\n--- a/Orange/widgets/evaluate/owcalibrationplot.py\n+++ b/Orange/widgets/evaluate/owcalibrationplot.py\n@@ -487,7 +487,7 @@ class OWCalibrationPlot(widget.OWWidget):\n         if results is not None:\n             problems = [\n                 msg for condition, msg in (\n-                    (len(results.folds) > 1,\n+                    (results.folds is not None and len(results.folds) > 1,\n                      \"each training data sample produces a different model\"),\n                     (results.models is None,\n                      \"test results do not contain stored models - try testing \"\ndiff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex 7eb4c47a3..f2d435b18 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -687,7 +687,8 @@ class OWPredictions(OWWidget):\n         nanmask = numpy.isnan(self.data.get_column_view(self.class_var)[0])\n         data = self.data[~nanmask]\n         results = Results(data, store_data=True)\n-        results.folds = None\n+        results.folds = [...]\n+        results.models = numpy.array([[p.predictor for p in self.predictors]])\n         results.row_indices = numpy.arange(len(data))\n         results.actual = data.Y.ravel()\n         results.predicted = numpy.vstack(\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owcalibrationplot.py b/Orange/widgets/evaluate/tests/test_owcalibrationplot.py\nindex 87f1fdc9e..9819e455b 100644\n--- a/Orange/widgets/evaluate/tests/test_owcalibrationplot.py\n+++ b/Orange/widgets/evaluate/tests/test_owcalibrationplot.py\n@@ -1,5 +1,6 @@\n import copy\n import warnings\n+import unittest\n from unittest.mock import Mock, patch\n \n import numpy as np\n@@ -637,3 +638,19 @@ class TestOWCalibrationPlot(WidgetTest, EvaluateTest):\n         self.assertTrue(widget.Warning.omitted_nan_prob_points.is_shown())\n         self._set_list_selection(widget.controls.selected_classifiers, [0, 2])\n         self.assertFalse(widget.Warning.omitted_folds.is_shown())\n+\n+    @patch(\"Orange.widgets.evaluate.owcalibrationplot.ThresholdClassifier\")\n+    @patch(\"Orange.widgets.evaluate.owcalibrationplot.CalibratedLearner\")\n+    def test_no_folds(self, *_):\n+        \"\"\"Don't crash on malformed Results with folds=None\"\"\"\n+        widget = self.widget\n+\n+        self.results.folds = None\n+        self.send_signal(widget.Inputs.evaluation_results, self.results)\n+        widget.selected_classifiers = [0]\n+        widget.commit.now()\n+        self.assertIsNotNone(self.get_output(widget.Outputs.calibrated_model))\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\ndiff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex 9273c6171..302e7f5b9 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -10,6 +10,7 @@ from AnyQt.QtCore import QItemSelectionModel, QItemSelection, Qt\n \n from Orange.base import Model\n from Orange.classification import LogisticRegressionLearner, NaiveBayesLearner\n+from Orange.classification.majority import ConstantModel\n from Orange.data.io import TabReader\n from Orange.evaluation.scoring import TargetScore\n from Orange.preprocess import Remove\n@@ -507,6 +508,9 @@ class TestOWPredictions(WidgetTest):\n         def check_evres(expected):\n             out = self.get_output(w.Outputs.evaluation_results)\n             self.assertSequenceEqual(out.learner_names, expected)\n+            self.assertEqual(out.folds, [...])\n+            self.assertEqual(out.models.shape, (1, len(out.learner_names)))\n+            self.assertIsInstance(out.models[0, 0], ConstantModel)\n \n         check_evres([\"P1\", \"P2\", \"P3\"])\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3896.0, "instance_id": "biolab__orange3-3896", "issue_numbers": 0, "base_commit": "4e7498f5f80f143d55ef28ee48f1c289f2366276", "patch": "diff --git a/Orange/widgets/utils/annotated_data.py b/Orange/widgets/utils/annotated_data.py\nindex 93f91bd27..fea91dae7 100644\n--- a/Orange/widgets/utils/annotated_data.py\n+++ b/Orange/widgets/utils/annotated_data.py\n@@ -64,15 +64,18 @@ def create_annotated_table(data, selected_indices):\n \n def create_groups_table(data, selection,\n                         include_unselected=True,\n-                        var_name=ANNOTATED_DATA_FEATURE_NAME):\n+                        var_name=ANNOTATED_DATA_FEATURE_NAME,\n+                        values=None):\n     if data is None:\n         return None\n     max_sel = np.max(selection)\n-    values = [\"G{}\".format(i + 1) for i in range(max_sel)]\n+    if values is None:\n+        values = [\"G{}\".format(i + 1) for i in range(max_sel)]\n+        if include_unselected:\n+            values.append(\"Unselected\")\n     if include_unselected:\n         # Place Unselected instances in the \"last group\", so that the group\n         # colors and scatter diagram marker colors will match\n-        values.append(\"Unselected\")\n         mask = (selection != 0)\n         selection = selection.copy()\n         selection[mask] = selection[mask] - 1\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_annotated_data.py b/Orange/widgets/utils/tests/test_annotated_data.py\nindex 160a6a043..7f893c1d7 100644\n--- a/Orange/widgets/utils/tests/test_annotated_data.py\n+++ b/Orange/widgets/utils/tests/test_annotated_data.py\n@@ -109,7 +109,18 @@ class TestAnnotatedData(unittest.TestCase):\n         selection[group_indices[:10]] = 1\n         selection[group_indices[10:]] = 2\n         table = create_groups_table(self.zoo, selection)\n+        selvar = table.domain[\"Selected\"]\n         self.assertEqual(\n-            len(SameValue(table.domain[\"Selected\"], \"Unselected\")(table)),\n+            len(SameValue(selvar, \"Unselected\")(table)),\n             len(self.zoo) - len(group_indices)\n         )\n+        self.assertEqual(selvar.values, [\"G1\", \"G2\", \"Unselected\"])\n+\n+    def test_create_groups_table_set_values(self):\n+        group_indices = random.sample(range(0, len(self.zoo)), 20)\n+        selection = np.zeros(len(self.zoo), dtype=np.uint8)\n+        selection[group_indices[:10]] = 1\n+        selection[group_indices[10:]] = 2\n+        values = (\"this\", \"that\", \"rest\")\n+        table = create_groups_table(self.zoo, selection, values=values)\n+        self.assertEqual(tuple(table.domain[\"Selected\"].values), values)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3618.0, "instance_id": "biolab__orange3-3618", "issue_numbers": 0, "base_commit": "64461f916153ea519481af2090dada530e582ddc", "patch": "diff --git a/Orange/clustering/louvain.py b/Orange/clustering/louvain.py\nindex bb3011132..a4072341b 100644\n--- a/Orange/clustering/louvain.py\n+++ b/Orange/clustering/louvain.py\n@@ -41,8 +41,8 @@ def table_to_knn_graph(data, k_neighbors, metric, progress_callback=None):\n \n     \"\"\"\n     # We do k + 1 because each point is closest to itself, which is not useful\n-    knn = NearestNeighbors(n_neighbors=k_neighbors, metric=metric).fit(data.X)\n-    nearest_neighbors = knn.kneighbors(data.X, return_distance=False)\n+    knn = NearestNeighbors(n_neighbors=k_neighbors, metric=metric).fit(data)\n+    nearest_neighbors = knn.kneighbors(data, return_distance=False)\n     # Convert to list of sets so jaccard can be computed efficiently\n     nearest_neighbors = list(map(set, nearest_neighbors))\n     num_nodes = len(nearest_neighbors)\n@@ -148,3 +148,10 @@ class Louvain:\n     def fit_predict(self, X, y=None):\n         self.fit(X, y)\n         return self.labels\n+\n+\n+if __name__ == \"__main__\":\n+    # clustering run on iris data - orange table\n+    data = Table(\"iris\")\n+    louvain = Louvain(2)\n+    louvain.fit(data)\n.", "test_patch": "diff --git a/Orange/tests/test_louvain.py b/Orange/tests/test_louvain.py\nnew file mode 100644\nindex 000000000..2a0128894\n--- /dev/null\n+++ b/Orange/tests/test_louvain.py\n@@ -0,0 +1,26 @@\n+# Test methods with long descriptive names can omit docstrings\n+# pylint: disable=missing-docstring\n+\n+import unittest\n+import numpy as np\n+\n+from Orange.data import Table\n+from Orange.clustering.louvain import Louvain\n+\n+\n+class TestSVMLearner(unittest.TestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        cls.data = Table('iris')\n+        cls.louvain = Louvain()\n+\n+    def test_orange_table(self):\n+        self.assertIsNone(self.louvain.fit(self.data))\n+        clusters = self.louvain.fit_predict(self.data)\n+        self.assertIn(type(clusters), [list, np.ndarray])\n+\n+    def test_np_array(self):\n+        data_np = self.data.X\n+        self.assertIsNone(self.louvain.fit(data_np))\n+        clusters = self.louvain.fit_predict(data_np)\n+        self.assertIn(type(clusters), [list, np.ndarray])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3329.0, "instance_id": "biolab__orange3-3329", "issue_numbers": 0, "base_commit": "69f863c60917275033c1dc494b3748142539b0b1", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex 4afa17300..72a948070 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -434,9 +434,10 @@ def nanmean(x, axis=None):\n def nanvar(x, axis=None):\n     \"\"\" Equivalent of np.nanvar that supports sparse or dense matrices. \"\"\"\n     def nanvar_sparse(x):\n-        n_values = np.prod(x.shape) - np.sum(np.isnan(x.data))\n-        mean = np.nansum(x.data) / n_values\n-        return np.nansum((x.data - mean) ** 2) / n_values\n+        n_vals = np.prod(x.shape) - np.sum(np.isnan(x.data))\n+        n_zeros = np.prod(x.shape) - len(x.data)\n+        mean = np.nansum(x.data) / n_vals\n+        return (np.nansum((x.data - mean) ** 2) + mean ** 2 * n_zeros) / n_vals\n \n     return _apply_func(x, np.nanvar, nanvar_sparse, axis=axis)\n \n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex f81c097ee..99570f0a1 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -7,7 +7,7 @@ from scipy.sparse import csr_matrix, issparse, lil_matrix, csc_matrix\n \n from Orange.statistics.util import bincount, countnans, contingency, digitize, \\\n     mean, nanmax, nanmean, nanmedian, nanmin, nansum, nanunique, stats, std, \\\n-    unique, var, nanstd\n+    unique, var, nanstd, nanvar\n \n \n def dense_sparse(test_case):\n@@ -192,6 +192,14 @@ class TestUtil(unittest.TestCase):\n                     np.var(data, axis=axis)\n                 )\n \n+    @dense_sparse\n+    def test_nanvar(self, array):\n+        for X in self.data:\n+            X_sparse = array(X)\n+            np.testing.assert_array_equal(\n+                nanvar(X_sparse),\n+                np.nanvar(X))\n+\n     def test_std(self):\n         for data in self.data:\n             for axis in chain((None,), range(len(data.shape))):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4866.0, "instance_id": "biolab__orange3-4866", "issue_numbers": 0, "base_commit": "03a1609126ddc8371bea5e9b0c2a97b5a7c138d2", "patch": "diff --git a/Orange/data/util.py b/Orange/data/util.py\nindex 4976da8f0..f1b58874e 100644\n--- a/Orange/data/util.py\n+++ b/Orange/data/util.py\n@@ -10,7 +10,7 @@ import numpy as np\n import bottleneck as bn\n from scipy import sparse as sp\n \n-RE_FIND_INDEX = r\"(^{} \\()(\\d{{1,}})(\\)$)\"\n+RE_FIND_INDEX = r\"(^{})( \\((\\d{{1,}})\\))?$\"\n \n \n def one_hot(\n@@ -167,11 +167,11 @@ def get_indices(names, name):\n     :param name: str\n     :return: list of indices\n     \"\"\"\n-    return [int(a.group(2)) for x in filter(None, names)\n+    return [int(a.group(3) or 0) for x in filter(None, names)\n             for a in re.finditer(RE_FIND_INDEX.format(re.escape(name)), x)]\n \n \n-def get_unique_names(names, proposed):\n+def get_unique_names(names, proposed, equal_numbers=True):\n     \"\"\"\n     Returns unique names for variables\n \n@@ -189,13 +189,15 @@ def get_unique_names(names, proposed):\n     list.\n \n     The method is used in widgets like MDS, which adds two variables (`x` and\n-    `y`). It is desired that they have the same index. If `x`, `x (1)` and\n-    `x (2)` and `y` (but no other `y`'s already exist in the domain, MDS\n-    should append `x (3)` and `y (3)`, not `x (3)` and y (1)`.\n+    `y`). It is desired that they have the same index. In case when\n+    equal_numbers=True, if `x`, `x (1)` and `x (2)` and `y` (but no other\n+    `y`'s already exist in the domain, MDS should append `x (3)` and `y (3)`,\n+    not `x (3)` and y (1)`.\n \n     Args:\n         names (Domain or list of str): used names\n         proposed (str or list of str): proposed name\n+        equal_numbers (bool): Add same number to all proposed names\n \n     Return:\n         str or list of str\n@@ -206,13 +208,16 @@ def get_unique_names(names, proposed):\n         names = [var.name for var in chain(names.variables, names.metas)]\n     if isinstance(proposed, str):\n         return get_unique_names(names, [proposed])[0]\n-    indicess = [indices\n-                for indices in (get_indices(names, name) for name in proposed)\n-                if indices]\n-    if not (set(proposed) & set(names) or indicess):\n+    indices = {name: get_indices(names, name) for name in proposed}\n+    indices = {name: max(ind) + 1 for name, ind in indices.items() if ind}\n+    if not (set(proposed) & set(names) or indices):\n         return proposed\n-    max_index = max(map(max, indicess), default=0) + 1\n-    return [f\"{name} ({max_index})\" for name in proposed]\n+    if equal_numbers:\n+        max_index = max(indices.values())\n+        return [f\"{name} ({max_index})\" for name in proposed]\n+    else:\n+        return [f\"{name} ({indices[name]})\" if name in indices else name\n+                for name in proposed]\n \n \n def get_unique_names_duplicates(proposed: list, return_duplicated=False) -> list:\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_util.py b/Orange/data/tests/test_util.py\nindex 48977ada2..4d9911e47 100644\n--- a/Orange/data/tests/test_util.py\n+++ b/Orange/data/tests/test_util.py\n@@ -48,6 +48,78 @@ class TestGetUniqueNames(unittest.TestCase):\n         self.assertEqual(get_unique_names(domain, \"foo\"), \"foo (1)\")\n         self.assertEqual(get_unique_names(domain, \"baz\"), \"baz (4)\")\n \n+    def test_get_unique_names_not_equal(self):\n+        names = [\"foo\", \"bar\", \"baz\", \"baz (3)\"]\n+        self.assertEqual(\n+            get_unique_names(names, [\"qux\"], equal_numbers=False), [\"qux\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\"], equal_numbers=False), [\"foo (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"baz\"], equal_numbers=False), [\"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"baz (3)\"], equal_numbers=False),\n+            [\"baz (3) (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"qux\", \"quux\"], equal_numbers=False),\n+            [\"qux\", \"quux\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"bar\", \"baz\"], equal_numbers=False),\n+            [\"bar (1)\", \"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"qux\", \"baz\"], equal_numbers=False),\n+            [\"qux\", \"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"qux\", \"bar\"], equal_numbers=False),\n+            [\"qux\", \"bar (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\", \"bar\", \"baz\"], equal_numbers=False),\n+            [\"foo (1)\", \"bar (1)\", \"baz (4)\"]\n+        )\n+\n+        a, b, c, d = map(ContinuousVariable, [\"foo\", \"bar\", \"baz\", \"baz (3)\"])\n+        domain = Domain([a, b], c, [d])\n+        self.assertEqual(\n+            get_unique_names(names, [\"qux\"], equal_numbers=False), [\"qux\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\"], equal_numbers=False), [\"foo (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"baz\"], equal_numbers=False), [\"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"baz (3)\"], equal_numbers=False),\n+            [\"baz (3) (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(domain, [\"qux\", \"quux\"], equal_numbers=False),\n+            [\"qux\", \"quux\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(domain, [\"bar\", \"baz\"], equal_numbers=False),\n+            [\"bar (1)\", \"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(domain, [\"qux\", \"baz\"], equal_numbers=False),\n+            [\"qux\", \"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(domain, [\"qux\", \"bar\"], equal_numbers=False),\n+            [\"qux\", \"bar (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(domain, [\"foo\", \"bar\", \"baz\"], equal_numbers=False),\n+            [\"foo (1)\", \"bar (1)\", \"baz (4)\"]\n+        )\n+\n     def test_get_unique_names_from_duplicates(self):\n         self.assertEqual(\n             get_unique_names_duplicates([\"foo\", \"bar\", \"baz\"]),\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4259.0, "instance_id": "biolab__orange3-4259", "issue_numbers": 0, "base_commit": "6c9039a614c477cfa9f2de48b75c2876a8904f3b", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex c8aaa9c85..a15b38656 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -78,7 +78,7 @@ def table_from_frame(df, *, force_nominal=False):\n                             np.column_stack(M) if M else None)\n \n \n-def table_to_frame(tab):\n+def table_to_frame(tab, include_metas=False):\n     \"\"\"\n     Convert Orange.data.Table to pandas.DataFrame\n \n@@ -86,6 +86,9 @@ def table_to_frame(tab):\n     ----------\n     tab : Table\n \n+    include_metas : bool, (default=False)\n+        Include table metas into dataframe.\n+\n     Returns\n     -------\n     pandas.DataFrame\n@@ -122,6 +125,9 @@ def table_to_frame(tab):\n     if domain.metas:\n         metas = _columns_to_series(domain.metas, tab.metas)\n     all_series = dict(x + y + metas)\n-    original_column_order = [var.name for var in tab.domain.variables]\n+    all_vars = tab.domain.variables\n+    if include_metas:\n+        all_vars += tab.domain.metas\n+    original_column_order = [var.name for var in all_vars]\n     unsorted_columns_df = pd.DataFrame(all_series)\n     return unsorted_columns_df[original_column_order]\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 391b3af56..b0e4de50f 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -1,3 +1,4 @@\n+# pylint: disable=import-outside-toplevel\n import unittest\n import numpy as np\n from Orange.data import ContinuousVariable, DiscreteVariable, TimeVariable, Table\n@@ -7,6 +8,7 @@ try:\n except ImportError:\n     pd = None\n \n+\n @unittest.skipIf(pd is None, \"Missing package 'pandas'\")\n class TestPandasCompat(unittest.TestCase):\n     def test_table_from_frame(self):\n@@ -73,6 +75,20 @@ class TestPandasCompat(unittest.TestCase):\n         self.assertEqual(list(df['sepal length'])[0:4], [5.1, 4.9, 4.7, 4.6])\n         self.assertEqual(list(df['iris'])[0:2], ['Iris-setosa', 'Iris-setosa'])\n \n+    def test_table_to_frame_metas(self):\n+        from Orange.data.pandas_compat import table_to_frame\n+\n+        table = Table(\"zoo\")\n+        domain = table.domain\n+\n+        df = table_to_frame(table)\n+        cols = pd.Index([var.name for var in domain.variables])\n+        pd.testing.assert_index_equal(df.columns, cols)\n+\n+        df = table_to_frame(table, include_metas=True)\n+        cols = pd.Index([var.name for var in domain.variables + domain.metas])\n+        pd.testing.assert_index_equal(df.columns, cols)\n+\n     @unittest.skip(\"Convert all Orange demo dataset. It takes about 5s which is way to slow\")\n     def test_table_to_frame_on_all_orange_dataset(self):\n         from os import listdir\n@@ -96,3 +112,7 @@ class TestPandasCompat(unittest.TestCase):\n             self.assertEqual(type(df), pd.DataFrame, assert_message)\n             self.assertEqual(len(df), len(table), assert_message)\n             self.assertEqual(len(df.columns), len(table.domain), assert_message)\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5474.0, "instance_id": "biolab__orange3-5474", "issue_numbers": 0, "base_commit": "3f219d51f09f360c116f8b86487c344b8210d9fd", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex b37913164..e05bf9d8f 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -396,7 +396,9 @@ def table_to_frame(tab, include_metas=False):\n         elif col.is_continuous:\n             dt = float\n             # np.nan are not compatible with int column\n-            if col.number_of_decimals == 0 and not np.any(np.isnan(vals)):\n+            # using pd.isnull since np.isnan fails on array with dtype object\n+            # which can happen when metas contain column with strings\n+            if col.number_of_decimals == 0 and not np.any(pd.isnull(vals)):\n                 dt = int\n             result = (col.name, pd.Series(vals).astype(dt))\n         elif col.is_string:\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 5a854c444..2bf394ae0 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -90,6 +90,18 @@ class TestPandasCompat(unittest.TestCase):\n         self.assertEqual(list(df['sepal length'])[0:4], [5.1, 4.9, 4.7, 4.6])\n         self.assertEqual(list(df['iris'])[0:2], ['Iris-setosa', 'Iris-setosa'])\n \n+    def test_table_to_frame_object_dtype(self):\n+        from Orange.data.pandas_compat import table_to_frame\n+\n+        domain = Domain([], metas=[ContinuousVariable(\"a\", number_of_decimals=0)])\n+        table = Table.from_numpy(\n+            domain, np.empty((10, 0)), metas=np.ones((10, 1), dtype=object)\n+        )\n+\n+        df = table_to_frame(table, include_metas=True)\n+        self.assertEqual([\"a\"], df.columns)\n+        np.testing.assert_array_equal(df[\"a\"].values, np.ones((10,)))\n+\n     def test_table_to_frame_nans(self):\n         from Orange.data.pandas_compat import table_to_frame\n         domain = Domain(\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4631.0, "instance_id": "biolab__orange3-4631", "issue_numbers": 0, "base_commit": "f23c906a97b82d699242679466adbcab1f138884", "patch": "diff --git a/Orange/widgets/utils/itemmodels.py b/Orange/widgets/utils/itemmodels.py\nindex 9d15f776f..3bae2370c 100644\n--- a/Orange/widgets/utils/itemmodels.py\n+++ b/Orange/widgets/utils/itemmodels.py\n@@ -107,7 +107,9 @@ class PyTableModel(AbstractSortTableModel):\n         self._editable = editable\n         self._table = None\n         self._roleData = {}\n-        self.wrap(sequence or [])\n+        if sequence is None:\n+            sequence = []\n+        self.wrap(sequence)\n \n     def rowCount(self, parent=QModelIndex()):\n         return 0 if parent.isValid() else self._rows\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_itemmodels.py b/Orange/widgets/utils/tests/test_itemmodels.py\nindex b716fe402..7e9b6b6ef 100644\n--- a/Orange/widgets/utils/tests/test_itemmodels.py\n+++ b/Orange/widgets/utils/tests/test_itemmodels.py\n@@ -42,6 +42,14 @@ class TestPyTableModel(unittest.TestCase):\n         self.model = PyTableModel()\n         self.assertEqual(self.model.rowCount(), 0)\n \n+    def test_init_wrap_empty(self):\n+        # pylint: disable=protected-access\n+        t = []\n+        model = PyTableModel(t)\n+        self.assertIs(model._table, t)\n+        t.append([1, 2, 3])\n+        self.assertEqual(list(model), [[1, 2, 3]])\n+\n     def test_rowCount(self):\n         self.assertEqual(self.model.rowCount(), 2)\n         self.assertEqual(len(self.model), 2)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3618.0, "instance_id": "biolab__orange3-3618", "issue_numbers": 0, "base_commit": "fd21afa7e7f5d7e1af3d0d371c1fea39ab8df9e8", "patch": "diff --git a/Orange/clustering/louvain.py b/Orange/clustering/louvain.py\nindex bb3011132..a4072341b 100644\n--- a/Orange/clustering/louvain.py\n+++ b/Orange/clustering/louvain.py\n@@ -41,8 +41,8 @@ def table_to_knn_graph(data, k_neighbors, metric, progress_callback=None):\n \n     \"\"\"\n     # We do k + 1 because each point is closest to itself, which is not useful\n-    knn = NearestNeighbors(n_neighbors=k_neighbors, metric=metric).fit(data.X)\n-    nearest_neighbors = knn.kneighbors(data.X, return_distance=False)\n+    knn = NearestNeighbors(n_neighbors=k_neighbors, metric=metric).fit(data)\n+    nearest_neighbors = knn.kneighbors(data, return_distance=False)\n     # Convert to list of sets so jaccard can be computed efficiently\n     nearest_neighbors = list(map(set, nearest_neighbors))\n     num_nodes = len(nearest_neighbors)\n@@ -148,3 +148,10 @@ class Louvain:\n     def fit_predict(self, X, y=None):\n         self.fit(X, y)\n         return self.labels\n+\n+\n+if __name__ == \"__main__\":\n+    # clustering run on iris data - orange table\n+    data = Table(\"iris\")\n+    louvain = Louvain(2)\n+    louvain.fit(data)\n.", "test_patch": "diff --git a/Orange/tests/test_louvain.py b/Orange/tests/test_louvain.py\nnew file mode 100644\nindex 000000000..2a0128894\n--- /dev/null\n+++ b/Orange/tests/test_louvain.py\n@@ -0,0 +1,26 @@\n+# Test methods with long descriptive names can omit docstrings\n+# pylint: disable=missing-docstring\n+\n+import unittest\n+import numpy as np\n+\n+from Orange.data import Table\n+from Orange.clustering.louvain import Louvain\n+\n+\n+class TestSVMLearner(unittest.TestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        cls.data = Table('iris')\n+        cls.louvain = Louvain()\n+\n+    def test_orange_table(self):\n+        self.assertIsNone(self.louvain.fit(self.data))\n+        clusters = self.louvain.fit_predict(self.data)\n+        self.assertIn(type(clusters), [list, np.ndarray])\n+\n+    def test_np_array(self):\n+        data_np = self.data.X\n+        self.assertIsNone(self.louvain.fit(data_np))\n+        clusters = self.louvain.fit_predict(data_np)\n+        self.assertIn(type(clusters), [list, np.ndarray])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5190.0, "instance_id": "biolab__orange3-5190", "issue_numbers": 0, "base_commit": "ec30f348cd2d875c43adb7174f62d74e8994c5f5", "patch": "diff --git a/Orange/data/domain.py b/Orange/data/domain.py\nindex 35e5a0dc7..f3988a5ad 100644\n--- a/Orange/data/domain.py\n+++ b/Orange/data/domain.py\n@@ -1,3 +1,4 @@\n+import itertools\n import warnings\n \n from math import log\n@@ -245,14 +246,13 @@ class Domain:\n     def metas(self):\n         return self._metas\n \n-    @deprecated(\"len(Domain.variables)\")\n     def __len__(self):\n         \"\"\"The number of variables (features and class attributes).\n \n         The current behavior returns the length of only features and\n         class attributes. In the near future, it will include the\n         length of metas, too, and __iter__ will act accordingly.\"\"\"\n-        return len(self._variables)\n+        return len(self._variables) + len(self._metas)\n \n     def __bool__(self):\n         warnings.warn(\n@@ -308,18 +308,11 @@ class Domain:\n         \"\"\"\n         return item in self._indices or self._get_equivalent(item) is not None\n \n-    @deprecated(\"Domain.variables\")\n     def __iter__(self):\n         \"\"\"\n         Return an iterator through variables (features and class attributes).\n-\n-        The current behaviour is confusing, as `x in domain` returns True\n-        for meta variables, but iter(domain) does not yield them.\n-        This will be consolidated eventually (in 3.12?), the code that\n-        currently iterates over domain should iterate over domain.variables\n-        instead.\n         \"\"\"\n-        return iter(self._variables)\n+        return itertools.chain(self._variables, self._metas)\n \n     def __str__(self):\n         \"\"\"\n.", "test_patch": "diff --git a/Orange/tests/test_domain.py b/Orange/tests/test_domain.py\nindex db8f846de..73386a01a 100644\n--- a/Orange/tests/test_domain.py\n+++ b/Orange/tests/test_domain.py\n@@ -1,6 +1,5 @@\n # Test methods with long descriptive names can omit docstrings\n # pylint: disable=missing-docstring\n-import warnings\n from time import time\n from numbers import Real\n from itertools import starmap, chain\n@@ -15,7 +14,6 @@ from Orange.data import (\n from Orange.data.domain import filter_visible\n from Orange.preprocess import Continuize, Impute\n from Orange.tests.base import create_pickling_tests\n-from Orange.util import OrangeDeprecationWarning\n \n \n def create_domain(*ss):\n@@ -272,21 +270,14 @@ class TestDomainInit(unittest.TestCase):\n             [] in d\n \n     def test_iter(self):\n-        with warnings.catch_warnings(record=True):\n-            warnings.simplefilter(\"error\")\n-\n-            d = Domain((age, gender, income), metas=(ssn,))\n-            with self.assertRaises(OrangeDeprecationWarning):\n-                list(d)\n-\n-            warnings.simplefilter(\"ignore\")\n-            self.assertEqual([var for var in d], [age, gender, income])\n+        d = Domain((age, gender, income), metas=(ssn,))\n+        self.assertEqual(list(d), [age, gender, income, ssn])\n \n-            d = Domain((age, ), metas=(ssn,))\n-            self.assertEqual([var for var in d], [age])\n+        d = Domain((age, ), metas=(ssn,))\n+        self.assertEqual(list(d), [age, ssn])\n \n-            d = Domain((), metas=(ssn,))\n-            self.assertEqual([var for var in d], [])\n+        d = Domain((), metas=(ssn,))\n+        self.assertEqual(list(d), [ssn])\n \n     def test_str(self):\n         cases = (\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3180.0, "instance_id": "biolab__orange3-3180", "issue_numbers": 0, "base_commit": "000bcad5b1941a306d028e9c5de49bc7c7d1d9d5", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 965b361ef..c8aaa9c85 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -11,7 +11,7 @@ from Orange.data import (\n     ContinuousVariable,\n )\n \n-__all__ = ['table_from_frame']\n+__all__ = ['table_from_frame', 'table_to_frame']\n \n \n def table_from_frame(df, *, force_nominal=False):\n@@ -76,3 +76,52 @@ def table_from_frame(df, *, force_nominal=False):\n                             np.column_stack(X) if X else np.empty((df.shape[0], 0)),\n                             None,\n                             np.column_stack(M) if M else None)\n+\n+\n+def table_to_frame(tab):\n+    \"\"\"\n+    Convert Orange.data.Table to pandas.DataFrame\n+\n+    Parameters\n+    ----------\n+    tab : Table\n+\n+    Returns\n+    -------\n+    pandas.DataFrame\n+    \"\"\"\n+    def _column_to_series(col, vals):\n+        result = ()\n+        if col.is_discrete:\n+            codes = pd.Series(vals).fillna(-1).astype(int)\n+            result = (col.name, pd.Categorical.from_codes(codes=codes, categories=col.values,\n+                                                          ordered=col.ordered))\n+        elif col.is_time:\n+            result = (col.name, pd.to_datetime(vals, unit='s').to_series().reset_index()[0])\n+        elif col.is_continuous:\n+            dt = float\n+            # np.nan are not compatible with int column\n+            nan_values_in_column = [t for t in vals if np.isnan(t)]\n+            if col.number_of_decimals == 0 and len(nan_values_in_column) == 0:\n+                dt = int\n+            result = (col.name, pd.Series(vals).astype(dt))\n+        elif col.is_string:\n+            result = (col.name, pd.Series(vals))\n+        return result\n+\n+    def _columns_to_series(cols, vals):\n+        return [_column_to_series(col, vals[:, i]) for i, col in enumerate(cols)]\n+\n+    x, y, metas = [], [], []\n+    domain = tab.domain\n+    if domain.attributes:\n+        x = _columns_to_series(domain.attributes, tab.X)\n+    if domain.class_vars:\n+        y_values = tab.Y.reshape(tab.Y.shape[0], len(domain.class_vars))\n+        y = _columns_to_series(domain.class_vars, y_values)\n+    if domain.metas:\n+        metas = _columns_to_series(domain.metas, tab.metas)\n+    all_series = dict(x + y + metas)\n+    original_column_order = [var.name for var in tab.domain.variables]\n+    unsorted_columns_df = pd.DataFrame(all_series)\n+    return unsorted_columns_df[original_column_order]\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 184b04537..391b3af56 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -1,6 +1,6 @@\n import unittest\n import numpy as np\n-from Orange.data import ContinuousVariable, DiscreteVariable, TimeVariable\n+from Orange.data import ContinuousVariable, DiscreteVariable, TimeVariable, Table\n \n try:\n     import pandas as pd\n@@ -60,3 +60,39 @@ class TestPandasCompat(unittest.TestCase):\n         types = [type(var) for var in table.domain.attributes]\n         self.assertEqual(names, ['index', '1', '2'])\n         self.assertEqual(types, [DiscreteVariable, ContinuousVariable, TimeVariable])\n+\n+    def test_table_to_frame(self):\n+        from Orange.data.pandas_compat import table_to_frame\n+        table = Table(\"iris\")\n+        df = table_to_frame(table)\n+        table_column_names = [var.name for var in table.domain.variables]\n+        frame_column_names = df.columns\n+\n+        self.assertEqual(sorted(table_column_names), sorted(frame_column_names))\n+        self.assertEqual(type(df['iris'].dtype), pd.api.types.CategoricalDtype)\n+        self.assertEqual(list(df['sepal length'])[0:4], [5.1, 4.9, 4.7, 4.6])\n+        self.assertEqual(list(df['iris'])[0:2], ['Iris-setosa', 'Iris-setosa'])\n+\n+    @unittest.skip(\"Convert all Orange demo dataset. It takes about 5s which is way to slow\")\n+    def test_table_to_frame_on_all_orange_dataset(self):\n+        from os import listdir\n+        from Orange.data.pandas_compat import table_to_frame\n+        import pandas as pd\n+\n+        dataset_directory = \"Orange/datasets/\"\n+\n+        def _filename_to_dataset_name(f):\n+            return f.split('.')[0]\n+\n+        def _get_orange_demo_datasets():\n+            x = [_filename_to_dataset_name(f) for f in listdir(dataset_directory) if '.tab' in f]\n+            return x\n+\n+        for name in _get_orange_demo_datasets():\n+            table = Table(name)\n+            df = table_to_frame(table)\n+            assert_message = \"Failed to process Table('{}')\".format(name)\n+\n+            self.assertEqual(type(df), pd.DataFrame, assert_message)\n+            self.assertEqual(len(df), len(table), assert_message)\n+            self.assertEqual(len(df.columns), len(table.domain), assert_message)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5714.0, "instance_id": "biolab__orange3-5714", "issue_numbers": 0, "base_commit": "f715500eaceffb8f879ecb082d11b6d26a60bf5a", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex cbe43a3f9..95fba39b4 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -582,7 +582,7 @@ class Table(Sequence, Storage):\n         def can_unlock(x):\n             if sp.issparse(x):\n                 return can_unlock(x.data)\n-            return x.flags.writeable or x.flags.owndata\n+            return x.flags.writeable or x.flags.owndata or x.size == 0\n \n         for part, flag, name in self._lock_parts_val():\n             if not flag & self._unlocked \\\n.", "test_patch": "diff --git a/Orange/data/tests/test_table.py b/Orange/data/tests/test_table.py\nindex 86a837ae3..a7c85a989 100644\n--- a/Orange/data/tests/test_table.py\n+++ b/Orange/data/tests/test_table.py\n@@ -348,6 +348,17 @@ class TestTableLocking(unittest.TestCase):\n         finally:\n             Table.LOCKING = default\n \n+    def test_unpickled_empty_weights(self):\n+        # ensure that unpickled empty arrays could be unlocked\n+        self.assertEqual(0, self.table.W.size)\n+        # flags.owndata asserts touch numpy internals\n+        # feel free to remove when they do not pass\n+        self.assertTrue(self.table.W.flags.owndata)\n+        unpickled = pickle.loads(pickle.dumps(self.table))\n+        self.assertFalse(unpickled.W.flags.owndata)\n+        with unpickled.unlocked():\n+            pass\n+\n     def test_unpickling_resets_locks(self):\n         default = Table.LOCKING\n         try:\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5295.0, "instance_id": "biolab__orange3-5295", "issue_numbers": 0, "base_commit": "3617a5b8f3077a83dd6af645af53296792b39c99", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 785c87c86..3e13b7bca 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -53,7 +53,8 @@ def is_discrete_values(values):\n     # the type is numeric\n     try:\n         isinstance(next(iter(values)), Number) or \\\n-        [float(v) for _, v in zip(range(min(3, len(values))), values)]\n+        [v not in MISSING_VALUES and float(v)\n+         for _, v in zip(range(min(3, len(values))), values)]\n     except ValueError:\n         is_numeric = False\n         max_values = int(round(len(values)**.7))\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_io_util.py b/Orange/data/tests/test_io_util.py\nnew file mode 100644\nindex 000000000..683132da8\n--- /dev/null\n+++ b/Orange/data/tests/test_io_util.py\n@@ -0,0 +1,14 @@\n+import unittest\n+\n+from Orange.data import ContinuousVariable, guess_data_type\n+\n+\n+class TestIoUtil(unittest.TestCase):\n+    def test_guess_continuous_w_nans(self):\n+        self.assertIs(\n+            guess_data_type([\"9\", \"\", \"98\", \"?\", \"98\", \"98\", \"98\"])[2],\n+            ContinuousVariable)\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4609.0, "instance_id": "biolab__orange3-4609", "issue_numbers": 0, "base_commit": "f7788e5d740beebf518b2d7864efea5a5c59978d", "patch": "diff --git a/Orange/widgets/utils/colorpalettes.py b/Orange/widgets/utils/colorpalettes.py\nindex 0a0efc470..a71297045 100644\n--- a/Orange/widgets/utils/colorpalettes.py\n+++ b/Orange/widgets/utils/colorpalettes.py\n@@ -394,7 +394,7 @@ class BinnedContinuousPalette(IndexedPalette):\n \n     def _bin_indices(self, x):\n         nans = np.isnan(x)\n-        binx = np.digitize(x, self.bins[1:-1], right=True)\n+        binx = np.digitize(x, self.bins[1:-1])\n         binx.clip(0, len(self.bins) - 1)\n         binx[nans] = -1\n         return binx, nans\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_colorpalettes.py b/Orange/widgets/utils/tests/test_colorpalettes.py\nindex fe92a32d8..5a6321a44 100644\n--- a/Orange/widgets/utils/tests/test_colorpalettes.py\n+++ b/Orange/widgets/utils/tests/test_colorpalettes.py\n@@ -9,6 +9,7 @@ from AnyQt.QtGui import QImage, QColor, QIcon\n from orangewidget.tests.base import GuiTest\n from Orange.util import color_to_hex\n from Orange.data import DiscreteVariable, ContinuousVariable, Variable\n+from Orange.preprocess.discretize import decimal_binnings\n # pylint: disable=wildcard-import,unused-wildcard-import\n from Orange.widgets.utils.colorpalettes import *\n \n@@ -464,6 +465,14 @@ class BinnedPaletteTest(unittest.TestCase):\n         copy.bins[0] += 1\n         self.assertNotEqual(self.bins[0], copy.bins[0])\n \n+    def test_decimal_binnings(self):\n+        \"\"\"test for consistency with binning from discretize\"\"\"\n+        data = np.array([1, 2])\n+        bins = decimal_binnings(data)[0].thresholds\n+        binned = BinnedContinuousPalette.from_palette(self.palette, bins)\n+        colors = binned.values_to_colors(data)\n+        assert not np.array_equal(colors[0], colors[1])\n+\n \n class UtilsTest(GuiTest):\n     def test_coloricon(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5652.0, "instance_id": "biolab__orange3-5652", "issue_numbers": 0, "base_commit": "3634e370289f8ffe682626168f51c2639e50c31e", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 95e9e92cc..2d6aac4b5 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -157,6 +157,16 @@ def _is_datetime(s):\n         return True\n     try:\n         if is_object_dtype(s):\n+            # pd.to_datetime would sucessfuly parse column of numbers to datetime\n+            # but for column of object dtype with numbers we want to be either\n+            # discret or string - following code try to parse column to numeric\n+            # if connversion to numeric is sucessful return False\n+            try:\n+                pd.to_numeric(s)\n+                return False\n+            except (ValueError, TypeError):\n+                pass\n+\n             # utc=True - to allow different timezones in a series object\n             pd.to_datetime(s, infer_datetime_format=True, utc=True)\n             return True\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex f8649f113..2d30ed363 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -383,6 +383,25 @@ class TestPandasCompat(unittest.TestCase):\n             ],\n         )\n \n+    def test_table_from_frame_no_datetim(self):\n+        \"\"\"\n+        In case when dtype of column is object and column contains numbers only,\n+        column could be recognized as a TimeVarialbe since pd.to_datetime can parse\n+        numbers as datetime. That column must be result either in StringVariable\n+        or DiscreteVariable since it's dtype is object.\n+        \"\"\"\n+        from Orange.data.pandas_compat import table_from_frame\n+\n+        df = pd.DataFrame([[1], [2], [3]], dtype=\"object\")\n+        table = table_from_frame(df)\n+        # check if exactly ContinuousVariable and not subtype TimeVariable\n+        self.assertIsInstance(table.domain.metas[0], StringVariable)\n+\n+        df = pd.DataFrame([[1], [2], [2]], dtype=\"object\")\n+        table = table_from_frame(df)\n+        # check if exactly ContinuousVariable and not subtype TimeVariable\n+        self.assertIsInstance(table.domain.attributes[0], DiscreteVariable)\n+\n     def test_time_variable_compatible(self):\n         from Orange.data.pandas_compat import table_from_frame\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6204.0, "instance_id": "biolab__orange3-6204", "issue_numbers": 0, "base_commit": "735e4a3adc1e725a0dfe23195725ab7eabea5870", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex 36a910029..b2042f362 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -342,20 +342,14 @@ def stats(X, weights=None, compute_variance=False):\n     is_numeric = np.issubdtype(X.dtype, np.number)\n     is_sparse = sp.issparse(X)\n     weighted = weights is not None and X.dtype != object\n-\n-    def weighted_mean():\n-        if is_sparse:\n-            w_X = X.multiply(sp.csr_matrix(np.c_[weights] / sum(weights)))\n-            return np.asarray(w_X.sum(axis=0)).ravel()\n-        else:\n-            return bn.nansum(X * np.c_[weights] / sum(weights), axis=0)\n+    weights = weights if weighted else None\n \n     if X.size and is_numeric and not is_sparse:\n         nans = np.isnan(X).sum(axis=0)\n         return np.column_stack((\n             np.nanmin(X, axis=0),\n             np.nanmax(X, axis=0),\n-            nanmean(X, axis=0) if not weighted else weighted_mean(),\n+            nanmean(X, axis=0, weights=weights),\n             nanvar(X, axis=0) if compute_variance else \\\n                 np.zeros(X.shape[1] if X.ndim == 2 else 1),\n             nans,\n@@ -369,7 +363,7 @@ def stats(X, weights=None, compute_variance=False):\n         return np.column_stack((\n             nanmin(X, axis=0),\n             nanmax(X, axis=0),\n-            nanmean(X, axis=0) if not weighted else weighted_mean(),\n+            nanmean(X, axis=0, weights=weights),\n             np.zeros(X.shape[1]),      # variance not supported\n             X.shape[0] - non_zero,\n             non_zero))\n@@ -453,15 +447,31 @@ def nansum(x, axis=None):\n     return _apply_func(x, np.nansum, nansum_sparse, axis=axis)\n \n \n-def nanmean(x, axis=None):\n+def nanmean(x, axis=None, weights=None):\n     \"\"\" Equivalent of np.nanmean that supports sparse or dense matrices. \"\"\"\n+    if axis is None and weights is not None:\n+        raise NotImplementedError(\"weights are only supported if axis is defined\")\n+\n     if not sp.issparse(x):\n-        means = bn.nanmean(x, axis=axis)\n+        if weights is None:\n+            means = bn.nanmean(x, axis=axis)\n+        else:\n+            if axis == 0:\n+                weights = weights.reshape(-1, 1)\n+            elif axis == 1:\n+                weights = weights.reshape(1, -1)\n+            else:\n+                raise NotImplementedError\n+            nanw = ~np.isnan(x) * weights  # do not divide by non-used weights\n+            means = bn.nansum(x * weights, axis=axis) / np.sum(nanw, axis=axis)\n     elif axis is None:\n         means, _ = mean_variance_axis(x, axis=0)\n         means = np.nanmean(means)\n     else:\n-        means, _ = mean_variance_axis(x, axis=axis)\n+        # mean_variance_axis is picky regarding the input type\n+        if weights is not None:\n+            weights = weights.astype(float)\n+        means, _ = mean_variance_axis(x, axis=axis, weights=weights)\n \n     return means\n \n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex 15dca6253..f670e4dde 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -128,6 +128,17 @@ class TestUtil(unittest.TestCase):\n         X = np.arange(4).reshape(2, 2).astype(object)\n         np.testing.assert_equal(stats(X, weights), stats(X))\n \n+    def test_stats_nans_neutral_weights(self):\n+        X = np.arange(4).reshape(2, 2).astype(float)\n+        X[0, 0] = np.nan\n+        np.testing.assert_equal(stats(X, weights=np.array([1, 1])), stats(X))\n+\n+    def test_stats_nans_neutral_weights_sparse(self):\n+        X = np.arange(4).reshape(2, 2).astype(float)\n+        X = csr_matrix(X)\n+        X[0, 0] = np.nan\n+        np.testing.assert_equal(stats(X, weights=np.array([1, 1])), stats(X))\n+\n     def test_stats_weights_sparse(self):\n         X = np.arange(4).reshape(2, 2).astype(float)\n         X = csr_matrix(X)\n@@ -342,6 +353,16 @@ class TestNanmean(unittest.TestCase):\n         self.random_state = check_random_state(42)\n         self.x = self.random_state.uniform(size=(10, 5))\n         np.fill_diagonal(self.x, np.nan)\n+        self.y = np.array([[0, 1, 5],\n+                           [3, 4, np.nan],\n+                           [2, np.nan, np.nan],\n+                           [np.nan, np.nan, np.nan]])\n+        self.r0 = [5/3, 5/2, 5/1]\n+        self.r1 = [6/3, 7/2, 2/1, np.nan]\n+        self.w0 = np.array([4, 3, 2, 1])\n+        self.w1 = np.array([1, 2, 3])\n+        self.r0w = [13/9, 16/7, 20/4]\n+        self.r1w = [17/6, 11/3, 2/1, np.nan]\n \n     @dense_sparse\n     def test_axis_none(self, array):\n@@ -361,6 +382,41 @@ class TestNanmean(unittest.TestCase):\n             np.nanmean(self.x, axis=1), nanmean(array(self.x), axis=1)\n         )\n \n+    @dense_sparse\n+    def test_weights_axis_none(self, array):\n+        with self.assertRaises(NotImplementedError):\n+            nanmean(array(self.x), weights=1)\n+\n+    @dense_sparse\n+    def test_weights_axis_0(self, array):\n+        np.testing.assert_almost_equal(\n+            self.r0, nanmean(array(self.y), axis=0)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r1, nanmean(array(self.y.T), axis=0)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r0w, nanmean(array(self.y), axis=0, weights=self.w0)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r1w, nanmean(array(self.y.T), axis=0, weights=self.w1)\n+        )\n+\n+    @dense_sparse\n+    def test_weights_axis_1(self, array):\n+        np.testing.assert_almost_equal(\n+            self.r1, nanmean(array(self.y), axis=1)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r0, nanmean(array(self.y.T), axis=1)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r1w, nanmean(array(self.y), axis=1, weights=self.w1)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r0w, nanmean(array(self.y.T), axis=1, weights=self.w0)\n+        )\n+\n \n class TestDigitize(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4535.0, "instance_id": "biolab__orange3-4535", "issue_numbers": 0, "base_commit": "7c9de553a279791535aa8ec927bef47801b819f1", "patch": "diff --git a/Orange/widgets/utils/colorpalettes.py b/Orange/widgets/utils/colorpalettes.py\nindex a2cb3c244..0a0efc470 100644\n--- a/Orange/widgets/utils/colorpalettes.py\n+++ b/Orange/widgets/utils/colorpalettes.py\n@@ -651,7 +651,8 @@ def patch_variable_colors():\n \n         nvalues = len(var.values)\n         if var._colors is None or len(var._colors) != nvalues:\n-            set_colors(var, retrieve_colors())\n+            var._colors = retrieve_colors()\n+            var._colors.flags.writeable = False\n         return var._colors\n \n     def discrete_set_colors(var, colors):\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_colorpalettes.py b/Orange/widgets/utils/tests/test_colorpalettes.py\nindex 9e763ccd1..fe92a32d8 100644\n--- a/Orange/widgets/utils/tests/test_colorpalettes.py\n+++ b/Orange/widgets/utils/tests/test_colorpalettes.py\n@@ -583,6 +583,8 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n         self.assertEqual(len(colors), 2)\n         for color, palcol in zip(colors, Dark2Colors):\n             np.testing.assert_equal(color, palcol.getRgb()[:3])\n+        # the palette has to stay specified\n+        self.assertEqual(var.attributes[\"palette\"], var.palette.name)\n \n         var = DiscreteVariable.make(\"a\", values=[f\"{i}\" for i in range(40)])\n         var.palette = Dark2Colors\n@@ -590,6 +592,8 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n         self.assertEqual(len(colors), 40)\n         for color, palcol in zip(colors, LimitedDiscretePalette(40)):\n             np.testing.assert_equal(color, palcol.getRgb()[:3])\n+        # the palette has to stay specified\n+        self.assertEqual(var.attributes[\"palette\"], var.palette.name)\n \n     def test_colors_default(self):\n         var = DiscreteVariable.make(\"a\", values=(\"F\", \"M\"))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": NaN, "instance_id": "ERROR", "issue_numbers": 0, "base_commit": NaN, "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 630019239..fc9508445 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -1032,6 +1032,7 @@ class TimeVariable(ContinuousVariable):\n         if datestr in MISSING_VALUES:\n             return Unknown\n         datestr = datestr.strip().rstrip('Z')\n+        datestr = self._tzre_sub(datestr)\n \n         if not self._matches_iso_format(datestr):\n             try:\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex 0bf5ff157..ff487ca24 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -630,6 +630,10 @@ class TestTimeVariable(VariableTest):\n         ts2 = var.parse(datestr)\n         self.assertEqual(var.repr_val(ts2), datestr)\n         self.assertEqual(var.repr_val(ts1), '2015-10-18 20:48:20')\n+        # TZ is reset to UTC.\n+        datestr, offset = '2015-10-18T22:48:20', '+02:00'\n+        ts3 = var.parse(datestr + offset)\n+        self.assertEqual(var.repr_val(ts3), '2015-10-18 20:48:20')\n \n     def test_parse_timestamp(self):\n         var = TimeVariable(\"time\")\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4867.0, "instance_id": "biolab__orange3-4867", "issue_numbers": 0, "base_commit": "9fe7128da4c0f6d2ebbe0e259257b576d8f21ec7", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 47f7668e5..f9deb6f98 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1751,6 +1751,8 @@ def _check_arrays(*arrays, dtype=None, shape_1=None):\n                              % (ninstances(array), shape_1))\n \n         if sp.issparse(array):\n+            if not (sp.isspmatrix_csr(array) or sp.isspmatrix_csc(array)):\n+                array = array.tocsr()\n             array.data = np.asarray(array.data)\n             has_inf = _check_inf(array.data)\n         else:\n.", "test_patch": "diff --git a/Orange/data/tests/test_table.py b/Orange/data/tests/test_table.py\nindex 37b40af10..4ed531453 100644\n--- a/Orange/data/tests/test_table.py\n+++ b/Orange/data/tests/test_table.py\n@@ -1,6 +1,7 @@\n import unittest\n \n import numpy as np\n+import scipy.sparse as sp\n \n from Orange.data import (\n     ContinuousVariable, DiscreteVariable, StringVariable,\n@@ -85,6 +86,28 @@ class TestTableInit(unittest.TestCase):\n             self.assertRaises(ValueError, func, dom, X, Y, metas[:4])\n             self.assertRaises(ValueError, func, dom, X, Y[:4])\n \n+    def test_from_numpy_sparse(self):\n+        domain = Domain([ContinuousVariable(c) for c in \"abc\"])\n+        x = np.arange(12).reshape(4, 3)\n+\n+        t = Table.from_numpy(domain, x, None, None)\n+        self.assertFalse(sp.issparse(t.X))\n+\n+        t = Table.from_numpy(domain, sp.csr_matrix(x))\n+        self.assertTrue(sp.isspmatrix_csr(t.X))\n+\n+        t = Table.from_numpy(domain, sp.csc_matrix(x))\n+        self.assertTrue(sp.isspmatrix_csc(t.X))\n+\n+        t = Table.from_numpy(domain, sp.coo_matrix(x))\n+        self.assertTrue(sp.isspmatrix_csr(t.X))\n+\n+        t = Table.from_numpy(domain, sp.lil_matrix(x))\n+        self.assertTrue(sp.isspmatrix_csr(t.X))\n+\n+        t = Table.from_numpy(domain, sp.bsr_matrix(x))\n+        self.assertTrue(sp.isspmatrix_csr(t.X))\n+\n \n class TestTableFilters(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4217.0, "instance_id": "biolab__orange3-4217", "issue_numbers": 0, "base_commit": "89aa26514f0a1dbbf8becc1eea1b54906727b656", "patch": "diff --git a/Orange/preprocess/normalize.py b/Orange/preprocess/normalize.py\nindex 00783ab89..d05504f22 100644\n--- a/Orange/preprocess/normalize.py\n+++ b/Orange/preprocess/normalize.py\n@@ -1,6 +1,6 @@\n import numpy as np\n \n-from Orange.data import ContinuousVariable, Domain\n+from Orange.data import Domain\n from Orange.statistics import distribution\n from Orange.util import Reprable\n from .preprocess import Normalize\n@@ -51,12 +51,7 @@ class Normalizer(Reprable):\n             compute_val = Norm(var, avg, 1 / sd)\n         else:\n             compute_val = Norm(var, 0, 1 / sd)\n-\n-        return ContinuousVariable(\n-            var.name,\n-            compute_value=compute_val,\n-            sparse=var.sparse,\n-        )\n+        return var.copy(compute_value=compute_val)\n \n     def normalize_by_span(self, dist, var):\n         dma, dmi = (dist.max(), dist.min()) if dist.shape[1] else (np.nan, np.nan)\n@@ -64,12 +59,7 @@ class Normalizer(Reprable):\n         if diff < 1e-15:\n             diff = 1\n         if self.zero_based:\n-            return ContinuousVariable(\n-                var.name,\n-                compute_value=Norm(var, dmi, 1 / diff),\n-                sparse=var.sparse)\n+            compute_val = Norm(var, dmi, 1 / diff)\n         else:\n-            return ContinuousVariable(\n-                var.name,\n-                compute_value=Norm(var, (dma + dmi) / 2, 2 / diff),\n-                sparse=var.sparse)\n+            compute_val = Norm(var, (dma + dmi) / 2, 2 / diff)\n+        return var.copy(compute_value=compute_val)\n.", "test_patch": "diff --git a/Orange/tests/test_normalize.py b/Orange/tests/test_normalize.py\nindex b372df0c6..1b93a2d23 100644\n--- a/Orange/tests/test_normalize.py\n+++ b/Orange/tests/test_normalize.py\n@@ -142,3 +142,18 @@ class TestNormalizer(unittest.TestCase):\n                     [0., '2003-07-23', 'a', 'b', -1., '?', 0., 'b', '?', 'b', 0],\n                     [0., '1967-03-12', 'a', 'b', 1., 'b', -1.225, 'c', '?', 'c', 1]]\n         self.compare_tables(data_norm, solution)\n+\n+    def test_retain_vars_attributes(self):\n+        data = Table(\"iris\")\n+        attributes = {\"foo\": \"foo\", \"baz\": 1}\n+        data.domain.attributes[0].attributes = attributes\n+        self.assertDictEqual(\n+            Normalize(norm_type=Normalize.NormalizeBySD)(\n+                data).domain.attributes[0].attributes, attributes)\n+        self.assertDictEqual(\n+            Normalize(norm_type=Normalize.NormalizeBySpan)(\n+                data).domain.attributes[0].attributes, attributes)\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3697.0, "instance_id": "biolab__orange3-3697", "issue_numbers": 0, "base_commit": "8ef3d69cbacb45f6fe5e1abf8b387a5236fb5ca1", "patch": "diff --git a/Orange/widgets/settings.py b/Orange/widgets/settings.py\nindex 1198a4f58..e8a535e7d 100644\n--- a/Orange/widgets/settings.py\n+++ b/Orange/widgets/settings.py\n@@ -937,6 +937,13 @@ class DomainContextHandler(ContextHandler):\n                 .format(name), OrangeDeprecationWarning\n             )\n \n+    @staticmethod\n+    def _warn_about_str_var_settings(setting):\n+        warnings.warn(\n+            \"Storing variables as strings in settings is deprecated.\\n\"\n+            \"Support for this will be dropped in Orange 3.26.\\n\"\n+            f\"Change f{setting.name} to store an instance of `Variable`.\")\n+\n     def encode_domain(self, domain):\n         \"\"\"\n         domain: Orange.data.domain to encode\n@@ -1013,23 +1020,26 @@ class DomainContextHandler(ContextHandler):\n     def encode_variable(var):\n         return var.name, 100 + vartype(var)\n \n-    def encode_setting(self, context, setting, value):\n+    @classmethod\n+    def encode_setting(cls, context, setting, value):\n         if isinstance(value, list):\n             if all(e is None or isinstance(e, Variable) for e in value) \\\n                     and any(e is not None for e in value):\n-                return [None if e is None else self.encode_variable(e)\n+                return [None if e is None else cls.encode_variable(e)\n                         for e in value], -3\n             else:\n                 return copy.copy(value)\n \n         if isinstance(setting, ContextSetting):\n             if isinstance(value, str):\n-                if not setting.exclude_attributes and value in context.attributes:\n-                    return value, context.attributes[value]\n-                if not setting.exclude_metas and value in context.metas:\n-                    return value, context.metas[value]\n+                variables = {\n+                    **({} if setting.exclude_attributes else context.attributes),\n+                    **({} if setting.exclude_metas else context.metas)}\n+                if value in variables:\n+                    cls._warn_about_str_var_settings(setting)\n+                    return value, variables[value]\n             elif isinstance(value, Variable):\n-                return self.encode_variable(value)\n+                return cls.encode_variable(value)\n \n         return copy.copy(value), -2\n \n@@ -1045,14 +1055,16 @@ class DomainContextHandler(ContextHandler):\n         else:\n             return value\n \n-    @staticmethod\n-    def _var_exists(setting, value, attributes, metas):\n+    @classmethod\n+    def _var_exists(cls, setting, value, attributes, metas):\n         if not isinstance(value, tuple) or len(value) != 2:\n             return False\n \n         attr_name, attr_type = value\n         if attr_type >= 100:\n             attr_type -= 100\n+        else:\n+            cls._warn_about_str_var_settings(setting)\n         return (not setting.exclude_attributes and\n                 attributes.get(attr_name, -1) == attr_type or\n                 not setting.exclude_metas and\n.", "test_patch": "diff --git a/Orange/widgets/tests/test_domain_context_handler.py b/Orange/widgets/tests/test_domain_context_handler.py\nindex cb4c634ac..8188df754 100644\n--- a/Orange/widgets/tests/test_domain_context_handler.py\n+++ b/Orange/widgets/tests/test_domain_context_handler.py\n@@ -1,14 +1,17 @@\n import warnings\n+from distutils.version import LooseVersion\n from unittest import TestCase\n from unittest.mock import Mock\n+\n+import Orange\n from Orange.data import Domain, DiscreteVariable\n from Orange.data import ContinuousVariable\n from Orange.util import OrangeDeprecationWarning\n from Orange.widgets.settings import DomainContextHandler, ContextSetting\n from Orange.widgets.utils import vartype\n \n-Continuous = vartype(ContinuousVariable())\n-Discrete = vartype(DiscreteVariable())\n+Continuous = 100 + vartype(ContinuousVariable())\n+Discrete = 100 + vartype(DiscreteVariable())\n \n \n class TestDomainContextHandler(TestCase):\n@@ -22,9 +25,9 @@ class TestDomainContextHandler(TestCase):\n                    DiscreteVariable('d4', values='jkl')]\n         )\n         self.args = (self.domain,\n-                     {'c1': Continuous, 'd1': Discrete,\n-                      'd2': Discrete, 'd3': Discrete},\n-                     {'c2': Continuous, 'd4': Discrete, })\n+                     {'c1': Continuous - 100, 'd1': Discrete - 100,\n+                      'd2': Discrete - 100, 'd3': Discrete - 100},\n+                     {'c2': Continuous - 100, 'd4': Discrete - 100, })\n         self.handler = DomainContextHandler()\n         self.handler.read_defaults = lambda: None\n \n@@ -35,9 +38,10 @@ class TestDomainContextHandler(TestCase):\n         encoded_attributes, encoded_metas = handler.encode_domain(self.domain)\n \n         self.assertEqual(encoded_attributes,\n-                         {'c1': Continuous, 'd1': Discrete,\n-                          'd2': Discrete, 'd3': Discrete})\n-        self.assertEqual(encoded_metas, {'c2': Continuous, 'd4': Discrete, })\n+                         {'c1': Continuous - 100, 'd1': Discrete - 100,\n+                          'd2': Discrete - 100, 'd3': Discrete - 100})\n+        self.assertEqual(encoded_metas,\n+                         {'c2': Continuous - 100, 'd4': Discrete - 100, })\n \n     def test_encode_domain_with_match_class(self):\n         handler = DomainContextHandler(\n@@ -46,9 +50,11 @@ class TestDomainContextHandler(TestCase):\n         encoded_attributes, encoded_metas = handler.encode_domain(self.domain)\n \n         self.assertEqual(encoded_attributes,\n-                         {'c1': Continuous, 'd1': Discrete, 'd2': Discrete,\n+                         {'c1': Continuous - 100, 'd1': Discrete - 100,\n+                          'd2': Discrete - 100,\n                           'd3': list('ghi')})\n-        self.assertEqual(encoded_metas, {'c2': Continuous, 'd4': Discrete})\n+        self.assertEqual(encoded_metas,\n+                         {'c2': Continuous - 100, 'd4': Discrete - 100})\n \n     def test_encode_domain_with_match_all(self):\n         handler = DomainContextHandler(\n@@ -57,10 +63,10 @@ class TestDomainContextHandler(TestCase):\n         encoded_attributes, encoded_metas = handler.encode_domain(self.domain)\n \n         self.assertEqual(encoded_attributes,\n-                         {'c1': Continuous, 'd1': list('abc'),\n+                         {'c1': Continuous - 100, 'd1': list('abc'),\n                           'd2': list('def'), 'd3': list('ghi')})\n         self.assertEqual(encoded_metas,\n-                         {'c2': Continuous, 'd4': list('jkl')})\n+                         {'c2': Continuous - 100, 'd4': list('jkl')})\n \n     def test_match_returns_2_on_perfect_match(self):\n         context = Mock(\n@@ -276,6 +282,23 @@ class TestDomainContextHandler(TestCase):\n             self.assertIn(OrangeDeprecationWarning,\n                           [x.category for x in w])\n \n+    def test_deprecated_str_as_var(self):\n+        if LooseVersion(Orange.__version__) >= LooseVersion(\"3.26\"):\n+            # pragma: no cover\n+            self.fail(\"Remove support for variables stored as string settings \"\n+                      \"and this test.\")\n+\n+        context = Mock()\n+        context.attributes = {\"foo\": 2}\n+        context.metas = {}\n+        setting = ContextSetting(\"\")\n+        setting.name = \"setting_name\"\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter(\"always\")\n+            DomainContextHandler.encode_setting(context, setting, \"foo\")\n+            self.assertIn(\"setting_name\", w[0].message.args[0])\n+\n+\n     def create_context(self, domain, values):\n         if domain is None:\n             domain = Domain([])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4827.0, "instance_id": "biolab__orange3-4827", "issue_numbers": 0, "base_commit": "5cd99c75ff44fccaf1ba4915ab74af56da08aad7", "patch": "diff --git a/Orange/widgets/data/owselectcolumns.py b/Orange/widgets/data/owselectcolumns.py\nindex f511fba77..312dad4d0 100644\n--- a/Orange/widgets/data/owselectcolumns.py\n+++ b/Orange/widgets/data/owselectcolumns.py\n@@ -362,9 +362,10 @@ class OWSelectAttributes(widget.OWWidget):\n         all_vars = data.domain.variables + data.domain.metas\n \n         def attrs_for_role(role):\n-            return [attr for _, attr in sorted(\n-                (domain_hints[attr][1], attr)\n-                for attr in all_vars if domain_hints[attr][0] == role)]\n+            selected_attrs = [\n+                attr for attr in all_vars if domain_hints[attr][0] == role\n+            ]\n+            return sorted(selected_attrs, key=lambda attr: domain_hints[attr][1])\n \n         domain = data.domain\n         domain_hints = {}\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectcolumns.py b/Orange/widgets/data/tests/test_owselectcolumns.py\nindex 76a1dd2d2..5a7e87cf7 100644\n--- a/Orange/widgets/data/tests/test_owselectcolumns.py\n+++ b/Orange/widgets/data/tests/test_owselectcolumns.py\n@@ -2,6 +2,7 @@\n from unittest import TestCase\n from unittest.mock import Mock\n \n+import numpy as np\n from AnyQt.QtCore import QMimeData, QPoint, Qt\n from AnyQt.QtGui import QDragEnterEvent\n \n@@ -396,3 +397,17 @@ class TestOWSelectAttributes(WidgetTest):\n         self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n         output_sum.assert_called_once()\n         self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n+    def test_domain_new_feature(self):\n+        \"\"\" Test scenario when new attribute is added at position 0 \"\"\"\n+        data = Table(\"iris\")\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        data1 = Table(\n+            Domain(\n+                (ContinuousVariable(\"a\"),) + data.domain.attributes,\n+                data.domain.class_var),\n+            np.hstack((np.ones((len(data), 1)), data.X)),\n+            data.Y\n+        )\n+        self.send_signal(self.widget.Inputs.data, data1)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4169.0, "instance_id": "biolab__orange3-4169", "issue_numbers": 0, "base_commit": "50c2e0c848e3fe81d50857392f5c35e0f5a0fd16", "patch": "diff --git a/Orange/widgets/data/owrandomize.py b/Orange/widgets/data/owrandomize.py\nindex eabebea66..c88c25337 100644\n--- a/Orange/widgets/data/owrandomize.py\n+++ b/Orange/widgets/data/owrandomize.py\n@@ -67,6 +67,9 @@ class OWRandomize(OWWidget):\n             box, self, \"random_seed\", \"Replicable shuffling\",\n             callback=self._shuffle_check_changed)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoInput)\n+\n         self.apply_button = gui.auto_apply(self.controlArea, self, box=False, commit=self.apply)\n \n     @property\n@@ -87,6 +90,8 @@ class OWRandomize(OWWidget):\n     def set_data(self, data):\n         self.data = data\n         self.unconditional_apply()\n+        text = str(len(data)) if data else self.info.NoInput\n+        self.info.set_input_summary(text)\n \n     def apply(self):\n         data = None\n@@ -100,6 +105,8 @@ class OWRandomize(OWWidget):\n             data = self.data.copy()\n             for i, instance in zip(indices, randomized):\n                 data[i] = instance\n+        text = str(len(data)) if data else self.info.NoInput\n+        self.info.set_output_summary(text)\n         self.Outputs.data.send(data)\n \n     def send_report(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owrandomize.py b/Orange/widgets/data/tests/test_owrandomize.py\nindex 5b90cff5f..173677402 100644\n--- a/Orange/widgets/data/tests/test_owrandomize.py\n+++ b/Orange/widgets/data/tests/test_owrandomize.py\n@@ -1,6 +1,6 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n-from unittest.mock import patch\n+# pylint: disable=missing-docstring,unsubscriptable-object\n+from unittest.mock import patch, Mock\n \n import numpy as np\n \n@@ -74,6 +74,24 @@ class TestOWRandomize(WidgetTest):\n         np.testing.assert_array_equal(output.Y, output2.Y)\n         np.testing.assert_array_equal(output.metas, output2.metas)\n \n+    def test_summary(self):\n+        \"\"\"\"Check if status bar displays correct input/output summary\"\"\"\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, self.zoo)\n+        input_sum.assert_called_with(str(len(self.zoo)))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(str(len(output)))\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n     def test_unconditional_commit_on_new_signal(self):\n         with patch.object(self.widget, 'unconditional_apply') as apply:\n             self.widget.auto_apply = False\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4432.0, "instance_id": "biolab__orange3-4432", "issue_numbers": 0, "base_commit": "aad5488e4250ed444344251404d89279772a5e15", "patch": "diff --git a/Orange/preprocess/remove.py b/Orange/preprocess/remove.py\nindex 7ae17376a..52a9bd5ef 100644\n--- a/Orange/preprocess/remove.py\n+++ b/Orange/preprocess/remove.py\n@@ -2,7 +2,7 @@ from collections import namedtuple\n \n import numpy as np\n \n-from Orange.data import Domain, DiscreteVariable, Table\n+from Orange.data import Domain, DiscreteVariable\n from Orange.preprocess.transformation import Lookup\n from Orange.statistics.util import nanunique\n from .preprocess import Preprocess\n@@ -238,7 +238,10 @@ def remove_unused_values(var, data):\n     if len(unique) == len(var.values):\n         return var\n     used_values = [var.values[i] for i in unique]\n-    return DiscreteVariable(var.name, values=used_values, sparse=var.sparse)\n+    translation_table = np.array([np.NaN] * len(var.values))\n+    translation_table[unique] = range(len(used_values))\n+    return DiscreteVariable(var.name, values=used_values, sparse=var.sparse,\n+                            compute_value=Lookup(var, translation_table))\n \n \n def sort_var_values(var):\n.", "test_patch": "diff --git a/Orange/tests/test_remove.py b/Orange/tests/test_remove.py\nindex cf5ccc9dd..92f8dbb47 100644\n--- a/Orange/tests/test_remove.py\n+++ b/Orange/tests/test_remove.py\n@@ -6,7 +6,7 @@ import unittest\n import numpy as np\n \n from Orange.data import Table\n-from Orange.preprocess import Remove\n+from Orange.preprocess import Remove, discretize\n from Orange.tests import test_filename\n \n \n@@ -160,3 +160,16 @@ class TestRemover(unittest.TestCase):\n         cleaned = remover(data)\n         np.testing.assert_array_equal(cleaned.Y[:50], 0)\n         np.testing.assert_array_equal(cleaned.Y[50:], 1)\n+\n+    def test_remove_mapping_after_compute_value(self):\n+        housing = Table(\"housing\")\n+        method = discretize.EqualFreq(n=3)\n+        discretizer = discretize.DomainDiscretizer(\n+            discretize_class=True, method=method)\n+        domain = discretizer(housing)\n+        data = housing.transform(domain)\n+        val12 = np.nonzero(data.Y > 0)[0]\n+        data = data[val12]\n+        remover = Remove(class_flags=Remove.RemoveUnusedValues)\n+        cleaned = remover(data)\n+        np.testing.assert_equal(cleaned.Y, data.Y - 1)\ndiff --git a/Orange/widgets/data/tests/test_owselectrows.py b/Orange/widgets/data/tests/test_owselectrows.py\nindex c26fed71d..9d7cad92d 100644\n--- a/Orange/widgets/data/tests/test_owselectrows.py\n+++ b/Orange/widgets/data/tests/test_owselectrows.py\n@@ -10,6 +10,7 @@ import numpy as np\n \n from Orange.data import (\n     Table, ContinuousVariable, StringVariable, DiscreteVariable, Domain)\n+from Orange.preprocess import discretize\n from Orange.widgets.data.owselectrows import (\n     OWSelectRows, FilterDiscreteType, SelectRowsContextHandler)\n from Orange.widgets.tests.base import WidgetTest, datasets\n@@ -312,6 +313,21 @@ and remove test_support_old_settings and this test.\n Basically, revert this commit.\n \"\"\")\n \n+    def test_purge_discretized(self):\n+        housing = Table(\"housing\")\n+        method = discretize.EqualFreq(n=3)\n+        discretizer = discretize.DomainDiscretizer(\n+            discretize_class=True, method=method)\n+        domain = discretizer(housing)\n+        data = housing.transform(domain)\n+        widget = self.widget_with_context(domain, [[\"MEDV\", 2, (2, 3)]])\n+        widget.purge_classes = True\n+        self.send_signal(widget.Inputs.data, data)\n+        out = self.get_output(widget.Outputs.matching_data)\n+        expected = data.Y[(data.Y == 1) + (data.Y == 2)]\n+        expected = (expected == 2).astype(float)\n+        np.testing.assert_equal(out.Y, expected)\n+\n     def widget_with_context(self, domain, conditions):\n         ch = SelectRowsContextHandler()\n         context = ch.new_context(domain, *ch.encode_domain(domain))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3943.0, "instance_id": "biolab__orange3-3943", "issue_numbers": 0, "base_commit": "17587f056e4d730595982f63ef2b3f2002852088", "patch": "diff --git a/Orange/evaluation/testing.py b/Orange/evaluation/testing.py\nindex 6789b4103..9019e8899 100644\n--- a/Orange/evaluation/testing.py\n+++ b/Orange/evaluation/testing.py\n@@ -24,7 +24,7 @@ def _identity(x):\n \n def _mp_worker(fold_i, train_data, test_data, learner_i, learner,\n                store_models):\n-    predicted, probs, model, failed = None, None, None, False\n+    predicted, probs, model, failed, train_time, test_time = None, None, None, False, None, None\n     try:\n         if not train_data or not test_data:\n             raise RuntimeError('Test fold is empty')\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owtestlearners.py b/Orange/widgets/evaluate/tests/test_owtestlearners.py\nindex 213a2e7e0..0b58fa7a9 100644\n--- a/Orange/widgets/evaluate/tests/test_owtestlearners.py\n+++ b/Orange/widgets/evaluate/tests/test_owtestlearners.py\n@@ -225,16 +225,16 @@ class TestOWTestLearners(WidgetTest):\n         self.send_signal(self.widget.Inputs.learner,\n                          LogisticRegressionLearner(), 0, wait=5000)\n \n-        average_auc = float(model.item(0, 1).text())\n+        average_auc = float(model.item(0, 3).text())\n \n         simulate.combobox_activate_item(w.controls.class_selection, \"Iris-setosa\")\n-        setosa_auc = float(model.item(0, 1).text())\n+        setosa_auc = float(model.item(0, 3).text())\n \n         simulate.combobox_activate_item(w.controls.class_selection, \"Iris-versicolor\")\n-        versicolor_auc = float(model.item(0, 1).text())\n+        versicolor_auc = float(model.item(0, 3).text())\n \n         simulate.combobox_activate_item(w.controls.class_selection, \"Iris-virginica\")\n-        virginica_auc = float(model.item(0, 1).text())\n+        virginica_auc = float(model.item(0, 3).text())\n \n         self.assertGreater(average_auc, versicolor_auc)\n         self.assertGreater(average_auc, virginica_auc)\n@@ -287,12 +287,12 @@ class TestOWTestLearners(WidgetTest):\n     def _retrieve_scores(self):\n         w = self.widget\n         model = w.score_table.model\n-        auc = model.item(0, 1).text()\n+        auc = model.item(0, 3).text()\n         auc = float(auc) if auc != \"\" else None\n-        ca = float(model.item(0, 2).text())\n-        f1 = float(model.item(0, 3).text())\n-        precision = float(model.item(0, 4).text())\n-        recall = float(model.item(0, 5).text())\n+        ca = float(model.item(0, 4).text())\n+        f1 = float(model.item(0, 5).text())\n+        precision = float(model.item(0, 6).text())\n+        recall = float(model.item(0, 7).text())\n         return auc, ca, f1, precision, recall\n \n     def _test_scores(self, train_data, test_data, learner, sampling, n_folds):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4957.0, "instance_id": "biolab__orange3-4957", "issue_numbers": 0, "base_commit": "242d3fcbc1b5b78d114b6fc9bd9030c101e9d1c4", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 21d03ed65..34e9caff6 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -353,12 +353,15 @@ class Variable(Reprable, metaclass=VariableMeta):\n         var1 = self._get_identical_source(self)\n         var2 = self._get_identical_source(other)\n         # pylint: disable=protected-access\n-        return var1.name == var2.name \\\n-               and var1._compute_value == var2._compute_value\n+        return (\n+            self.name == other.name\n+            and var1.name == var2.name\n+            and var1._compute_value == var2._compute_value\n+        )\n \n     def __hash__(self):\n         var = self._get_identical_source(self)\n-        return hash((var.name, type(self), var._compute_value))\n+        return hash((self.name, var.name, type(self), var._compute_value))\n \n     @staticmethod\n     def _get_identical_source(var):\n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex a0109c47e..c19c2616b 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -215,18 +215,25 @@ class TestVariable(unittest.TestCase):\n \n     def test_hash_eq(self):\n         a = ContinuousVariable(\"a\")\n+        a1 = ContinuousVariable(\"a\")\n         b1 = ContinuousVariable(\"b\", compute_value=Identity(a))\n         b2 = ContinuousVariable(\"b2\", compute_value=Identity(b1))\n         b3 = ContinuousVariable(\"b\")\n-        self.assertEqual(a, b2)\n-        self.assertEqual(b1, b2)\n-        self.assertEqual(a, b1)\n+        c1 = ContinuousVariable(\"c\", compute_value=Identity(a))\n+        c2 = ContinuousVariable(\"c\", compute_value=Identity(a))\n+        self.assertNotEqual(a, b2)\n+        self.assertNotEqual(b1, b2)\n+        self.assertNotEqual(a, b1)\n         self.assertNotEqual(b1, b3)\n+        self.assertEqual(a, a1)\n+        self.assertEqual(c1, c2)\n \n-        self.assertEqual(hash(a), hash(b2))\n-        self.assertEqual(hash(b1), hash(b2))\n-        self.assertEqual(hash(a), hash(b1))\n+        self.assertNotEqual(hash(a), hash(b2))\n+        self.assertNotEqual(hash(b1), hash(b2))\n+        self.assertNotEqual(hash(a), hash(b1))\n         self.assertNotEqual(hash(b1), hash(b3))\n+        self.assertEqual(hash(a), hash(a1))\n+        self.assertEqual(hash(c1), hash(c2))\n \n \n def variabletest(varcls):\ndiff --git a/Orange/tests/test_domain.py b/Orange/tests/test_domain.py\nindex a2feaf26b..ab70becce 100644\n--- a/Orange/tests/test_domain.py\n+++ b/Orange/tests/test_domain.py\n@@ -544,6 +544,22 @@ class TestDomainInit(unittest.TestCase):\n         self.assertTrue(conversion.sparse_Y)\n         self.assertFalse(conversion.sparse_metas)\n \n+    def test_get_item_similar_vars(self):\n+        a = DiscreteVariable(\"Cluster\", values=[\"c\"])\n+        var1 = a.renamed(\"Cluster x\")\n+        var2 = DiscreteVariable(\"Cluster\", values=[\"a\", \"b\"])\n+\n+        domain = Domain(\n+            [],\n+            metas=[var1, var2]\n+        )\n+        # pylint: disable=protected-access\n+        self.assertDictEqual(\n+            {-1: -1, -2: -2, var1: -1, var2: -2, var1.name: -1, var2.name: -2},\n+            domain._indices\n+        )\n+        self.assertIs(domain[domain.metas[0]], domain.metas[0])\n+\n \n class TestDomainFilter(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5681.0, "instance_id": "biolab__orange3-5681", "issue_numbers": 0, "base_commit": "f7fe1a8a1914ba3f1c30a18ee44404996bcd4992", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 95e9e92cc..2d6aac4b5 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -157,6 +157,16 @@ def _is_datetime(s):\n         return True\n     try:\n         if is_object_dtype(s):\n+            # pd.to_datetime would sucessfuly parse column of numbers to datetime\n+            # but for column of object dtype with numbers we want to be either\n+            # discret or string - following code try to parse column to numeric\n+            # if connversion to numeric is sucessful return False\n+            try:\n+                pd.to_numeric(s)\n+                return False\n+            except (ValueError, TypeError):\n+                pass\n+\n             # utc=True - to allow different timezones in a series object\n             pd.to_datetime(s, infer_datetime_format=True, utc=True)\n             return True\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex f8649f113..2d30ed363 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -383,6 +383,25 @@ class TestPandasCompat(unittest.TestCase):\n             ],\n         )\n \n+    def test_table_from_frame_no_datetim(self):\n+        \"\"\"\n+        In case when dtype of column is object and column contains numbers only,\n+        column could be recognized as a TimeVarialbe since pd.to_datetime can parse\n+        numbers as datetime. That column must be result either in StringVariable\n+        or DiscreteVariable since it's dtype is object.\n+        \"\"\"\n+        from Orange.data.pandas_compat import table_from_frame\n+\n+        df = pd.DataFrame([[1], [2], [3]], dtype=\"object\")\n+        table = table_from_frame(df)\n+        # check if exactly ContinuousVariable and not subtype TimeVariable\n+        self.assertIsInstance(table.domain.metas[0], StringVariable)\n+\n+        df = pd.DataFrame([[1], [2], [2]], dtype=\"object\")\n+        table = table_from_frame(df)\n+        # check if exactly ContinuousVariable and not subtype TimeVariable\n+        self.assertIsInstance(table.domain.attributes[0], DiscreteVariable)\n+\n     def test_time_variable_compatible(self):\n         from Orange.data.pandas_compat import table_from_frame\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4609.0, "instance_id": "biolab__orange3-4609", "issue_numbers": 0, "base_commit": "778990191b2740ef9a38a6b7d9cad814d0a9fe95", "patch": "diff --git a/Orange/widgets/utils/colorpalettes.py b/Orange/widgets/utils/colorpalettes.py\nindex 0a0efc470..a71297045 100644\n--- a/Orange/widgets/utils/colorpalettes.py\n+++ b/Orange/widgets/utils/colorpalettes.py\n@@ -394,7 +394,7 @@ class BinnedContinuousPalette(IndexedPalette):\n \n     def _bin_indices(self, x):\n         nans = np.isnan(x)\n-        binx = np.digitize(x, self.bins[1:-1], right=True)\n+        binx = np.digitize(x, self.bins[1:-1])\n         binx.clip(0, len(self.bins) - 1)\n         binx[nans] = -1\n         return binx, nans\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_colorpalettes.py b/Orange/widgets/utils/tests/test_colorpalettes.py\nindex fe92a32d8..5a6321a44 100644\n--- a/Orange/widgets/utils/tests/test_colorpalettes.py\n+++ b/Orange/widgets/utils/tests/test_colorpalettes.py\n@@ -9,6 +9,7 @@ from AnyQt.QtGui import QImage, QColor, QIcon\n from orangewidget.tests.base import GuiTest\n from Orange.util import color_to_hex\n from Orange.data import DiscreteVariable, ContinuousVariable, Variable\n+from Orange.preprocess.discretize import decimal_binnings\n # pylint: disable=wildcard-import,unused-wildcard-import\n from Orange.widgets.utils.colorpalettes import *\n \n@@ -464,6 +465,14 @@ class BinnedPaletteTest(unittest.TestCase):\n         copy.bins[0] += 1\n         self.assertNotEqual(self.bins[0], copy.bins[0])\n \n+    def test_decimal_binnings(self):\n+        \"\"\"test for consistency with binning from discretize\"\"\"\n+        data = np.array([1, 2])\n+        bins = decimal_binnings(data)[0].thresholds\n+        binned = BinnedContinuousPalette.from_palette(self.palette, bins)\n+        colors = binned.values_to_colors(data)\n+        assert not np.array_equal(colors[0], colors[1])\n+\n \n class UtilsTest(GuiTest):\n     def test_coloricon(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6564.0, "instance_id": "biolab__orange3-6564", "issue_numbers": 0, "base_commit": "9b95c177f454e5e4477ae73037275c0a194624de", "patch": "diff --git a/Orange/classification/naive_bayes.py b/Orange/classification/naive_bayes.py\nindex 83054b202..3d5e8e32e 100644\n--- a/Orange/classification/naive_bayes.py\n+++ b/Orange/classification/naive_bayes.py\n@@ -113,6 +113,7 @@ class NaiveBayesModel(Model):\n             p0 = p.T[0].copy()\n             probs[:] += p0\n             log_prob[i, :p.shape[1]] = p.T - p0\n+            log_prob[i, n_vals-1] = -p0\n \n         dat = data.data.copy()\n         dat[np.isnan(dat)] = n_vals - 1\n.", "test_patch": "diff --git a/Orange/tests/test_naive_bayes.py b/Orange/tests/test_naive_bayes.py\nindex b8c097796..c24484e7c 100644\n--- a/Orange/tests/test_naive_bayes.py\n+++ b/Orange/tests/test_naive_bayes.py\n@@ -101,14 +101,17 @@ class TestNaiveBayesLearner(unittest.TestCase):\n     def test_predictions(self):\n         self._test_predictions(sparse=None)\n         self._test_predictions_with_absent_class(sparse=None)\n+        self._test_predict_missing_attributes(sparse=None)\n \n     def test_predictions_csr_matrix(self):\n         self._test_predictions(sparse=sp.csr_matrix)\n         self._test_predictions_with_absent_class(sparse=sp.csr_matrix)\n+        self._test_predict_missing_attributes(sparse=sp.csr_matrix)\n \n     def test_predictions_csc_matrix(self):\n         self._test_predictions(sparse=sp.csc_matrix)\n         self._test_predictions_with_absent_class(sparse=sp.csc_matrix)\n+        self._test_predict_missing_attributes(sparse=sp.csc_matrix)\n \n     def _test_predictions(self, sparse):\n         x = np.array([\n@@ -311,7 +314,7 @@ class TestNaiveBayesLearner(unittest.TestCase):\n         np.testing.assert_almost_equal(exp_probs, probs)\n         np.testing.assert_equal(values, np.argmax(exp_probs, axis=1))\n \n-    def test_predict_missing_attributes(self):\n+    def _test_predict_missing_attributes(self, sparse):\n         x = np.array([\n             [1, 0, 0],\n             [0, 1, 0],\n@@ -320,6 +323,8 @@ class TestNaiveBayesLearner(unittest.TestCase):\n             [1, 1, 0],\n             [1, 2, 0],\n             [1, 2, np.nan]])\n+        if sparse is not None:\n+            x = sparse(x)\n         y = np.array([1,0,0,0,1,1,1])\n         domain = Domain(\n             [DiscreteVariable(\"a\", values=\"ab\"),\n@@ -332,6 +337,8 @@ class TestNaiveBayesLearner(unittest.TestCase):\n         test_x = np.array([[np.nan, np.nan, np.nan],\n                            [np.nan, 0, np.nan],\n                            [0, np.nan, np.nan]])\n+        if sparse is not None and sparse is not sp.csc_matrix:\n+            test_x = sparse(test_x)\n         probs = model(test_x, ret=model.Probs)\n         np.testing.assert_almost_equal(probs, [[(3+1)/(7+2), (4+1)/(7+2)],\n                                                [(1+1)/(2+2), (1+1)/(2+2)],\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5083.0, "instance_id": "biolab__orange3-5083", "issue_numbers": 0, "base_commit": "29e992f581aa7143929b1f09e357bf077c43c9c7", "patch": "diff --git a/Orange/preprocess/impute.py b/Orange/preprocess/impute.py\nindex ee9e4fc50..d774247f2 100644\n--- a/Orange/preprocess/impute.py\n+++ b/Orange/preprocess/impute.py\n@@ -160,19 +160,20 @@ class ReplaceUnknownsModel(Reprable):\n \n     def __call__(self, data):\n         if isinstance(data, Orange.data.Instance):\n-            column = np.array([float(data[self.variable])])\n-        else:\n-            column = np.array(data.get_column_view(self.variable)[0],\n-                              copy=True)\n+            data = Orange.data.Table.from_list(data.domain, [data])\n+        domain = data.domain\n+        column = np.array(data.get_column_view(self.variable)[0], copy=True)\n \n         mask = np.isnan(column)\n         if not np.any(mask):\n             return column\n \n-        if isinstance(data, Orange.data.Instance):\n-            predicted = self.model(data)\n-        else:\n-            predicted = self.model(data[mask])\n+        if domain.class_vars:\n+            # cannot have class var in domain (due to backmappers in model)\n+            data = data.transform(\n+                Orange.data.Domain(domain.attributes, None, domain.metas)\n+            )\n+        predicted = self.model(data[mask])\n         column[mask] = predicted\n         return column\n \n.", "test_patch": "diff --git a/Orange/tests/test_impute.py b/Orange/tests/test_impute.py\nindex 4dd6ff1d5..3b3ec9be3 100644\n--- a/Orange/tests/test_impute.py\n+++ b/Orange/tests/test_impute.py\n@@ -229,9 +229,12 @@ class TestModel(unittest.TestCase):\n         domain = data.Domain(\n             (data.DiscreteVariable(\"A\", values=(\"0\", \"1\", \"2\")),\n              data.ContinuousVariable(\"B\"),\n-             data.ContinuousVariable(\"C\"))\n+             data.ContinuousVariable(\"C\")),\n+            # the class is here to ensure the backmapper in model does not\n+            # run and raise exception\n+            data.DiscreteVariable(\"Z\", values=(\"P\", \"M\"))\n         )\n-        table = data.Table.from_numpy(domain, np.array(X))\n+        table = data.Table.from_numpy(domain, np.array(X), [0,] * 3)\n \n         v = impute.Model(MajorityLearner())(table, domain[0])\n         self.assertTrue(np.all(np.isfinite(v.compute_value(table))))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4327.0, "instance_id": "biolab__orange3-4327", "issue_numbers": 0, "base_commit": "ccee1670f90d4c2ce2f9c87829973712116dd05c", "patch": "diff --git a/Orange/widgets/data/owcontinuize.py b/Orange/widgets/data/owcontinuize.py\nindex c054daab2..3c52148af 100644\n--- a/Orange/widgets/data/owcontinuize.py\n+++ b/Orange/widgets/data/owcontinuize.py\n@@ -97,6 +97,8 @@ class OWContinuize(widget.OWWidget):\n         gui.auto_apply(self.buttonsArea, self, \"autosend\", box=False)\n \n         self.data = None\n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n \n     def settings_changed(self):\n         self.commit()\n@@ -106,8 +108,11 @@ class OWContinuize(widget.OWWidget):\n     def setData(self, data):\n         self.data = data\n         if data is None:\n+            self.info.set_input_summary(self.info.NoInput)\n+            self.info.set_output_summary(self.info.NoOutput)\n             self.Outputs.data.send(None)\n         else:\n+            self.info.set_input_summary(len(data))\n             self.unconditional_commit()\n \n     def constructContinuizer(self):\n@@ -133,9 +138,11 @@ class OWContinuize(widget.OWWidget):\n             domain = continuizer(self.data)\n             data = self.data.transform(domain)\n             self.Outputs.data.send(data)\n+            self.info.set_output_summary(len(data))\n         else:\n             self.Outputs.data.send(self.data)  # None or empty data\n \n+\n     def send_report(self):\n         self.report_items(\n             \"Settings\",\n@@ -391,4 +398,4 @@ class DomainContinuizer(Reprable):\n \n \n if __name__ == \"__main__\":  # pragma: no cover\n-    WidgetPreview(OWContinuize).run(Table(\"lenses\"))\n+    WidgetPreview(OWContinuize).run(Table(\"iris\"))\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcontinuize.py b/Orange/widgets/data/tests/test_owcontinuize.py\nindex ccac541d8..b7cb8a929 100644\n--- a/Orange/widgets/data/tests/test_owcontinuize.py\n+++ b/Orange/widgets/data/tests/test_owcontinuize.py\n@@ -1,6 +1,7 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n+# pylint: disable=missing-docstring,unsubscriptable-object\n import unittest\n+from unittest.mock import Mock\n \n import numpy as np\n \n@@ -9,6 +10,7 @@ from Orange.preprocess import transformation\n from Orange.widgets.data import owcontinuize\n from Orange.widgets.data.owcontinuize import OWContinuize\n from Orange.widgets.tests.base import WidgetTest\n+from orangewidget.widget import StateInfo\n \n \n class TestOWContinuize(WidgetTest):\n@@ -39,6 +41,25 @@ class TestOWContinuize(WidgetTest):\n         imp_data = self.get_output(self.widget.Outputs.data)\n         self.assertIsNone(imp_data)\n \n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        data = Table(\"iris\")\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n     def test_one_column_equal_values(self):\n         \"\"\"\n         No crash on a column with equal values and with selected option\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4679.0, "instance_id": "biolab__orange3-4679", "issue_numbers": 0, "base_commit": "4e4786355a12f07447eebfa92a09d5bd3d4d5169", "patch": "diff --git a/Orange/widgets/settings.py b/Orange/widgets/settings.py\nindex 03f361517..24dfb5f01 100644\n--- a/Orange/widgets/settings.py\n+++ b/Orange/widgets/settings.py\n@@ -242,7 +242,7 @@ class DomainContextHandler(ContextHandler):\n         except IncompatibleContext:\n             return self.NO_MATCH\n \n-        if self.first_match:\n+        if self.first_match and matches and sum(m[0] for m in matches):\n             return self.MATCH\n \n         matches.append((0, 0))\n.", "test_patch": "diff --git a/Orange/widgets/tests/test_domain_context_handler.py b/Orange/widgets/tests/test_domain_context_handler.py\nindex e81f7e42c..c4a6e70df 100644\n--- a/Orange/widgets/tests/test_domain_context_handler.py\n+++ b/Orange/widgets/tests/test_domain_context_handler.py\n@@ -97,7 +97,7 @@ class TestDomainContextHandler(TestCase):\n         self.handler.bind(SimpleWidget)\n \n         context = Mock(values={})\n-        self.assertEqual(1, self.handler.match(context, *self.args))\n+        self.assertEqual(0.1, self.handler.match(context, *self.args))\n \n     def test_match_returns_zero_on_incompatible_context(self):\n         self.handler.bind(SimpleWidget)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5795.0, "instance_id": "biolab__orange3-5795", "issue_numbers": 0, "base_commit": "c8603599ffdc5fe1d3b6c04324f7a271129c1f99", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 788c06394..fb80b4954 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -280,7 +280,12 @@ def vars_from_df(df, role=None, force_nominal=False):\n                 raise ValueError(\"String variable must be in metas.\")\n             _role = Role.Meta\n             var = StringVariable(str(column))\n-            expr = lambda s, _: np.asarray(s, dtype=object)\n+            expr = lambda s, _: np.asarray(\n+                # to object so that fillna can replace with nans if Unknown in nan\n+                # replace nan with object Unknown assure that all values are string\n+                s.astype(object).fillna(StringVariable.Unknown).astype(str),\n+                dtype=object\n+            )\n \n         cols[_role].append(column)\n         exprs[_role].append(expr)\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 4eb7371fc..22cbe313b 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -34,10 +34,9 @@ class TestPandasCompat(unittest.TestCase):\n                                  [0, pd.Timestamp('1724-12-20').timestamp()],\n                                  [0, pd.Timestamp('1724-12-20').timestamp()],\n                                  [nan, nan]])\n-        np.testing.assert_equal(table.metas.tolist(), [['a'],\n-                                                       ['b'],\n-                                                       ['c'],\n-                                                       [nan]])\n+        np.testing.assert_equal(\n+            table.metas.tolist(), [[\"a\"], [\"b\"], [\"c\"], [StringVariable.Unknown]]\n+        )\n         names = [var.name for var in table.domain.attributes]\n         types = [type(var) for var in table.domain.attributes]\n         self.assertEqual(names, ['1', '2'])\n@@ -63,10 +62,9 @@ class TestPandasCompat(unittest.TestCase):\n                                  [1, 0, pd.Timestamp('1724-12-20').timestamp()],\n                                  [0, 0, pd.Timestamp('1724-12-20').timestamp()],\n                                  [0, nan, nan]])\n-        np.testing.assert_equal(table.metas.tolist(), [['a'],\n-                                                       ['b'],\n-                                                       ['c'],\n-                                                       [nan]])\n+        np.testing.assert_equal(\n+            table.metas.tolist(), [[\"a\"], [\"b\"], [\"c\"], [StringVariable.Unknown]]\n+        )\n         names = [var.name for var in table.domain.attributes]\n         types = [type(var) for var in table.domain.attributes]\n         self.assertEqual(names, ['index', '1', '2'])\n@@ -383,7 +381,7 @@ class TestPandasCompat(unittest.TestCase):\n             ],\n         )\n \n-    def test_table_from_frame_no_datetim(self):\n+    def test_table_from_frame_no_datetime(self):\n         \"\"\"\n         In case when dtype of column is object and column contains numbers only,\n         column could be recognized as a TimeVarialbe since pd.to_datetime can parse\n@@ -402,6 +400,34 @@ class TestPandasCompat(unittest.TestCase):\n         # check if exactly ContinuousVariable and not subtype TimeVariable\n         self.assertIsInstance(table.domain.attributes[0], DiscreteVariable)\n \n+    def testa_table_from_frame_string(self):\n+        \"\"\"\n+        Test if string-like variables are handled correctly and nans are replaced\n+        with String.Unknown\n+        \"\"\"\n+        from Orange.data.pandas_compat import table_from_frame\n+\n+        # s1 contains nan and s2 contains pd.Na\n+        df = pd.DataFrame(\n+            [[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"], [5, \"c\"], [np.nan, np.nan]],\n+            columns=[\"s1\", \"s2\"],\n+        ).astype({\"s1\": \"object\", \"s2\": \"string\"})\n+        table = table_from_frame(df)\n+        np.testing.assert_array_equal(np.empty((5, 0)), table.X)\n+        np.testing.assert_array_equal(\n+            np.array(\n+                [\n+                    [\"a\", \"b\"],\n+                    [\"c\", \"d\"],\n+                    [\"e\", \"f\"],\n+                    [\"5\", \"c\"],\n+                    [StringVariable.Unknown, StringVariable.Unknown],\n+                ]\n+            ),\n+            table.metas,\n+        )\n+        self.assertTrue(all(isinstance(v, StringVariable) for v in table.domain.metas))\n+\n     def test_time_variable_compatible(self):\n         from Orange.data.pandas_compat import table_from_frame\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4843.0, "instance_id": "biolab__orange3-4843", "issue_numbers": 0, "base_commit": "2433cc27a8d5cd999022f81f5b8f18a37803a183", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 9c2d90977..c5ac2cecb 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -347,34 +347,26 @@ class Variable(Reprable, metaclass=VariableMeta):\n         return var\n \n     def __eq__(self, other):\n-        # pylint: disable=protected-access,import-outside-toplevel\n-\n-        def to_match(var):\n-            if var._compute_value is None:\n-                return var\n-            elif isinstance(var._compute_value, Identity):\n-                return var._compute_value.variable\n-            return None\n+        if type(self) is not type(other):\n+            return False\n \n-        from Orange.preprocess.transformation import Identity\n-        return type(self) is type(other) and (\n-            self.name == other.name\n-            and self._compute_value == other._compute_value\n-            or\n-            (self.compute_value or other.compute_value)\n-            and to_match(self) == to_match(other) != None)\n+        var1 = self._get_identical_source(self)\n+        var2 = self._get_identical_source(other)\n+        # pylint: disable=protected-access\n+        return var1.name == var2.name \\\n+               and var1._compute_value == var2._compute_value\n \n     def __hash__(self):\n-        # Two variables that are not equal can have the same hash.\n-        # This happens if one has compute_value == Identity and the other\n-        # doesn't have compute_value, or they have a different Identity.\n-        # Having the same hash while not being equal is of course allowed.\n-        # pylint: disable=import-outside-toplevel\n+        var = self._get_identical_source(self)\n+        return hash((var.name, type(self), var._compute_value))\n+\n+    @staticmethod\n+    def _get_identical_source(var):\n+        # pylint: disable=protected-access,import-outside-toplevel\n         from Orange.preprocess.transformation import Identity\n-        compute_value = self._compute_value\n-        if isinstance(self._compute_value, Identity):\n-            compute_value = None\n-        return hash((self.name, type(self), compute_value))\n+        while isinstance(var._compute_value, Identity):\n+            var = var._compute_value.variable\n+        return var\n \n     @classmethod\n     def make(cls, name, *args, **kwargs):\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex 2afa27e74..489f3283b 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -163,6 +163,7 @@ class TestVariable(unittest.TestCase):\n         a._compute_value = Identity(a1)\n         self.assertEqual(a, a)\n         self.assertEqual(a, b)\n+        self.assertEqual(hash(a), hash(b))\n \n         b._compute_value = a.compute_value\n         self.assertEqual(a, b)\n@@ -206,6 +207,27 @@ class TestVariable(unittest.TestCase):\n         b._compute_value = Identity(a2)\n         self.assertEqual(hash(a), hash(b))\n \n+        at = TimeVariable(\"a\")\n+        b = ContinuousVariable(\"b\")\n+        self.assertEqual(hash(a1), hash(a2))\n+        self.assertNotEqual(hash(a1), hash(b))\n+        self.assertNotEqual(hash(a1), hash(at))\n+\n+    def test_hash_eq(self):\n+        a = ContinuousVariable(\"a\")\n+        b1 = ContinuousVariable(\"b\", compute_value=Identity(a))\n+        b2 = ContinuousVariable(\"b2\", compute_value=Identity(b1))\n+        b3 = ContinuousVariable(\"b\")\n+        self.assertEqual(a, b2)\n+        self.assertEqual(b1, b2)\n+        self.assertEqual(a, b1)\n+        self.assertNotEqual(b1, b3)\n+\n+        self.assertEqual(hash(a), hash(b2))\n+        self.assertEqual(hash(b1), hash(b2))\n+        self.assertEqual(hash(a), hash(b1))\n+        self.assertNotEqual(hash(b1), hash(b3))\n+\n \n def variabletest(varcls):\n     def decorate(cls):\n@@ -252,7 +274,6 @@ class TestDiscreteVariable(VariableTest):\n         self.assertEqual(var.val_from_str_add(\"F\"), 0)\n         self.assertEqual(var.val_from_str_add(\"N\"), 2)\n \n-\n     def test_repr(self):\n         var = DiscreteVariable.make(\"a\", values=(\"F\", \"M\"))\n         self.assertEqual(\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6357.0, "instance_id": "biolab__orange3-6357", "issue_numbers": 0, "base_commit": "8b8b35879ad3a1c19016717e2f323484cc891b7a", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex f8e08944f..72deea866 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1475,6 +1475,8 @@ class Table(Sequence, Storage):\n             self._metas = self._metas.copy()\n         if is_view(self._W):\n             self._W = self._W.copy()\n+        if is_view(self.ids):\n+            self.ids = self.ids.copy()\n \n     def copy(self):\n         \"\"\"\n.", "test_patch": "diff --git a/Orange/data/tests/test_table.py b/Orange/data/tests/test_table.py\nindex b687b00c4..45a71762d 100644\n--- a/Orange/data/tests/test_table.py\n+++ b/Orange/data/tests/test_table.py\n@@ -253,6 +253,25 @@ class TestTableInit(unittest.TestCase):\n             tabw.metas,\n             np.hstack((tab.metas, np.array(list(\"abcde\")).reshape(5, -1))))\n \n+    def test_copy(self):\n+        domain = Domain([ContinuousVariable(\"x\")],\n+                        ContinuousVariable(\"y\"),\n+                        [ContinuousVariable(\"z\")])\n+        data1 = Table.from_list(domain, [[1, 2, 3]], weights=[4])\n+        data1.ids[0]= 5\n+        data2 = data1.copy()\n+        with data2.unlocked():\n+            data2.X += 1\n+            data2.Y += 1\n+            data2.metas += 1\n+            data2.W += 1\n+            data2.ids += 1\n+        self.assertEqual(data1.X, [[1]])\n+        self.assertEqual(data1.Y, [[2]])\n+        self.assertEqual(data1.metas, [[3]])\n+        self.assertEqual(data1.W, [[4]])\n+        self.assertEqual(data1.ids, [[5]])\n+\n \n class TestTableLocking(unittest.TestCase):\n     @classmethod\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": NaN, "instance_id": "biolab__orange3-None", "issue_numbers": 0, "base_commit": "39627a03665cea2d1e7110cd1a7d8c1465385819", "patch": "diff --git a/Orange/widgets/visualize/utils/customizableplot.py b/Orange/widgets/visualize/utils/customizableplot.py\nindex afdc0ecfa..f9655a268 100644\n--- a/Orange/widgets/visualize/utils/customizableplot.py\n+++ b/Orange/widgets/visualize/utils/customizableplot.py\n@@ -28,8 +28,11 @@ def available_font_families() -> List:\n     if not QApplication.instance():\n         _ = QApplication(sys.argv)\n     fonts = QFontDatabase().families()\n-    default = fonts.pop(fonts.index(default_font_family()))\n+    default = default_font_family()\n+\n     defaults = [default]\n+    if default in fonts:\n+        fonts.remove(default)\n \n     guessed_name = default.split()[0]\n     i = 0\n@@ -263,7 +266,7 @@ class CommonParameterSetter:\n                 self.getAxis(axis), settings[self.TITLE_LABEL])\n \n         self.FONT_FAMILY_SETTING: SettingsType = {  # pylint: disable=invalid-name\n-            Updater.FONT_FAMILY_LABEL: (available_font_families(), QFont().family()),\n+            Updater.FONT_FAMILY_LABEL: (available_font_families(), default_font_family()),\n         }\n \n         self.FONT_SETTING: SettingsType = {  # pylint: disable=invalid-name\n.", "test_patch": "diff --git a/Orange/widgets/visualize/utils/tests/test_customizableplot.py b/Orange/widgets/visualize/utils/tests/test_customizableplot.py\nnew file mode 100644\nindex 000000000..5863ced5f\n--- /dev/null\n+++ b/Orange/widgets/visualize/utils/tests/test_customizableplot.py\n@@ -0,0 +1,38 @@\n+import unittest\n+from unittest.mock import patch, Mock\n+\n+from Orange.widgets.visualize.utils import customizableplot\n+\n+\n+class TestFonts(unittest.TestCase):\n+    def test_available_font_families(self):\n+        with patch.object(customizableplot, \"QFont\") as font, \\\n+                patch.object(customizableplot, \"QFontDatabase\") as db:\n+            font.return_value = Mock()\n+            font.return_value.family = Mock(return_value=\"mock regular\")\n+\n+            db.return_value = Mock()\n+            db.return_value.families = Mock(\n+                return_value=[\"a\", \".d\", \"e\", \".b\", \"mock regular\", \"c\"])\n+            self.assertEqual(customizableplot.available_font_families(),\n+                             [\"mock regular\", \"\", \"a\", \".b\", \"c\", \".d\", \"e\"])\n+\n+            db.return_value = Mock()\n+            db.return_value.families = Mock(\n+                return_value=[\"a\", \".d\", \"e\", \".b\", \"mock regular\",\n+                              \"mock bold\", \"mock italic\", \"c\", \"mock semi\"])\n+            self.assertEqual(customizableplot.available_font_families(),\n+                             [\"mock regular\", \"mock bold\", \"mock italic\",\n+                              \"mock semi\", \"\",\n+                              \"a\", \".b\", \"c\", \".d\", \"e\"])\n+\n+            # It seems it's possible that default font family does not exist\n+            # (see gh-5036)\n+            db.return_value.families.return_value = [\"a\", \".d\", \"e\", \".b\", \"c\"]\n+            self.assertEqual(customizableplot.available_font_families(),\n+                             [\"mock regular\", \"\", \"a\", \".b\", \"c\", \".d\", \"e\"])\n+            self.assertIn(customizableplot.default_font_family(),\n+                          customizableplot.available_font_families())\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5022.0, "instance_id": "biolab__orange3-5022", "issue_numbers": 0, "base_commit": "7e89a72d1650188531d1b5f487edbf4f51134122", "patch": "diff --git a/Orange/widgets/data/owtable.py b/Orange/widgets/data/owtable.py\nindex c5af55864..cc6be784e 100644\n--- a/Orange/widgets/data/owtable.py\n+++ b/Orange/widgets/data/owtable.py\n@@ -743,7 +743,7 @@ class OWDataTable(OWWidget):\n                 return f\"{n} {part}s\"\n \n         if slot is None:\n-            return \"No data.\"\n+            return [\"No data.\"]\n         summary = slot.summary\n         text = []\n         if isinstance(summary, ApproxSummary):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owtable.py b/Orange/widgets/data/tests/test_owtable.py\nindex 255878514..a0d7f3479 100644\n--- a/Orange/widgets/data/tests/test_owtable.py\n+++ b/Orange/widgets/data/tests/test_owtable.py\n@@ -169,5 +169,11 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n         self.assertEqual(info._StateInfo__output_summary.brief, \"\")\n         self.assertEqual(info._StateInfo__output_summary.details, no_output)\n \n+    def test_info(self):\n+        info_text = self.widget.info_text\n+        no_input = \"No data.\"\n+        self.assertEqual(info_text.text(), no_input)\n+\n+\n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6552.0, "instance_id": "biolab__orange3-6552", "issue_numbers": 0, "base_commit": "4ddff4145bd75c22bb565664cd6bf4114e2e4624", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 49e6af8c7..bdd4a6443 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -553,6 +553,8 @@ class Table(Sequence, Storage):\n                 setattr(self, \"Y\", no_view(state.pop(\"_Y\")))  # state[\"_Y\"] is a 2d array\n             self.__dict__.update(state)\n \n+        self._init_ids(self)\n+\n     def __getstate__(self):\n         # Compatibility with pickles before table locking:\n         # return the same state as before table lock\n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex 27c8e9986..45c3cd3e7 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -723,6 +723,16 @@ class TableTestCase(unittest.TestCase):\n         finally:\n             os.remove(\"iris.pickle\")\n \n+    def test_read_pickle_ids(self):\n+        table = data.Table(\"iris\")\n+        try:\n+            table.save(\"iris.pickle\")\n+            table1 = data.Table.from_file(\"iris.pickle\")\n+            table2 = data.Table.from_file(\"iris.pickle\")\n+            self.assertEqual(len(set(table1.ids) | set(table2.ids)), 300)\n+        finally:\n+            os.remove(\"iris.pickle\")\n+\n     def test_from_numpy(self):\n         a = np.arange(20, dtype=\"d\").reshape((4, 5)).copy()\n         m = np.arange(4, dtype=\"d\").reshape((4, 1)).copy()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5466.0, "instance_id": "biolab__orange3-5466", "issue_numbers": 0, "base_commit": "f02f1025f82476df2eb6eb4136572c163b07d6c4", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 401902f4a..b37913164 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -2,6 +2,7 @@\n from unittest.mock import patch\n \n import numpy as np\n+from pandas.core.dtypes.common import is_string_dtype\n from scipy import sparse as sp\n from scipy.sparse import csr_matrix\n import pandas as pd\n@@ -170,9 +171,20 @@ def vars_from_df(df, role=None, force_nominal=False):\n         _role = role\n \n     # If df index is not a simple RangeIndex (or similar), put it into data\n-    if not any(str(i).startswith('_o') for i in df.index) \\\n-            and not (df.index.is_integer() and (df.index.is_monotonic_increasing\n-                                                or df.index.is_monotonic_decreasing)):\n+    if (\n+        # not range-like index - test first to skip slow startswith(_o) check\n+        not (\n+            df.index.is_integer()\n+            and (df.index.is_monotonic_increasing or df.index.is_monotonic_decreasing)\n+        )\n+        # check that it does not contain Orange index\n+        and (\n+            # startswith is slow (for long drs) - firs check if col has strings\n+            isinstance(df.index, pd.MultiIndex)\n+            or not is_string_dtype(df.index)\n+            or not any(str(i).startswith(\"_o\") for i in df.index)\n+        )\n+    ):\n         df = df.reset_index()\n \n     Xcols, Ycols, Mcols = [], [], []\n@@ -180,6 +192,7 @@ def vars_from_df(df, role=None, force_nominal=False):\n     attrs, class_vars, metas = [], [], []\n \n     contains_strings = _role == Role.Meta\n+\n     for column in df.columns:\n         s = df[column]\n         if hasattr(df, 'orange_variables') and column in df.orange_variables:\n@@ -203,12 +216,16 @@ def vars_from_df(df, role=None, force_nominal=False):\n                                    discrete.categories.astype(str).tolist())\n             attrs.append(var)\n             Xcols.append(column)\n-            Xexpr.append(lambda s, _: np.asarray(\n-                s.astype('category').cat.codes.replace(-1, np.nan)\n-            ))\n+\n+            def to_cat(s, _):\n+                x = s.astype(\"category\").cat.codes\n+                # it is same than x.replace(-1, np.nan), but much faster\n+                x = x.where(x != -1, np.nan)\n+                return np.asarray(x)\n+\n+            Xexpr.append(to_cat)\n         elif _is_datetime(s):\n             var = TimeVariable(str(column))\n-            s = pd.to_datetime(s, infer_datetime_format=True)\n             attrs.append(var)\n             Xcols.append(column)\n             Xexpr.append(lambda s, v: np.asarray(\n@@ -281,13 +298,21 @@ def table_from_frame(df, *, force_nominal=False):\n     XYM, domain = vars_from_df(df, force_nominal=force_nominal)\n \n     if hasattr(df, 'orange_weights') and hasattr(df, 'orange_attributes'):\n-        W = [df.orange_weights[i] for i in df.index\n-             if i in df.orange_weights]\n+        W = [df.orange_weights[i] for i in df.index if i in df.orange_weights]\n         if len(W) != len(df.index):\n             W = None\n         attributes = df.orange_attributes\n-        ids = [int(i[2:]) if str(i).startswith('_o') else Table.new_id()\n-               for i in df.index]\n+        if isinstance(df.index, pd.MultiIndex) or not is_string_dtype(df.index):\n+            # we can skip checking for Orange indices when MultiIndex an when\n+            # not string dtype and so speedup the conversion\n+            ids = None\n+        else:\n+            ids = [\n+                int(i[2:])\n+                if str(i).startswith(\"_o\") and i[2:].isdigit()\n+                else Table.new_id()\n+                for i in df.index\n+            ]\n     else:\n         W = None\n         attributes = None\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 6182c7023..5a854c444 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -69,6 +69,15 @@ class TestPandasCompat(unittest.TestCase):\n         self.assertEqual(names, ['index', '1', '2'])\n         self.assertEqual(types, [DiscreteVariable, ContinuousVariable, TimeVariable])\n \n+    def test_table_from_frame_keep_ids(self):\n+        \"\"\" Test if indices are correctly transferred to Table\"\"\"\n+        from Orange.data.pandas_compat import table_from_frame\n+        df = OrangeDataFrame(Table('iris')[:6])\n+        df.index = [1, \"_oa\", \"_o\", \"1\", \"_o20\", \"_o30\"]\n+        table = table_from_frame(df)\n+        self.assertEqual(table.ids[-2:].tolist(), [20, 30])\n+        self.assertTrue(np.issubdtype(table.ids.dtype, np.number))\n+\n     def test_table_to_frame(self):\n         from Orange.data.pandas_compat import table_to_frame\n         table = Table(\"iris\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5620.0, "instance_id": "biolab__orange3-5620", "issue_numbers": 0, "base_commit": "2b234200f758c326bf414415b235a96b239b8b1a", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex ffaaa09d9..95e9e92cc 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -386,11 +386,13 @@ def table_from_frames(xdf, ydf, mdf):\n     XYM = (xXYM[0], yXYM[1], mXYM[2])\n     domain = Domain(xDomain.attributes, yDomain.class_vars, mDomain.metas)\n \n-    index_iter = (filter(lambda ind: ind.startswith('_o'),\n-                         set(df.index[i] for df in dfs))\n-                  for i in range(len(xdf.shape[0])))\n-    ids = (i[0] if len(i) == 1 else Table.new_id()\n-           for i in index_iter)\n+    indexes = [df.index for df in dfs]\n+    ids = [\n+        int(x[2:])\n+        if str(x).startswith(\"_o\") and x[2:].isdigit() and x == y == m\n+        else Table.new_id()\n+        for x, y, m in zip(*indexes)\n+    ]\n \n     attributes = {}\n     W = None\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 8fb8191eb..f8649f113 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -428,6 +428,21 @@ class TestPandasCompat(unittest.TestCase):\n             self.assertEqual(len(df), len(table), assert_message)\n             self.assertEqual(len(df.columns), len(table.domain.variables), assert_message)\n \n+    def test_table_from_frames(self):\n+        table = Table(\"brown-selected\")  # dataset with all X, Y and metas\n+        table.ids = np.arange(100, len(table) + 100, 1, dtype=int)\n+\n+        x, y, m = table.to_pandas_dfs()\n+        new_table = Table.from_pandas_dfs(x, y, m)\n+\n+        np.testing.assert_array_equal(table.X, new_table.X)\n+        np.testing.assert_array_equal(table.Y, new_table.Y)\n+        np.testing.assert_array_equal(table.metas, new_table.metas)\n+        np.testing.assert_array_equal(table.ids, new_table.ids)\n+        self.assertTupleEqual(table.domain.attributes, new_table.domain.attributes)\n+        self.assertTupleEqual(table.domain.metas, new_table.domain.metas)\n+        self.assertEqual(table.domain.class_var, new_table.domain.class_var)\n+\n \n class TestTablePandas(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5812.0, "instance_id": "biolab__orange3-5812", "issue_numbers": 0, "base_commit": "fd2186af739c95dbe63dc16a6ddd85d821302b69", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 6fd95fd35..dddb4c607 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1077,11 +1077,6 @@ class Table(Sequence, Storage):\n         reader.select_sheet(sheet)\n         data = reader.read()\n \n-        # Readers return plain table. Make sure to cast it to appropriate\n-        # (subclass) type\n-        if cls != data.__class__:\n-            data = cls(data)\n-\n         # no need to call _init_ids as fuctions from .io already\n         # construct a table with .ids\n \n@@ -1093,8 +1088,6 @@ class Table(Sequence, Storage):\n         from Orange.data.io import UrlReader\n         reader = UrlReader(url)\n         data = reader.read()\n-        if cls != data.__class__:\n-            data = cls(data)\n         return data\n \n     # Helper function for __setitem__:\n.", "test_patch": "diff --git a/Orange/data/tests/test_table.py b/Orange/data/tests/test_table.py\nindex 52caca505..0a607b8f4 100644\n--- a/Orange/data/tests/test_table.py\n+++ b/Orange/data/tests/test_table.py\n@@ -385,6 +385,16 @@ class TestTableLocking(unittest.TestCase):\n         with unpickled.unlocked():\n             unpickled.X[0, 0] = 42\n \n+    @staticmethod\n+    def test_unlock_table_derived():\n+        # pylint: disable=abstract-method\n+        class ExtendedTable(Table):\n+            pass\n+\n+        t = ExtendedTable.from_file(\"iris\")\n+        with t.unlocked():\n+            pass\n+\n \n class TestTableFilters(unittest.TestCase):\n     def setUp(self):\ndiff --git a/Orange/tests/test_naive_bayes.py b/Orange/tests/test_naive_bayes.py\nindex 37c5a52d3..9c20e76a7 100644\n--- a/Orange/tests/test_naive_bayes.py\n+++ b/Orange/tests/test_naive_bayes.py\n@@ -18,7 +18,10 @@ from Orange.tests import test_filename\n \n \n class NotATable(Table):  # pylint: disable=too-many-ancestors,abstract-method\n-    pass\n+    @classmethod\n+    def from_file(cls, *args, **kwargs):\n+        table = super().from_file(*args, **kwargs)\n+        return cls(table)\n \n \n class TestNaiveBayesLearner(unittest.TestCase):\ndiff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex 7963a45bb..bf2ebfead 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -2167,19 +2167,6 @@ class InterfaceTest(unittest.TestCase):\n                     self.table[i, j] = new_value\n                     self.assertEqual(self.table[i, j], new_value)\n \n-    def test_subclasses(self):\n-        from pathlib import Path\n-\n-        class _ExtendedTable(data.Table):\n-            pass\n-\n-        data_file = _ExtendedTable('iris')\n-        data_url = _ExtendedTable.from_url(\n-            Path(os.path.dirname(__file__), 'datasets/test1.tab').as_uri())\n-\n-        self.assertIsInstance(data_file, _ExtendedTable)\n-        self.assertIsInstance(data_url, _ExtendedTable)\n-\n \n class TestTableStats(TableTests):\n     def test_get_nan_frequency(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4502.0, "instance_id": "biolab__orange3-4502", "issue_numbers": 0, "base_commit": "17e9691cee9100e6fd2c4798d06e71aa97ecbbfa", "patch": "diff --git a/Orange/widgets/data/owpurgedomain.py b/Orange/widgets/data/owpurgedomain.py\nindex 74b99dc04..07e12dbc0 100644\n--- a/Orange/widgets/data/owpurgedomain.py\n+++ b/Orange/widgets/data/owpurgedomain.py\n@@ -5,6 +5,7 @@ from Orange.widgets import gui, widget\n from Orange.widgets.settings import Setting\n from Orange.widgets.utils.sql import check_sql_input\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n \n \n@@ -100,11 +101,16 @@ class OWPurgeDomain(widget.OWWidget):\n         gui.auto_send(self.buttonsArea, self, \"autoSend\")\n         gui.rubber(self.controlArea)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n     @Inputs.data\n     @check_sql_input\n     def setData(self, dataset):\n         if dataset is not None:\n             self.data = dataset\n+            self.info.set_input_summary(len(dataset),\n+                                        format_summary_details(dataset))\n             self.unconditional_commit()\n         else:\n             self.removedAttrs = \"-\"\n@@ -117,6 +123,8 @@ class OWPurgeDomain(widget.OWWidget):\n             self.reducedMetas = \"-\"\n             self.Outputs.data.send(None)\n             self.data = None\n+            self.info.set_input_summary(self.info.NoInput)\n+            self.info.set_output_summary(self.info.NoOutput)\n \n     def optionsChanged(self):\n         self.commit()\n@@ -149,6 +157,8 @@ class OWPurgeDomain(widget.OWWidget):\n         self.removedMetas = meta_res['removed']\n         self.reducedMetas = meta_res['reduced']\n \n+        self.info.set_output_summary(len(cleaned),\n+                                     format_summary_details(cleaned))\n         self.Outputs.data.send(cleaned)\n \n     def send_report(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpurgedomain.py b/Orange/widgets/data/tests/test_owpurgedomain.py\nnew file mode 100644\nindex 000000000..dae381883\n--- /dev/null\n+++ b/Orange/widgets/data/tests/test_owpurgedomain.py\n@@ -0,0 +1,32 @@\n+# pylint: disable=unsubscriptable-object\n+from unittest.mock import Mock\n+\n+from Orange.data import Table\n+from Orange.widgets.data.owpurgedomain import OWPurgeDomain\n+from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.utils.state_summary import format_summary_details\n+\n+\n+class TestOWPurgeDomain(WidgetTest):\n+    def setUp(self):\n+        self.widget = self.create_widget(OWPurgeDomain)\n+        self.iris = Table(\"iris\")\n+\n+    def test_summary(self):\n+        \"\"\"Check if the status bar is updated when data is received\"\"\"\n+        data = self.iris\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5478.0, "instance_id": "biolab__orange3-5478", "issue_numbers": 0, "base_commit": "96fda39bb0dc45a6bd0116cfaf19047d12fcdac4", "patch": "diff --git a/Orange/widgets/data/owcreateclass.py b/Orange/widgets/data/owcreateclass.py\nindex bbf200967..d05579c16 100644\n--- a/Orange/widgets/data/owcreateclass.py\n+++ b/Orange/widgets/data/owcreateclass.py\n@@ -152,9 +152,14 @@ def unique_in_order_mapping(a):\n     - unique elements of the input list (in the order of appearance)\n     - indices of the input list onto the returned uniques\n     \"\"\"\n-    u, idx, inv = np.unique(a, return_index=True, return_inverse=True)\n-    unique_in_order = u[np.argsort(idx)]\n-    mapping = np.argsort(idx)[inv]\n+    first_position = {}\n+    unique_in_order = []\n+    mapping = []\n+    for e in a:\n+        if e not in first_position:\n+            first_position[e] = len(unique_in_order)\n+            unique_in_order.append(e)\n+        mapping.append(first_position[e])\n     return unique_in_order, mapping\n \n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcreateclass.py b/Orange/widgets/data/tests/test_owcreateclass.py\nindex 640addd72..7419bbae4 100644\n--- a/Orange/widgets/data/tests/test_owcreateclass.py\n+++ b/Orange/widgets/data/tests/test_owcreateclass.py\n@@ -89,6 +89,15 @@ class TestHelpers(unittest.TestCase):\n         u, m = unique_in_order_mapping([2, 1, 2, 3])\n         np.testing.assert_equal(u, [2, 1, 3])\n         np.testing.assert_equal(m, [0, 1, 0, 2])\n+        u, m = unique_in_order_mapping([2, 3, 1])\n+        np.testing.assert_equal(u, [2, 3, 1])\n+        np.testing.assert_equal(m, [0, 1, 2])\n+        u, m = unique_in_order_mapping([2, 3, 1, 1])\n+        np.testing.assert_equal(u, [2, 3, 1])\n+        np.testing.assert_equal(m, [0, 1, 2, 2])\n+        u, m = unique_in_order_mapping([2, 3, 1, 2])\n+        np.testing.assert_equal(u, [2, 3, 1])\n+        np.testing.assert_equal(m, [0, 1, 2, 0])\n \n     def test_value_from_string_substring(self):\n         trans = ValueFromStringSubstring(StringVariable(\"x\"), self.patterns)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4669.0, "instance_id": "biolab__orange3-4669", "issue_numbers": 0, "base_commit": "f831f0076ed34d27605fee7645369ab44059ab3d", "patch": "diff --git a/Orange/widgets/data/owcolor.py b/Orange/widgets/data/owcolor.py\nindex 0381cf128..2515ad1ed 100644\n--- a/Orange/widgets/data/owcolor.py\n+++ b/Orange/widgets/data/owcolor.py\n@@ -7,6 +7,7 @@ from AnyQt.QtGui import QColor, QFont, QBrush\n from AnyQt.QtWidgets import QHeaderView, QColorDialog, QTableView, QComboBox\n \n import Orange\n+from Orange.preprocess.transformation import Identity\n from Orange.util import color_to_hex\n from Orange.widgets import widget, settings, gui\n from Orange.widgets.gui import HorizontalGridDelegate\n@@ -82,7 +83,8 @@ class DiscAttrDesc(AttrDesc):\n         self.new_values[i] = value\n \n     def create_variable(self):\n-        new_var = self.var.copy(name=self.name, values=self.values)\n+        new_var = self.var.copy(name=self.name, values=self.values,\n+                                compute_value=Identity(self.var))\n         new_var.colors = np.asarray(self.colors)\n         return new_var\n \n@@ -114,7 +116,8 @@ class ContAttrDesc(AttrDesc):\n         self.new_palette_name = palette_name\n \n     def create_variable(self):\n-        new_var = self.var.copy(name=self.name)\n+        new_var = self.var.copy(name=self.name,\n+                                compute_value=Identity(self.var))\n         new_var.attributes[\"palette\"] = self.palette_name\n         return new_var\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcolor.py b/Orange/widgets/data/tests/test_owcolor.py\nindex 8f133ff75..afbb0c597 100644\n--- a/Orange/widgets/data/tests/test_owcolor.py\n+++ b/Orange/widgets/data/tests/test_owcolor.py\n@@ -8,6 +8,7 @@ from AnyQt.QtCore import Qt, QSize, QRect\n from AnyQt.QtGui import QBrush\n \n from Orange.data import Table, ContinuousVariable, DiscreteVariable, Domain\n+from Orange.preprocess.transformation import Identity\n from Orange.util import color_to_hex\n from Orange.widgets.utils import colorpalettes\n from Orange.widgets.utils.state_summary import format_summary_details\n@@ -58,11 +59,15 @@ class DiscAttrTest(unittest.TestCase):\n         self.assertEqual(var.name, \"z\")\n         self.assertEqual(var.values, (\"a\", \"d\", \"c\"))\n         np.testing.assert_equal(var.colors, [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+        self.assertIsInstance(var.compute_value, Identity)\n+        self.assertIs(var.compute_value.variable, desc.var)\n \n         palette = desc.var.attributes[\"palette\"] = object()\n         var = desc.create_variable()\n         self.assertIs(desc.var.attributes[\"palette\"], palette)\n         self.assertFalse(hasattr(var.attributes, \"palette\"))\n+        self.assertIsInstance(var.compute_value, Identity)\n+        self.assertIs(var.compute_value.variable, desc.var)\n \n \n class ContAttrDesc(unittest.TestCase):\n@@ -89,11 +94,15 @@ class ContAttrDesc(unittest.TestCase):\n         self.assertIsInstance(var, ContinuousVariable)\n         self.assertEqual(var.name, \"z\")\n         self.assertEqual(var.palette.name, palette_name)\n+        self.assertIsInstance(var.compute_value, Identity)\n+        self.assertIs(var.compute_value.variable, desc.var)\n \n         colors = desc.var.attributes[\"colors\"] = object()\n         var = desc.create_variable()\n         self.assertIs(desc.var.attributes[\"colors\"], colors)\n         self.assertFalse(hasattr(var.attributes, \"colors\"))\n+        self.assertIsInstance(var.compute_value, Identity)\n+        self.assertIs(var.compute_value.variable, desc.var)\n \n \n class BaseTestColorTableModel:\n@@ -121,7 +130,6 @@ class BaseTestColorTableModel:\n         index = self.model.index(2, 0)\n         self.assertEqual(data(index, Qt.DisplayRole), self.descs[2].name)\n \n-\n     def test_set_data(self):\n         emit = Mock()\n         try:\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6123.0, "instance_id": "biolab__orange3-6123", "issue_numbers": 0, "base_commit": "22565bda0279ac369cbef8a2d82d6ba9d35b5e9c", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex ccb73061e..c69450f60 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -2828,7 +2828,15 @@ class ToContinuousTransform(Transformation):\n \n def datetime_to_epoch(dti: pd.DatetimeIndex, only_time) -> np.ndarray:\n     \"\"\"Convert datetime to epoch\"\"\"\n-    delta = dti - (dti.normalize() if only_time else pd.Timestamp(\"1970-01-01\"))\n+    # when dti has timezone info also the subtracted timestamp must have it\n+    # otherwise subtracting fails\n+    initial_ts = pd.Timestamp(\"1970-01-01\", tz=None if dti.tz is None else \"UTC\")\n+    # pandas in versions before 1.4 don't support subtracting different timezones\n+    # remove next two lines when read-the-docs start supporting config files\n+    # for subprojects, or they change default python version to 3.8\n+    if dti.tz is not None:\n+        dti = dti.tz_convert(\"UTC\")\n+    delta = dti - (dti.normalize() if only_time else initial_ts)\n     return (delta / pd.Timedelta(\"1s\")).values\n \n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex b4a7f7342..01b9d5fa4 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -921,13 +921,18 @@ class TestReinterpretTransforms(TestCase):\n         times = (\n             [\"07.02.2022\", \"18.04.2021\"],  # date only\n             [\"07.02.2022 01:02:03\", \"18.04.2021 01:02:03\"],  # datetime\n+            # datetime with timezone\n+            [\"2021-02-08 01:02:03+01:00\", \"2021-02-07 01:02:03+01:00\"],\n             [\"010203\", \"010203\"],  # time\n             [\"02-07\", \"04-18\"],\n         )\n-        formats = [\"25.11.2021\", \"25.11.2021 00:00:00\", \"000000\", \"11-25\"]\n+        formats = [\n+            \"25.11.2021\", \"25.11.2021 00:00:00\", \"2021-11-25 00:00:00\", \"000000\", \"11-25\"\n+        ]\n         expected = [\n             [d(\"2022-02-07\"), d(\"2021-04-18\")],\n             [d(\"2022-02-07 01:02:03\"), d(\"2021-04-18 01:02:03\")],\n+            [d(\"2021-02-08 01:02:03+0100\"), d(\"2021-02-07 01:02:03+0100\")],\n             [d(\"01:02:03\"), d(\"01:02:03\")],\n             [d(\"1900-02-07\"), d(\"1900-04-18\")],\n         ]\n@@ -952,6 +957,16 @@ class TestReinterpretTransforms(TestCase):\n             np.array(list(chain(expected, expected)), dtype=float).transpose()\n         )\n \n+    def test_raise_pandas_version(self):\n+        \"\"\"\n+        When this test start to fail:\n+        - remove this test\n+        - remove if clause in datetime_to_epoch function and supporting comments\n+        - set pandas dependency version to pandas>=1.4\n+        \"\"\"\n+        from datetime import datetime\n+        self.assertLess(datetime.today(), datetime(2023, 1, 1))\n+\n     def test_reinterpret_string(self):\n         table = self.data_str\n         domain = table.domain\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4456.0, "instance_id": "biolab__orange3-4456", "issue_numbers": 0, "base_commit": "4462394d84f5c53e8982029ff6f53d3366483c8b", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex 015437d08..c13a35075 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -39,6 +39,7 @@ from Orange.preprocess.transformation import Transformation, Identity, Lookup\n from Orange.widgets import widget, gui, settings\n from Orange.widgets.utils import itemmodels\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n \n ndarray = np.ndarray  # pylint: disable=invalid-name\n@@ -1606,6 +1607,9 @@ class OWEditDomain(widget.OWWidget):\n         mainlayout.addWidget(bbox)\n         self.variables_view.setFocus(Qt.NoFocusReason)  # initial focus\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n     @Inputs.data\n     def set_data(self, data):\n         \"\"\"Set input dataset.\"\"\"\n@@ -1614,9 +1618,13 @@ class OWEditDomain(widget.OWWidget):\n         self.data = data\n \n         if self.data is not None:\n+            self.info.set_input_summary(len(data),\n+                                        format_summary_details(data))\n             self.setup_model(data)\n             self.openContext(self.data)\n             self._restore()\n+        else:\n+            self.info.set_input_summary(self.info.NoInput)\n \n         self.commit()\n \n@@ -1796,6 +1804,7 @@ class OWEditDomain(widget.OWWidget):\n         data = self.data\n         if data is None:\n             self.Outputs.data.send(None)\n+            self.info.set_output_summary(self.info.NoOutput)\n             return\n         model = self.variables_model\n \n@@ -1808,6 +1817,8 @@ class OWEditDomain(widget.OWWidget):\n         state = [state(i) for i in range(model.rowCount())]\n         if all(tr is None or not tr for _, tr in state):\n             self.Outputs.data.send(data)\n+            self.info.set_output_summary(len(data),\n+                                         format_summary_details(data))\n             return\n \n         output_vars = []\n@@ -1824,6 +1835,7 @@ class OWEditDomain(widget.OWWidget):\n         if len(output_vars) != len({v.name for v in output_vars}):\n             self.Error.duplicate_var_name()\n             self.Outputs.data.send(None)\n+            self.info.set_output_summary(self.info.NoOutput)\n             return\n \n         domain = data.domain\n@@ -1840,6 +1852,8 @@ class OWEditDomain(widget.OWWidget):\n         domain = Orange.data.Domain(Xs, Ys, Ms)\n         new_data = data.transform(domain)\n         self.Outputs.data.send(new_data)\n+        self.info.set_output_summary(len(new_data),\n+                                     format_summary_details(new_data))\n \n     def sizeHint(self):\n         sh = super().sizeHint()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex 79c0d29f7..51ff26c2a 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -3,6 +3,7 @@\n import pickle\n from itertools import product\n from unittest import TestCase\n+from unittest.mock import Mock\n \n import numpy as np\n from numpy.testing import assert_array_equal\n@@ -35,6 +36,7 @@ from Orange.widgets.data.oweditdomain import (\n from Orange.widgets.data.owcolor import OWColor, ColorRole\n from Orange.widgets.tests.base import WidgetTest, GuiTest\n from Orange.tests import test_filename, assert_array_nanequal\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n MArray = np.ma.MaskedArray\n \n@@ -244,6 +246,45 @@ class TestOWEditDomain(WidgetTest):\n         tr = model.data(model.index(4), TransformRole)\n         self.assertEqual(tr, [AsString(), Rename(\"Z\")])\n \n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        data = Table(\"iris\")\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+\n+        def enter_text(widget, text):\n+            # type: (QLineEdit, str) -> None\n+            widget.selectAll()\n+            QTest.keyClick(widget, Qt.Key_Delete)\n+            QTest.keyClicks(widget, text)\n+            QTest.keyClick(widget, Qt.Key_Return)\n+\n+        editor = self.widget.findChild(ContinuousVariableEditor)\n+        enter_text(editor.name_edit, \"sepal height\")\n+        self.widget.commit()\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+        output_sum.reset_mock()\n+        enter_text(editor.name_edit, \"sepal width\")\n+        self.widget.commit()\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n \n class TestEditors(GuiTest):\n     def test_variable_editor(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6959.0, "instance_id": "biolab__orange3-6959", "issue_numbers": 0, "base_commit": "f70085b93b88bae915e1dc68a9016806b673336c", "patch": "diff --git a/Orange/data/io_base.py b/Orange/data/io_base.py\nindex 6b74e72a9..6a6d18920 100644\n--- a/Orange/data/io_base.py\n+++ b/Orange/data/io_base.py\n@@ -169,17 +169,27 @@ class _TableHeader:\n              e.g. d#sex,c#age,cC#IQ\n         \"\"\"\n \n-        def is_flag(x):\n-            return bool(cls._type_from_flag([x])[0] and\n-                        _RE_TYPES.match(cls._type_from_flag([x])[0]) or\n-                        Flags.RE_ALL.match(cls._flag_from_flag([x])[0]))\n-\n-        flags, names = zip(*[i.split(cls.HEADER1_FLAG_SEP, 1)\n-                             if cls.HEADER1_FLAG_SEP in i and\n-                             is_flag(i.split(cls.HEADER1_FLAG_SEP)[0])\n-                             else ('', i)\n-                             for i in headers[0]])\n-        names = list(names)\n+        roles = \"\".join([f for f in Flags.ALL.values() if len(f) == 1])  # cimw\n+        types = \"\".join([t for t in flatten(getattr(vartype, 'TYPE_HEADERS')\n+                                            for vartype in Variable.registry.values())\n+                         if len(t) == 1]).upper()  # CNDST\n+\n+        res = ('^(?:('\n+               f'[{roles}{types}]|'\n+               f'(?:[{roles}][{types}])|'\n+               f'(?:[{types}][{roles}])'\n+               ')#)?(.*)')\n+\n+        header1_re = re.compile(res)\n+\n+        flags = []\n+        names = []\n+        for i in headers[0]:\n+            m = header1_re.match(i)\n+            f, n = m.group(1), m.group(2)\n+            flags.append('' if f is None else f)\n+            names.append(n)\n+\n         return names, cls._type_from_flag(flags), cls._flag_from_flag(flags)\n \n     @classmethod\n.", "test_patch": "diff --git a/Orange/data/tests/test_io_base.py b/Orange/data/tests/test_io_base.py\nindex ba272c4d6..ed28f6b1f 100644\n--- a/Orange/data/tests/test_io_base.py\n+++ b/Orange/data/tests/test_io_base.py\n@@ -70,6 +70,16 @@ class TestTableHeader(InitTestData):\n         self.assertListEqual(types, types_)\n         self.assertListEqual(flags, flags_)\n \n+    def test_get_header_data_1_hashes(self):\n+        names, types, flags = _TableHeader.create_header_data(\n+            [[\"Some long text#and here\", \"vd#Invalid spec\", \"C#Valid spec\"]])\n+        names_ = [\"Some long text#and here\", \"vd#Invalid spec\", \"Valid spec\"]\n+        types_ = [\"\", \"\", \"c\"]\n+        flags_ = [\"\", \"\", \"\"]\n+        self.assertListEqual(names, names_)\n+        self.assertListEqual(types, types_)\n+        self.assertListEqual(flags, flags_)\n+\n     def test_get_header_data_3(self):\n         names, types, flags = _TableHeader.create_header_data(self.header3[:3])\n         self.assertListEqual(names, [\"a\", \"b\", \"c\", \"d\", \"w\", \"e\", \"f\", \"g\"])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6670.0, "instance_id": "biolab__orange3-6670", "issue_numbers": 0, "base_commit": "dcd7f72cf574137c300b88c459963b800fbe2c60", "patch": "diff --git a/Orange/data/io_base.py b/Orange/data/io_base.py\nindex 521454f3e..914d1d337 100644\n--- a/Orange/data/io_base.py\n+++ b/Orange/data/io_base.py\n@@ -15,6 +15,7 @@ from fnmatch import fnmatch\n from glob import glob\n \n import numpy as np\n+import pandas\n \n from Orange.data import Table, Domain, Variable, DiscreteVariable, \\\n     StringVariable, ContinuousVariable, TimeVariable\n@@ -665,7 +666,7 @@ class _FileWriter:\n         elif var.is_discrete:\n             return lambda value: \"\" if isnan(value) else var.values[int(value)]\n         elif var.is_string:\n-            return lambda value: value\n+            return lambda value: \"\" if pandas.isnull(value) else value\n         else:\n             return var.repr_val\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_io.py b/Orange/data/tests/test_io.py\nindex 061d97661..01187f26b 100644\n--- a/Orange/data/tests/test_io.py\n+++ b/Orange/data/tests/test_io.py\n@@ -122,7 +122,7 @@ class TestWriters(unittest.TestCase):\n             self.domain,\n             np.array([[1, 0.5], [2, np.nan], [np.nan, 1.0625]]),\n             np.array([3, 1, 7]),\n-            np.array([\"foo bar baz\".split()]).T\n+            np.array([[\"foo\", \"bar\", np.nan]], dtype=object).T\n         )\n \n     def test_write_tab(self):\n@@ -137,7 +137,7 @@ continuous\\tstring\\tx y z\\tcontinuous\n class\\tmeta\\t\\t\n 3\\tfoo\\ty\\t0.500\n 1\\tbar\\tz\\t\n-7\\tbaz\\t\\t1.06250\"\"\".strip())\n+7\\t\\t\\t1.06250\"\"\".strip())\n         finally:\n             os.remove(fname)\n \n@@ -149,7 +149,8 @@ class\\tmeta\\t\\t\n             data = ExcelReader(fname).read()\n             np.testing.assert_equal(data.X, self.data.X)\n             np.testing.assert_equal(data.Y, self.data.Y)\n-            np.testing.assert_equal(data.metas, self.data.metas)\n+            np.testing.assert_equal(data.metas[:2], self.data.metas[:2])\n+            self.assertEqual(data.metas[2, 0], \"\")\n             np.testing.assert_equal(data.domain, self.data.domain)\n         finally:\n             os.remove(fname)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4100.0, "instance_id": "biolab__orange3-4100", "issue_numbers": 0, "base_commit": "98060f2d55b9f7eb2e3a1545d2439392025415ef", "patch": "diff --git a/Orange/widgets/data/owmergedata.py b/Orange/widgets/data/owmergedata.py\nindex 9f963ed6b..6d1e65f38 100644\n--- a/Orange/widgets/data/owmergedata.py\n+++ b/Orange/widgets/data/owmergedata.py\n@@ -579,7 +579,10 @@ class OWMergeData(widget.OWWidget):\n                 domain.metas[:len(lt_dom.metas)] + xt_dom.metas)\n             extras = self.extra_data[rightu].transform(right_domain)\n             X = np.vstack((X, extras.X))\n-            Y = np.vstack((Y, extras.Y))\n+            extras_Y = extras.Y\n+            if extras_Y.ndim == 1:\n+                extras_Y = extras_Y.reshape(-1, 1)\n+            Y = np.vstack((Y, extras_Y))\n             metas = np.vstack((metas, extras.metas))\n         table = Orange.data.Table.from_numpy(domain, X, Y, metas)\n         table.name = getattr(self.data, 'name', '')\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owmergedata.py b/Orange/widgets/data/tests/test_owmergedata.py\nindex e891cbf05..00a910c84 100644\n--- a/Orange/widgets/data/tests/test_owmergedata.py\n+++ b/Orange/widgets/data/tests/test_owmergedata.py\n@@ -470,6 +470,33 @@ class TestOWMergeData(WidgetTest):\n         np.testing.assert_equal(\n             out.ids, np.hstack((self.dataA.ids[1:], self.dataA.ids[:1])))\n \n+    def test_output_merge_by_ids_outer_single_class(self):\n+        \"\"\"Check output for merging option 'Concatenate tables, merge rows' by\n+        Source position (index) when all extra rows are matched and there is\n+        only a single class variable in the output\"\"\"\n+        domainA = self.dataA.domain\n+        values = domainA.class_var.values\n+        domain = Domain(domainA.attributes,\n+                        DiscreteVariable(\"clsA\", values),\n+                        domainA.metas)\n+        result = Table(domain,\n+                       np.array([[0, 0], [1, 1], [2, 0], [3, np.nan]]),\n+                       np.array([[0], [1], [2], [np.nan]]),\n+                       np.array([[0.0, \"m1\"], [1.0, \"m2\"], [np.nan, \"m3\"],\n+                                 [0.0, \"\"]]).astype(object))\n+        self.widget.attr_boxes.set_state([(INSTANCEID, INSTANCEID)])\n+        self.widget.merging = 2\n+        self.widget.controls.merging.buttons[self.widget.OuterJoin].click()\n+        # When Y is a single column, Table.Y returns a vector, not a 2d array,\n+        # which cause an exception in outer_join's vstack for Y if extra data\n+        # has no unmatched rows.\n+        # This test also checks this condition.\n+        self.send_signal(self.widget.Inputs.data, self.dataA[:, [0, \"clsA\", -1]])\n+        self.send_signal(self.widget.Inputs.extra_data, self.dataA[:3, [1, -2]])\n+        out = self.get_output(self.widget.Outputs.data)\n+        self.assertTablesEqual(out, result)\n+        np.testing.assert_equal(out.ids, self.dataA.ids)\n+\n     def test_output_merge_by_index_left(self):\n         \"\"\"Check output for merging option 'Append columns from Extra Data' by\n         Position (index)\"\"\"\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3864.0, "instance_id": "biolab__orange3-3864", "issue_numbers": 0, "base_commit": "3e9b675432361103cf2a8412ac192f481f106fe4", "patch": "diff --git a/Orange/preprocess/discretize.py b/Orange/preprocess/discretize.py\nindex 26c753c86..33c106a19 100644\n--- a/Orange/preprocess/discretize.py\n+++ b/Orange/preprocess/discretize.py\n@@ -6,7 +6,7 @@ import scipy.sparse as sp\n from Orange.data import DiscreteVariable, Domain\n from Orange.data.sql.table import SqlTable\n from Orange.preprocess.util import _RefuseDataInConstructor\n-from Orange.statistics import distribution, contingency\n+from Orange.statistics import distribution, contingency, util as ut\n from Orange.statistics.basic_stats import BasicStats\n from Orange.util import Reprable\n from .transformation import Transformation\n@@ -160,7 +160,7 @@ class EqualWidth(Discretization):\n             else:\n                 values = data[:, attribute]\n                 values = values.X if values.X.size else values.Y\n-                min, max = np.nanmin(values), np.nanmax(values)\n+                min, max = ut.nanmin(values), ut.nanmax(values)\n                 points = self._split_eq_width(min, max)\n         return Discretizer.create_discretized_var(\n             data.domain[attribute], points)\n.", "test_patch": "diff --git a/Orange/tests/test_discretize.py b/Orange/tests/test_discretize.py\nindex 9d35a0475..ff755cc58 100644\n--- a/Orange/tests/test_discretize.py\n+++ b/Orange/tests/test_discretize.py\n@@ -13,6 +13,9 @@ from Orange.data import Table, Instance, Domain, ContinuousVariable, DiscreteVar\n \n \n # noinspection PyPep8Naming\n+from Orange.widgets.tests.utils import table_dense_sparse\n+\n+\n class TestEqualFreq(TestCase):\n     def test_equifreq_with_too_few_values(self):\n         s = [0] * 50 + [1] * 50\n@@ -53,9 +56,10 @@ class TestEqualWidth(TestCase):\n         self.assertEqual(len(dvar.values), 4)\n         self.assertEqual(dvar.compute_value.points, [0.25, 0.5, 0.75])\n \n-    def test_equalwidth_100_to_4(self):\n+    @table_dense_sparse\n+    def test_equalwidth_100_to_4(self, prepare_table):\n         X = np.arange(101).reshape((101, 1))\n-        table = data.Table(X)\n+        table = prepare_table(data.Table(X))\n         disc = discretize.EqualWidth(n=4)\n         dvar = disc(table, table.domain[0])\n         self.assertEqual(len(dvar.values), 4)\ndiff --git a/Orange/widgets/visualize/tests/test_owdistributions.py b/Orange/widgets/visualize/tests/test_owdistributions.py\nindex 52782421c..ddd612ee2 100644\n--- a/Orange/widgets/visualize/tests/test_owdistributions.py\n+++ b/Orange/widgets/visualize/tests/test_owdistributions.py\n@@ -5,6 +5,7 @@ from Orange.data import Table, Domain, DiscreteVariable\n from Orange.data.table import dataset_dirs\n from Orange.tests import test_dirname\n from Orange.widgets.tests.base import WidgetTest, datasets\n+from Orange.widgets.tests.utils import table_dense_sparse\n from Orange.widgets.visualize.owdistributions import OWDistributions\n \n \n@@ -85,3 +86,15 @@ class TestOWDistributions(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, None)\n         cb.setChecked(True)\n         cb.click()\n+\n+    @table_dense_sparse\n+    def test_binning_numeric_variables(self, prepare_table):\n+        \"\"\"The widget should not crash when checking `Bin numeric variables`\"\"\"\n+        data = prepare_table(self.iris)\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        self.widget.controls.disc_cont.setChecked(True)\n+        self.wait_until_stop_blocking()\n+\n+        self.widget.controls.disc_cont.setChecked(False)\n+        self.wait_until_stop_blocking()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5820.0, "instance_id": "biolab__orange3-5820", "issue_numbers": 0, "base_commit": "2bb945b58299455a71a03b6e0a557b92d6361ff0", "patch": "diff --git a/Orange/widgets/utils/localization.py b/Orange/widgets/utils/localization.py\nindex 98f103d21..840181a1c 100644\n--- a/Orange/widgets/utils/localization.py\n+++ b/Orange/widgets/utils/localization.py\n@@ -1,19 +1,119 @@\n-__all__ = [\"pl\", \"plsi\"]\n+__all__ = [\"pl\", \"plsi\", \"plsi_sz\"]\n \n \n-def pl(n, forms):\n+def pl(n: int, forms: str) -> str:\n+    \"\"\"\n+    Choose a singular/plural form for English - or create one, for regular nouns\n+\n+    `forms` can be a string containing the singular and plural form, separated\n+    by \"|\", for instance `\"dictionary|dictionaries\".\n+\n+    IF `forms` does not contain character |, plural is formed by appending\n+    an 's'.\n+\n+    Args:\n+        n: number\n+        forms: plural forms, separated by \"|\", or a single (regular) noun\n+\n+    Returns:\n+        form corresponding to the given number\n+    \"\"\"\n     if \"|\" in forms:\n         return forms.split(\"|\")[n != 1]\n     else:\n         return forms + \"s\" * (n != 1)\n \n \n-def plsi(n, forms):\n-    forms = forms.split(\"|\")\n-    if n % 100 == 1:\n-        return forms[0]\n-    if n % 100 == 2:\n-        return forms[1]\n-    if n % 100 in (3, 4):\n-        return forms[2]\n-    return forms[3]\n+def plsi(n: int, forms: str) -> str:\n+    \"\"\"\n+    Choose a plural form for Slovenian - or create one, for some rare cases\n+\n+    `forms` can be a string containing the singular and plural form, separated\n+    by \"|\", for instance `\"okno|okni|okna|oken\".\n+\n+    The number of forms must be 4 or 3.\n+    - The four forms are singular, dual, plural for 3 or 4, plural for >= 5\n+    - Three forms are used for cases other than genitive, where plural is the\n+      same for all numbers >= 3\n+\n+    A single form can be given for nouns in genitive that conform to one of\n+    the following rules:\n+    - miza/mizi/mize/miz\n+    - korak/koraka/koraki/korakov\n+    The function does not speak Slovenian and cannot verify the conformance. :)\n+\n+    Examples:\n+\n+    - Four plural forms:\n+        f'Aktiven {nfilt} {plsi(n, \"filter|filtra|filtri|filtrov\")}'\n+\n+    - Four forms, multiple words conjugated:\n+        f'V tabeli je {n} {plsi(n, \"u\u010dni primer|u\u010dna primera|u\u010dni primeri|u\u010dnih primerov\")}'\n+\n+    - Three forms (non-nominative):\n+        f'Datoteka z {n} {plsi(n, \"primerom|primeroma|primeri\")}'\n+\n+    - Single form, feminine, using pattern\n+        f'Najdena {nvars} {plsi(nvars, \"spremenljivka\")}'\n+\n+    - Single form, masculine, using pattern\n+        f'Vsebina: {n} {plsi(n, \"primer\")'\n+\n+    - Plural form used twice\n+        f'{plsi(n, \"Ostalo je|Ostala sta|Ostali so\")} \u0161e {n} {plsi(n, \"primer\")}'\n+\n+    Args:\n+        n: number\n+        forms: plural forms, separated by \"|\", or a single (regular) noun\n+\n+    Returns:\n+        form corresponding to the given number\n+    \"\"\"\n+    n = abs(n) % 100\n+    if n == 4:\n+        n = 3\n+    elif n == 0 or n >= 5:\n+        n = 4\n+    n -= 1\n+\n+    if \"|\" in forms:\n+        forms = forms.split(\"|\")\n+        # Don't use max: we want it to fail if there are just two forms\n+        if n == 3 and len(forms) == 3:\n+            n -= 1\n+        return forms[n]\n+\n+    if forms[-1] == \"a\":\n+        return forms[:-1] + (\"a\", \"i\", \"e\", \"\")[n]\n+    else:\n+        return forms + (\"\", \"a\", \"i\", \"ov\")[n]\n+\n+\n+def plsi_sz(n: int) -> str:\n+    \"\"\"\n+    Returns proposition \"s\" or \"z\", depending on the number that will follow it.\n+\n+    Args:\n+        n (int): number\n+\n+    Returns:\n+        Proposition s or z\n+    \"\"\"\n+    # Cut of all groups of three, except the first one\n+    lead3 = f\"{n:_}\".split(\"_\")[0]\n+\n+    # handle 1, 1_XXX, 1_XXX_XXX ... because \"ena\" is not pronounced and we need\n+    # to match \"tiso\u010d\", \"milijon\", ... \"trilijarda\"\n+    # https://sl.wikipedia.org/wiki/Imena_velikih_%C5%A1tevil\n+    if lead3 == \"1\":\n+        if n > 10 ** 63:  # nobody knows their names\n+            return \"z\"\n+        return \"zszzzzsssssssssszzzzzz\"[len(str(n)) // 3]\n+\n+    # This is pronounced sto...something\n+    if len(lead3) == 3 and lead3[0] == \"1\":\n+        return \"s\"\n+\n+    # Take the first digit, or the second for two-digit number not divisible by 10\n+    lead = lead3[len(lead3) == 2 and lead3[1] != \"0\"]\n+    return \"zzzssssszz\"[int(lead)]\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_localization.py b/Orange/widgets/utils/tests/test_localization.py\nnew file mode 100644\nindex 000000000..bfbf66d38\n--- /dev/null\n+++ b/Orange/widgets/utils/tests/test_localization.py\n@@ -0,0 +1,74 @@\n+import unittest\n+from Orange.widgets.utils.localization import *\n+\n+\n+class TestEn(unittest.TestCase):\n+    def test_pl(self):\n+        self.assertEqual(pl(0, \"cat\"), \"cats\")\n+        self.assertEqual(pl(1, \"cat\"), \"cat\")\n+        self.assertEqual(pl(2, \"cat\"), \"cats\")\n+        self.assertEqual(pl(100, \"cat\"), \"cats\")\n+        self.assertEqual(pl(101, \"cat\"), \"cats\")\n+\n+        self.assertEqual(pl(0, \"cat|cats\"), \"cats\")\n+        self.assertEqual(pl(1, \"cat|cats\"), \"cat\")\n+        self.assertEqual(pl(2, \"cat|cats\"), \"cats\")\n+        self.assertEqual(pl(100, \"cat|cats\"), \"cats\")\n+        self.assertEqual(pl(101, \"cat|cats\"), \"cats\")\n+\n+\n+class TestSi(unittest.TestCase):\n+    def test_plsi_4(self):\n+        self.assertEqual(plsi(0, \"okno|okni|okna|oken\"), \"oken\")\n+        self.assertEqual(plsi(1, \"okno|okni|okna|oken\"), \"okno\")\n+        self.assertEqual(plsi(2, \"okno|okni|okna|oken\"), \"okni\")\n+        self.assertEqual(plsi(3, \"okno|okni|okna|oken\"), \"okna\")\n+        self.assertEqual(plsi(4, \"okno|okni|okna|oken\"), \"okna\")\n+        self.assertEqual(plsi(5, \"okno|okni|okna|oken\"), \"oken\")\n+        self.assertEqual(plsi(11, \"okno|okni|okna|oken\"), \"oken\")\n+        self.assertEqual(plsi(100, \"okno|okni|okna|oken\"), \"oken\")\n+        self.assertEqual(plsi(101, \"okno|okni|okna|oken\"), \"okno\")\n+        self.assertEqual(plsi(102, \"okno|okni|okna|oken\"), \"okni\")\n+        self.assertEqual(plsi(103, \"okno|okni|okna|oken\"), \"okna\")\n+        self.assertEqual(plsi(105, \"okno|okni|okna|oken\"), \"oken\")\n+        self.assertEqual(plsi(1001, \"okno|okni|okna|oken\"), \"okno\")\n+\n+    def test_plsi_3(self):\n+        self.assertEqual(plsi(0, \"oknu|oknoma|oknom\"), \"oknom\")\n+        self.assertEqual(plsi(1, \"oknu|oknoma|oknom\"), \"oknu\")\n+        self.assertEqual(plsi(2, \"oknu|oknoma|oknom\"), \"oknoma\")\n+        self.assertEqual(plsi(3, \"oknu|oknoma|oknom\"), \"oknom\")\n+        self.assertEqual(plsi(5, \"oknu|oknoma|oknom\"), \"oknom\")\n+        self.assertEqual(plsi(1, \"oknu|oknoma|oknom\"), \"oknu\")\n+        self.assertEqual(plsi(105, \"oknu|oknoma|oknom\"), \"oknom\")\n+\n+    def test_plsi_1(self):\n+        self.assertEqual(plsi(0, \"miza\"), \"miz\")\n+        self.assertEqual(plsi(1, \"miza\"), \"miza\")\n+        self.assertEqual(plsi(2, \"miza\"), \"mizi\")\n+        self.assertEqual(plsi(3, \"miza\"), \"mize\")\n+        self.assertEqual(plsi(5, \"miza\"), \"miz\")\n+        self.assertEqual(plsi(101, \"miza\"), \"miza\")\n+        self.assertEqual(plsi(105, \"miza\"), \"miz\")\n+\n+        self.assertEqual(plsi(0, \"primer\"), \"primerov\")\n+        self.assertEqual(plsi(1, \"primer\"), \"primer\")\n+        self.assertEqual(plsi(2, \"primer\"), \"primera\")\n+        self.assertEqual(plsi(3, \"primer\"), \"primeri\")\n+        self.assertEqual(plsi(5, \"primer\"), \"primerov\")\n+        self.assertEqual(plsi(50, \"primer\"), \"primerov\")\n+        self.assertEqual(plsi(101, \"primer\"), \"primer\")\n+        self.assertEqual(plsi(105, \"primer\"), \"primerov\")\n+\n+    def test_plsi_sz(self):\n+        for propn in \"z0 z1 z2 s3 s4 s5 s6 s7 z8 z9 z10 \" \\\n+                      \"z11 z12 s13 s14 s15 s16 s17 z18 z19 z20 \" \\\n+                      \"z21 z22 s23 z31 z32 s35 s40 s50 s60 s70 z80 z90 \" \\\n+                      \"z200 z22334 s3943 z832492 \" \\\n+                      \"s100 s108 s1000 s13333 s122222 z1000000 \" \\\n+                      \"z1000000000 z1000000000000\".split():\n+            self.assertEqual(plsi_sz(int(propn[1:])), propn[0], propn)\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n\\ No newline at end of file\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5324.0, "instance_id": "biolab__orange3-5324", "issue_numbers": 0, "base_commit": "528aadcc10e6424095a74508f07432a16ac980cb", "patch": "diff --git a/Orange/widgets/data/owcreateclass.py b/Orange/widgets/data/owcreateclass.py\nindex 6a649ccb5..07621c0df 100644\n--- a/Orange/widgets/data/owcreateclass.py\n+++ b/Orange/widgets/data/owcreateclass.py\n@@ -301,7 +301,7 @@ class OWCreateClass(widget.OWWidget):\n         details = format_summary_details(data) if data else \"\"\n         self.info.set_input_summary(summary, details)\n         model = self.controls.attribute.model()\n-        model.set_domain(data.domain if data else None)\n+        model.set_domain(data.domain if data is not None else None)\n         self.Warning.no_nonnumeric_vars(shown=data is not None and not model)\n         if not model:\n             self.attribute = None\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcreateclass.py b/Orange/widgets/data/tests/test_owcreateclass.py\nindex 3350b672b..2946cba58 100644\n--- a/Orange/widgets/data/tests/test_owcreateclass.py\n+++ b/Orange/widgets/data/tests/test_owcreateclass.py\n@@ -283,6 +283,12 @@ class TestOWCreateClass(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, self.heart)\n         self.assertFalse(widget.Warning.no_nonnumeric_vars.is_shown())\n \n+        self.send_signal(self.widget.Inputs.data, self.heart[:0])\n+        self.assertFalse(widget.Warning.no_nonnumeric_vars.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.data, self.no_attributes[:0])\n+        self.assertTrue(widget.Warning.no_nonnumeric_vars.is_shown())\n+\n     def test_string_data(self):\n         widget = self.widget\n         self.send_signal(self.widget.Inputs.data, self.zoo)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4803.0, "instance_id": "biolab__orange3-4803", "issue_numbers": 0, "base_commit": "42fc2cdfa1ed121e27ca77d5fa24c8eee95cdb11", "patch": "diff --git a/Orange/widgets/utils/colorpalettes.py b/Orange/widgets/utils/colorpalettes.py\nindex e13518bab..359394d20 100644\n--- a/Orange/widgets/utils/colorpalettes.py\n+++ b/Orange/widgets/utils/colorpalettes.py\n@@ -176,11 +176,15 @@ class LimitedDiscretePalette(DiscretePalette):\n                 \"use 'force_glasbey' instead\", DeprecationWarning)\n         if force_glasbey or force_hsv \\\n                 or number_of_colors > len(DefaultRGBColors):\n-            palette = Glasbey\n+            colors = Glasbey.palette[:number_of_colors]\n+            if number_of_colors > len(colors):\n+                colors = np.vstack(\n+                    (colors, ) * (number_of_colors // len(colors))\n+                    + (colors[:number_of_colors % len(colors)], ))\n         else:\n-            palette = DefaultRGBColors\n+            colors = DefaultRGBColors.palette[:number_of_colors]\n         super().__init__(\"custom\", \"custom\",\n-                         palette.palette[:number_of_colors], nan_color,\n+                         colors, nan_color,\n                          category=category, flags=flags)\n \n \n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_colorpalettes.py b/Orange/widgets/utils/tests/test_colorpalettes.py\nindex 82648695d..e6bb960b4 100644\n--- a/Orange/widgets/utils/tests/test_colorpalettes.py\n+++ b/Orange/widgets/utils/tests/test_colorpalettes.py\n@@ -159,6 +159,27 @@ class LimitedDiscretePaletteTest(unittest.TestCase):\n         palette = LimitedDiscretePalette(100)\n         np.testing.assert_equal(palette.palette, Glasbey.palette[:100])\n \n+    def test_large_palettes(self):\n+        palette = LimitedDiscretePalette(257)\n+        qcolors = palette.qcolors\n+        qcolors_w_nan = palette.qcolors_w_nan\n+        c256 = qcolors[256].getRgb()\n+\n+        self.assertEqual(len(palette), 257)\n+        self.assertEqual(len(palette.palette), 257)\n+        self.assertEqual(len(qcolors), 257)\n+        self.assertEqual(len(qcolors_w_nan), 258)\n+        self.assertEqual([c.getRgb() for c in qcolors],\n+                         [c.getRgb() for c in qcolors_w_nan[:-1]])\n+        self.assertEqual(palette[256].getRgb(), c256)\n+        np.testing.assert_equal(palette.value_to_color(256), c256[:3])\n+        self.assertEqual(palette.value_to_qcolor(256).getRgb(), c256)\n+        np.testing.assert_equal(palette.values_to_colors([256])[0], c256[:3])\n+        self.assertEqual(palette.values_to_qcolors([256])[0].getRgb(), c256)\n+\n+        for size in range(1020, 1030):\n+            self.assertEqual(len(LimitedDiscretePalette(size)), size)\n+\n     @staticmethod\n     def test_forced_glasbey_palettes():\n         palette = LimitedDiscretePalette(5, force_glasbey=True)\n@@ -598,6 +619,10 @@ class PatchedDiscreteVariableTest(unittest.TestCase):\n         np.testing.assert_almost_equal(var.colors,\n                                        [palette[1], [13, 14, 15], palette[0]])\n \n+        # Variable with many values\n+        var = DiscreteVariable(\"x\", values=tuple(f\"v{i}\" for i in range(1020)))\n+        self.assertEqual(len(var.colors), 1020)\n+\n     def test_colors_fallback_to_palette(self):\n         var = DiscreteVariable.make(\"a\", values=(\"F\", \"M\"))\n         var.palette = Dark2Colors\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6272.0, "instance_id": "biolab__orange3-6272", "issue_numbers": 0, "base_commit": "9c02c207cd1a4fbe419b0bdcd3869b71d8231daf", "patch": "diff --git a/Orange/widgets/data/owfeatureconstructor.py b/Orange/widgets/data/owfeatureconstructor.py\nindex 4b85d06ba..1f2d55976 100644\n--- a/Orange/widgets/data/owfeatureconstructor.py\n+++ b/Orange/widgets/data/owfeatureconstructor.py\n@@ -369,7 +369,7 @@ class DescriptorModel(itemmodels.PyListModel):\n             return super().data(index, role)\n \n \n-def freevars(exp, env):\n+def freevars(exp: ast.AST, env: List[str]):\n     \"\"\"\n     Return names of all free variables in a parsed (expression) AST.\n \n@@ -402,11 +402,14 @@ def freevars(exp, env):\n     elif etype == ast.Lambda:\n         args = exp.args\n         assert isinstance(args, ast.arguments)\n-        argnames = [a.arg for a in args.args]\n-        argnames += [args.vararg.arg] if args.vararg else []\n-        argnames += [a.arg for a in args.kwonlyargs] if args.kwonlyargs else []\n-        argnames += [args.kwarg] if args.kwarg else []\n-        return freevars(exp.body, env + argnames)\n+        arg_names = [a.arg for a in chain(args.posonlyargs, args.args)]\n+        arg_names += [args.vararg.arg] if args.vararg else []\n+        arg_names += [a.arg for a in args.kwonlyargs] if args.kwonlyargs else []\n+        arg_names += [args.kwarg.arg] if args.kwarg else []\n+        vars_ = chain.from_iterable(\n+            freevars(e, env) for e in chain(args.defaults, args.kw_defaults)\n+        )\n+        return list(vars_) + freevars(exp.body, env + arg_names)\n     elif etype == ast.IfExp:\n         return (freevars(exp.test, env) + freevars(exp.body, env) +\n                 freevars(exp.orelse, env))\n@@ -420,7 +423,7 @@ def freevars(exp, env):\n         vars_ = []\n         for gen in exp.generators:\n             target_names = freevars(gen.target, [])  # assigned names\n-            vars_iter = freevars(gen.iter, env)\n+            vars_iter = freevars(gen.iter, env + env_ext)\n             env_ext += target_names\n             vars_ifs = list(chain(*(freevars(ifexp, env + target_names)\n                                     for ifexp in gen.ifs or [])))\n@@ -500,7 +503,7 @@ class FeatureConstructorHandler(DomainContextHandler):\n         for var in metas:\n             available[sanitized_name(var)] = None\n \n-        if freevars(exp_ast, available):\n+        if freevars(exp_ast, list(available)):\n             return False\n         return True\n \n@@ -944,16 +947,12 @@ def validate_exp(exp):\n     \"\"\"\n     Validate an `ast.AST` expression.\n \n-    Only expressions with no list,set,dict,generator comprehensions\n-    are accepted.\n-\n     Parameters\n     ----------\n     exp : ast.AST\n         A parsed abstract syntax tree\n-\n     \"\"\"\n-    # pylint: disable=too-many-branches\n+    # pylint: disable=too-many-branches,too-many-return-statements\n     if not isinstance(exp, ast.AST):\n         raise TypeError(\"exp is not a 'ast.AST' instance\")\n \n@@ -966,12 +965,21 @@ def validate_exp(exp):\n         return all(map(validate_exp, [exp.left, exp.right]))\n     elif etype == ast.UnaryOp:\n         return validate_exp(exp.operand)\n+    elif etype == ast.Lambda:\n+        return all(validate_exp(e) for e in exp.args.defaults) and \\\n+               all(validate_exp(e) for e in exp.args.kw_defaults) and \\\n+               validate_exp(exp.body)\n     elif etype == ast.IfExp:\n         return all(map(validate_exp, [exp.test, exp.body, exp.orelse]))\n     elif etype == ast.Dict:\n         return all(map(validate_exp, chain(exp.keys, exp.values)))\n     elif etype == ast.Set:\n         return all(map(validate_exp, exp.elts))\n+    elif etype in (ast.SetComp, ast.ListComp, ast.GeneratorExp):\n+        return validate_exp(exp.elt) and all(map(validate_exp, exp.generators))\n+    elif etype == ast.DictComp:\n+        return validate_exp(exp.key) and validate_exp(exp.value) and \\\n+               all(map(validate_exp, exp.generators))\n     elif etype == ast.Compare:\n         return all(map(validate_exp, [exp.left] + exp.comparators))\n     elif etype == ast.Call:\n@@ -979,7 +987,6 @@ def validate_exp(exp):\n                        [k.value for k in exp.keywords or []])\n         return all(map(validate_exp, subexp))\n     elif etype == ast.Starred:\n-        assert isinstance(exp.ctx, ast.Load)\n         return validate_exp(exp.value)\n     elif etype in [ast.Num, ast.Str, ast.Bytes, ast.Ellipsis, ast.NameConstant]:\n         return True\n@@ -990,7 +997,6 @@ def validate_exp(exp):\n     elif etype == ast.Subscript:\n         return all(map(validate_exp, [exp.value, exp.slice]))\n     elif etype in {ast.List, ast.Tuple}:\n-        assert isinstance(exp.ctx, ast.Load)\n         return all(map(validate_exp, exp.elts))\n     elif etype == ast.Name:\n         return True\n@@ -1003,6 +1009,9 @@ def validate_exp(exp):\n         return validate_exp(exp.value)\n     elif etype == ast.keyword:\n         return validate_exp(exp.value)\n+    elif etype == ast.comprehension and not exp.is_async:\n+        return validate_exp(exp.target) and validate_exp(exp.iter) and \\\n+               all(map(validate_exp, exp.ifs))\n     else:\n         raise ValueError(exp)\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeatureconstructor.py b/Orange/widgets/data/tests/test_owfeatureconstructor.py\nindex 1b16f6f70..11aaf0f1b 100644\n--- a/Orange/widgets/data/tests/test_owfeatureconstructor.py\n+++ b/Orange/widgets/data/tests/test_owfeatureconstructor.py\n@@ -226,20 +226,34 @@ class TestTools(unittest.TestCase):\n         self.assertEqual(freevars_(\"{a, b}\"), [\"a\", \"b\"])\n         self.assertEqual(freevars_(\"0 if abs(a) < 0.1 else b\", [\"abs\"]),\n                          [\"a\", \"b\"])\n+        self.assertEqual(freevars_(\"lambda: a\", []), [\"a\"])\n+        self.assertEqual(freevars_(\"lambda: a\", [\"a\"]), [])\n         self.assertEqual(freevars_(\"lambda a: b + 1\"), [\"b\"])\n         self.assertEqual(freevars_(\"lambda a: b + 1\", [\"b\"]), [])\n         self.assertEqual(freevars_(\"lambda a: a + 1\"), [])\n         self.assertEqual(freevars_(\"(lambda a: a + 1)(a)\"), [\"a\"])\n         self.assertEqual(freevars_(\"lambda a, *arg: arg + (a,)\"), [])\n         self.assertEqual(freevars_(\"lambda a, *arg, **kwargs: arg + (a,)\"), [])\n-\n+        self.assertEqual(freevars_(\"lambda a: a + c\", []), [\"c\"])\n+        self.assertEqual(freevars_(\"lambda a: a + c\", [\"c\"]), [])\n+        self.assertEqual(freevars_(\"lambda a, b=k: a + c\", []), [\"k\", \"c\"])\n+        self.assertEqual(freevars_(\"lambda *a, b=k: a + c\", []), [\"k\", \"c\"])\n+        self.assertEqual(freevars_(\"lambda a,/, b=k: a + c\", []), [\"k\", \"c\"])\n+        self.assertEqual(freevars_(\"lambda a,/, b=k, **kwg: a + c and kwg\", []),\n+                         [\"k\", \"c\"])\n         self.assertEqual(freevars_(\"[a for a in b]\"), [\"b\"])\n+        self.assertEqual(freevars_(\"[a for a, k in b]\"), [\"b\"])\n+        self.assertEqual(freevars_(\"[(a, j) for a in b]\"), [\"j\", \"b\"])\n+        self.assertEqual(freevars_(\"[a for k in b for a in k]\"), [\"b\"])\n+        self.assertEqual(freevars_(\"[a for k in b if k for a in k if a]\"),\n+                         [\"b\"])\n+        self.assertEqual(freevars_(\"[a for k in b if kk for a in k if aa]\"),\n+                         [\"b\", \"kk\", \"aa\"])\n         self.assertEqual(freevars_(\"[1 + a for c in b if c]\"), [\"a\", \"b\"])\n         self.assertEqual(freevars_(\"{a for _ in [] if b}\"), [\"a\", \"b\"])\n         self.assertEqual(freevars_(\"{a for _ in [] if b}\", [\"a\", \"b\"]), [])\n \n     def test_validate_exp(self):\n-\n         stmt = ast.parse(\"1\", mode=\"single\")\n         with self.assertRaises(ValueError):\n             validate_exp(stmt)\n@@ -272,16 +286,10 @@ class TestTools(unittest.TestCase):\n         self.assertTrue(validate_(\"[]\"))\n \n         with self.assertRaises(ValueError):\n-            validate_(\"[a for a in s]\")\n-\n-        with self.assertRaises(ValueError):\n-            validate_(\"(a for a in s)\")\n-\n-        with self.assertRaises(ValueError):\n-            validate_(\"{a for a in s}\")\n+            validate_(\"[i async for i in s]\")\n \n         with self.assertRaises(ValueError):\n-            validate_(\"{a:1 for a in s}\")\n+            validate_(\"(i async for i in s)\")\n \n \n class FeatureFuncTest(unittest.TestCase):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5795.0, "instance_id": "biolab__orange3-5795", "issue_numbers": 0, "base_commit": "c8603599ffdc5fe1d3b6c04324f7a271129c1f99", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex 788c06394..fb80b4954 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -280,7 +280,12 @@ def vars_from_df(df, role=None, force_nominal=False):\n                 raise ValueError(\"String variable must be in metas.\")\n             _role = Role.Meta\n             var = StringVariable(str(column))\n-            expr = lambda s, _: np.asarray(s, dtype=object)\n+            expr = lambda s, _: np.asarray(\n+                # to object so that fillna can replace with nans if Unknown in nan\n+                # replace nan with object Unknown assure that all values are string\n+                s.astype(object).fillna(StringVariable.Unknown).astype(str),\n+                dtype=object\n+            )\n \n         cols[_role].append(column)\n         exprs[_role].append(expr)\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 4eb7371fc..22cbe313b 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -34,10 +34,9 @@ class TestPandasCompat(unittest.TestCase):\n                                  [0, pd.Timestamp('1724-12-20').timestamp()],\n                                  [0, pd.Timestamp('1724-12-20').timestamp()],\n                                  [nan, nan]])\n-        np.testing.assert_equal(table.metas.tolist(), [['a'],\n-                                                       ['b'],\n-                                                       ['c'],\n-                                                       [nan]])\n+        np.testing.assert_equal(\n+            table.metas.tolist(), [[\"a\"], [\"b\"], [\"c\"], [StringVariable.Unknown]]\n+        )\n         names = [var.name for var in table.domain.attributes]\n         types = [type(var) for var in table.domain.attributes]\n         self.assertEqual(names, ['1', '2'])\n@@ -63,10 +62,9 @@ class TestPandasCompat(unittest.TestCase):\n                                  [1, 0, pd.Timestamp('1724-12-20').timestamp()],\n                                  [0, 0, pd.Timestamp('1724-12-20').timestamp()],\n                                  [0, nan, nan]])\n-        np.testing.assert_equal(table.metas.tolist(), [['a'],\n-                                                       ['b'],\n-                                                       ['c'],\n-                                                       [nan]])\n+        np.testing.assert_equal(\n+            table.metas.tolist(), [[\"a\"], [\"b\"], [\"c\"], [StringVariable.Unknown]]\n+        )\n         names = [var.name for var in table.domain.attributes]\n         types = [type(var) for var in table.domain.attributes]\n         self.assertEqual(names, ['index', '1', '2'])\n@@ -383,7 +381,7 @@ class TestPandasCompat(unittest.TestCase):\n             ],\n         )\n \n-    def test_table_from_frame_no_datetim(self):\n+    def test_table_from_frame_no_datetime(self):\n         \"\"\"\n         In case when dtype of column is object and column contains numbers only,\n         column could be recognized as a TimeVarialbe since pd.to_datetime can parse\n@@ -402,6 +400,34 @@ class TestPandasCompat(unittest.TestCase):\n         # check if exactly ContinuousVariable and not subtype TimeVariable\n         self.assertIsInstance(table.domain.attributes[0], DiscreteVariable)\n \n+    def testa_table_from_frame_string(self):\n+        \"\"\"\n+        Test if string-like variables are handled correctly and nans are replaced\n+        with String.Unknown\n+        \"\"\"\n+        from Orange.data.pandas_compat import table_from_frame\n+\n+        # s1 contains nan and s2 contains pd.Na\n+        df = pd.DataFrame(\n+            [[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"], [5, \"c\"], [np.nan, np.nan]],\n+            columns=[\"s1\", \"s2\"],\n+        ).astype({\"s1\": \"object\", \"s2\": \"string\"})\n+        table = table_from_frame(df)\n+        np.testing.assert_array_equal(np.empty((5, 0)), table.X)\n+        np.testing.assert_array_equal(\n+            np.array(\n+                [\n+                    [\"a\", \"b\"],\n+                    [\"c\", \"d\"],\n+                    [\"e\", \"f\"],\n+                    [\"5\", \"c\"],\n+                    [StringVariable.Unknown, StringVariable.Unknown],\n+                ]\n+            ),\n+            table.metas,\n+        )\n+        self.assertTrue(all(isinstance(v, StringVariable) for v in table.domain.metas))\n+\n     def test_time_variable_compatible(self):\n         from Orange.data.pandas_compat import table_from_frame\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": NaN, "instance_id": "ERROR", "issue_numbers": 0, "base_commit": NaN, "patch": "diff --git a/Orange/widgets/data/owfeatureconstructor.py b/Orange/widgets/data/owfeatureconstructor.py\nindex c0e62794a..fc92cb568 100644\n--- a/Orange/widgets/data/owfeatureconstructor.py\n+++ b/Orange/widgets/data/owfeatureconstructor.py\n@@ -14,6 +14,7 @@ import random\n import logging\n import ast\n import types\n+import unicodedata\n \n from traceback import format_exception_only\n from collections import namedtuple, OrderedDict\n@@ -917,7 +918,8 @@ def bind_variable(descriptor, env, data):\n \n     exp_ast = ast.parse(descriptor.expression, mode=\"eval\")\n     freev = unique(freevars(exp_ast, []))\n-    variables = {sanitized_name(v.name): v for v in env}\n+    variables = {unicodedata.normalize(\"NFKC\", sanitized_name(v.name)): v\n+                 for v in env}\n     source_vars = [(name, variables[name]) for name in freev\n                    if name in variables]\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeatureconstructor.py b/Orange/widgets/data/tests/test_owfeatureconstructor.py\nindex dc474694b..85affd905 100644\n--- a/Orange/widgets/data/tests/test_owfeatureconstructor.py\n+++ b/Orange/widgets/data/tests/test_owfeatureconstructor.py\n@@ -133,6 +133,22 @@ class FeatureConstructorTest(unittest.TestCase):\n         np.testing.assert_array_equal(ndata.X[:, 0],\n                                       data.X[:, :2].sum(axis=1))\n \n+    @staticmethod\n+    def test_unicode_normalization():\n+        micro = \"\\u00b5\"\n+        domain = Domain([ContinuousVariable(micro)])\n+        name = 'Micro Variable'\n+        expression = micro\n+        desc = PyListModel(\n+            [ContinuousDescriptor(name=name, expression=expression,\n+                                  number_of_decimals=2)]\n+        )\n+        data = Table.from_numpy(domain, np.arange(5).reshape(5, 1))\n+        data = data.transform(Domain(data.domain.attributes,\n+                                     [],\n+                                     construct_variables(desc, data)))\n+        np.testing.assert_equal(data.X, data.metas)\n+\n \n class TestTools(unittest.TestCase):\n     def test_free_vars(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5857.0, "instance_id": "biolab__orange3-5857", "issue_numbers": 0, "base_commit": "05fc0df35c4a88b48fdbc14fda608afbbccbeb53", "patch": "diff --git a/Orange/widgets/unsupervised/owsom.py b/Orange/widgets/unsupervised/owsom.py\nindex 65cdda50f..f29d774cd 100644\n--- a/Orange/widgets/unsupervised/owsom.py\n+++ b/Orange/widgets/unsupervised/owsom.py\n@@ -14,6 +14,7 @@ from AnyQt.QtWidgets import \\\n     QGraphicsPathItem\n \n from Orange.data import Table, Domain\n+from Orange.data.util import array_equal\n from Orange.preprocess import decimal_binnings, time_binnings\n from Orange.projection.som import SOM\n \n@@ -330,12 +331,10 @@ class OWSOM(OWWidget):\n             elif missing > 1:\n                 self.Warning.missing_values(missing, \"s\", \"are\")\n \n-        self.stop_optimization_and_wait()\n-\n+        cont_x = self.cont_x.copy() if self.cont_x is not None else None\n+        self.data = self.cont_x = None\n         self.closeContext()\n-        self.clear()\n-        self.Error.clear()\n-        self.Warning.clear()\n+        self.clear_messages()\n \n         if data is not None:\n             attrs = data.domain.attributes\n@@ -345,6 +344,12 @@ class OWSOM(OWWidget):\n             else:\n                 prepare_data()\n \n+        invalidated = cont_x is None or self.cont_x is None \\\n+            or not array_equal(cont_x, self.cont_x)\n+        if invalidated:\n+            self.stop_optimization_and_wait()\n+            self.clear()\n+\n         if self.data is not None:\n             self.controls.attr_color.model().set_domain(data.domain)\n             self.attr_color = data.domain.class_var\n@@ -353,11 +358,13 @@ class OWSOM(OWWidget):\n         self.openContext(self.data)\n         self.set_color_bins()\n         self.create_legend()\n-        self.recompute_dimensions()\n-        self.start_som()\n+        if invalidated:\n+            self.recompute_dimensions()\n+            self.start_som()\n+        else:\n+            self._redraw()\n \n     def clear(self):\n-        self.data = self.cont_x = None\n         self.cells = self.member_data = None\n         self.attr_color = None\n         self.colors = self.thresholds = self.bin_labels = None\n@@ -366,8 +373,6 @@ class OWSOM(OWWidget):\n             self.elements = None\n         self.clear_selection()\n         self.controls.attr_color.model().set_domain(None)\n-        self.Warning.clear()\n-        self.Error.clear()\n \n     def recompute_dimensions(self):\n         if not self.auto_dimension or self.cont_x is None:\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owsom.py b/Orange/widgets/unsupervised/tests/test_owsom.py\nindex 7d6630b38..d37e83eac 100644\n--- a/Orange/widgets/unsupervised/tests/test_owsom.py\n+++ b/Orange/widgets/unsupervised/tests/test_owsom.py\n@@ -549,6 +549,42 @@ class TestOWSOM(WidgetTest):\n         self.assertIsNone(self.get_output(widget.Outputs.selected_data))\n         self.assertIsNone(self.get_output(widget.Outputs.annotated_data))\n \n+    def test_invalidated(self):\n+        heart = Table(\"heart_disease\")\n+        self.widget._recompute_som = Mock()\n+\n+        # New data - replot\n+        self.send_signal(self.widget.Inputs.data, heart)\n+        self.widget._recompute_som.assert_called_once()\n+\n+        # Same data - no replot\n+        self.widget._recompute_som.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, heart)\n+        self.widget._recompute_som.assert_not_called()\n+\n+        # Same data.X - no replot\n+        domain = heart.domain\n+        domain = Domain(domain.attributes, metas=domain.class_vars)\n+        heart_with_metas = self.iris.transform(domain)\n+        self.widget._recompute_som.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, heart_with_metas)\n+        self.widget._recompute_som.assert_not_called()\n+\n+        # Different data, same set of cont. vars - no replot\n+        attrs = [a for a in heart.domain.attributes if a.is_continuous]\n+        domain = Domain(attrs)\n+        heart_with_cont_features = self.iris.transform(domain)\n+        self.widget._recompute_som.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, heart_with_cont_features)\n+        self.widget._recompute_som.assert_not_called()\n+\n+        # Different data.X - replot\n+        domain = Domain(heart.domain.attributes[:5])\n+        heart_with_less_features = heart.transform(domain)\n+        self.widget._recompute_som.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, heart_with_less_features)\n+        self.widget._recompute_som.assert_called_once()\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4960.0, "instance_id": "biolab__orange3-4960", "issue_numbers": 0, "base_commit": "1895c41397b48fbf7599cb3babca3a0f69fe643d", "patch": "diff --git a/Orange/widgets/data/owmergedata.py b/Orange/widgets/data/owmergedata.py\nindex 359e01139..fe2a5414e 100644\n--- a/Orange/widgets/data/owmergedata.py\n+++ b/Orange/widgets/data/owmergedata.py\n@@ -221,8 +221,13 @@ class MergeDataContextHandler(ContextHandler):\n         context = widget.current_context\n         if context is None:\n             return\n-        pairs = context.values.get(\"attr_pairs\", [])\n-        widget.attr_pairs = [self.decode_pair(widget, pair) for pair in pairs]\n+        pairs = context.values.get(\"attr_pairs\")\n+        if pairs:\n+            # attr_pairs is schema only setting which means it is not always\n+            # present. When not present leave widgets default.\n+            widget.attr_pairs = [\n+                self.decode_pair(widget, pair) for pair in pairs\n+            ]\n \n     def match(self, context, variables1, variables2):\n         def matches(part, variables):\n@@ -232,9 +237,10 @@ class MergeDataContextHandler(ContextHandler):\n         if (variables1, variables2) == (context.variables1, context.variables2):\n             return self.PERFECT_MATCH\n \n-        left, right = zip(*context.values[\"attr_pairs\"])\n-        if matches(left, variables1) and matches(right, variables2):\n-            return 0.5\n+        if \"attr_pairs\" in context.values:\n+            left, right = zip(*context.values[\"attr_pairs\"])\n+            if matches(left, variables1) and matches(right, variables2):\n+                return 0.5\n \n         return self.NO_MATCH\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owmergedata.py b/Orange/widgets/data/tests/test_owmergedata.py\nindex 36a7efe06..995d018a2 100644\n--- a/Orange/widgets/data/tests/test_owmergedata.py\n+++ b/Orange/widgets/data/tests/test_owmergedata.py\n@@ -4,6 +4,7 @@\n # pylint: disable=too-many-lines,too-many-public-methods, protected-access\n from itertools import chain\n import unittest\n+from types import SimpleNamespace\n from unittest.mock import Mock\n \n import numpy as np\n@@ -1076,6 +1077,37 @@ class MergeDataContextHandlerTest(unittest.TestCase):\n         handler.settings_from_widget(widget)  # mustn't crash\n         handler.settings_to_widget(widget)  # mustn't crash\n \n+    def test_attr_pairs_not_present(self):\n+        data = Table(\"iris\")\n+\n+        context = SimpleNamespace(values={})\n+        widget = SimpleNamespace(\n+            current_context=context, attr_pairs=(\"a\", \"b\")\n+        )\n+        handler = MergeDataContextHandler()\n+\n+        handler.settings_to_widget(widget)  # mustn't crash\n+        # no attr_pairs in context -> handler must not change widget.attr_pairs\n+        self.assertTupleEqual(widget.attr_pairs, (\"a\", \"b\"))\n+\n+        context = SimpleNamespace(\n+            values={\n+                \"attr_pairs\": [((data.domain[0], 100), (data.domain[1], 100))]\n+            }\n+        )\n+        widget = SimpleNamespace(\n+            current_context=context,\n+            attr_pairs=(\"a\", \"b\"),\n+            data=data,\n+            extra_data=data,\n+        )\n+\n+        handler.settings_to_widget(widget)  # mustn't crash\n+        # values taken from context\n+        self.assertListEqual(\n+            widget.attr_pairs, [(data.domain[0], data.domain[1])]\n+        )\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6878.0, "instance_id": "biolab__orange3-6878", "issue_numbers": 0, "base_commit": "c6a79f659875153e75bab368735cfde26b091adb", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex a82f73af5..b34a74d97 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -690,6 +690,8 @@ class DiscreteVariable(Variable):\n         values = tuple(values)  # some people (including me) pass a generator\n         if not all(isinstance(value, str) for value in values):\n             raise TypeError(\"values of DiscreteVariables must be strings\")\n+        if len(set(values)) < len(values):\n+            raise ValueError(\"Duplicate values in DiscreteVariable\")\n \n         super().__init__(name, compute_value, sparse=sparse)\n         self._values = values\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex efb35106f..4c37bc57c 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -360,6 +360,10 @@ class TestDiscreteVariable(VariableTest):\n         self.assertEqual(list(a.values), [\"a\", \"b\", \"c\"])\n         self.assertEqual(list(a._value_index), [\"a\", \"b\", \"c\"])\n \n+    def test_no_duplicates_in_constructor(self):\n+        self.assertRaises(ValueError, DiscreteVariable,\n+                          \"foo\", values=(\"a\", \"b\", \"a\"))\n+\n     def test_unpickle(self):\n         d1 = DiscreteVariable(\"A\", values=(\"two\", \"one\"))\n         s = pickle.dumps(d1)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5292.0, "instance_id": "biolab__orange3-5292", "issue_numbers": 0, "base_commit": "5aa7792a3ccdb4aeea9533702b790784aa08daa5", "patch": "diff --git a/Orange/widgets/data/owcreateinstance.py b/Orange/widgets/data/owcreateinstance.py\nindex 615bbb6a6..5fdba218d 100644\n--- a/Orange/widgets/data/owcreateinstance.py\n+++ b/Orange/widgets/data/owcreateinstance.py\n@@ -510,7 +510,7 @@ class OWCreateInstance(OWWidget):\n         vbox.layout().addWidget(self.filter_edit)\n         vbox.layout().addWidget(self.view)\n \n-        box = gui.hBox(vbox)\n+        box = gui.hBox(vbox, objectName=\"buttonBox\")\n         gui.rubber(box)\n         for name in self.ACTIONS:\n             gui.button(\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcreateinstance.py b/Orange/widgets/data/tests/test_owcreateinstance.py\nindex 099aa9884..7684fc977 100644\n--- a/Orange/widgets/data/tests/test_owcreateinstance.py\n+++ b/Orange/widgets/data/tests/test_owcreateinstance.py\n@@ -3,8 +3,9 @@ from unittest.mock import Mock\n \n import numpy as np\n \n-from AnyQt.QtCore import QDateTime, QDate, QTime, QPoint\n-from AnyQt.QtWidgets import QWidget, QLineEdit, QStyleOptionViewItem, QMenu\n+from AnyQt.QtCore import QDateTime, QDate, QTime, QPoint, QObject\n+from AnyQt.QtWidgets import QWidget, QLineEdit, QStyleOptionViewItem, QMenu, \\\n+    QPushButton\n \n from orangewidget.widget import StateInfo\n from orangewidget.tests.base import GuiTest\n@@ -99,8 +100,7 @@ class TestOWCreateInstance(WidgetTest):\n     def _get_init_buttons(self, widget=None):\n         if not widget:\n             widget = self.widget\n-        box = widget.controlArea.layout().itemAt(0).widget().children()[3]\n-        return box.children()[1:]\n+        return widget.findChild(QObject, \"buttonBox\").findChildren(QPushButton)\n \n     def test_initialize_buttons(self):\n         self.widget.controls.append_to_data.setChecked(False)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4601.0, "instance_id": "biolab__orange3-4601", "issue_numbers": 0, "base_commit": "c999ab9050cbfeaa7b339b98f4dddbd88b960eaf", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex a3630671a..567d8b578 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -2527,8 +2527,16 @@ def make_dict_mapper(\n def time_parse(values: Sequence[str], name=\"__\"):\n     tvar = Orange.data.TimeVariable(name)\n     parse_time = ftry(tvar.parse, ValueError, np.nan)\n-    values = [parse_time(v) for v in values]\n-    return tvar, values\n+    _values = [parse_time(v) for v in values]\n+    if np.all(np.isnan(_values)):\n+        # try parsing it with pandas (like in transform)\n+        dti = pd.to_datetime(values, errors=\"coerce\")\n+        _values = datetime_to_epoch(dti)\n+        date_only = getattr(dti, \"_is_dates_only\", False)\n+        if np.all(dti != pd.NaT):\n+            tvar.have_date = True\n+            tvar.have_time = not date_only\n+    return tvar, _values\n \n \n as_string = np.frompyfunc(str, 1, 1)\n@@ -2734,17 +2742,23 @@ class ToContinuousTransform(Transformation):\n             raise TypeError\n \n \n+def datetime_to_epoch(dti: pd.DatetimeIndex) -> np.ndarray:\n+    \"\"\"Convert datetime to epoch\"\"\"\n+    data = dti.values.astype(\"M8[us]\")\n+    mask = np.isnat(data)\n+    data = data.astype(float) / 1e6\n+    data[mask] = np.nan\n+    return data\n+\n+\n class ReparseTimeTransform(Transformation):\n     \"\"\"\n     Re-parse the column's string repr as datetime.\n     \"\"\"\n     def transform(self, c):\n         c = column_str_repr(self.variable, c)\n-        c = pd.to_datetime(c, errors=\"coerce\").values.astype(\"M8[us]\")\n-        mask = np.isnat(c)\n-        orangecol = c.astype(float) / 1e6\n-        orangecol[mask] = np.nan\n-        return orangecol\n+        c = pd.to_datetime(c, errors=\"coerce\")\n+        return datetime_to_epoch(c)\n \n \n class LookupMappingTransform(Transformation):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex 36482b09e..4ef398bf3 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -8,6 +8,7 @@ from unittest.mock import Mock, patch\n \n import numpy as np\n from numpy.testing import assert_array_equal\n+import pandas as pd\n \n from AnyQt.QtCore import QItemSelectionModel, Qt, QItemSelection\n from AnyQt.QtWidgets import QAction, QComboBox, QLineEdit, \\\n@@ -33,7 +34,7 @@ from Orange.widgets.data.oweditdomain import (\n     table_column_data, ReinterpretVariableEditor, CategoricalVector,\n     VariableEditDelegate, TransformRole,\n     RealVector, TimeVector, StringVector, make_dict_mapper, DictMissingConst,\n-    LookupMappingTransform, as_float_or_nan, column_str_repr,\n+    LookupMappingTransform, as_float_or_nan, column_str_repr, time_parse,\n     GroupItemsDialog)\n from Orange.widgets.data.owcolor import OWColor, ColorRole\n from Orange.widgets.tests.base import WidgetTest, GuiTest\n@@ -917,6 +918,19 @@ class TestUtils(TestCase):\n         d = column_str_repr(v, np.array([0., np.nan, 1.0]))\n         assert_array_equal(d, [\"00:00:00\", \"?\", \"00:00:01\"])\n \n+    def test_time_parse(self):\n+        \"\"\"parsing additional datetimes by pandas\"\"\"\n+        date = [\"1/22/20\", \"1/23/20\", \"1/24/20\"]\n+        # we use privet method, check if still exists\n+        assert hasattr(pd.DatetimeIndex, '_is_dates_only')\n+\n+        tval, values = time_parse(date)\n+\n+        self.assertTrue(tval.have_date)\n+        self.assertFalse(tval.have_time)\n+        self.assertListEqual(list(values),\n+                             [1579651200.0, 1579737600.0, 1579824000.0])\n+\n \n class TestLookupMappingTransform(TestCase):\n     def setUp(self) -> None:\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4921.0, "instance_id": "biolab__orange3-4921", "issue_numbers": 0, "base_commit": "5632982e11978e50fdf22dc471651962062348b7", "patch": "diff --git a/Orange/widgets/data/owcsvimport.py b/Orange/widgets/data/owcsvimport.py\nindex 078adca1c..805f1ec32 100644\n--- a/Orange/widgets/data/owcsvimport.py\n+++ b/Orange/widgets/data/owcsvimport.py\n@@ -1101,9 +1101,14 @@ def _open(path, mode, encoding=None):\n         arh = zipfile.ZipFile(path, 'r')\n         filelist = arh.infolist()\n         if len(filelist) == 1:\n-            filename = filelist[0]\n-            zinfo = arh.getinfo(filename)\n-            f = arh.open(zinfo.filename, 'r')\n+            f = arh.open(filelist[0], 'r')\n+            # patch the f.close to also close the main archive file\n+            f_close = f.close\n+\n+            def close_():\n+                f_close()\n+                arh.close()\n+            f.close = close_\n             if 't' in mode:\n                 f = io.TextIOWrapper(f, encoding=encoding)\n             return f\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcsvimport.py b/Orange/widgets/data/tests/test_owcsvimport.py\nindex b64bf7835..6335263b6 100644\n--- a/Orange/widgets/data/tests/test_owcsvimport.py\n+++ b/Orange/widgets/data/tests/test_owcsvimport.py\n@@ -1,4 +1,4 @@\n-# pylint: disable=no-self-use\n+# pylint: disable=no-self-use,protected-access\n import unittest\n from unittest import mock\n from contextlib import ExitStack\n@@ -306,6 +306,51 @@ class TestUtils(unittest.TestCase):\n         df = owcsvimport.load_csv(io.BytesIO(contents), opts)\n         assert_array_equal(df.values, np.array([[3.21, 3.37], [4.13, 1000.142]]))\n \n+    def test_open_compressed(self):\n+        content = 'abc'\n+        for ext in [\"txt\", \"gz\", \"bz2\", \"xz\", \"zip\"]:\n+            with named_file('', suffix=f\".{ext}\") as fname:\n+                with _open_write(fname, \"wt\", encoding=\"ascii\") as f:\n+                    f.write(content)\n+                f.close()\n+\n+                with owcsvimport._open(fname, \"rt\", encoding=\"ascii\") as f:\n+                    self.assertEqual(content, f.read())\n+\n+\n+def _open_write(path, mode, encoding=None):\n+    # pylint: disable=import-outside-toplevel\n+    if mode not in {'w', 'wb', 'wt'}:\n+        raise ValueError('r')\n+    _, ext = os.path.splitext(path)\n+    ext = ext.lower()\n+    if ext == \".gz\":\n+        import gzip\n+        return gzip.open(path, mode, encoding=encoding)\n+    elif ext == \".bz2\":\n+        import bz2\n+        return bz2.open(path, mode, encoding=encoding)\n+    elif ext == \".xz\":\n+        import lzma\n+        return lzma.open(path, mode, encoding=encoding)\n+    elif ext == \".zip\":\n+        import zipfile\n+        arh = zipfile.ZipFile(path, 'w')\n+        filename, _ = os.path.splitext(os.path.basename(path))\n+        f = arh.open(filename, mode=\"w\")\n+        f_close = f.close\n+        # patch the f.close to also close the main archive file\n+\n+        def close_():\n+            f_close()\n+            arh.close()\n+        f.close = close_\n+        if 't' in mode:\n+            f = io.TextIOWrapper(f, encoding=encoding)\n+        return f\n+    else:\n+        return open(path, mode, encoding=encoding)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6303.0, "instance_id": "biolab__orange3-6303", "issue_numbers": 0, "base_commit": "2bd643fe5e11106aee67ca41fd4f746c696235d4", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 93dbd8b93..f8e08944f 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -2508,14 +2508,23 @@ def _select_from_selection(source_indices, selection_indices, maxlen):\n     Try to keep slices as slices.\n     Args:\n         source_indices: 1D sequence, slice or Ellipsis\n-        selection_indices: 1D sequence or slice\n+        selection_indices: slice\n         maxlen: maximum length of the sequence\n     \"\"\"\n     if source_indices is ...:\n         return selection_indices\n     elif isinstance(source_indices, slice):\n+        assert isinstance(selection_indices, slice)\n         r = range(*source_indices.indices(maxlen))[selection_indices]\n-        return slice(r.start, r.stop, r.step)\n+        assert min(list(r)) >= 0\n+        # .indices always returns valid non-negative integers\n+        # when the reversed order is used r.stop can be negative, for example,\n+        # range(1, -1, -1)), which is [1, 0], but this negative indexing\n+        # is problematic with slices\n+        stop = r.stop\n+        if stop < 0:\n+            stop = None\n+        return slice(r.start, stop, r.step)\n     else:\n         return source_indices[selection_indices]\n \n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex 12ec42a83..27c8e9986 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -21,7 +21,8 @@ from Orange.data import (filter, Unknown, Table, DiscreteVariable,\n                          ContinuousVariable, Domain, StringVariable)\n from Orange.data.util import SharedComputeValue\n from Orange.tests import test_dirname\n-from Orange.data.table import _optimize_indices, _FromTableConversion\n+from Orange.data.table import _optimize_indices, _select_from_selection, \\\n+    _FromTableConversion\n \n \n class TableTestCase(unittest.TestCase):\n@@ -2195,6 +2196,23 @@ class TableIndexingTests(TableTests):\n         self.assertEqual(_optimize_indices([1], 2), slice(1, 2, 1))\n         self.assertEqual(_optimize_indices([-2], 5), slice(-2, -3, -1))\n \n+    def test_select_from_selection(self):\n+        fn = _select_from_selection\n+        self.assertEqual(fn(slice(10), slice(11), 10),\n+                         slice(0, 10, 1))\n+        self.assertEqual(fn(slice(10), slice(None, 10, 2), 10),\n+                         slice(0, 10, 2))\n+        self.assertEqual(fn(slice(None, 10, 2), slice(None, 10, 2), 10),\n+                         slice(0, 10, 4))\n+        self.assertEqual(fn(slice(None, None, -1), slice(0, 9, None), 10),\n+                         slice(9, 0, -1))  # [9, 8, 7, 6, 5, 4, 3, 2, 1]\n+        self.assertEqual(fn(slice(None, None, -1), slice(9, 10, None), 10),\n+                         slice(0, None, -1))  # [0]\n+        self.assertEqual(fn(slice(None, 10, 2), slice(None, None, -1), 10),\n+                         slice(8, None, -2))\n+        self.assertEqual(fn(slice(None, 10, 2), slice(None, None, -2), 10),\n+                         slice(8, None, -4))\n+\n \n class TableElementAssignmentTest(TableTests):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6763.0, "instance_id": "biolab__orange3-6763", "issue_numbers": 0, "base_commit": "88fae8a9b1e3a6d964de3b0382749ed58ccf9232", "patch": "diff --git a/Orange/widgets/unsupervised/owsom.py b/Orange/widgets/unsupervised/owsom.py\nindex 84c11e311..6d5a11aad 100644\n--- a/Orange/widgets/unsupervised/owsom.py\n+++ b/Orange/widgets/unsupervised/owsom.py\n@@ -1018,7 +1018,8 @@ class OWSOM(OWWidget):\n                 compute_value=GetGroups(id_to_group, default_grp, offset))\n \n             if not self.data.domain.class_vars:\n-                class_vars, metas = grp_var, som_attrs\n+                self.data.domain.class_vars = ()\n+                class_vars, metas = (grp_var,), som_attrs\n             else:\n                 class_vars, metas = (), (grp_var,) + som_attrs\n             return add_columns(self.data.domain, (), class_vars, metas)\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owsom.py b/Orange/widgets/unsupervised/tests/test_owsom.py\nindex ea7350d46..142c9b0c9 100644\n--- a/Orange/widgets/unsupervised/tests/test_owsom.py\n+++ b/Orange/widgets/unsupervised/tests/test_owsom.py\n@@ -723,6 +723,13 @@ class TestOWSOM(WidgetTest):\n         restart_button.click()\n         self.assertFalse(w.Information.modified.is_shown())\n \n+    def test_make_domain_without_class_vars(self):\n+        widget = self.widget\n+        self.send_signal(self.widget.Inputs.data, self.iris)\n+        widget.data.domain.class_vars = None\n+        widget.update_output()\n+        self.assertIsNotNone(self.get_output(widget.Outputs.annotated_data))\n+\n \n class TestComputeValues(unittest.TestCase):\n     def test_eq_hash(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6062.0, "instance_id": "biolab__orange3-6062", "issue_numbers": 0, "base_commit": "d9e8e874ea42040ef65406d56edc845adb3555d7", "patch": "diff --git a/Orange/evaluation/scoring.py b/Orange/evaluation/scoring.py\nindex 6d8aabd9e..89c82a28d 100644\n--- a/Orange/evaluation/scoring.py\n+++ b/Orange/evaluation/scoring.py\n@@ -11,6 +11,7 @@ Examples\n \"\"\"\n \n import math\n+import warnings\n \n import numpy as np\n import sklearn.metrics as skl_metrics\n@@ -22,6 +23,8 @@ from Orange.misc.wrapper_meta import WrapperMeta\n __all__ = [\"CA\", \"Precision\", \"Recall\", \"F1\", \"PrecisionRecallFSupport\", \"AUC\",\n            \"MSE\", \"RMSE\", \"MAE\", \"R2\", \"compute_CD\", \"graph_ranks\", \"LogLoss\"]\n \n+from Orange.util import OrangeDeprecationWarning\n+\n \n class ScoreMetaType(WrapperMeta):\n     \"\"\"\n@@ -388,7 +391,11 @@ def compute_CD(avranks, n, alpha=\"0.05\", test=\"nemenyi\"):\n     according to given alpha (either alpha=\"0.05\" or alpha=\"0.1\") for average\n     ranks and number of tested datasets N. Test can be either \"nemenyi\" for\n     for Nemenyi two tailed test or \"bonferroni-dunn\" for Bonferroni-Dunn test.\n+\n+    This function is deprecated and will be removed in Orange 3.34.\n     \"\"\"\n+    warnings.warn(\"compute_CD is deprecated and will be removed in Orange 3.34.\",\n+                  OrangeDeprecationWarning, stacklevel=2)\n     k = len(avranks)\n     d = {(\"nemenyi\", \"0.05\"): [0, 0, 1.959964, 2.343701, 2.569032, 2.727774,\n                                2.849705, 2.94832, 3.030879, 3.101730, 3.163684,\n@@ -420,6 +427,8 @@ def graph_ranks(avranks, names, cd=None, cdmethod=None, lowv=None, highv=None,\n     The image is ploted on `plt` imported using\n     `import matplotlib.pyplot as plt`.\n \n+    This function is deprecated and will be removed in Orange 3.34.\n+\n     Args:\n         avranks (list of float): average ranks of methods.\n         names (list of str): names of methods.\n@@ -437,6 +446,8 @@ def graph_ranks(avranks, names, cd=None, cdmethod=None, lowv=None, highv=None,\n         filename (str, optional): output file name (with extension). If not\n             given, the function does not write a file.\n     \"\"\"\n+    warnings.warn(\"graph_ranks is deprecated and will be removed in Orange 3.34.\",\n+                  OrangeDeprecationWarning, stacklevel=2)\n     try:\n         import matplotlib.pyplot as plt\n         from matplotlib.backends.backend_agg import FigureCanvasAgg\n.", "test_patch": "diff --git a/Orange/tests/test_evaluation_scoring.py b/Orange/tests/test_evaluation_scoring.py\nindex 0fe8950c7..95488051b 100644\n--- a/Orange/tests/test_evaluation_scoring.py\n+++ b/Orange/tests/test_evaluation_scoring.py\n@@ -2,8 +2,11 @@\n # pylint: disable=missing-docstring\n \n import unittest\n+from distutils.version import LooseVersion\n+\n import numpy as np\n \n+import Orange\n from Orange.data import DiscreteVariable, ContinuousVariable, Domain\n from Orange.data import Table\n from Orange.classification import LogisticRegressionLearner, SklTreeLearner, NaiveBayesLearner,\\\n@@ -13,6 +16,7 @@ from Orange.evaluation import AUC, CA, Results, Recall, \\\n from Orange.evaluation.scoring import Specificity\n from Orange.preprocess import discretize, Discretize\n from Orange.tests import test_filename\n+from Orange.util import OrangeDeprecationWarning\n \n \n class TestScoreMetaType(unittest.TestCase):\n@@ -320,15 +324,21 @@ class TestAUC(unittest.TestCase):\n class TestComputeCD(unittest.TestCase):\n     def test_compute_CD(self):\n         avranks = [1.9, 3.2, 2.8, 3.3]\n-        cd = scoring.compute_CD(avranks, 30)\n+        with self.assertWarns(OrangeDeprecationWarning):\n+            cd = scoring.compute_CD(avranks, 30)\n         np.testing.assert_almost_equal(cd, 0.856344)\n \n-        cd = scoring.compute_CD(avranks, 30, test=\"bonferroni-dunn\")\n+        with self.assertWarns(OrangeDeprecationWarning):\n+            cd = scoring.compute_CD(avranks, 30, test=\"bonferroni-dunn\")\n         np.testing.assert_almost_equal(cd, 0.798)\n \n-        # Do what you will, just don't crash\n-        scoring.graph_ranks(avranks, \"abcd\", cd)\n-        scoring.graph_ranks(avranks, \"abcd\", cd, cdmethod=0)\n+    def test_CD_deprecated(self):\n+        if LooseVersion(Orange.__version__) >= LooseVersion(\"3.34\"):\n+            self.fail(\n+                \"`scoring.compute_CD` and `scoring.graph_ranks` were deprecated in \"\n+                \"version 3.33. Please remove the deprecated methods, TestComputeCD, \"\n+                \"and references in documentation.\"\n+            )\n \n \n class TestLogLoss(unittest.TestCase):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5702.0, "instance_id": "biolab__orange3-5702", "issue_numbers": 0, "base_commit": "3aae87876308c1d6db85d81f71f537692536c29a", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex 87af6833f..6ef6509e3 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -9,6 +9,7 @@ from typing import Iterable\n \n import bottleneck as bn\n import numpy as np\n+import pandas\n import scipy.stats.stats\n from scipy import sparse as sp\n \n@@ -373,8 +374,7 @@ def stats(X, weights=None, compute_variance=False):\n             X.shape[0] - non_zero,\n             non_zero))\n     else:\n-        X_str = X.astype(str)\n-        nans = ((X_str == \"nan\") | (X_str == \"\")).sum(axis=0) \\\n+        nans = (pandas.isnull(X).sum(axis=0) + (X == \"\").sum(axis=0)) \\\n             if X.size else np.zeros(X.shape[1])\n         return np.column_stack((\n             np.tile(np.inf, X.shape[1]),\n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex e3807573d..81bfddb54 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -1,4 +1,5 @@\n # pylint: disable=no-self-use\n+import time\n import unittest\n import warnings\n from itertools import chain\n@@ -145,6 +146,28 @@ class TestUtil(unittest.TestCase):\n                                            [np.inf, -np.inf, 0, 0, 2, 1],\n                                            [np.inf, -np.inf, 0, 0, 0, 3]])\n \n+    def test_stats_long_string_mem_use(self):\n+        X = np.full((1000, 1000), \"a\", dtype=object)\n+        t = time.time()\n+        stats(X)\n+        t_a = time.time() - t  # time for an array with constant-len strings\n+\n+        # Add one very long string\n+        X[0, 0] = \"a\"*2000\n+\n+        # The implementation of stats() in Orange 3.30.2 used .astype(\"str\")\n+        # internally. X.astype(\"str\") would take ~1000x the memory as X,\n+        # because its type would be \"<U1000\" (the length of the longest string).\n+        # That is about 7.5 GiB of memory on a 64-bit Linux system\n+\n+        # Because it is hard to measure CPU, we here measure time as\n+        # memory allocation of such big tables takes time. On Marko's\n+        # Linux system .astype(\"str\") took ~3 seconds.\n+        t = time.time()\n+        stats(X)\n+        t_b = time.time() - t\n+        self.assertLess(t_b, 2*t_a + 0.1)  # some grace period\n+\n     def test_nanmin_nanmax(self):\n         warnings.filterwarnings(\"ignore\", r\".*All-NaN slice encountered.*\")\n         for X in self.data:\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4830.0, "instance_id": "biolab__orange3-4830", "issue_numbers": 0, "base_commit": "f1ea98146272cef3c45a8e311aff3cafa08805bc", "patch": "diff --git a/Orange/widgets/data/owselectrows.py b/Orange/widgets/data/owselectrows.py\nindex 2b07394d8..2bf036435 100644\n--- a/Orange/widgets/data/owselectrows.py\n+++ b/Orange/widgets/data/owselectrows.py\n@@ -62,8 +62,13 @@ class SelectRowsContextHandler(DomainContextHandler):\n                     values = [QLocale().toDouble(v)[0] for v in values]\n                 elif isinstance(attr, DiscreteVariable):\n                     values = [attr.values[i - 1] if i else \"\" for i in values]\n-                encoded.append(\n-                    (attr.name, context.attributes.get(attr.name), op, values))\n+                encoded.append((\n+                    attr.name,\n+                    context.attributes.get(attr.name)\n+                    or context.metas.get(attr.name),\n+                    op,\n+                    values\n+                ))\n         return encoded\n \n     def decode_setting(self, setting, value, domain=None):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectrows.py b/Orange/widgets/data/tests/test_owselectrows.py\nindex a69e3ba92..2ec939698 100644\n--- a/Orange/widgets/data/tests/test_owselectrows.py\n+++ b/Orange/widgets/data/tests/test_owselectrows.py\n@@ -518,6 +518,36 @@ Basically, revert this commit.\n         expected = (expected == 2).astype(float)\n         np.testing.assert_equal(out.Y, expected)\n \n+    def test_meta_setting(self):\n+        \"\"\"\n+        Test if all conditions from all segments (attributes, class, meta)\n+        stores correctly\n+        \"\"\"\n+        data = Table(\"iris\")\n+        data = Table.from_table(\n+            Domain(\n+                data.domain.attributes[:3],\n+                data.domain.class_var,\n+                data.domain.attributes[3:]\n+            ), data)\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        vars_ = [\n+            data.domain.metas[0],\n+            data.domain.attributes[0],\n+            data.domain.class_var\n+        ]\n+        cond = [0, 0, 0]\n+        val = [(0, ), (0, ), (1, )]\n+        conds = list(zip(vars_, cond, val))\n+\n+        self.widget.conditions = conds\n+        self.assertListEqual([c[0] for c in self.widget.conditions], vars_)\n+\n+        # when sending new-same data conditions are restored from the context\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.assertListEqual([c[0] for c in self.widget.conditions], vars_)\n+\n     def widget_with_context(self, domain, conditions):\n         ch = SelectRowsContextHandler()\n         context = ch.new_context(domain, *ch.encode_domain(domain))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4812.0, "instance_id": "biolab__orange3-4812", "issue_numbers": 0, "base_commit": "6061f2da1073d58ddc0fc946daba26030d9f0e2f", "patch": "diff --git a/Orange/widgets/data/owfeaturestatistics.py b/Orange/widgets/data/owfeaturestatistics.py\nindex 7d1a55bf2..72692dbd8 100644\n--- a/Orange/widgets/data/owfeaturestatistics.py\n+++ b/Orange/widgets/data/owfeaturestatistics.py\n@@ -850,7 +850,8 @@ class OWFeatureStatistics(widget.OWWidget):\n         self.Outputs.statistics.send(statistics)\n \n     def send_report(self):\n-        pass\n+        view = self.table_view\n+        self.report_table(view)\n \n     @classmethod\n     def migrate_context(cls, context, version):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeaturestatistics.py b/Orange/widgets/data/tests/test_owfeaturestatistics.py\nindex c16ef62fd..8709562d6 100644\n--- a/Orange/widgets/data/tests/test_owfeaturestatistics.py\n+++ b/Orange/widgets/data/tests/test_owfeaturestatistics.py\n@@ -493,6 +493,15 @@ class TestFeatureStatisticsUI(WidgetTest):\n         self.assertEqual(widget.selected_vars, [domain[\"petal width\"],\n                                                 domain[\"iris\"]])\n \n+    def test_report(self):\n+        self.send_signal(self.widget.Inputs.data, self.data1)\n+\n+        self.widget.report_button.click()\n+        report_text = self.widget.report_html\n+\n+        self.assertIn(\"<table>\", report_text)\n+        self.assertEqual(6, report_text.count(\"<tr>\"))  # header + 5 rows\n+\n \n class TestSummary(WidgetTest):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": NaN, "instance_id": "ERROR", "issue_numbers": 0, "base_commit": NaN, "patch": "diff --git a/Orange/widgets/data/owfeaturestatistics.py b/Orange/widgets/data/owfeaturestatistics.py\nindex 7d1a55bf2..72692dbd8 100644\n--- a/Orange/widgets/data/owfeaturestatistics.py\n+++ b/Orange/widgets/data/owfeaturestatistics.py\n@@ -850,7 +850,8 @@ class OWFeatureStatistics(widget.OWWidget):\n         self.Outputs.statistics.send(statistics)\n \n     def send_report(self):\n-        pass\n+        view = self.table_view\n+        self.report_table(view)\n \n     @classmethod\n     def migrate_context(cls, context, version):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeaturestatistics.py b/Orange/widgets/data/tests/test_owfeaturestatistics.py\nindex c16ef62fd..8709562d6 100644\n--- a/Orange/widgets/data/tests/test_owfeaturestatistics.py\n+++ b/Orange/widgets/data/tests/test_owfeaturestatistics.py\n@@ -493,6 +493,15 @@ class TestFeatureStatisticsUI(WidgetTest):\n         self.assertEqual(widget.selected_vars, [domain[\"petal width\"],\n                                                 domain[\"iris\"]])\n \n+    def test_report(self):\n+        self.send_signal(self.widget.Inputs.data, self.data1)\n+\n+        self.widget.report_button.click()\n+        report_text = self.widget.report_html\n+\n+        self.assertIn(\"<table>\", report_text)\n+        self.assertEqual(6, report_text.count(\"<tr>\"))  # header + 5 rows\n+\n \n class TestSummary(WidgetTest):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5639.0, "instance_id": "biolab__orange3-5639", "issue_numbers": 0, "base_commit": "4a05b5fecb6fc9178c8dfaef36bb7f5528ea7fbe", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex b785109c3..a3800c046 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -447,8 +447,24 @@ class Table(Sequence, Storage):\n             for k in (\"X\", \"W\", \"metas\"):\n                 if k in state:\n                     setattr(self, k, state.pop(k))\n+            if \"_Y\" in state:\n+                setattr(self, \"Y\", state.pop(\"_Y\"))  # state[\"_Y\"] is a 2d array\n             self.__dict__.update(state)\n \n+    def __getstate__(self):\n+        # Compatibility with pickles before table locking:\n+        # return the same state as before table lock\n+        state = self.__dict__.copy()\n+        for k in [\"X\", \"metas\", \"W\"]:\n+            if \"_\" + k in state:  # Check existence; SQL tables do not contain them\n+                state[k] = state.pop(\"_\" + k)\n+        # before locking, _Y was always a 2d array: save it as such\n+        if \"_Y\" in state:\n+            y = state.pop(\"_Y\")\n+            y2d = y.reshape(-1, 1) if y.ndim == 1 else y\n+            state[\"_Y\"] = y2d\n+        return state\n+\n     def _lock_parts(self):\n         return ((self._X, self._Unlocked_X, \"X\"),\n                 (self._Y, self._Unlocked_Y, \"Y\"),\n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex ddfa7ea3a..3a0975c8a 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -3,6 +3,7 @@\n \n import copy\n import os\n+import pickle\n import random\n import unittest\n import warnings\n@@ -591,8 +592,6 @@ class TableTestCase(unittest.TestCase):\n         self.assertEqual(len(new.ids), 300)\n \n     def test_pickle(self):\n-        import pickle\n-\n         d = data.Table(\"zoo\")\n         s = pickle.dumps(d)\n         d2 = pickle.loads(s)\n@@ -608,6 +607,20 @@ class TableTestCase(unittest.TestCase):\n         self.assertEqual(d.checksum(include_metas=False),\n                          d2.checksum(include_metas=False))\n \n+    def test_pickle_setstate(self):\n+        d = data.Table(\"zoo\")\n+        s = pickle.dumps(d)\n+        with patch(\"Orange.data.Table.__setstate__\", Mock()) as mock:\n+            pickle.loads(s)\n+            state = mock.call_args[0][0]\n+            for k in [\"X\", \"_Y\", \"metas\"]:\n+                self.assertIn(k, state)\n+                self.assertEqual(state[k].ndim, 2)\n+            self.assertIn(\"W\", state)\n+            for k in [\"_X\", \"Y\", \"_metas\", \"_W\"]:\n+                self.assertNotIn(k, state)\n+\n+\n     def test_translate_through_slice(self):\n         d = data.Table(\"iris\")\n         dom = data.Domain([\"petal length\", \"sepal length\", \"iris\"],\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5412.0, "instance_id": "biolab__orange3-5412", "issue_numbers": 0, "base_commit": "98af325dab761167081cb1fed66a33b0685d29e4", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex 8510678dd..1a952bcd0 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -13,7 +13,8 @@ from itertools import chain\n \n from os import path, remove\n from tempfile import NamedTemporaryFile\n-from urllib.parse import urlparse, urlsplit, urlunsplit, unquote as urlunquote\n+from urllib.parse import urlparse, urlsplit, urlunsplit, \\\n+    unquote as urlunquote, quote\n from urllib.request import urlopen, Request\n from pathlib import Path\n \n@@ -405,6 +406,7 @@ class UrlReader(FileFormat):\n         filename = filename.strip()\n         if not urlparse(filename).scheme:\n             filename = 'http://' + filename\n+        filename = quote(filename, safe=\"/:\")\n         super().__init__(filename)\n \n     @staticmethod\n.", "test_patch": "diff --git a/Orange/tests/test_url_reader.py b/Orange/tests/test_url_reader.py\nindex 87b3c1d73..c40bf26a2 100644\n--- a/Orange/tests/test_url_reader.py\n+++ b/Orange/tests/test_url_reader.py\n@@ -17,3 +17,14 @@ class TestUrlReader(unittest.TestCase):\n             \"http://datasets.biolab.si/core/philadelphia-crime.csv.xz\"\n         ).read()\n         self.assertEqual(9666, len(data))\n+\n+    def test_special_characters(self):\n+        # TO-DO - replace this file with a more appropriate one (e.g. .csv)\n+        #  and change the assertion accordingly\n+        path = \"http://file.biolab.si/text-semantics/data/elektrotehniski-\" \\\n+               \"vestnik-clanki/detektiranje-utrdb-v-\u0161ahu-.txt\"\n+        self.assertRaises(OSError, UrlReader(path).read)\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5605.0, "instance_id": "biolab__orange3-5605", "issue_numbers": 0, "base_commit": "c7e80dec9025ab1b7acd485ee43735459f3d46d3", "patch": "diff --git a/Orange/widgets/data/owtable.py b/Orange/widgets/data/owtable.py\nindex f8fa6b302..87fc04ba5 100644\n--- a/Orange/widgets/data/owtable.py\n+++ b/Orange/widgets/data/owtable.py\n@@ -593,7 +593,7 @@ class OWDataTable(OWWidget):\n \n     def _on_show_variable_labels_changed(self):\n         \"\"\"The variable labels (var.attribues) visibility was changed.\"\"\"\n-        for slot in self._inputs.values():\n+        for slot in self._inputs:\n             self._update_variable_labels(slot.view)\n \n     def _on_distribution_color_changed(self):\n@@ -619,7 +619,7 @@ class OWDataTable(OWWidget):\n             tab.reset()\n \n     def _on_select_rows_changed(self):\n-        for slot in self._inputs.values():\n+        for slot in self._inputs:\n             selection_model = slot.view.selectionModel()\n             selection_model.setSelectBlocks(not self.select_rows)\n             if self.select_rows:\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owtable.py b/Orange/widgets/data/tests/test_owtable.py\nindex 9c01ee2ca..10d682c53 100644\n--- a/Orange/widgets/data/tests/test_owtable.py\n+++ b/Orange/widgets/data/tests/test_owtable.py\n@@ -60,7 +60,7 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n \n     def _select_data(self):\n         self.widget.selected_cols = list(range(len(self.data.domain.variables)))\n-        self.widget.selected_rows = list(range(0, len(self.data.domain.variables), 10))\n+        self.widget.selected_rows = list(range(0, len(self.data), 10))\n         self.widget.set_selection()\n         return self.widget.selected_rows\n \n@@ -168,6 +168,34 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n             w.grab()\n         w.controls.show_distributions.toggle()\n \n+    def test_whole_rows(self):\n+        w = self.widget\n+        self.send_signal(w.Inputs.data, self.data, 0)\n+        self.assertTrue(w.select_rows)  # default value\n+        with excepthook_catch():\n+            w.controls.select_rows.toggle()\n+        self.assertFalse(w.select_rows)\n+        w.selected_cols = [0, 1]\n+        w.selected_rows = [0, 1, 2, 3]\n+        w.set_selection()\n+        out = self.get_output(w.Outputs.selected_data)\n+        self.assertEqual(out.domain,\n+                         Domain([self.data.domain.attributes[0]], self.data.domain.class_var))\n+        with excepthook_catch():\n+            w.controls.select_rows.toggle()\n+        out = self.get_output(w.Outputs.selected_data)\n+        self.assertTrue(w.select_rows)\n+        self.assertEqual(out.domain,\n+                         self.data.domain)\n+\n+    def test_show_attribute_labels(self):\n+        w = self.widget\n+        self.send_signal(w.Inputs.data, self.data, 0)\n+        self.assertTrue(w.show_attribute_labels)  # default value\n+        with excepthook_catch():\n+            w.controls.show_attribute_labels.toggle()\n+        self.assertFalse(w.show_attribute_labels)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5408.0, "instance_id": "biolab__orange3-5408", "issue_numbers": 0, "base_commit": "4dfc1ee32dedd3220241a88cfb6fceaa45186956", "patch": "diff --git a/Orange/widgets/visualize/owlineplot.py b/Orange/widgets/visualize/owlineplot.py\nindex bce51e2b4..0a013584c 100644\n--- a/Orange/widgets/visualize/owlineplot.py\n+++ b/Orange/widgets/visualize/owlineplot.py\n@@ -802,7 +802,7 @@ class OWLinePlot(OWWidget):\n \n     def plot_groups(self):\n         self._remove_groups()\n-        data = self.data[self.valid_data, self.graph_variables]\n+        data = self.data[self.valid_data][:, self.graph_variables]\n         if self.group_var is None:\n             self._plot_group(data, np.where(self.valid_data)[0])\n         else:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owlineplot.py b/Orange/widgets/visualize/tests/test_owlineplot.py\nindex e82a223ea..8260a1f04 100644\n--- a/Orange/widgets/visualize/tests/test_owlineplot.py\n+++ b/Orange/widgets/visualize/tests/test_owlineplot.py\n@@ -232,6 +232,14 @@ class TestOWLinePLot(WidgetTest, WidgetOutputsTestMixin):\n         self.assertEqual(p, 2)\n         self.assertFalse(self.widget.graph.legend.isVisible())\n \n+    def test_group_var_none_single_instance(self):\n+        self.send_signal(self.widget.Inputs.data, self.housing[:1])\n+        m, n, p = self.widget.graph.view_box._profile_items.shape\n+        self.assertEqual(m, len(self.housing.domain.attributes))\n+        self.assertEqual(n, 1)\n+        self.assertEqual(p, 2)\n+        self.assertFalse(self.widget.graph.legend.isVisible())\n+\n     def test_datasets(self):\n         for ds in datasets.datasets():\n             self.send_signal(self.widget.Inputs.data, ds)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6462.0, "instance_id": "biolab__orange3-6462", "issue_numbers": 0, "base_commit": "e0ee124f82b186de0b693dadf98011ccdf449bf2", "patch": "diff --git a/Orange/widgets/data/owdatasets.py b/Orange/widgets/data/owdatasets.py\nindex 91b309882..d46a37b12 100644\n--- a/Orange/widgets/data/owdatasets.py\n+++ b/Orange/widgets/data/owdatasets.py\n@@ -204,6 +204,7 @@ class OWDataSets(OWWidget):\n \n     #: Selected dataset id\n     selected_id = settings.Setting(None)   # type: Optional[str]\n+    language = settings.Setting(DEFAULT_LANG)\n \n     #: main area splitter state\n     splitter_state = settings.Setting(b'')  # type: bytes\n@@ -236,7 +237,11 @@ class OWDataSets(OWWidget):\n         layout.addSpacing(20)\n         layout.addWidget(QLabel(\"Show data sets in \"))\n         lang_combo = self.language_combo = QComboBox()\n-        lang_combo.addItems([self.DEFAULT_LANG, self.ALL_LANGUAGES])\n+        languages = [self.DEFAULT_LANG, self.ALL_LANGUAGES]\n+        if self.language is not None and self.language not in languages:\n+            languages.insert(1, self.language)\n+        lang_combo.addItems(languages)\n+        lang_combo.setCurrentText(self.language)\n         lang_combo.activated.connect(self._on_language_changed)\n         layout.addWidget(lang_combo)\n         self.mainArea.layout().addLayout(layout)\n@@ -353,7 +358,10 @@ class OWDataSets(OWWidget):\n         combo = self.language_combo\n         current_language = combo.currentText()\n         allkeys = set(self.allinfo_local) | set(self.allinfo_remote)\n-        languages = sorted({self._parse_info(key).language for key in allkeys})\n+        languages = {self._parse_info(key).language for key in allkeys}\n+        if self.language is not None:\n+            languages.add(self.language)\n+        languages = sorted(languages)\n         combo.clear()\n         if self.DEFAULT_LANG not in languages:\n             combo.addItem(self.DEFAULT_LANG)\n@@ -408,10 +416,10 @@ class OWDataSets(OWWidget):\n     def _on_language_changed(self):\n         combo = self.language_combo\n         if combo.currentIndex() == combo.count() - 1:\n-            language = None\n+            self.language = None\n         else:\n-            language = combo.currentText()\n-        self.view.model().setLanguage(language)\n+            self.language = combo.currentText()\n+        self.view.model().setLanguage(self.language)\n \n     @Slot(object)\n     def __set_index(self, f):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasets.py b/Orange/widgets/data/tests/test_owdatasets.py\nindex 8faa5f623..90cb78ec3 100644\n--- a/Orange/widgets/data/tests/test_owdatasets.py\n+++ b/Orange/widgets/data/tests/test_owdatasets.py\n@@ -62,6 +62,27 @@ class TestOWDataSets(WidgetTest):\n         model.setLanguage(None)\n         self.assertEqual(model.rowCount(), 2)\n \n+    @patch(\"Orange.widgets.data.owdatasets.list_remote\",\n+           Mock(return_value={('core', 'foo.tab'): {\"language\": \"English\"},\n+                              ('core', 'bar.tab'): {\"language\": \"Sloven\u0161\u010dina\"}}))\n+    @patch(\"Orange.widgets.data.owdatasets.list_local\",\n+           Mock(return_value={}))\n+    def test_remember_language(self):\n+        w = self.create_widget(OWDataSets)  # type: OWDataSets\n+        self.wait_until_stop_blocking(w)\n+        w.language_combo.setCurrentText(\"Sloven\u0161\u010dina\")\n+        w.language_combo.activated.emit(w.language_combo.currentIndex())\n+        settings = w.settingsHandler.pack_data(w)\n+\n+        w2 = self.create_widget(OWDataSets, stored_settings=settings)\n+        self.wait_until_stop_blocking(w2)\n+        self.assertEqual(w2.language_combo.currentText(), \"Sloven\u0161\u010dina\")\n+\n+        settings[\"language\"] = \"Klingon\"\n+        w2 = self.create_widget(OWDataSets, stored_settings=settings)\n+        self.wait_until_stop_blocking(w2)\n+        self.assertEqual(w2.language_combo.currentText(), \"Klingon\")\n+\n     @patch(\"Orange.widgets.data.owdatasets.list_remote\",\n            Mock(return_value={('core', 'iris.tab'): {}}))\n     @patch(\"Orange.widgets.data.owdatasets.list_local\",\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6575.0, "instance_id": "biolab__orange3-6575", "issue_numbers": 0, "base_commit": "3dd6d9c95706be704b694cbf3755a9be2a0562d3", "patch": "diff --git a/Orange/widgets/data/owdatasets.py b/Orange/widgets/data/owdatasets.py\nindex d46a37b12..7c4d15f59 100644\n--- a/Orange/widgets/data/owdatasets.py\n+++ b/Orange/widgets/data/owdatasets.py\n@@ -26,7 +26,8 @@ from serverfiles import LocalFiles, ServerFiles, sizeformat\n \n import Orange.data\n from Orange.misc.environ import data_dir\n-from Orange.widgets import settings, gui\n+from Orange.widgets import  gui\n+from Orange.widgets.settings import Setting\n from Orange.widgets.utils.signals import Output\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n from Orange.widgets.widget import OWWidget, Msg\n@@ -203,12 +204,12 @@ class OWDataSets(OWWidget):\n         data = Output(\"Data\", Orange.data.Table)\n \n     #: Selected dataset id\n-    selected_id = settings.Setting(None)   # type: Optional[str]\n-    language = settings.Setting(DEFAULT_LANG)\n+    selected_id = Setting(None)   # type: Optional[str]\n+    language = Setting(DEFAULT_LANG)\n \n     #: main area splitter state\n-    splitter_state = settings.Setting(b'')  # type: bytes\n-    header_state = settings.Setting(b'')    # type: bytes\n+    splitter_state = Setting(b'')  # type: bytes\n+    header_state = Setting(b'')    # type: bytes\n \n     def __init__(self):\n         super().__init__()\n@@ -408,7 +409,8 @@ class OWDataSets(OWWidget):\n             row = [item1, item2, item3, item4, item5, item6, item7]\n             model.appendRow(row)\n \n-            if os.path.join(*file_path) == self.selected_id:\n+            # for settings do not use os.path.join (Windows separator is different)\n+            if \"/\".join(file_path) == self.selected_id:\n                 current_index = i\n \n         return model, current_index\n@@ -524,7 +526,8 @@ class OWDataSets(OWWidget):\n             di = current.data(Qt.UserRole)\n             text = description_html(di)\n             self.descriptionlabel.setText(text)\n-            self.selected_id = os.path.join(di.prefix, di.filename)\n+            # for settings do not use os.path.join (Windows separator is different)\n+            self.selected_id = \"/\".join(di.file_path)\n         else:\n             self.descriptionlabel.setText(\"\")\n             self.selected_id = None\n@@ -640,6 +643,12 @@ class OWDataSets(OWWidget):\n     def load_data(path):\n         return Orange.data.Table(path)\n \n+    @classmethod\n+    def migrate_settings(cls, settings, _):\n+        # until including 3.36.0 selected dataset was saved with \\ on Windows\n+        if \"selected_id\" in settings and isinstance(settings[\"selected_id\"], str):\n+            settings[\"selected_id\"] = settings[\"selected_id\"].replace(\"\\\\\", \"/\")\n+\n \n class FutureWatcher(QObject):\n     done = Signal(object)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasets.py b/Orange/widgets/data/tests/test_owdatasets.py\nindex 90cb78ec3..fb4fab763 100644\n--- a/Orange/widgets/data/tests/test_owdatasets.py\n+++ b/Orange/widgets/data/tests/test_owdatasets.py\n@@ -96,6 +96,25 @@ class TestOWDataSets(WidgetTest):\n         # select the only dataset\n         sel_type = QItemSelectionModel.ClearAndSelect | QItemSelectionModel.Rows\n         w.view.selectionModel().select(w.view.model().index(0, 0), sel_type)\n+        self.assertEqual(w.selected_id, \"core/iris.tab\")\n+        w.commit()\n+        iris = self.get_output(w.Outputs.data, w)\n+        self.assertEqual(len(iris), 150)\n+\n+    @patch(\"Orange.widgets.data.owdatasets.list_remote\",\n+           Mock(return_value={('dir1', 'dir2', 'foo.tab'): {}}))\n+    @patch(\"Orange.widgets.data.owdatasets.list_local\",\n+           Mock(return_value={}))\n+    @patch(\"Orange.widgets.data.owdatasets.ensure_local\",\n+           Mock(return_value=\"iris.tab\"))\n+    @WidgetTest.skipNonEnglish\n+    def test_download_multidir(self):\n+        w = self.create_widget(OWDataSets)  # type: OWDataSets\n+        self.wait_until_stop_blocking(w)\n+        # select the only dataset\n+        sel_type = QItemSelectionModel.ClearAndSelect | QItemSelectionModel.Rows\n+        w.view.selectionModel().select(w.view.model().index(0, 0), sel_type)\n+        self.assertEqual(w.selected_id, \"dir1/dir2/foo.tab\")\n         w.commit()\n         iris = self.get_output(w.Outputs.data, w)\n         self.assertEqual(len(iris), 150)\n@@ -112,6 +131,23 @@ class TestOWDataSets(WidgetTest):\n         self.wait_until_stop_blocking(w)\n         self.assertEqual(w.view.model().rowCount(), 2)\n \n+    def test_migrate_selected_id(self):\n+        settings = {}\n+        OWDataSets.migrate_settings(settings, 0)\n+        self.assertNotIn(\"selected_id\", settings)\n+\n+        settings = {\"selected_id\": None}\n+        OWDataSets.migrate_settings(settings, 0)\n+        self.assertEqual(settings[\"selected_id\"], None)\n+\n+        settings = {\"selected_id\": \"dir1\\\\bar\"}\n+        OWDataSets.migrate_settings(settings, 0)\n+        self.assertEqual(settings[\"selected_id\"], \"dir1/bar\")\n+\n+        settings = {\"selected_id\": \"dir1/bar\"}\n+        OWDataSets.migrate_settings(settings, 0)\n+        self.assertEqual(settings[\"selected_id\"], \"dir1/bar\")\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5513.0, "instance_id": "biolab__orange3-5513", "issue_numbers": 0, "base_commit": "8a1bb1be9e7211fedaf3018771d294389e5626ff", "patch": "diff --git a/Orange/widgets/unsupervised/owpca.py b/Orange/widgets/unsupervised/owpca.py\nindex d1904b259..1233aba41 100644\n--- a/Orange/widgets/unsupervised/owpca.py\n+++ b/Orange/widgets/unsupervised/owpca.py\n@@ -293,22 +293,36 @@ class OWPCA(widget.OWWidget):\n                 self._transformed = self._pca(self.data)\n             transformed = self._transformed\n \n+            if self._variance_ratio is not None:\n+                for var, explvar in zip(\n+                        transformed.domain.attributes,\n+                        self._variance_ratio[:self.ncomponents]):\n+                    var.attributes[\"variance\"] = round(explvar, 6)\n             domain = Domain(\n                 transformed.domain.attributes[:self.ncomponents],\n                 self.data.domain.class_vars,\n                 self.data.domain.metas\n             )\n             transformed = transformed.from_table(domain, transformed)\n+\n             # prevent caching new features by defining compute_value\n             proposed = [a.name for a in self._pca.orig_domain.attributes]\n             meta_name = get_unique_names(proposed, 'components')\n-            dom = Domain(\n-                [ContinuousVariable(name, compute_value=lambda _: None)\n-                 for name in proposed],\n-                metas=[StringVariable(name=meta_name)])\n+            meta_vars = [StringVariable(name=meta_name)]\n             metas = numpy.array([['PC{}'.format(i + 1)\n                                   for i in range(self.ncomponents)]],\n                                 dtype=object).T\n+            if self._variance_ratio is not None:\n+                variance_name = get_unique_names(proposed, \"variance\")\n+                meta_vars.append(ContinuousVariable(variance_name))\n+                metas = numpy.hstack(\n+                    (metas,\n+                     self._variance_ratio[:self.ncomponents, None]))\n+\n+            dom = Domain(\n+                [ContinuousVariable(name, compute_value=lambda _: None)\n+                 for name in proposed],\n+                metas=meta_vars)\n             components = Table(dom, self._pca.components_[:self.ncomponents],\n                                metas=metas)\n             components.name = 'components'\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owpca.py b/Orange/widgets/unsupervised/tests/test_owpca.py\nindex 55ced0798..9efb58876 100644\n--- a/Orange/widgets/unsupervised/tests/test_owpca.py\n+++ b/Orange/widgets/unsupervised/tests/test_owpca.py\n@@ -95,6 +95,27 @@ class TestOWPCA(WidgetTest):\n         out = self.get_output(self.widget.Outputs.components)\n         self.assertEqual(out.domain.metas[0].name, 'components (1)')\n \n+    def test_variance_attr(self):\n+        self.widget.ncomponents = 2\n+        self.send_signal(self.widget.Inputs.data, self.iris)\n+        self.wait_until_stop_blocking()\n+        self.widget._variance_ratio = np.array([0.5, 0.25, 0.2, 0.05])\n+        self.widget.unconditional_commit()\n+\n+        result = self.get_output(self.widget.Outputs.transformed_data)\n+        pc1, pc2 = result.domain.attributes\n+        self.assertEqual(pc1.attributes[\"variance\"], 0.5)\n+        self.assertEqual(pc2.attributes[\"variance\"], 0.25)\n+\n+        result = self.get_output(self.widget.Outputs.data)\n+        pc1, pc2 = result.domain.metas\n+        self.assertEqual(pc1.attributes[\"variance\"], 0.5)\n+        self.assertEqual(pc2.attributes[\"variance\"], 0.25)\n+\n+        result = self.get_output(self.widget.Outputs.components)\n+        np.testing.assert_almost_equal(result.get_column_view(\"variance\")[0].T,\n+                                       [0.5, 0.25])\n+\n     def test_sparse_data(self):\n         \"\"\"Check that PCA returns the same results for both dense and sparse data.\"\"\"\n         dense_data, sparse_data = self.iris, self.iris.to_sparse()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6324.0, "instance_id": "biolab__orange3-6324", "issue_numbers": 0, "base_commit": "a7d215ef6d2598d20a7dee1c42490a0d0d962735", "patch": "diff --git a/Orange/widgets/data/oweditdomain.py b/Orange/widgets/data/oweditdomain.py\nindex 30918cb33..8443687b5 100644\n--- a/Orange/widgets/data/oweditdomain.py\n+++ b/Orange/widgets/data/oweditdomain.py\n@@ -1547,7 +1547,7 @@ class TimeVariableEditor(VariableEditor):\n \n     def set_data(self, var, transform=()):\n         super().set_data(var, transform)\n-        if self.parent() is not None and isinstance(self.parent().var, Time):\n+        if self.parent() is not None and isinstance(self.parent().var, (Time, Real)):\n             # when transforming from time to time disable format selection combo\n             self.format_cb.setEnabled(False)\n         else:\n@@ -2730,11 +2730,13 @@ def apply_reinterpret_c(var, tr, data: MArray):\n     elif isinstance(tr, AsContinuous):\n         return var\n     elif isinstance(tr, AsString):\n-        # TimeVar will be interpreted by StrpTime later\n         tstr = ToStringTransform(var)\n         rvar = Orange.data.StringVariable(name=var.name, compute_value=tstr)\n     elif isinstance(tr, AsTime):\n-        rvar = Orange.data.TimeVariable(name=var.name, compute_value=Identity(var))\n+        # continuous variable is always transformed to time as UNIX epoch\n+        rvar = Orange.data.TimeVariable(\n+            name=var.name, compute_value=Identity(var), have_time=1, have_date=1\n+        )\n     else:\n         assert False\n     return copy_attributes(rvar, var)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_oweditdomain.py b/Orange/widgets/data/tests/test_oweditdomain.py\nindex 6c14ef279..3e41baae5 100644\n--- a/Orange/widgets/data/tests/test_oweditdomain.py\n+++ b/Orange/widgets/data/tests/test_oweditdomain.py\n@@ -1015,6 +1015,20 @@ class TestReinterpretTransforms(TestCase):\n         v = apply_transform(domain.metas[0],table, [])\n         self.assertIs(v, domain.metas[0])\n \n+    def test_to_time_variable(self):\n+        table = self.data\n+        tr = AsTime()\n+        dtr = []\n+        for v in table.domain:\n+            strp = StrpTime(\"Detect automatically\", None, 1, 1)\n+            vtr = apply_transform_var(\n+                apply_reinterpret(v, tr, table_column_data(table, v)), [strp]\n+            )\n+            dtr.append(vtr)\n+        ttable = table.transform(Domain([], metas=dtr))\n+        for var in ttable.domain:\n+            self.assertTrue(var.have_date or var.have_time)\n+\n \n class TestUtils(TestCase):\n     def test_mapper(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6272.0, "instance_id": "biolab__orange3-6272", "issue_numbers": 0, "base_commit": "975aaf50cc6d286dcbd3454849f89888ef2ca050", "patch": "diff --git a/Orange/widgets/data/owfeatureconstructor.py b/Orange/widgets/data/owfeatureconstructor.py\nindex 4b85d06ba..143861424 100644\n--- a/Orange/widgets/data/owfeatureconstructor.py\n+++ b/Orange/widgets/data/owfeatureconstructor.py\n@@ -369,7 +369,7 @@ class DescriptorModel(itemmodels.PyListModel):\n             return super().data(index, role)\n \n \n-def freevars(exp, env):\n+def freevars(exp: ast.AST, env: List[str]):\n     \"\"\"\n     Return names of all free variables in a parsed (expression) AST.\n \n@@ -402,11 +402,14 @@ def freevars(exp, env):\n     elif etype == ast.Lambda:\n         args = exp.args\n         assert isinstance(args, ast.arguments)\n-        argnames = [a.arg for a in args.args]\n-        argnames += [args.vararg.arg] if args.vararg else []\n-        argnames += [a.arg for a in args.kwonlyargs] if args.kwonlyargs else []\n-        argnames += [args.kwarg] if args.kwarg else []\n-        return freevars(exp.body, env + argnames)\n+        arg_names = [a.arg for a in chain(args.posonlyargs, args.args)]\n+        arg_names += [args.vararg.arg] if args.vararg else []\n+        arg_names += [a.arg for a in args.kwonlyargs] if args.kwonlyargs else []\n+        arg_names += [args.kwarg.arg] if args.kwarg else []\n+        vars_ = chain.from_iterable(\n+            freevars(e, env) for e in chain(args.defaults, args.kw_defaults)\n+        )\n+        return list(vars_) + freevars(exp.body, env + arg_names)\n     elif etype == ast.IfExp:\n         return (freevars(exp.test, env) + freevars(exp.body, env) +\n                 freevars(exp.orelse, env))\n@@ -420,7 +423,7 @@ def freevars(exp, env):\n         vars_ = []\n         for gen in exp.generators:\n             target_names = freevars(gen.target, [])  # assigned names\n-            vars_iter = freevars(gen.iter, env)\n+            vars_iter = freevars(gen.iter, env + env_ext)\n             env_ext += target_names\n             vars_ifs = list(chain(*(freevars(ifexp, env + target_names)\n                                     for ifexp in gen.ifs or [])))\n@@ -500,7 +503,7 @@ class FeatureConstructorHandler(DomainContextHandler):\n         for var in metas:\n             available[sanitized_name(var)] = None\n \n-        if freevars(exp_ast, available):\n+        if freevars(exp_ast, list(available)):\n             return False\n         return True\n \n@@ -944,16 +947,12 @@ def validate_exp(exp):\n     \"\"\"\n     Validate an `ast.AST` expression.\n \n-    Only expressions with no list,set,dict,generator comprehensions\n-    are accepted.\n-\n     Parameters\n     ----------\n     exp : ast.AST\n         A parsed abstract syntax tree\n-\n     \"\"\"\n-    # pylint: disable=too-many-branches\n+    # pylint: disable=too-many-branches,too-many-return-statements\n     if not isinstance(exp, ast.AST):\n         raise TypeError(\"exp is not a 'ast.AST' instance\")\n \n@@ -966,12 +965,21 @@ def validate_exp(exp):\n         return all(map(validate_exp, [exp.left, exp.right]))\n     elif etype == ast.UnaryOp:\n         return validate_exp(exp.operand)\n+    elif etype == ast.Lambda:\n+        return all(validate_exp(e) for e in exp.args.defaults) and \\\n+               all(validate_exp(e) for e in exp.args.kw_defaults) and \\\n+               validate_exp(exp.body)\n     elif etype == ast.IfExp:\n         return all(map(validate_exp, [exp.test, exp.body, exp.orelse]))\n     elif etype == ast.Dict:\n         return all(map(validate_exp, chain(exp.keys, exp.values)))\n     elif etype == ast.Set:\n         return all(map(validate_exp, exp.elts))\n+    elif etype in (ast.SetComp, ast.ListComp, ast.GeneratorExp):\n+        return validate_exp(exp.elt) and all(map(validate_exp, exp.generators))\n+    elif etype == ast.DictComp:\n+        return validate_exp(exp.key) and validate_exp(exp.value) and \\\n+               all(map(validate_exp, exp.generators))\n     elif etype == ast.Compare:\n         return all(map(validate_exp, [exp.left] + exp.comparators))\n     elif etype == ast.Call:\n@@ -979,7 +987,6 @@ def validate_exp(exp):\n                        [k.value for k in exp.keywords or []])\n         return all(map(validate_exp, subexp))\n     elif etype == ast.Starred:\n-        assert isinstance(exp.ctx, ast.Load)\n         return validate_exp(exp.value)\n     elif etype in [ast.Num, ast.Str, ast.Bytes, ast.Ellipsis, ast.NameConstant]:\n         return True\n@@ -990,7 +997,6 @@ def validate_exp(exp):\n     elif etype == ast.Subscript:\n         return all(map(validate_exp, [exp.value, exp.slice]))\n     elif etype in {ast.List, ast.Tuple}:\n-        assert isinstance(exp.ctx, ast.Load)\n         return all(map(validate_exp, exp.elts))\n     elif etype == ast.Name:\n         return True\n@@ -1003,6 +1009,9 @@ def validate_exp(exp):\n         return validate_exp(exp.value)\n     elif etype == ast.keyword:\n         return validate_exp(exp.value)\n+    elif etype == ast.comprehension and not exp.is_async:\n+        return validate_exp(exp.target) and validate_exp(exp.iter) and \\\n+               all(map(validate_exp, exp.ifs))\n     else:\n         raise ValueError(exp)\n \n@@ -1173,9 +1182,9 @@ __ALLOWED = [\n     \"bin\", \"bool\", \"bytearray\", \"bytes\", \"chr\", \"complex\", \"dict\",\n     \"divmod\", \"enumerate\", \"filter\", \"float\", \"format\", \"frozenset\",\n     \"getattr\", \"hasattr\", \"hash\", \"hex\", \"id\", \"int\", \"iter\", \"len\",\n-    \"list\", \"map\", \"memoryview\", \"next\", \"object\",\n+    \"list\", \"map\", \"max\", \"memoryview\", \"min\", \"next\", \"object\",\n     \"oct\", \"ord\", \"pow\", \"range\", \"repr\", \"reversed\", \"round\",\n-    \"set\", \"slice\", \"sorted\", \"str\", \"tuple\", \"type\",\n+    \"set\", \"slice\", \"sorted\", \"str\", \"sum\", \"tuple\", \"type\",\n     \"zip\"\n ]\n \n@@ -1209,9 +1218,6 @@ __GLOBALS.update({\n     \"nanargmin\": lambda *args: np.nanargmin(args),\n     \"nanvar\": lambda *args: np.nanvar(args),\n     \"mean\": lambda *args: np.mean(args),\n-    \"min\": lambda *args: np.min(args),\n-    \"max\": lambda *args: np.max(args),\n-    \"sum\": lambda *args: np.sum(args),\n     \"std\": lambda *args: np.std(args),\n     \"median\": lambda *args: np.median(args),\n     \"cumsum\": lambda *args: np.cumsum(args),\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeatureconstructor.py b/Orange/widgets/data/tests/test_owfeatureconstructor.py\nindex 1b16f6f70..11aaf0f1b 100644\n--- a/Orange/widgets/data/tests/test_owfeatureconstructor.py\n+++ b/Orange/widgets/data/tests/test_owfeatureconstructor.py\n@@ -226,20 +226,34 @@ class TestTools(unittest.TestCase):\n         self.assertEqual(freevars_(\"{a, b}\"), [\"a\", \"b\"])\n         self.assertEqual(freevars_(\"0 if abs(a) < 0.1 else b\", [\"abs\"]),\n                          [\"a\", \"b\"])\n+        self.assertEqual(freevars_(\"lambda: a\", []), [\"a\"])\n+        self.assertEqual(freevars_(\"lambda: a\", [\"a\"]), [])\n         self.assertEqual(freevars_(\"lambda a: b + 1\"), [\"b\"])\n         self.assertEqual(freevars_(\"lambda a: b + 1\", [\"b\"]), [])\n         self.assertEqual(freevars_(\"lambda a: a + 1\"), [])\n         self.assertEqual(freevars_(\"(lambda a: a + 1)(a)\"), [\"a\"])\n         self.assertEqual(freevars_(\"lambda a, *arg: arg + (a,)\"), [])\n         self.assertEqual(freevars_(\"lambda a, *arg, **kwargs: arg + (a,)\"), [])\n-\n+        self.assertEqual(freevars_(\"lambda a: a + c\", []), [\"c\"])\n+        self.assertEqual(freevars_(\"lambda a: a + c\", [\"c\"]), [])\n+        self.assertEqual(freevars_(\"lambda a, b=k: a + c\", []), [\"k\", \"c\"])\n+        self.assertEqual(freevars_(\"lambda *a, b=k: a + c\", []), [\"k\", \"c\"])\n+        self.assertEqual(freevars_(\"lambda a,/, b=k: a + c\", []), [\"k\", \"c\"])\n+        self.assertEqual(freevars_(\"lambda a,/, b=k, **kwg: a + c and kwg\", []),\n+                         [\"k\", \"c\"])\n         self.assertEqual(freevars_(\"[a for a in b]\"), [\"b\"])\n+        self.assertEqual(freevars_(\"[a for a, k in b]\"), [\"b\"])\n+        self.assertEqual(freevars_(\"[(a, j) for a in b]\"), [\"j\", \"b\"])\n+        self.assertEqual(freevars_(\"[a for k in b for a in k]\"), [\"b\"])\n+        self.assertEqual(freevars_(\"[a for k in b if k for a in k if a]\"),\n+                         [\"b\"])\n+        self.assertEqual(freevars_(\"[a for k in b if kk for a in k if aa]\"),\n+                         [\"b\", \"kk\", \"aa\"])\n         self.assertEqual(freevars_(\"[1 + a for c in b if c]\"), [\"a\", \"b\"])\n         self.assertEqual(freevars_(\"{a for _ in [] if b}\"), [\"a\", \"b\"])\n         self.assertEqual(freevars_(\"{a for _ in [] if b}\", [\"a\", \"b\"]), [])\n \n     def test_validate_exp(self):\n-\n         stmt = ast.parse(\"1\", mode=\"single\")\n         with self.assertRaises(ValueError):\n             validate_exp(stmt)\n@@ -272,16 +286,10 @@ class TestTools(unittest.TestCase):\n         self.assertTrue(validate_(\"[]\"))\n \n         with self.assertRaises(ValueError):\n-            validate_(\"[a for a in s]\")\n-\n-        with self.assertRaises(ValueError):\n-            validate_(\"(a for a in s)\")\n-\n-        with self.assertRaises(ValueError):\n-            validate_(\"{a for a in s}\")\n+            validate_(\"[i async for i in s]\")\n \n         with self.assertRaises(ValueError):\n-            validate_(\"{a:1 for a in s}\")\n+            validate_(\"(i async for i in s)\")\n \n \n class FeatureFuncTest(unittest.TestCase):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5605.0, "instance_id": "biolab__orange3-5605", "issue_numbers": 0, "base_commit": "c7e80dec9025ab1b7acd485ee43735459f3d46d3", "patch": "diff --git a/Orange/widgets/data/owtable.py b/Orange/widgets/data/owtable.py\nindex f8fa6b302..87fc04ba5 100644\n--- a/Orange/widgets/data/owtable.py\n+++ b/Orange/widgets/data/owtable.py\n@@ -593,7 +593,7 @@ class OWDataTable(OWWidget):\n \n     def _on_show_variable_labels_changed(self):\n         \"\"\"The variable labels (var.attribues) visibility was changed.\"\"\"\n-        for slot in self._inputs.values():\n+        for slot in self._inputs:\n             self._update_variable_labels(slot.view)\n \n     def _on_distribution_color_changed(self):\n@@ -619,7 +619,7 @@ class OWDataTable(OWWidget):\n             tab.reset()\n \n     def _on_select_rows_changed(self):\n-        for slot in self._inputs.values():\n+        for slot in self._inputs:\n             selection_model = slot.view.selectionModel()\n             selection_model.setSelectBlocks(not self.select_rows)\n             if self.select_rows:\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owtable.py b/Orange/widgets/data/tests/test_owtable.py\nindex 9c01ee2ca..10d682c53 100644\n--- a/Orange/widgets/data/tests/test_owtable.py\n+++ b/Orange/widgets/data/tests/test_owtable.py\n@@ -60,7 +60,7 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n \n     def _select_data(self):\n         self.widget.selected_cols = list(range(len(self.data.domain.variables)))\n-        self.widget.selected_rows = list(range(0, len(self.data.domain.variables), 10))\n+        self.widget.selected_rows = list(range(0, len(self.data), 10))\n         self.widget.set_selection()\n         return self.widget.selected_rows\n \n@@ -168,6 +168,34 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n             w.grab()\n         w.controls.show_distributions.toggle()\n \n+    def test_whole_rows(self):\n+        w = self.widget\n+        self.send_signal(w.Inputs.data, self.data, 0)\n+        self.assertTrue(w.select_rows)  # default value\n+        with excepthook_catch():\n+            w.controls.select_rows.toggle()\n+        self.assertFalse(w.select_rows)\n+        w.selected_cols = [0, 1]\n+        w.selected_rows = [0, 1, 2, 3]\n+        w.set_selection()\n+        out = self.get_output(w.Outputs.selected_data)\n+        self.assertEqual(out.domain,\n+                         Domain([self.data.domain.attributes[0]], self.data.domain.class_var))\n+        with excepthook_catch():\n+            w.controls.select_rows.toggle()\n+        out = self.get_output(w.Outputs.selected_data)\n+        self.assertTrue(w.select_rows)\n+        self.assertEqual(out.domain,\n+                         self.data.domain)\n+\n+    def test_show_attribute_labels(self):\n+        w = self.widget\n+        self.send_signal(w.Inputs.data, self.data, 0)\n+        self.assertTrue(w.show_attribute_labels)  # default value\n+        with excepthook_catch():\n+            w.controls.show_attribute_labels.toggle()\n+        self.assertFalse(w.show_attribute_labels)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4912.0, "instance_id": "biolab__orange3-4912", "issue_numbers": 0, "base_commit": "c11ec5efada3f52315b3939c66e8896a0d73f3ec", "patch": "diff --git a/Orange/widgets/data/owselectrows.py b/Orange/widgets/data/owselectrows.py\nindex 124b55ce6..8abb49f47 100644\n--- a/Orange/widgets/data/owselectrows.py\n+++ b/Orange/widgets/data/owselectrows.py\n@@ -554,7 +554,7 @@ class OWSelectRows(widget.OWWidget):\n                     invalidate_datetime()\n \n                 datetime_format = (var.have_date, var.have_time)\n-                column = self.data[:, var_idx]\n+                column = self.data.get_column_view(var_idx)[0]\n                 w = DateTimeWidget(self, column, datetime_format)\n                 w.set_datetime(lc[0])\n                 box.controls = [w]\n@@ -951,11 +951,10 @@ class DateTimeWidget(QDateTimeEdit):\n             return datetime(1970, 1, 1, tzinfo=timezone.utc) + \\\n                        timedelta(seconds=int(timestamp))\n \n-        item_list = [item for items in list(column) for item in items]\n         min_datetime = convert_timestamp(\n-            np.nanmin(item_list)).strftime(convert_format)\n+            np.nanmin(column)).strftime(convert_format)\n         max_datetime = convert_timestamp(\n-            np.nanmax(item_list)).strftime(convert_format)\n+            np.nanmax(column)).strftime(convert_format)\n         return min_datetime, max_datetime\n \n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectrows.py b/Orange/widgets/data/tests/test_owselectrows.py\nindex adf1187ab..17f3cc6ec 100644\n--- a/Orange/widgets/data/tests/test_owselectrows.py\n+++ b/Orange/widgets/data/tests/test_owselectrows.py\n@@ -10,7 +10,7 @@ from AnyQt.QtWidgets import QLineEdit, QComboBox\n \n from Orange.data import (\n     Table, Variable, ContinuousVariable, StringVariable, DiscreteVariable,\n-    Domain)\n+    Domain, TimeVariable)\n from Orange.preprocess import discretize\n from Orange.widgets.data import owselectrows\n from Orange.widgets.data.owselectrows import (\n@@ -59,6 +59,18 @@ DFValues = {\n     FilterDiscreteType.IsDefined: [],\n }\n \n+TFValues = {\n+    FilterContinuous.Equal: [QDate(2013, 5, 5)],\n+    FilterContinuous.NotEqual: [QDate(2013, 5, 5)],\n+    FilterContinuous.Less: [QDate(2013, 5, 5)],\n+    FilterContinuous.LessEqual: [QDate(2013, 5, 5)],\n+    FilterContinuous.Greater: [QDate(2013, 5, 5)],\n+    FilterContinuous.GreaterEqual: [QDate(2013, 5, 5)],\n+    FilterContinuous.Between: [QDate(2013, 5, 5), QDate(2015, 5, 5)],\n+    FilterContinuous.Outside: [QDate(2013, 5, 5), QDate(2015, 5, 5)],\n+    FilterContinuous.IsDefined: [],\n+}\n+\n \n class TestOWSelectRows(WidgetTest):\n     def setUp(self):\n@@ -75,6 +87,17 @@ class TestOWSelectRows(WidgetTest):\n             self.widget.conditions_changed()\n             self.widget.unconditional_commit()\n \n+        # continuous var in metas\n+        iris = Table.from_table(\n+            Domain([], metas=[iris.domain.attributes[0]]), iris\n+        )\n+        self.widget.set_data(iris)\n+        for i, (op, _) in enumerate(OWSelectRows.Operators[ContinuousVariable]):\n+            self.widget.remove_all()\n+            self.widget.add_row(iris.domain.metas[0], i, CFValues[op])\n+            self.widget.conditions_changed()\n+            self.widget.unconditional_commit()\n+\n     def test_filter_str(self):\n         zoo = Table(\"zoo\")[::5]\n         self.widget.auto_commit = False\n@@ -96,6 +119,39 @@ class TestOWSelectRows(WidgetTest):\n             self.widget.conditions_changed()\n             self.widget.unconditional_commit()\n \n+        # discrete var in metas\n+        lenses = Table.from_table(\n+            Domain([], metas=[lenses.domain.attributes[0]]), lenses\n+        )\n+        self.widget.set_data(lenses)\n+        for i, (op, _) in enumerate(OWSelectRows.Operators[DiscreteVariable]):\n+            self.widget.remove_all()\n+            self.widget.add_row(lenses.domain.metas[0], i, DFValues[op])\n+            self.widget.conditions_changed()\n+            self.widget.unconditional_commit()\n+\n+    def test_filter_time(self):\n+        data = Table(test_filename(\"datasets/cyber-security-breaches.tab\"))\n+        self.widget.auto_commit = False\n+        self.widget.set_data(data)\n+\n+        for i, (op, _) in enumerate(OWSelectRows.Operators[TimeVariable]):\n+            self.widget.remove_all()\n+            self.widget.add_row(data.domain[\"breach_start\"], i, TFValues[op])\n+            self.widget.conditions_changed()\n+            self.widget.unconditional_commit()\n+\n+        # time var in metas\n+        data = Table.from_table(\n+            Domain([], metas=[data.domain[\"breach_start\"]]), data\n+        )\n+        self.widget.set_data(data)\n+        for i, (op, _) in enumerate(OWSelectRows.Operators[TimeVariable]):\n+            self.widget.remove_all()\n+            self.widget.add_row(data.domain.metas[0], i, TFValues[op])\n+            self.widget.conditions_changed()\n+            self.widget.unconditional_commit()\n+\n     @override_locale(QLocale.C)  # Locale with decimal point\n     def test_continuous_filter_with_c_locale(self):\n         iris = Table(\"iris\")[:5]\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5847.0, "instance_id": "biolab__orange3-5847", "issue_numbers": 0, "base_commit": "0d9ad114fbc09e6224f17ab1fb687241b56e5e84", "patch": "diff --git a/Orange/widgets/visualize/ownomogram.py b/Orange/widgets/visualize/ownomogram.py\nindex d41d9ea0a..c1c24b600 100644\n--- a/Orange/widgets/visualize/ownomogram.py\n+++ b/Orange/widgets/visualize/ownomogram.py\n@@ -910,8 +910,7 @@ class OWNomogram(OWWidget):\n         if not isinstance(self.classifier, LogisticRegressionClassifier):\n             return\n \n-        self.domain = self.reconstruct_domain(self.classifier.original_domain,\n-                                              self.domain)\n+        self.domain = self.reconstruct_domain(self.classifier, self.domain)\n         self.data = self.classifier.original_data.transform(self.domain)\n         attrs, ranges, start = self.domain.attributes, [], 0\n         for attr in attrs:\n@@ -1273,8 +1272,9 @@ class OWNomogram(OWWidget):\n         self.report_plot()\n \n     @staticmethod\n-    def reconstruct_domain(original, preprocessed):\n+    def reconstruct_domain(classifier: Model, preprocessed: Domain) -> Domain:\n         # abuse dict to make \"in\" comparisons faster\n+        original = classifier.original_domain\n         attrs = OrderedDict()\n         for attr in preprocessed.attributes:\n             cv = attr._compute_value.variable._compute_value\n@@ -1284,7 +1284,13 @@ class OWNomogram(OWWidget):\n                 continue\n             attrs[var] = None   # we only need keys\n         attrs = list(attrs.keys())\n-        return Domain(attrs, original.class_var, original.metas)\n+\n+        orig_clv = original.class_var\n+        orig_data = classifier.original_data\n+        values = (orig_clv.values[int(i)] for i in\n+                  np.unique(orig_data.get_column_view(orig_clv)[0]))\n+        class_var = DiscreteVariable(original.class_var.name, values)\n+        return Domain(attrs, class_var, original.metas)\n \n     @staticmethod\n     def get_ruler_values(start, stop, max_width, round_to_nearest=True):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_ownomogram.py b/Orange/widgets/visualize/tests/test_ownomogram.py\nindex 538dfb0e5..87bb0e07c 100644\n--- a/Orange/widgets/visualize/tests/test_ownomogram.py\n+++ b/Orange/widgets/visualize/tests/test_ownomogram.py\n@@ -14,6 +14,7 @@ from Orange.classification import (\n from Orange.preprocess import Scale, Continuize\n from Orange.tests import test_filename\n from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.tests.utils import simulate\n from Orange.widgets.visualize.ownomogram import (\n     OWNomogram, DiscreteFeatureItem, ContinuousFeatureItem, ProbabilitiesDotItem,\n     MovableToolTip\n@@ -293,25 +294,52 @@ class TestOWNomogram(WidgetTest):\n     def test_reconstruct_domain(self):\n         data = Table(\"heart_disease\")\n         cls = LogisticRegressionLearner()(data)\n-        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        domain = OWNomogram.reconstruct_domain(cls, cls.domain)\n         transformed_data = cls.original_data.transform(domain)\n         self.assertEqual(transformed_data.X.shape, data.X.shape)\n         self.assertFalse(np.isnan(transformed_data.X[0]).any())\n \n         scaled_data = Scale()(data)\n         cls = LogisticRegressionLearner()(scaled_data)\n-        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        domain = OWNomogram.reconstruct_domain(cls, cls.domain)\n         transformed_data = cls.original_data.transform(domain)\n         self.assertEqual(transformed_data.X.shape, scaled_data.X.shape)\n         self.assertFalse(np.isnan(transformed_data.X[0]).any())\n \n         disc_data = Continuize()(data)\n         cls = LogisticRegressionLearner()(disc_data)\n-        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        domain = OWNomogram.reconstruct_domain(cls, cls.domain)\n         transformed_data = cls.original_data.transform(domain)\n         self.assertEqual(transformed_data.X.shape, disc_data.X.shape)\n         self.assertFalse(np.isnan(transformed_data.X[0]).any())\n \n+    def test_missing_class_value(self):\n+        iris = Table(\"iris\")\n+        iris_set_ver = iris[:100]\n+        target_cb = self.widget.controls.target_class_index\n+\n+        lr = LogisticRegressionLearner()(iris)\n+        self.send_signal(self.widget.Inputs.classifier, lr)\n+        simulate.combobox_activate_index(target_cb, 2)\n+        self.assertEqual(target_cb.currentIndex(), 2)\n+        self.assertEqual(target_cb.count(), 3)\n+\n+        lr = LogisticRegressionLearner()(iris_set_ver)\n+        self.send_signal(self.widget.Inputs.classifier, lr)\n+        self.assertEqual(target_cb.currentIndex(), 0)\n+        self.assertEqual(target_cb.count(), 2)\n+\n+        nb = NaiveBayesLearner()(iris)\n+        self.send_signal(self.widget.Inputs.classifier, nb)\n+        simulate.combobox_activate_index(target_cb, 2)\n+        self.assertEqual(target_cb.currentIndex(), 2)\n+        self.assertEqual(target_cb.count(), 3)\n+\n+        nb = NaiveBayesLearner()(iris_set_ver)\n+        self.send_signal(self.widget.Inputs.classifier, nb)\n+        self.assertEqual(target_cb.currentIndex(), 2)\n+        self.assertEqual(target_cb.count(), 3)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5995.0, "instance_id": "biolab__orange3-5995", "issue_numbers": 0, "base_commit": "8c1787f85baf27540fa01533242648336d312999", "patch": "diff --git a/Orange/widgets/data/owcreateinstance.py b/Orange/widgets/data/owcreateinstance.py\nindex d2fc8db97..53bb1e311 100644\n--- a/Orange/widgets/data/owcreateinstance.py\n+++ b/Orange/widgets/data/owcreateinstance.py\n@@ -16,6 +16,7 @@ from orangewidget.gui import Slider\n \n from Orange.data import DiscreteVariable, ContinuousVariable, \\\n     TimeVariable, Table, StringVariable, Variable, Domain\n+from Orange.data.util import get_unique_names\n from Orange.widgets import gui\n from Orange.widgets.utils.itemmodels import TableModel\n from Orange.widgets.settings import Setting\n@@ -646,12 +647,21 @@ class OWCreateInstance(OWWidget):\n                 data[:, var_name] = value\n         return data\n \n-    def _append_to_data(self, data: Table) -> Table:\n+    def _append_to_data(self, instance: Table) -> Table:\n         assert self.data\n-        assert len(data) == 1\n+        assert len(instance) == 1\n+        source_label = \"__source_widget\"\n \n-        var = DiscreteVariable(\"Source ID\", values=(self.data.name, data.name))\n-        data = Table.concatenate([self.data, data], axis=0)\n+        data = Table.concatenate([self.data, instance], axis=0)\n+        for var in self.data.domain.variables + self.data.domain.metas:\n+            if var.attributes.get(source_label) == OWCreateInstance:\n+                with data.unlocked():\n+                    data.get_column_view(var)[0][-1] = 1\n+                return data\n+\n+        name = get_unique_names(self.data.domain, \"Source ID\")\n+        var = DiscreteVariable(name, values=(self.data.name, instance.name))\n+        var.attributes[source_label] = OWCreateInstance\n         domain = Domain(data.domain.attributes, data.domain.class_vars,\n                         data.domain.metas + (var,))\n         data = data.transform(domain)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcreateinstance.py b/Orange/widgets/data/tests/test_owcreateinstance.py\nindex 2e12876f6..5316356cf 100644\n--- a/Orange/widgets/data/tests/test_owcreateinstance.py\n+++ b/Orange/widgets/data/tests/test_owcreateinstance.py\n@@ -54,6 +54,8 @@ class TestOWCreateInstance(WidgetTest):\n         self.assertIn(\"Source ID\", [m.name for m in output.domain.metas])\n         self.assertTupleEqual(output.domain.metas[0].values,\n                               (\"iris\", \"created\"))\n+        self.assertDictEqual(output.domain.metas[0].attributes,\n+                             {\"__source_widget\": OWCreateInstance})\n \n     def _get_init_buttons(self, widget=None):\n         if not widget:\n@@ -213,6 +215,47 @@ class TestOWCreateInstance(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, data)\n         self.send_signal(self.widget.Inputs.reference, data)\n \n+    def test_cascade_widgets(self):\n+        self.send_signal(self.widget.Inputs.data, self.data)\n+        output = self.get_output(self.widget.Outputs.data)\n+\n+        widget = self.create_widget(OWCreateInstance)\n+        self.send_signal(widget.Inputs.data, output, widget=widget)\n+        output = self.get_output(widget.Outputs.data, widget=widget)\n+        self.assertEqual(len(output), 152)\n+        self.assertEqual(len(output.domain.metas), 1)\n+        self.assertEqual(output.domain.metas[0].name, \"Source ID\")\n+        self.assertTrue(all(output.metas[:150, 0] == 0))\n+        self.assertTrue(all(output.metas[150:, 0] == 1))\n+\n+    def test_cascade_widgets_attributes(self):\n+        data = self.data.copy()\n+        data.domain.attributes[0].attributes = \\\n+            {\"__source_widget\": OWCreateInstance}\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+        self.assertEqual(len(output), 151)\n+        self.assertEqual(len(output.domain.variables), 5)\n+        self.assertEqual(len(output.domain.metas), 0)\n+\n+    def test_cascade_widgets_class_vars(self):\n+        data = self.data.copy()\n+        data.domain.class_var.attributes = \\\n+            {\"__source_widget\": OWCreateInstance}\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+        self.assertEqual(len(output), 151)\n+        self.assertEqual(len(output.domain.variables), 5)\n+        self.assertEqual(len(output.domain.metas), 0)\n+\n+        domain = Domain(data.domain.variables[:3], data.domain.variables[3:])\n+        data = data.transform(domain)\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+        self.assertEqual(len(output), 151)\n+        self.assertEqual(len(output.domain.variables), 5)\n+        self.assertEqual(len(output.domain.metas), 0)\n+\n \n class TestDiscreteVariableEditor(GuiTest):\n     @classmethod\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6170.0, "instance_id": "biolab__orange3-6170", "issue_numbers": 0, "base_commit": "e84b6c3b2992f6a50a5cebb7d5f0f5ef630b1361", "patch": "diff --git a/Orange/widgets/unsupervised/owdistances.py b/Orange/widgets/unsupervised/owdistances.py\nindex f75fb2f93..a7882a057 100644\n--- a/Orange/widgets/unsupervised/owdistances.py\n+++ b/Orange/widgets/unsupervised/owdistances.py\n@@ -185,8 +185,8 @@ class OWDistances(OWWidget, ConcurrentWidgetMixin):\n \n         def _check_tractability():\n             if metric is distance.Mahalanobis:\n-                if self.axis == 1:\n-                    # when computing distances by columns, we want < 100 rows\n+                if self.axis == 0:\n+                    # when computing distances by columns, we want < 1000 rows\n                     if len(data) > 1000:\n                         self.Error.data_too_large_for_mahalanobis(\"rows\")\n                         return False\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owdistances.py b/Orange/widgets/unsupervised/tests/test_owdistances.py\nindex a642c26fa..6fd5b0541 100644\n--- a/Orange/widgets/unsupervised/tests/test_owdistances.py\n+++ b/Orange/widgets/unsupervised/tests/test_owdistances.py\n@@ -214,15 +214,17 @@ class TestOWDistances(WidgetTest):\n \n         # by columns -- cannot handle too many rows\n         self.send_signal(self.widget.Inputs.data, bigrows)\n-        assert_error_shown()\n-        axis_buttons[0].click()\n         assert_no_error()\n-        axis_buttons[1].click()\n+        axis_buttons[0].click()\n         assert_error_shown()\n+        axis_buttons[1].click()\n+        assert_no_error()\n \n         self.send_signal(self.widget.Inputs.data, bigcols)\n-        assert_no_error()\n+        assert_error_shown()\n         axis_buttons[0].click()\n+        assert_no_error()\n+        axis_buttons[1].click()\n         assert_error_shown()\n \n         self.send_signal(widget.Inputs.data, self.iris)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6262.0, "instance_id": "biolab__orange3-6262", "issue_numbers": 0, "base_commit": "da5fd992a37611dad838721eb523ae0b3fa70446", "patch": "diff --git a/Orange/widgets/visualize/ownomogram.py b/Orange/widgets/visualize/ownomogram.py\nindex 622d77107..c1938412f 100644\n--- a/Orange/widgets/visualize/ownomogram.py\n+++ b/Orange/widgets/visualize/ownomogram.py\n@@ -18,7 +18,8 @@ from AnyQt.QtGui import QColor, QPainter, QFont, QPen, QBrush, QFontMetrics\n from AnyQt.QtCore import Qt, QRectF, QSize, QPropertyAnimation, QObject, \\\n     pyqtProperty\n \n-from Orange.data import Table, Domain, DiscreteVariable, ContinuousVariable\n+from Orange.data import Table, Domain, DiscreteVariable, ContinuousVariable, \\\n+    Variable\n from Orange.statistics.util import nanmin, nanmax, nanmean, unique\n from Orange.classification import Model\n from Orange.classification.naive_bayes import NaiveBayesModel\n@@ -1311,7 +1312,10 @@ class OWNomogram(OWWidget):\n         attrs = OrderedDict()\n         for attr in preprocessed.attributes:\n             cv = attr._compute_value.variable._compute_value\n-            var = cv.variable if cv else original[attr.name]\n+            if cv and isinstance(getattr(cv, \"variable\", None), Variable):\n+                var = cv.variable\n+            else:\n+                var = original[attr.name]\n             var = original[var.name] if var.name in original else attr\n             if var in attrs:    # the reason for OrderedDict\n                 continue\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_ownomogram.py b/Orange/widgets/visualize/tests/test_ownomogram.py\nindex 36eadc878..5f8ddb0f5 100644\n--- a/Orange/widgets/visualize/tests/test_ownomogram.py\n+++ b/Orange/widgets/visualize/tests/test_ownomogram.py\n@@ -339,6 +339,19 @@ class TestOWNomogram(WidgetTest):\n         self.assertEqual(target_cb.currentIndex(), 2)\n         self.assertEqual(target_cb.count(), 3)\n \n+    def test_compute_value(self):\n+        class ComputeValue:\n+            def __call__(self, table):\n+                return table.get_column(0)\n+\n+        iris = Table(\"iris\")\n+        attrs = list(iris.domain.attributes)\n+        attrs[0] = ContinuousVariable(attrs[0].name, 1, ComputeValue())\n+        domain = Domain(attrs, iris.domain.class_vars)\n+        data = iris.transform(domain)\n+        lr = LogisticRegressionLearner()(data)\n+        self.send_signal(self.widget.Inputs.classifier, lr)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5859.0, "instance_id": "biolab__orange3-5859", "issue_numbers": 0, "base_commit": "5c5c3be3dee4a15dbb6387495f5a14c3498c3a97", "patch": "diff --git a/Orange/widgets/evaluate/owcalibrationplot.py b/Orange/widgets/evaluate/owcalibrationplot.py\nindex 72c2822d8..853c7ae3c 100644\n--- a/Orange/widgets/evaluate/owcalibrationplot.py\n+++ b/Orange/widgets/evaluate/owcalibrationplot.py\n@@ -487,7 +487,7 @@ class OWCalibrationPlot(widget.OWWidget):\n         if results is not None:\n             problems = [\n                 msg for condition, msg in (\n-                    (len(results.folds) > 1,\n+                    (results.folds is not None and len(results.folds) > 1,\n                      \"each training data sample produces a different model\"),\n                     (results.models is None,\n                      \"test results do not contain stored models - try testing \"\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owcalibrationplot.py b/Orange/widgets/evaluate/tests/test_owcalibrationplot.py\nindex 87f1fdc9e..bfcb9cd91 100644\n--- a/Orange/widgets/evaluate/tests/test_owcalibrationplot.py\n+++ b/Orange/widgets/evaluate/tests/test_owcalibrationplot.py\n@@ -1,5 +1,6 @@\n import copy\n import warnings\n+import unittest\n from unittest.mock import Mock, patch\n \n import numpy as np\n@@ -637,3 +638,19 @@ class TestOWCalibrationPlot(WidgetTest, EvaluateTest):\n         self.assertTrue(widget.Warning.omitted_nan_prob_points.is_shown())\n         self._set_list_selection(widget.controls.selected_classifiers, [0, 2])\n         self.assertFalse(widget.Warning.omitted_folds.is_shown())\n+\n+    @patch(\"Orange.widgets.evaluate.owcalibrationplot.ThresholdClassifier\")\n+    @patch(\"Orange.widgets.evaluate.owcalibrationplot.CalibratedLearner\")\n+    def test_no_folds(self, *_):\n+        \"\"\"Warn about omitted points with nan probabiities\"\"\"\n+        widget = self.widget\n+\n+        self.results.folds = None\n+        self.send_signal(widget.Inputs.evaluation_results, self.results)\n+        widget.selected_classifiers = [0]\n+        widget.commit.now()\n+        self.assertIsNotNone(self.get_output(widget.Outputs.calibrated_model))\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6866.0, "instance_id": "biolab__orange3-6866", "issue_numbers": 0, "base_commit": "09df730fdec7230f6994971d7de241a6b784e23b", "patch": "diff --git a/Orange/widgets/model/owsvm.py b/Orange/widgets/model/owsvm.py\nindex ae492e774..5b55d114c 100644\n--- a/Orange/widgets/model/owsvm.py\n+++ b/Orange/widgets/model/owsvm.py\n@@ -35,6 +35,8 @@ class OWSVM(OWBaseLearner):\n     class Warning(OWBaseLearner.Warning):\n         sparse_data = Msg('Input data is sparse, default preprocessing is to scale it.')\n \n+    settings_version = 2\n+\n     #: Different types of SVMs\n     SVM, Nu_SVM = range(2)\n     #: SVM type\n@@ -156,8 +158,8 @@ class OWSVM(OWBaseLearner):\n         gamma.setSpecialValueText(self._default_gamma)\n         coef0 = gui.doubleSpin(\n             inbox, self, \"coef0\", 0.0, 10.0, 0.01, label=\" c: \", **common)\n-        degree = gui.doubleSpin(\n-            inbox, self, \"degree\", 0.0, 10.0, 0.5, label=\" d: \", **common)\n+        degree = gui.spin(\n+            inbox, self, \"degree\", 0, 10, 1, label=\" d: \", **common)\n         self._kernel_params = [gamma, coef0, degree]\n         gui.rubber(parambox)\n \n@@ -255,6 +257,12 @@ class OWSVM(OWBaseLearner):\n             items[\"Kernel\"] = \"Sigmoid, tanh({g:.4} x\u22c5y + {c:.4})\".format(\n                 g=gamma, c=self.coef0)\n \n+    @classmethod\n+    def migrate_settings(cls, settings, version):\n+        if version < 2:\n+            if \"degree\" in settings:\n+                settings[\"degree\"] = int(settings[\"degree\"])\n+\n \n if __name__ == \"__main__\":  # pragma: no cover\n     WidgetPreview(OWSVM).run(Table(\"iris\"))\n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owsvm.py b/Orange/widgets/model/tests/test_owsvm.py\nindex e6602da30..b165e4751 100644\n--- a/Orange/widgets/model/tests/test_owsvm.py\n+++ b/Orange/widgets/model/tests/test_owsvm.py\n@@ -102,3 +102,22 @@ class TestOWSVMClassification(WidgetTest, WidgetLearnerTestMixin):\n             data.X = csr_matrix(data.X)\n         self.send_signal(self.widget.Inputs.data, data)\n         self.assertTrue(self.widget.Warning.sparse_data.is_shown())\n+\n+    def test_change_degree(self):\n+        data = Table(\"iris\")\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.widget.kernel_box.buttons[1].click()\n+        degree_spin = self.widget._kernel_params[2]  # pylint: disable=protected-access\n+        degree_spin.stepUp()\n+        self.assertEqual(self.widget.degree, 4)\n+        self.click_apply()\n+        self.wait_until_stop_blocking()\n+        self.assertFalse(self.widget.Error.fitting_failed.is_shown())\n+\n+    def test_migrate_degree(self):\n+        settings = {}\n+        OWSVM.migrate_settings(settings, 1)\n+\n+        settings = {\"degree\": 4.0}\n+        OWSVM.migrate_settings(settings, 1)\n+        self.assertIsInstance(settings[\"degree\"], int)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5568.0, "instance_id": "biolab__orange3-5568", "issue_numbers": 0, "base_commit": "79ac616c6429614d1c47d2cbb8cece1982c99e72", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex 4be4959c0..3f63a4b73 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -411,8 +411,6 @@ class OWPredictions(OWWidget):\n                 self._update_data_sort_order, self.predictionsview,\n                 self.dataview))\n \n-        self.predictionsview.resizeColumnsToContents()\n-\n     def _update_data_sort_order(self, sort_source_view, sort_dest_view):\n         sort_dest = sort_dest_view.model()\n         sort_source = sort_source_view.model()\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex 28b2e15f5..125f9d49d 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -175,6 +175,21 @@ class TestOWPredictions(WidgetTest):\n         self.send_signal(self.widget.Inputs.predictors, cl_data, 1)\n         self.send_signal(self.widget.Inputs.data, data)\n \n+    def test_changed_class_var(self):\n+        def set_input(data, model):\n+            self.send_signals([\n+                (self.widget.Inputs.data, data),\n+                (self.widget.Inputs.predictors, model)\n+            ])\n+        iris = self.iris\n+        learner = ConstantLearner()\n+        heart_disease = Table(\"heart_disease\")\n+        # catch exceptions in item delegates etc. during switching inputs\n+        with excepthook_catch():\n+            set_input(iris[:5], learner(iris))\n+            set_input(Table(\"housing\"), None)\n+            set_input(heart_disease[:5], learner(heart_disease))\n+\n     def test_predictor_fails(self):\n         titanic = Table(\"titanic\")\n         failing_model = ConstantLearner()(titanic)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6784.0, "instance_id": "biolab__orange3-6784", "issue_numbers": 0, "base_commit": "d8818b5b5ec0e2ad1e2346554c404506ecfb33dc", "patch": "diff --git a/Orange/regression/pls.py b/Orange/regression/pls.py\nindex 7a6a5321e..5c9d46ceb 100644\n--- a/Orange/regression/pls.py\n+++ b/Orange/regression/pls.py\n@@ -36,7 +36,16 @@ class _PLSCommonTransform:\n         u = y_center @ pls.y_rotations_\n         \"\"\"\n         pls = self.pls_model.skl_model\n-        t, u = pls.transform(X, Y)\n+        mask = np.isnan(Y).any(axis=1)\n+        n_comp = pls.n_components\n+        t = np.full((len(X), n_comp), np.nan, dtype=float)\n+        u = np.full((len(X), n_comp), np.nan, dtype=float)\n+        if (~mask).sum() > 0:\n+            t_, u_ = pls.transform(X[~mask], Y[~mask])\n+            t[~mask] = t_\n+            u[~mask] = u_\n+        if mask.sum() > 0:\n+            t[mask] = pls.transform(X[mask])\n         return np.hstack((t, u))\n \n     def __call__(self, data):\n.", "test_patch": "diff --git a/Orange/regression/tests/test_pls.py b/Orange/regression/tests/test_pls.py\nindex 03d244124..f289e6907 100644\n--- a/Orange/regression/tests/test_pls.py\n+++ b/Orange/regression/tests/test_pls.py\n@@ -154,6 +154,38 @@ class TestPLSCommonTransform(unittest.TestCase):\n         m = PLSRegressionLearner()(table(10, 5, 2))\n         self.assertNotEqual(hash(transformer), hash(_PLSCommonTransform(m)))\n \n+    def test_missing_target(self):\n+        data = table(10, 5, 1)\n+        with data.unlocked(data.Y):\n+            data.Y[::3] = np.nan\n+        pls = PLSRegressionLearner()(data)\n+        proj = pls.project(data)\n+        self.assertFalse(np.isnan(proj.X).any())\n+        self.assertFalse(np.isnan(proj.metas[1::3]).any())\n+        self.assertFalse(np.isnan(proj.metas[2::3]).any())\n+        self.assertTrue(np.isnan(proj.metas[::3]).all())\n+\n+    def test_missing_target_multitarget(self):\n+        data = table(10, 5, 3)\n+        with data.unlocked(data.Y):\n+            data.Y[0] = np.nan\n+            data.Y[1, 1] = np.nan\n+\n+        pls = PLSRegressionLearner()(data)\n+        proj = pls.project(data)\n+        self.assertFalse(np.isnan(proj.X).any())\n+        self.assertFalse(np.isnan(proj.metas[2:]).any())\n+        self.assertTrue(np.isnan(proj.metas[:2]).all())\n+\n+    def test_apply_domain_classless_data(self):\n+        data = Table(\"housing\")\n+        pls = PLSRegressionLearner()(data)\n+        classless_data = data.transform(Domain(data.domain.attributes))[:5]\n+\n+        proj = pls.project(classless_data)\n+        self.assertFalse(np.isnan(proj.X).any())\n+        self.assertTrue(np.isnan(proj.metas).all())\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\ndiff --git a/Orange/widgets/model/tests/test_owpls.py b/Orange/widgets/model/tests/test_owpls.py\nindex 6e0481cc9..8125d5203 100644\n--- a/Orange/widgets/model/tests/test_owpls.py\n+++ b/Orange/widgets/model/tests/test_owpls.py\n@@ -1,4 +1,5 @@\n import unittest\n+import numpy as np\n \n from Orange.data import Table, Domain, StringVariable\n from Orange.widgets.model.owpls import OWPLS\n@@ -87,6 +88,21 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertEqual(components.Y.shape, (2, 2))\n         self.assertEqual(components.metas.shape, (2, 1))\n \n+    def test_missing_target(self):\n+        data = self._data[:5].copy()\n+        data.Y[[0, 4]] = np.nan\n+        self.send_signal(self.widget.Inputs.data, data)\n+        output = self.get_output(self.widget.Outputs.data)\n+        self.assertFalse(np.isnan(output.metas[:, 3:].astype(float)).any())\n+        self.assertTrue(np.isnan(output.metas[0, 1:3].astype(float)).all())\n+        self.assertTrue(np.isnan(output.metas[4, 1:3].astype(float)).all())\n+        self.assertFalse(np.isnan(output.metas[1:4, 1:3].astype(float)).any())\n+\n+        with data.unlocked(data.Y):\n+            data.Y[:] = np.nan\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.assertIsNone(self.get_output(self.widget.Outputs.data))\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6886.0, "instance_id": "biolab__orange3-6886", "issue_numbers": 0, "base_commit": "ba727343848a19f55813d1360bdb598243d82b8e", "patch": "diff --git a/Orange/widgets/model/owlogisticregression.py b/Orange/widgets/model/owlogisticregression.py\nindex 63c401b77..95db40a62 100644\n--- a/Orange/widgets/model/owlogisticregression.py\n+++ b/Orange/widgets/model/owlogisticregression.py\n@@ -49,7 +49,7 @@ class OWLogisticRegression(OWBaseLearner):\n     max_iter = 10000\n \n     penalty_types = (\"Lasso (L1)\", \"Ridge (L2)\", \"None\")\n-    penalty_types_short = [\"l1\", \"l2\", \"none\"]\n+    penalty_types_short = [\"l1\", \"l2\", None]\n \n     class Warning(OWBaseLearner.Warning):\n         class_weights_used = Msg(\"Weighting by class may decrease performance.\")\n@@ -86,7 +86,7 @@ class OWLogisticRegression(OWBaseLearner):\n     def set_c(self):\n         self.strength_C = self.C_s[self.C_index]\n         penalty = self.penalty_types_short[self.penalty_type]\n-        enable_c = penalty != \"none\"\n+        enable_c = penalty is not None\n         self.c_box.setEnabled(enable_c)\n         if enable_c:\n             fmt = \"C={}\" if self.strength_C >= 1 else \"C={:.3f}\"\n@@ -110,7 +110,7 @@ class OWLogisticRegression(OWBaseLearner):\n             self.Warning.class_weights_used()\n         else:\n             class_weight = None\n-        if penalty == \"none\":\n+        if penalty is None:\n             C = 1.0\n         else:\n             C = self.strength_C\n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owlogisticregression.py b/Orange/widgets/model/tests/test_owlogisticregression.py\nindex c604817e4..47139172f 100644\n--- a/Orange/widgets/model/tests/test_owlogisticregression.py\n+++ b/Orange/widgets/model/tests/test_owlogisticregression.py\n@@ -125,10 +125,10 @@ class TestOWLogisticRegression(WidgetTest, WidgetLearnerTestMixin):\n         self.assertTrue(self.widget.Warning.class_weights_used.is_shown())\n \n     def test_no_penalty(self):\n-        self.widget.set_penalty(\"none\")\n+        self.widget.set_penalty(None)\n         self.click_apply()\n         lr = self.get_output(self.widget.Outputs.learner)\n-        self.assertEqual(lr.penalty, \"none\")\n+        self.assertEqual(lr.penalty, None)\n         self.assertEqual(lr.C, 1.0)\n         self.assertEqual(self.widget.c_label.text(), \"N/A\")\n         self.assertFalse(self.widget.c_slider.isEnabledTo(self.widget))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6734.0, "instance_id": "biolab__orange3-6734", "issue_numbers": 0, "base_commit": "7aa3fe79511b1416f82b82530427edc90cf61278", "patch": "diff --git a/Orange/evaluation/testing.py b/Orange/evaluation/testing.py\nindex 34a798241..d40701206 100644\n--- a/Orange/evaluation/testing.py\n+++ b/Orange/evaluation/testing.py\n@@ -541,6 +541,11 @@ class Validation:\n                 results.failed[res.learner_i] = res.failed\n                 continue\n \n+            if len(res.values.shape) > 1 and res.values.shape[1] > 1:\n+                msg = \"Multiple targets are not supported.\"\n+                results.failed[res.learner_i] = ValueError(msg)\n+                continue\n+\n             if self.store_models:\n                 results.models[res.fold_i][res.learner_i] = res.model\n \n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owtestandscore.py b/Orange/widgets/evaluate/tests/test_owtestandscore.py\nindex 0d2fd2c4a..3bc54c780 100644\n--- a/Orange/widgets/evaluate/tests/test_owtestandscore.py\n+++ b/Orange/widgets/evaluate/tests/test_owtestandscore.py\n@@ -18,7 +18,7 @@ from Orange.evaluation.scoring import ClassificationScore, RegressionScore, \\\n     Score\n from Orange.base import Learner, Model\n from Orange.modelling import ConstantLearner\n-from Orange.regression import MeanLearner\n+from Orange.regression import MeanLearner, PLSRegressionLearner\n from Orange.widgets.evaluate.owtestandscore import (\n     OWTestAndScore, results_one_vs_rest)\n from Orange.widgets.settings import (\n@@ -753,7 +753,7 @@ class TestOWTestAndScore(WidgetTest):\n                         ])\n         data = Table.from_list(domain, [[1, 5, 0], [2, 10, 1], [2, 10, 1]])\n \n-        mock_model = Mock(spec=Model, return_value=np.asarray([[0.2, 0.1, 0.2]]))\n+        mock_model = Mock(spec=Model, return_value=np.asarray([0.2, 0.1, 0.2]))\n         mock_model.name = 'Mockery'\n         mock_model.domain = domain\n         mock_learner = Mock(spec=Learner, return_value=mock_model)\n@@ -769,6 +769,19 @@ class TestOWTestAndScore(WidgetTest):\n         self.assertTrue(NewScorer in widget.scorers)\n         self.assertTrue(len(widget._successful_slots()) == 1)\n \n+    def test_multiple_targets_pls(self):\n+        housing = Table(\"housing\")\n+        class_vars = [housing.domain.class_var, housing.domain.attributes[0]]\n+        domain = Domain(housing.domain.attributes[1:], class_vars=class_vars)\n+        multiple_targets_data = housing.transform(domain)\n+\n+        self.widget.error = Mock()\n+        self.send_signal(self.widget.Inputs.train_data, multiple_targets_data)\n+        self.send_signal(self.widget.Inputs.learner, PLSRegressionLearner())\n+        self.wait_until_finished()\n+        self.assertIn(\"Multiple targets are not supported.\",\n+                      self.widget.error.call_args[0][0])\n+\n \n class TestHelpers(unittest.TestCase):\n     def test_results_one_vs_rest(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6867.0, "instance_id": "biolab__orange3-6867", "issue_numbers": 0, "base_commit": "09df730fdec7230f6994971d7de241a6b784e23b", "patch": "diff --git a/Orange/widgets/model/owpls.py b/Orange/widgets/model/owpls.py\nindex f3f548966..e648de785 100644\n--- a/Orange/widgets/model/owpls.py\n+++ b/Orange/widgets/model/owpls.py\n@@ -76,7 +76,6 @@ class OWPLS(OWBaseLearner):\n         n_components = x_rotations.shape[1]\n \n         names = [f\"coef ({v.name})\" for v in self.model.domain.class_vars]\n-        names += [f\"coef/X_sd ({v.name})\" for v in self.model.domain.class_vars]\n         names += [f\"w*c {i + 1}\" for i in range(n_components)]\n         domain = Domain(\n             [ContinuousVariable(n) for n in names],\n@@ -85,18 +84,13 @@ class OWPLS(OWBaseLearner):\n         )\n \n         data = self.model.data_to_model_domain(self.data)\n-        x_std = np.std(data.X, axis=0)\n-        coeffs_x_std = coefficients.T / x_std\n         X_features = np.hstack((coefficients,\n-                                coeffs_x_std.T,\n                                 x_rotations))\n         X_targets = np.hstack((np.full((n_targets, n_targets), np.nan),\n-                               np.full((n_targets, n_targets), np.nan),\n                                y_loadings))\n \n-        coeffs = coeffs_x_std * np.mean(data.X, axis=0)\n-        X_intercepts = np.hstack((intercept,\n-                                  intercept - coeffs.sum(),\n+        coeffs = coefficients.T * np.mean(data.X, axis=0)\n+        X_intercepts = np.hstack((intercept - coeffs.sum(),\n                                   np.full((1, n_components), np.nan)))\n         X = np.vstack((X_features, X_targets, X_intercepts))\n \n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owpls.py b/Orange/widgets/model/tests/test_owpls.py\nindex c0055a90e..e87e68173 100644\n--- a/Orange/widgets/model/tests/test_owpls.py\n+++ b/Orange/widgets/model/tests/test_owpls.py\n@@ -1,5 +1,6 @@\n import unittest\n import numpy as np\n+from sklearn.cross_decomposition import PLSRegression\n \n from Orange.data import Table, Domain, StringVariable\n from Orange.widgets.model.owpls import OWPLS\n@@ -30,15 +31,28 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n             ParameterMapping('n_components', self.widget.controls.n_components)\n         ]\n \n+    def test_coeffs_compare_sklearn(self):\n+        self.send_signal(self.widget.Inputs.data, self._data)\n+        coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n+        intercept = coefsdata.X[-1, 0]\n+        coeffs = coefsdata.X[:-2, 0]\n+        Y_orange = self._data.X @ coeffs + intercept\n+\n+        pls = PLSRegression(n_components=2)\n+        pls.fit(self._data.X, self._data.Y)\n+        Y_sklearn = pls.predict(self._data.X)\n+\n+        np.testing.assert_almost_equal(Y_sklearn, Y_orange)\n+\n     def test_output_coefsdata(self):\n         self.send_signal(self.widget.Inputs.data, self._data)\n         coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n         self.assertEqual(coefsdata.name, \"Coefficients and Loadings\")\n-        self.assertEqual(coefsdata.X.shape, (15, 4))\n+        self.assertEqual(coefsdata.X.shape, (15, 3))\n         self.assertEqual(coefsdata.Y.shape, (15, 0))\n         self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n-        self.assertEqual([\"coef (MEDV)\", \"coef/X_sd (MEDV)\", \"w*c 1\", \"w*c 2\"],\n+        self.assertEqual([\"coef (MEDV)\", \"w*c 1\", \"w*c 2\"],\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n                          [v.name for v in coefsdata.domain.metas])\n@@ -47,21 +61,20 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertTrue((coefsdata.metas[:-2, 1] == 0).all())\n         self.assertTrue((coefsdata.metas[-2, 1] == 1))\n         self.assertTrue(np.isnan(coefsdata.metas[-1, 1]))\n-        self.assertAlmostEqual(coefsdata.X[0, 2], 0.237, 3)\n-        self.assertAlmostEqual(coefsdata.X[13, 2], -0.304, 3)\n-        self.assertAlmostEqual(coefsdata.X[-1, 0], 22.5, 1)\n+        self.assertAlmostEqual(coefsdata.X[0, 2], 0.012, 3)\n+        self.assertAlmostEqual(coefsdata.X[13, 2], 0.389, 3)\n+        self.assertAlmostEqual(coefsdata.X[-1, 0], 13.7, 1)\n         self.assertTrue(np.isnan(coefsdata.X[-1, 2:]).all())\n \n     def test_output_coefsdata_multi_target(self):\n         self.send_signal(self.widget.Inputs.data, self._data_multi_target)\n         coefsdata = self.get_output(self.widget.Outputs.coefsdata)\n         self.assertEqual(coefsdata.name, \"Coefficients and Loadings\")\n-        self.assertEqual(coefsdata.X.shape, (15, 6))\n+        self.assertEqual(coefsdata.X.shape, (15, 4))\n         self.assertEqual(coefsdata.Y.shape, (15, 0))\n         self.assertEqual(coefsdata.metas.shape, (15, 2))\n \n-        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"coef/X_sd (MEDV)\",\n-                      \"coef/X_sd (CRIM)\", \"w*c 1\", \"w*c 2\"]\n+        attr_names = [\"coef (MEDV)\", \"coef (CRIM)\", \"w*c 1\", \"w*c 2\"]\n         self.assertEqual(attr_names,\n                          [v.name for v in coefsdata.domain.attributes])\n         self.assertEqual([\"Variable name\", \"Variable role\"],\n@@ -72,12 +85,12 @@ class TestOWPLS(WidgetTest, WidgetLearnerTestMixin):\n         self.assertTrue((coefsdata.metas[:-3, 1] == 0).all())\n         self.assertTrue((coefsdata.metas[-2:-1, 1] == 1).all())\n         self.assertTrue(np.isnan(coefsdata.metas[-1, 1]))\n-        self.assertAlmostEqual(coefsdata.X[0, 4], -0.198, 3)\n-        self.assertAlmostEqual(coefsdata.X[12, 4], -0.288, 3)\n-        self.assertAlmostEqual(coefsdata.X[13, 4], 0.243, 3)\n-        self.assertAlmostEqual(coefsdata.X[-1, 0], 22.5, 1)\n-        self.assertAlmostEqual(coefsdata.X[-1, 1], 3.6, 1)\n-        self.assertTrue(np.isnan(coefsdata.X[-1, 4:]).all())\n+        self.assertAlmostEqual(coefsdata.X[0, 2], -0.198, 3)\n+        self.assertAlmostEqual(coefsdata.X[12, 2], -0.288, 3)\n+        self.assertAlmostEqual(coefsdata.X[13, 2], 0.243, 3)\n+        self.assertAlmostEqual(coefsdata.X[-1, 0], 6.7, 1)\n+        self.assertAlmostEqual(coefsdata.X[-1, 1], -12.2, 1)\n+        self.assertTrue(np.isnan(coefsdata.X[-1, 2:]).all())\n \n     def test_output_data(self):\n         self.send_signal(self.widget.Inputs.data, self._data)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6593.0, "instance_id": "biolab__orange3-6593", "issue_numbers": 0, "base_commit": "ab0c155fc6e82a4f892394c9281bd4f4e1c4adba", "patch": "diff --git a/Orange/widgets/visualize/owlinearprojection.py b/Orange/widgets/visualize/owlinearprojection.py\nindex 3ac282b69..7054726d8 100644\n--- a/Orange/widgets/visualize/owlinearprojection.py\n+++ b/Orange/widgets/visualize/owlinearprojection.py\n@@ -93,6 +93,7 @@ class LinearProjectionVizRank(VizRankDialog, OWComponent):\n         n_cont_var = len([v for v in master.continuous_variables\n                           if v is not master.attr_color])\n         self.n_attrs_spin.setMaximum(n_cont_var)\n+        self.n_attrs_spin.setValue(self.n_attrs)\n         return True\n \n     def state_count(self):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owlinearprojection.py b/Orange/widgets/visualize/tests/test_owlinearprojection.py\nindex 92438d39a..8a9ebd1e3 100644\n--- a/Orange/widgets/visualize/tests/test_owlinearprojection.py\n+++ b/Orange/widgets/visualize/tests/test_owlinearprojection.py\n@@ -256,6 +256,16 @@ class LinProjVizRankTests(WidgetTest):\n         c2 = self.get_output(self.widget.Outputs.components)\n         self.assertNotEqual(c1.domain.attributes, c2.domain.attributes)\n \n+    def test_vizrank_n_attrs(self):\n+        self.send_signal(self.widget.Inputs.data, self.data)\n+        self.vizrank.n_attrs_spin.setValue(4)\n+        settings = self.widget.settingsHandler.pack_data(self.widget)\n+        widget = self.create_widget(OWLinearProjection,\n+                                    stored_settings=settings)\n+        self.send_signal(widget.Inputs.data, self.data, widget=widget)\n+        self.assertEqual(widget.vizrank.n_attrs_spin.value(),\n+                         self.vizrank.n_attrs_spin.value())\n+\n \n if __name__ == \"__main__\":\n     import unittest\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6702.0, "instance_id": "biolab__orange3-6702", "issue_numbers": 0, "base_commit": "72335334905912c6501f12d63752734a06084032", "patch": "diff --git a/Orange/widgets/unsupervised/owdistancematrix.py b/Orange/widgets/unsupervised/owdistancematrix.py\nindex 5edd2215f..e9e5c6ca1 100644\n--- a/Orange/widgets/unsupervised/owdistancematrix.py\n+++ b/Orange/widgets/unsupervised/owdistancematrix.py\n@@ -72,6 +72,9 @@ class OWDistanceMatrix(widget.OWWidget):\n         distances = Output(\"Distances\", DistMatrix, dynamic=False)\n         table = Output(\"Selected Data\", Table, replaces=[\"Table\"])\n \n+    class Error(widget.OWWidget.Error):\n+        empty_matrix = widget.Msg(\"Distance matrix is empty.\")\n+\n     settingsHandler = DistanceMatrixContextHandler()\n     settings_version = 2\n     auto_commit = Setting(True)\n@@ -107,7 +110,12 @@ class OWDistanceMatrix(widget.OWWidget):\n \n     @Inputs.distances\n     def set_distances(self, distances):\n+        self.clear_messages()\n         self.closeContext()\n+        if distances is not None:\n+            if len(distances) == 0:\n+                distances = None\n+                self.Error.empty_matrix()\n         self.distances = distances\n         self.tablemodel.set_data(self.distances)\n         self.items = None\ndiff --git a/Orange/widgets/utils/distmatrixmodel.py b/Orange/widgets/utils/distmatrixmodel.py\nindex b3b971a58..bfd66085e 100644\n--- a/Orange/widgets/utils/distmatrixmodel.py\n+++ b/Orange/widgets/utils/distmatrixmodel.py\n@@ -44,7 +44,7 @@ class DistMatrixModel(QAbstractTableModel):\n         self.beginResetModel()\n         self.distances = distances\n         self.__header_data = dict.fromkeys(self.__header_data, LabelData())\n-        if distances is None:\n+        if distances is None or len(distances) == 0:\n             self.__span = self.colors = self.brushes = None\n             return\n         minc = min(0, np.min(distances))\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owdistancematrix.py b/Orange/widgets/unsupervised/tests/test_owdistancematrix.py\nindex 28a59e174..a30b4f42a 100644\n--- a/Orange/widgets/unsupervised/tests/test_owdistancematrix.py\n+++ b/Orange/widgets/unsupervised/tests/test_owdistancematrix.py\n@@ -243,6 +243,13 @@ class TestOWDistanceMatrix(WidgetTest):\n         self.assertEqual(widget._get_selection(), (([0], [0, 2]), False))\n         self.assertEqual(widget.annotation_idx, 0)\n \n+    def test_empty_matrix(self):\n+        matrix = DistMatrix(np.empty((0, 0)))\n+        self.send_signal(self.widget.Inputs.distances, matrix)\n+        self.assertTrue(self.widget.Error.empty_matrix.is_shown())\n+        self.send_signal(self.widget.Inputs.distances, None)\n+        self.assertFalse(self.widget.Error.empty_matrix.is_shown())\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\ndiff --git a/Orange/widgets/utils/tests/test_state_summary.py b/Orange/widgets/utils/tests/test_state_summary.py\nindex fe5ea27ba..f49eec569 100644\n--- a/Orange/widgets/utils/tests/test_state_summary.py\n+++ b/Orange/widgets/utils/tests/test_state_summary.py\n@@ -6,15 +6,17 @@ from collections import namedtuple\n import numpy as np\n \n from AnyQt.QtCore import Qt\n+from AnyQt.QtWidgets import QTableView\n \n from orangecanvas.scheme.signalmanager import LazyValue\n from orangewidget.utils.signals import summarize\n \n from Orange.data import Table, Domain, StringVariable, ContinuousVariable, \\\n     DiscreteVariable, TimeVariable\n+from Orange.misc import DistMatrix\n from Orange.widgets.tests.base import WidgetTest\n from Orange.widgets.utils.state_summary import format_summary_details, \\\n-    format_multiple_summaries\n+    format_multiple_summaries, summarize_matrix\n \n VarDataPair = namedtuple('VarDataPair', ['variable', 'data'])\n \n@@ -315,5 +317,23 @@ class TestSummarize(unittest.TestCase):\n         previewer.assert_called_with(data)\n \n \n+class TestSummarizeMatrix(WidgetTest):\n+    def test_summarize_matrix(self):\n+        matrix = DistMatrix(np.arange(9).reshape(3, 3))\n+        summary = summarize_matrix(matrix)\n+        self.assertEqual(summary.summary, \"3\u00d73\")\n+        self.assertEqual(summary.details, \"<nobr>3\u00d73 distance matrix</nobr>\")\n+        view = summary.preview_func()\n+        self.assertIsInstance(view, QTableView)\n+\n+    def test_summarize_matrix_empty(self):\n+        matrix = DistMatrix(np.empty((0, 0)))\n+        summary = summarize_matrix(matrix)\n+        self.assertEqual(summary.summary, \"0\u00d70\")\n+        self.assertEqual(summary.details, \"<nobr>0\u00d70 distance matrix</nobr>\")\n+        view = summary.preview_func()\n+        self.assertIsInstance(view, QTableView)\n+\n+\n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6000.0, "instance_id": "biolab__orange3-6000", "issue_numbers": 0, "base_commit": "6f9b3bf34e0b319d0c9a746e0fd2f5fc9d1df0cf", "patch": "diff --git a/Orange/widgets/visualize/owheatmap.py b/Orange/widgets/visualize/owheatmap.py\nindex b3e4eca1b..81b04bd6a 100644\n--- a/Orange/widgets/visualize/owheatmap.py\n+++ b/Orange/widgets/visualize/owheatmap.py\n@@ -229,8 +229,8 @@ class OWHeatMap(widget.OWWidget):\n         #: The original data with all features (retained to\n         #: preserve the domain on the output)\n         self.input_data = None\n-        #: The effective data striped of discrete features, and often\n-        #: merged using k-means\n+        #: The effective data stripped of discrete features and hidden\n+        #: attributes, and often merged using k-means\n         self.data = None\n         self.effective_data = None\n         #: Source of column annotations (derived from self.data)\n@@ -602,13 +602,16 @@ class OWHeatMap(widget.OWWidget):\n             self.Error.no_continuous()\n             input_data = data = None\n \n-        # Data contains some discrete attributes which must be filtered\n+        # Data contains some discrete or hidden attributes which must be\n+        # filtered\n         if data is not None and \\\n-                any(var.is_discrete for var in data.domain.attributes):\n+                any(var.is_discrete or var.attributes.get('hidden', False)\n+                    for var in data.domain.attributes):\n             ndisc = sum(var.is_discrete for var in data.domain.attributes)\n             data = data.transform(\n                 Domain([var for var in data.domain.attributes\n-                        if var.is_continuous],\n+                        if var.is_continuous and\n+                        not var.attributes.get('hidden', False)],\n                        data.domain.class_vars,\n                        data.domain.metas))\n             if not data.domain.attributes:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owheatmap.py b/Orange/widgets/visualize/tests/test_owheatmap.py\nindex 2efaf1c8d..53f4fd667 100644\n--- a/Orange/widgets/visualize/tests/test_owheatmap.py\n+++ b/Orange/widgets/visualize/tests/test_owheatmap.py\n@@ -29,16 +29,16 @@ class TestOWHeatMap(WidgetTest, WidgetOutputsTestMixin):\n         super().setUpClass()\n         WidgetOutputsTestMixin.init(cls)\n \n-        cls.housing = Table(\"housing\")\n-        cls.titanic = Table(\"titanic\")\n-        cls.brown_selected = Table(\"brown-selected\")\n-\n         cls.signal_name = \"Data\"\n         cls.signal_data = cls.data\n \n     def setUp(self):\n         self.widget = self.create_widget(OWHeatMap)  # type: OWHeatMap\n \n+        self.housing = Table(\"housing\")\n+        self.titanic = Table(\"titanic\")\n+        self.brown_selected = Table(\"brown-selected\")\n+\n     def test_input_data(self):\n         \"\"\"Check widget's data with data on the input\"\"\"\n         for data in (self.data, self.housing):\n@@ -396,6 +396,14 @@ class TestOWHeatMap(WidgetTest, WidgetOutputsTestMixin):\n         widget.set_column_annotation_color_var(None)\n         self.assertFalse(widget.scene.widget.top_side_colors[0].isVisible())\n \n+    def test_data_with_hidden(self):\n+        w = self.widget\n+        housing = self.housing.copy()\n+        housing.domain.attributes[0].attributes[\"hidden\"] = True\n+        self.send_signal(self.widget.Inputs.data, housing)\n+        self.assertEqual(len(w.effective_data.domain.attributes),\n+                         len(housing.domain.attributes) - 1)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6734.0, "instance_id": "biolab__orange3-6734", "issue_numbers": 0, "base_commit": "74f8f0db98485aaa2bd583eed91c3bbed66e2852", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex fcf8ae1db..10d042349 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -423,6 +423,10 @@ class OWPredictions(OWWidget):\n                 backmappers, n_values = predictor.get_backmappers(self.data)\n                 prob = predictor.backmap_probs(prob, n_values, backmappers)\n                 pred = predictor.backmap_value(pred, prob, n_values, backmappers)\n+            if len(pred.shape) > 1 and pred.shape[1] > 1:\n+                msg = \"Multiple targets are not supported.\"\n+                self.predictors[index] = slot._replace(results=f\"{msg}\")\n+                continue\n             results.predicted = pred.reshape((1, len(self.data)))\n             results.probabilities = prob.reshape((1,) + prob.shape)\n \n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex cb26a10ed..c711dc213 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -18,7 +18,8 @@ from Orange.classification.majority import ConstantModel, MajorityLearner\n from Orange.data.io import TabReader\n from Orange.evaluation.scoring import TargetScore\n from Orange.preprocess import Remove\n-from Orange.regression import LinearRegressionLearner, MeanLearner\n+from Orange.regression import LinearRegressionLearner, MeanLearner, \\\n+    PLSRegressionLearner\n from Orange.widgets.tests.base import WidgetTest, GuiTest\n from Orange.widgets.evaluate.owpredictions import (\n     OWPredictions, SharedSelectionModel, SharedSelectionStore, DataModel,\n@@ -1319,6 +1320,28 @@ class TestOWPredictions(WidgetTest):\n         self.assertTrue(np.isnan(pred.metas[1, 4]))\n         self.assertTrue(np.isnan(pred.metas[1, 9]))\n \n+    def test_multiple_targets_pls(self):\n+        class_vars = [self.housing.domain.class_var,\n+                      self.housing.domain.attributes[0]]\n+        domain = Domain(self.housing.domain.attributes[1:],\n+                        class_vars=class_vars)\n+        multiple_targets_data = self.housing.transform(domain)\n+\n+        self.send_signal(self.widget.Inputs.data, multiple_targets_data)\n+        self.send_signal(self.widget.Inputs.predictors,\n+                         PLSRegressionLearner()(multiple_targets_data))\n+        self.assertTrue(self.widget.Error.predictor_failed.is_shown())\n+        self.assertIn(\"Multiple targets are not supported.\",\n+                      str(self.widget.Error.predictor_failed))\n+\n+        self.send_signal(self.widget.Inputs.data, None)\n+        self.send_signal(self.widget.Inputs.predictors, None)\n+\n+        self.send_signal(self.widget.Inputs.data, self.housing)\n+        self.send_signal(self.widget.Inputs.predictors,\n+                         PLSRegressionLearner()(self.housing))\n+        self.assertFalse(self.widget.Error.predictor_failed.is_shown())\n+\n \n class SelectionModelTest(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5634.0, "instance_id": "biolab__orange3-5634", "issue_numbers": 0, "base_commit": "2e4803d4b6fa0a0daf044d4a3d5b6511553cac53", "patch": "diff --git a/Orange/distance/base.py b/Orange/distance/base.py\nindex 7205e1cbc..112f9b1b4 100644\n--- a/Orange/distance/base.py\n+++ b/Orange/distance/base.py\n@@ -34,22 +34,29 @@ def _preprocess(table, impute=True):\n \n # TODO I have put this function here as a substitute the above `_preprocess`.\n # None of them really belongs here; (re?)move them, eventually.\n-def remove_discrete_features(data):\n+def remove_discrete_features(data, to_metas=False):\n     \"\"\"Remove discrete columns from the data.\"\"\"\n     new_domain = Domain(\n         [a for a in data.domain.attributes if a.is_continuous],\n         data.domain.class_vars,\n-        data.domain.metas)\n+        data.domain.metas\n+        + (() if not to_metas\n+           else tuple(a for a in data.domain.attributes if not a.is_continuous))\n+    )\n     return data.transform(new_domain)\n \n \n-def remove_nonbinary_features(data):\n+def remove_nonbinary_features(data, to_metas=False):\n     \"\"\"Remove non-binary columns from the data.\"\"\"\n     new_domain = Domain(\n         [a for a in data.domain.attributes\n          if a.is_discrete and len(a.values) == 2],\n         data.domain.class_vars,\n-        data.domain.metas)\n+        data.domain.metas +\n+        (() if not to_metas\n+         else tuple(a for a in data.domain.attributes\n+               if not (a.is_discrete and len(a.values) == 2))\n+         if to_metas else ()))\n     return data.transform(new_domain)\n \n def impute(data):\ndiff --git a/Orange/widgets/unsupervised/owdistances.py b/Orange/widgets/unsupervised/owdistances.py\nindex 1676d9c51..4ad05e44c 100644\n--- a/Orange/widgets/unsupervised/owdistances.py\n+++ b/Orange/widgets/unsupervised/owdistances.py\n@@ -158,7 +158,7 @@ class OWDistances(OWWidget, ConcurrentWidgetMixin):\n                     self.Error.no_continuous_features()\n                     return False\n                 self.Warning.ignoring_discrete()\n-                data = distance.remove_discrete_features(data)\n+                data = distance.remove_discrete_features(data, to_metas=True)\n             return True\n \n         def _fix_nonbinary():\n@@ -171,7 +171,8 @@ class OWDistances(OWWidget, ConcurrentWidgetMixin):\n                     return False\n                 elif nbinary < len(data.domain.attributes):\n                     self.Warning.ignoring_nonbinary()\n-                    data = distance.remove_nonbinary_features(data)\n+                    data = distance.remove_nonbinary_features(data,\n+                                                              to_metas=True)\n             return True\n \n         def _fix_missing():\n.", "test_patch": "diff --git a/Orange/distance/tests/test_distance.py b/Orange/distance/tests/test_distance.py\nindex 2ff10ce56..431635f57 100644\n--- a/Orange/distance/tests/test_distance.py\n+++ b/Orange/distance/tests/test_distance.py\n@@ -5,7 +5,8 @@ from math import sqrt\n import numpy as np\n from scipy.sparse import csr_matrix\n \n-from Orange.data import ContinuousVariable, DiscreteVariable, Domain, Table\n+from Orange.data import ContinuousVariable, DiscreteVariable, StringVariable,\\\n+    Domain, Table\n from Orange import distance\n \n \n@@ -863,7 +864,6 @@ class JaccardDistanceTest(unittest.TestCase, CommonFittedTests):\n         model = distance.Jaccard().fit(self.data)\n         assert_almost_equal(model.ps, np.array([0.5, 2/3, 0.75]))\n \n-        # pylint: disable=bad-whitespace\n         assert_almost_equal(\n             model(self.data),\n             1 - np.array([[      1,        2 / 2.5,        1 / 2.5,        2/3 / 3],\n@@ -902,6 +902,7 @@ class JaccardDistanceTest(unittest.TestCase, CommonFittedTests):\n         dist_dense = self.Distance(dense_data)\n         dist_sparse = self.Distance(sparse_data)\n \n+        # false positive, pylint: disable=unsubscriptable-object\n         self.assertEqual(dist_dense[0][1], 0)\n         self.assertEqual(dist_sparse[0][1], 0)\n         self.assertEqual(dist_dense[0][2], 1)\n@@ -980,5 +981,42 @@ class TestHelperFunctions(unittest.TestCase):\n         np.testing.assert_array_equal(new_i, np.sqrt(i))\n \n \n+class TestDataUtilities(unittest.TestCase):\n+    def test_remove_discrete(self):\n+        d1, d2, d3 = (DiscreteVariable(c, values=tuple(\"123\")) for c in \"abc\")\n+        c1, c2 = (ContinuousVariable(c) for c in \"xy\")\n+        t = StringVariable(\"t\")\n+        domain = Domain([d1, c1], d2, [c2, d3, t])\n+        data = Table.from_domain(domain, 5)\n+\n+        reduced = distance.remove_discrete_features(data)\n+        self.assertEqual(reduced.domain.attributes, (c1, ))\n+        self.assertEqual(reduced.domain.class_var, d2)\n+        self.assertEqual(reduced.domain.metas, (c2, d3, t))\n+\n+        reduced = distance.remove_discrete_features(data, to_metas=True)\n+        self.assertEqual(reduced.domain.attributes, (c1, ))\n+        self.assertEqual(reduced.domain.class_var, d2)\n+        self.assertEqual(reduced.domain.metas, (c2, d3, t, d1))\n+\n+    def test_remove_non_binary(self):\n+        b1, b2, b3 = (DiscreteVariable(c, values=tuple(\"12\")) for c in \"abc\")\n+        d1, d2, d3 = (DiscreteVariable(c, values=tuple(\"123\")) for c in \"def\")\n+        c1, c2 = (ContinuousVariable(c) for c in \"xy\")\n+        t = StringVariable(\"t\")\n+        domain = Domain([d1, b1, b2, c1], d2, [c2, d3, t, b3])\n+        data = Table.from_domain(domain, 5)\n+\n+        reduced = distance.remove_nonbinary_features(data)\n+        self.assertEqual(reduced.domain.attributes, (b1, b2))\n+        self.assertEqual(reduced.domain.class_var, d2)\n+        self.assertEqual(reduced.domain.metas, (c2, d3, t, b3))\n+\n+        reduced = distance.remove_nonbinary_features(data, to_metas=True)\n+        self.assertEqual(reduced.domain.attributes, (b1, b2))\n+        self.assertEqual(reduced.domain.class_var, d2)\n+        self.assertEqual(reduced.domain.metas, (c2, d3, t, b3, d1, c1))\n+\n+\n if __name__ == \"__main__\":\n     unittest.main()\ndiff --git a/Orange/widgets/unsupervised/tests/test_owdistances.py b/Orange/widgets/unsupervised/tests/test_owdistances.py\nindex 7935fc73c..44be93a33 100644\n--- a/Orange/widgets/unsupervised/tests/test_owdistances.py\n+++ b/Orange/widgets/unsupervised/tests/test_owdistances.py\n@@ -228,6 +228,36 @@ class TestOWDistances(WidgetTest):\n         self.send_signal(widget.Inputs.data, self.iris)\n         assert_no_error()\n \n+    def test_discrete_in_metas(self):\n+        domain = self.iris.domain\n+        data = self.iris.transform(\n+            Domain(domain.attributes[:-1] + (domain.class_var, ),\n+                   [],\n+                   domain.attributes[-1:])\n+        )\n+        for self.widget.metric_idx, (_, metric) in enumerate(METRICS):\n+            if metric == distance.Cosine:\n+                break\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.wait_until_finished()\n+        out = self.get_output(self.widget.Outputs.distances)\n+        out_domain = out.row_items.domain\n+        self.assertEqual(out_domain.attributes, domain.attributes[:-1])\n+        self.assertEqual(out_domain.metas,\n+                         (domain.attributes[-1], domain.class_var))\n+\n+    def test_non_binary_in_metas(self):\n+        for self.widget.metric_idx, (_, metric) in enumerate(METRICS):\n+            if metric == distance.Jaccard:\n+                break\n+        zoo = Table(\"zoo\")[:20]\n+        self.send_signal(self.widget.Inputs.data, zoo)\n+        self.wait_until_finished()\n+        out = self.get_output(self.widget.Outputs.distances)\n+        domain = zoo.domain\n+        out_domain = out.row_items.domain\n+        self.assertEqual(out_domain.metas, (domain[\"name\"], domain[\"legs\"]))\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5634.0, "instance_id": "biolab__orange3-5634", "issue_numbers": 0, "base_commit": "0a34127c04a1b5d2fbced3dbf1667f860d265f82", "patch": "diff --git a/Orange/distance/base.py b/Orange/distance/base.py\nindex 7205e1cbc..112f9b1b4 100644\n--- a/Orange/distance/base.py\n+++ b/Orange/distance/base.py\n@@ -34,22 +34,29 @@ def _preprocess(table, impute=True):\n \n # TODO I have put this function here as a substitute the above `_preprocess`.\n # None of them really belongs here; (re?)move them, eventually.\n-def remove_discrete_features(data):\n+def remove_discrete_features(data, to_metas=False):\n     \"\"\"Remove discrete columns from the data.\"\"\"\n     new_domain = Domain(\n         [a for a in data.domain.attributes if a.is_continuous],\n         data.domain.class_vars,\n-        data.domain.metas)\n+        data.domain.metas\n+        + (() if not to_metas\n+           else tuple(a for a in data.domain.attributes if not a.is_continuous))\n+    )\n     return data.transform(new_domain)\n \n \n-def remove_nonbinary_features(data):\n+def remove_nonbinary_features(data, to_metas=False):\n     \"\"\"Remove non-binary columns from the data.\"\"\"\n     new_domain = Domain(\n         [a for a in data.domain.attributes\n          if a.is_discrete and len(a.values) == 2],\n         data.domain.class_vars,\n-        data.domain.metas)\n+        data.domain.metas +\n+        (() if not to_metas\n+         else tuple(a for a in data.domain.attributes\n+               if not (a.is_discrete and len(a.values) == 2))\n+         if to_metas else ()))\n     return data.transform(new_domain)\n \n def impute(data):\ndiff --git a/Orange/widgets/unsupervised/owdistances.py b/Orange/widgets/unsupervised/owdistances.py\nindex 1676d9c51..4ad05e44c 100644\n--- a/Orange/widgets/unsupervised/owdistances.py\n+++ b/Orange/widgets/unsupervised/owdistances.py\n@@ -158,7 +158,7 @@ class OWDistances(OWWidget, ConcurrentWidgetMixin):\n                     self.Error.no_continuous_features()\n                     return False\n                 self.Warning.ignoring_discrete()\n-                data = distance.remove_discrete_features(data)\n+                data = distance.remove_discrete_features(data, to_metas=True)\n             return True\n \n         def _fix_nonbinary():\n@@ -171,7 +171,8 @@ class OWDistances(OWWidget, ConcurrentWidgetMixin):\n                     return False\n                 elif nbinary < len(data.domain.attributes):\n                     self.Warning.ignoring_nonbinary()\n-                    data = distance.remove_nonbinary_features(data)\n+                    data = distance.remove_nonbinary_features(data,\n+                                                              to_metas=True)\n             return True\n \n         def _fix_missing():\n.", "test_patch": "diff --git a/Orange/distance/tests/test_distance.py b/Orange/distance/tests/test_distance.py\nindex 81e586dfe..29b690891 100644\n--- a/Orange/distance/tests/test_distance.py\n+++ b/Orange/distance/tests/test_distance.py\n@@ -5,7 +5,8 @@ from math import sqrt\n import numpy as np\n from scipy.sparse import csr_matrix\n \n-from Orange.data import ContinuousVariable, DiscreteVariable, Domain, Table\n+from Orange.data import ContinuousVariable, DiscreteVariable, StringVariable,\\\n+    Domain, Table\n from Orange import distance\n \n \n@@ -898,7 +899,6 @@ class JaccardDistanceTest(unittest.TestCase, CommonFittedTests):\n         model = distance.Jaccard().fit(self.data)\n         assert_almost_equal(model.ps, np.array([0.5, 2/3, 0.75]))\n \n-        # pylint: disable=bad-whitespace\n         assert_almost_equal(\n             model(self.data),\n             1 - np.array([[      1,        2 / 2.5,        1 / 2.5,        2/3 / 3],\n@@ -938,6 +938,7 @@ class JaccardDistanceTest(unittest.TestCase, CommonFittedTests):\n         dist_dense = self.Distance(dense_data)\n         dist_sparse = self.Distance(sparse_data)\n \n+        # false positive, pylint: disable=unsubscriptable-object\n         self.assertEqual(dist_dense[0][1], 0)\n         self.assertEqual(dist_sparse[0][1], 0)\n         self.assertEqual(dist_dense[0][2], 1)\n@@ -1016,5 +1017,42 @@ class TestHelperFunctions(unittest.TestCase):\n         np.testing.assert_array_equal(new_i, np.sqrt(i))\n \n \n+class TestDataUtilities(unittest.TestCase):\n+    def test_remove_discrete(self):\n+        d1, d2, d3 = (DiscreteVariable(c, values=tuple(\"123\")) for c in \"abc\")\n+        c1, c2 = (ContinuousVariable(c) for c in \"xy\")\n+        t = StringVariable(\"t\")\n+        domain = Domain([d1, c1], d2, [c2, d3, t])\n+        data = Table.from_domain(domain, 5)\n+\n+        reduced = distance.remove_discrete_features(data)\n+        self.assertEqual(reduced.domain.attributes, (c1, ))\n+        self.assertEqual(reduced.domain.class_var, d2)\n+        self.assertEqual(reduced.domain.metas, (c2, d3, t))\n+\n+        reduced = distance.remove_discrete_features(data, to_metas=True)\n+        self.assertEqual(reduced.domain.attributes, (c1, ))\n+        self.assertEqual(reduced.domain.class_var, d2)\n+        self.assertEqual(reduced.domain.metas, (c2, d3, t, d1))\n+\n+    def test_remove_non_binary(self):\n+        b1, b2, b3 = (DiscreteVariable(c, values=tuple(\"12\")) for c in \"abc\")\n+        d1, d2, d3 = (DiscreteVariable(c, values=tuple(\"123\")) for c in \"def\")\n+        c1, c2 = (ContinuousVariable(c) for c in \"xy\")\n+        t = StringVariable(\"t\")\n+        domain = Domain([d1, b1, b2, c1], d2, [c2, d3, t, b3])\n+        data = Table.from_domain(domain, 5)\n+\n+        reduced = distance.remove_nonbinary_features(data)\n+        self.assertEqual(reduced.domain.attributes, (b1, b2))\n+        self.assertEqual(reduced.domain.class_var, d2)\n+        self.assertEqual(reduced.domain.metas, (c2, d3, t, b3))\n+\n+        reduced = distance.remove_nonbinary_features(data, to_metas=True)\n+        self.assertEqual(reduced.domain.attributes, (b1, b2))\n+        self.assertEqual(reduced.domain.class_var, d2)\n+        self.assertEqual(reduced.domain.metas, (c2, d3, t, b3, d1, c1))\n+\n+\n if __name__ == \"__main__\":\n     unittest.main()\ndiff --git a/Orange/widgets/unsupervised/tests/test_owdistances.py b/Orange/widgets/unsupervised/tests/test_owdistances.py\nindex d2b42322f..f098c3088 100644\n--- a/Orange/widgets/unsupervised/tests/test_owdistances.py\n+++ b/Orange/widgets/unsupervised/tests/test_owdistances.py\n@@ -228,6 +228,36 @@ class TestOWDistances(WidgetTest):\n         self.send_signal(widget.Inputs.data, self.iris)\n         assert_no_error()\n \n+    def test_discrete_in_metas(self):\n+        domain = self.iris.domain\n+        data = self.iris.transform(\n+            Domain(domain.attributes[:-1] + (domain.class_var, ),\n+                   [],\n+                   domain.attributes[-1:])\n+        )\n+        for self.widget.metric_idx, (_, metric) in enumerate(METRICS):\n+            if metric == distance.Cosine:\n+                break\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.wait_until_finished()\n+        out = self.get_output(self.widget.Outputs.distances)\n+        out_domain = out.row_items.domain\n+        self.assertEqual(out_domain.attributes, domain.attributes[:-1])\n+        self.assertEqual(out_domain.metas,\n+                         (domain.attributes[-1], domain.class_var))\n+\n+    def test_non_binary_in_metas(self):\n+        for self.widget.metric_idx, (_, metric) in enumerate(METRICS):\n+            if metric == distance.Jaccard:\n+                break\n+        zoo = Table(\"zoo\")[:20]\n+        self.send_signal(self.widget.Inputs.data, zoo)\n+        self.wait_until_finished()\n+        out = self.get_output(self.widget.Outputs.distances)\n+        domain = zoo.domain\n+        out_domain = out.row_items.domain\n+        self.assertEqual(out_domain.metas, (domain[\"name\"], domain[\"legs\"]))\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6144.0, "instance_id": "biolab__orange3-6144", "issue_numbers": 0, "base_commit": "79e423770428d127c4b2c83dde1d7fcb12380f4d", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex 80bddde56..db81a89df 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -302,7 +302,10 @@ class AxisItem(AxisItem):\n             step = int(np.ceil(float(len(ticks)) / max_steps))\n             ticks = ticks[::step]\n \n-        spacing = min(b - a for a, b in zip(ticks[:-1], ticks[1:]))\n+        # In case of a single tick, `default` will inform tickStrings\n+        # about the appropriate scale.\n+        spacing = min((b - a for a, b in zip(ticks[:-1], ticks[1:])),\n+                      default=maxVal - minVal)\n         return [(spacing, ticks)]\n \n     def tickStrings(self, values, scale, spacing):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplot.py b/Orange/widgets/visualize/tests/test_owscatterplot.py\nindex 88802d632..51e2b39ad 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplot.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplot.py\n@@ -1130,6 +1130,10 @@ class TestOWScatterPlot(WidgetTest, ProjectionWidgetTestMixin,\n         with self.assertRaises(ValueError):\n             float(ticks[0])\n \n+        spacing, ticks = x_axis.tickValues(1581953776, 1582953776, 10)[0]\n+        self.assertEqual(spacing, 1582953776 - 1581953776)\n+        self.assertTrue(not ticks.size or 1581953776 <= ticks[0] <= 1582953776)\n+\n     def test_clear_plot(self):\n         self.widget.cb_class_density.setChecked(True)\n         self.send_signal(self.widget.Inputs.data, self.data)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5280.0, "instance_id": "biolab__orange3-5280", "issue_numbers": 0, "base_commit": "bca2b77757b4bf206eed8ea4dd4c0e6f725a1ee6", "patch": "diff --git a/Orange/widgets/unsupervised/owkmeans.py b/Orange/widgets/unsupervised/owkmeans.py\nindex 932731a5b..3c0b5e42d 100644\n--- a/Orange/widgets/unsupervised/owkmeans.py\n+++ b/Orange/widgets/unsupervised/owkmeans.py\n@@ -576,6 +576,9 @@ class OWKMeans(widget.OWWidget):\n         self.selection = None\n         self._set_input_summary()\n \n+        self.controls.normalize.setDisabled(\n+            bool(self.data) and sp.issparse(self.data.X))\n+\n         # Do not needlessly recluster the data if X hasn't changed\n         if old_data and self.data and array_equal(self.data.X, old_data.X):\n             if self.auto_commit:\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owkmeans.py b/Orange/widgets/unsupervised/tests/test_owkmeans.py\nindex 27671c06b..1e08f9850 100644\n--- a/Orange/widgets/unsupervised/tests/test_owkmeans.py\n+++ b/Orange/widgets/unsupervised/tests/test_owkmeans.py\n@@ -341,33 +341,37 @@ class TestOWKMeans(WidgetTest):\n         normalization = normalize.return_value = Mock(return_value=self.data)\n         widget = self.widget\n         widget.normalize = True\n+        norm_check = widget.controls.normalize\n \n         x = sp.csr_matrix(np.random.randint(0, 2, (5, 10)))\n         data = Table.from_numpy(None, x)\n \n         self.send_signal(widget.Inputs.data, data)\n         self.assertTrue(widget.Warning.no_sparse_normalization.is_shown())\n+        self.assertFalse(norm_check.isEnabled())\n         normalization.assert_not_called()\n \n         self.send_signal(widget.Inputs.data, None)\n         self.assertFalse(widget.Warning.no_sparse_normalization.is_shown())\n+        self.assertTrue(norm_check.isEnabled())\n         normalization.assert_not_called()\n \n         self.send_signal(widget.Inputs.data, data)\n         self.assertTrue(widget.Warning.no_sparse_normalization.is_shown())\n+        self.assertFalse(norm_check.isEnabled())\n         normalization.assert_not_called()\n \n         self.send_signal(widget.Inputs.data, self.data)\n         self.assertFalse(widget.Warning.no_sparse_normalization.is_shown())\n+        self.assertTrue(norm_check.isEnabled())\n         normalization.assert_called()\n         normalization.reset_mock()\n \n-        self.send_signal(widget.Inputs.data, data)\n-        self.assertTrue(widget.Warning.no_sparse_normalization.is_shown())\n-        normalization.assert_not_called()\n-\n         widget.controls.normalize.click()\n+\n+        self.send_signal(widget.Inputs.data, data)\n         self.assertFalse(widget.Warning.no_sparse_normalization.is_shown())\n+        self.assertFalse(norm_check.isEnabled())\n         normalization.assert_not_called()\n \n     def test_report(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5837.0, "instance_id": "biolab__orange3-5837", "issue_numbers": 0, "base_commit": "5a570061292edf0b33a7f69ccbd8c8670b34e5e0", "patch": "diff --git a/Orange/widgets/visualize/owscatterplot.py b/Orange/widgets/visualize/owscatterplot.py\nindex d877d0c72..8a12ea558 100644\n--- a/Orange/widgets/visualize/owscatterplot.py\n+++ b/Orange/widgets/visualize/owscatterplot.py\n@@ -358,6 +358,7 @@ class OWScatterPlot(OWDataProjectionWidget):\n         self.vizrank: ScatterPlotVizRank = None\n         self.vizrank_button: QPushButton = None\n         self.sampling: QGroupBox = None\n+        self._xy_invalidated: bool = True\n \n         self.sql_data = None  # Orange.data.sql.table.SqlTable\n         self.attribute_selection_list = None  # list of Orange.data.Variable\n@@ -581,6 +582,8 @@ class OWScatterPlot(OWDataProjectionWidget):\n             self.attr_x, self.attr_y = self.attribute_selection_list[:2]\n             self.attr_box.setEnabled(False)\n             self.vizrank.setEnabled(False)\n+        self._invalidated = self._invalidated or self._xy_invalidated\n+        self._xy_invalidated = False\n         super().handleNewSignals()\n         if self._domain_invalidated:\n             self.graph.update_axes()\n@@ -591,7 +594,7 @@ class OWScatterPlot(OWDataProjectionWidget):\n     def set_shown_attributes(self, attributes):\n         if attributes and len(attributes) >= 2:\n             self.attribute_selection_list = attributes[:2]\n-            self._invalidated = self._invalidated \\\n+            self._xy_invalidated = self._xy_invalidated \\\n                 or self.attr_x != attributes[0] \\\n                 or self.attr_y != attributes[1]\n         else:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplot.py b/Orange/widgets/visualize/tests/test_owscatterplot.py\nindex 9b6d4591f..b2974508b 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplot.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplot.py\n@@ -743,6 +743,13 @@ class TestOWScatterPlot(WidgetTest, ProjectionWidgetTestMixin,\n         self.widget.setup_plot.assert_called_once()\n         self.assertListEqual(self.widget.effective_variables, list(features))\n \n+        self.widget.setup_plot.reset_mock()\n+        features = self.data.domain.attributes[2:]\n+        signals = [(self.widget.Inputs.features, AttributeList(features)),\n+                   (self.widget.Inputs.data, self.data)]\n+        self.send_signals(signals)\n+        self.widget.setup_plot.assert_called_once()\n+\n     def test_invalidated_diff_features(self):\n         self.widget.setup_plot = Mock()\n         # send data and set default features\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4217.0, "instance_id": "biolab__orange3-4217", "issue_numbers": 0, "base_commit": "747beb716603c31eb2e07f7873f3491464a82f2a", "patch": "diff --git a/Orange/preprocess/normalize.py b/Orange/preprocess/normalize.py\nindex 00783ab89..d05504f22 100644\n--- a/Orange/preprocess/normalize.py\n+++ b/Orange/preprocess/normalize.py\n@@ -1,6 +1,6 @@\n import numpy as np\n \n-from Orange.data import ContinuousVariable, Domain\n+from Orange.data import Domain\n from Orange.statistics import distribution\n from Orange.util import Reprable\n from .preprocess import Normalize\n@@ -51,12 +51,7 @@ class Normalizer(Reprable):\n             compute_val = Norm(var, avg, 1 / sd)\n         else:\n             compute_val = Norm(var, 0, 1 / sd)\n-\n-        return ContinuousVariable(\n-            var.name,\n-            compute_value=compute_val,\n-            sparse=var.sparse,\n-        )\n+        return var.copy(compute_value=compute_val)\n \n     def normalize_by_span(self, dist, var):\n         dma, dmi = (dist.max(), dist.min()) if dist.shape[1] else (np.nan, np.nan)\n@@ -64,12 +59,7 @@ class Normalizer(Reprable):\n         if diff < 1e-15:\n             diff = 1\n         if self.zero_based:\n-            return ContinuousVariable(\n-                var.name,\n-                compute_value=Norm(var, dmi, 1 / diff),\n-                sparse=var.sparse)\n+            compute_val = Norm(var, dmi, 1 / diff)\n         else:\n-            return ContinuousVariable(\n-                var.name,\n-                compute_value=Norm(var, (dma + dmi) / 2, 2 / diff),\n-                sparse=var.sparse)\n+            compute_val = Norm(var, (dma + dmi) / 2, 2 / diff)\n+        return var.copy(compute_value=compute_val)\n.", "test_patch": "diff --git a/Orange/tests/test_normalize.py b/Orange/tests/test_normalize.py\nindex b372df0c6..1b93a2d23 100644\n--- a/Orange/tests/test_normalize.py\n+++ b/Orange/tests/test_normalize.py\n@@ -142,3 +142,18 @@ class TestNormalizer(unittest.TestCase):\n                     [0., '2003-07-23', 'a', 'b', -1., '?', 0., 'b', '?', 'b', 0],\n                     [0., '1967-03-12', 'a', 'b', 1., 'b', -1.225, 'c', '?', 'c', 1]]\n         self.compare_tables(data_norm, solution)\n+\n+    def test_retain_vars_attributes(self):\n+        data = Table(\"iris\")\n+        attributes = {\"foo\": \"foo\", \"baz\": 1}\n+        data.domain.attributes[0].attributes = attributes\n+        self.assertDictEqual(\n+            Normalize(norm_type=Normalize.NormalizeBySD)(\n+                data).domain.attributes[0].attributes, attributes)\n+        self.assertDictEqual(\n+            Normalize(norm_type=Normalize.NormalizeBySpan)(\n+                data).domain.attributes[0].attributes, attributes)\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3217.0, "instance_id": "biolab__orange3-3217", "issue_numbers": 0, "base_commit": "33d7012b09321ea69fb42f33527ddf3419e0d352", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 5f3df10f1..838b4a66c 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -207,10 +207,15 @@ class Value(float):\n         raise TypeError(\"invalid operation on Value()\")\n \n     def __hash__(self):\n+        if self.variable.is_discrete:\n+            # It is not possible to hash the id and the domain value to the same number as required by __eq__.\n+            # hash(1) == hash(Value(DiscreteVariable(\"var\", [\"red\", \"green\", \"blue\"]), 1)) == hash(\"green\")\n+            # User should hash directly ids or domain values instead.\n+            raise TypeError(\"unhashable type - cannot hash values of discrete variables!\")\n         if self._value is None:\n             return super().__hash__()\n         else:\n-            return hash((super().__hash__(), self._value))\n+            return hash(self._value)\n \n     @property\n     def value(self):\n.", "test_patch": "diff --git a/Orange/tests/test_value.py b/Orange/tests/test_value.py\nindex 46c996212..bf82f678d 100644\n--- a/Orange/tests/test_value.py\n+++ b/Orange/tests/test_value.py\n@@ -5,7 +5,8 @@ import pickle\n import unittest\n import numpy as np\n \n-from Orange.data import Table, Domain, DiscreteVariable\n+from Orange.data import Table, Domain, Value,\\\n+    DiscreteVariable, ContinuousVariable, StringVariable, TimeVariable\n \n \n class TestValue(unittest.TestCase):\n@@ -50,3 +51,16 @@ class TestValue(unittest.TestCase):\n         zoo2 = zoo[1]['name']  # antelope\n         self.assertTrue(zoo1 < zoo2)\n         self.assertTrue(zoo1 >= \"aardvark\")\n+\n+    def test_hash(self):\n+        v = 1234.5\n+        val = Value(ContinuousVariable(\"var\"), v)\n+        self.assertTrue(val == v and hash(val) == hash(v))\n+        v = \"test\"\n+        val = Value(StringVariable(\"var\"), v)\n+        self.assertTrue(val == v and hash(val) == hash(v))\n+        v = 1234.5\n+        val = Value(TimeVariable(\"var\"), v)\n+        self.assertTrue(val == v and hash(val) == hash(v))\n+        val = Value(DiscreteVariable(\"var\", [\"red\", \"green\", \"blue\"]), 1)\n+        self.assertRaises(TypeError, hash, val)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3833.0, "instance_id": "biolab__orange3-3833", "issue_numbers": 0, "base_commit": "3da6479c703f639e47ad65ba9e944505df0dde80", "patch": "diff --git a/Orange/clustering/dbscan.py b/Orange/clustering/dbscan.py\nindex d69bb019d..7481f1c34 100644\n--- a/Orange/clustering/dbscan.py\n+++ b/Orange/clustering/dbscan.py\n@@ -1,5 +1,5 @@\n import sklearn.cluster as skl_cluster\n-from numpy import ndarray\n+from numpy import ndarray, unique\n \n from Orange.data import Table, DiscreteVariable, Domain, Instance\n from Orange.projection import SklProjector, Projection\n@@ -38,11 +38,11 @@ class DBSCANModel(Projection):\n             if data.domain is not self.pre_domain:\n                 data = data.transform(self.pre_domain)\n             y = self.proj.fit_predict(data.X)\n-            vals = [-1] + list(self.proj.core_sample_indices_)\n+            vals, indices = unique(y, return_inverse=True)\n             c = DiscreteVariable(name='Core sample index',\n                                  values=[str(v) for v in vals])\n             domain = Domain([c])\n-            return Table(domain, y.reshape(len(y), 1))\n+            return Table(domain, indices.reshape(len(y), 1))\n \n         elif isinstance(data, Instance):\n             if data.domain is not self.pre_domain:\n.", "test_patch": "diff --git a/Orange/tests/test_clustering_dbscan.py b/Orange/tests/test_clustering_dbscan.py\nindex bf42775a7..5065fe248 100644\n--- a/Orange/tests/test_clustering_dbscan.py\n+++ b/Orange/tests/test_clustering_dbscan.py\n@@ -29,3 +29,19 @@ class TestDBSCAN(unittest.TestCase):\n         c = dbscan(self.iris)\n         X = self.iris.X[::20]\n         p = c(X)\n+\n+    def test_values(self):\n+        dbscan = DBSCAN(eps=1)  # it clusters data in two classes\n+        c = dbscan(self.iris)\n+        table = self.iris\n+        p = c(table)\n+\n+        self.assertEqual(2, len(p.domain[0].values))\n+        self.assertSetEqual({\"0\", \"1\"}, set(p.domain[0].values))\n+\n+        table.X[0] = [100, 100, 100, 100]  # we add a big outlier\n+\n+        p = c(table)\n+\n+        self.assertEqual(3, len(p.domain[0].values))\n+        self.assertSetEqual({\"-1\", \"0\", \"1\"}, set(p.domain[0].values))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4237.0, "instance_id": "biolab__orange3-4237", "issue_numbers": 0, "base_commit": "76846e2817e36ea24966344e1de27a2be7310a79", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 929121f27..8dfe41be7 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -495,7 +495,8 @@ class Table(Sequence, Storage):\n         return self\n \n     @classmethod\n-    def from_numpy(cls, domain, X, Y=None, metas=None, W=None):\n+    def from_numpy(cls, domain, X, Y=None, metas=None, W=None,\n+                   attributes=None, ids=None):\n         \"\"\"\n         Construct a table from numpy arrays with the given domain. The number\n         of variables in the domain must match the number of columns in the\n@@ -515,7 +516,8 @@ class Table(Sequence, Storage):\n         :return:\n         \"\"\"\n         X, Y, W = _check_arrays(X, Y, W, dtype='float64')\n-        metas, = _check_arrays(metas, dtype=object)\n+        metas, = _check_arrays(metas, dtype=object, shape_1=X.shape[0])\n+        ids, = _check_arrays(ids, dtype=int, shape_1=X.shape[0])\n \n         if Y is not None and Y.ndim == 1:\n             Y = Y.reshape(Y.shape[0], 1)\n@@ -561,8 +563,11 @@ class Table(Sequence, Storage):\n         self.metas = metas\n         self.W = W\n         self.n_rows = self.X.shape[0]\n-        cls._init_ids(self)\n-        self.attributes = {}\n+        if ids is None:\n+            cls._init_ids(self)\n+        else:\n+            self.ids = ids\n+        self.attributes = {} if attributes is None else attributes\n         return self\n \n     @classmethod\n@@ -1664,7 +1669,7 @@ class Table(Sequence, Storage):\n         return t\n \n \n-def _check_arrays(*arrays, dtype=None):\n+def _check_arrays(*arrays, dtype=None, shape_1=None):\n     checked = []\n     if not len(arrays):\n         return checked\n@@ -1675,7 +1680,8 @@ def _check_arrays(*arrays, dtype=None):\n         else:\n             return len(array) if array is not None else 0\n \n-    shape_1 = ninstances(arrays[0])\n+    if shape_1 is None:\n+        shape_1 = ninstances(arrays[0])\n \n     for array in arrays:\n         if array is None:\n.", "test_patch": "diff --git a/Orange/data/tests/test_table.py b/Orange/data/tests/test_table.py\nindex 206d9b2e4..3ddd3f2d7 100644\n--- a/Orange/data/tests/test_table.py\n+++ b/Orange/data/tests/test_table.py\n@@ -31,6 +31,59 @@ class TestTableInit(unittest.TestCase):\n         self.assertRaises(TypeError, Table, \"iris\", 42)\n         self.assertRaises(TypeError, Table, Table(), 42)\n \n+    def test_from_numpy(self):\n+        X = np.arange(20).reshape(5, 4)\n+        Y = np.arange(5) % 2\n+        metas = np.array(list(\"abcde\")).reshape(5, 1)\n+        W = np.arange(5) / 5\n+        ids = np.arange(100, 105, dtype=np.int)\n+        attributes = dict(a=5, b=\"foo\")\n+\n+        dom = Domain([ContinuousVariable(x) for x in \"abcd\"],\n+                     DiscreteVariable(\"e\", values=[\"no\", \"yes\"]),\n+                     [StringVariable(\"s\")])\n+\n+        for func in (Table.from_numpy, Table):\n+            table = func(dom, X, Y, metas, W, attributes, ids)\n+            np.testing.assert_equal(X, table.X)\n+            np.testing.assert_equal(Y, table.Y)\n+            np.testing.assert_equal(metas, table.metas)\n+            np.testing.assert_equal(W, table.W)\n+            self.assertEqual(attributes, table.attributes)\n+            np.testing.assert_equal(ids, table.ids)\n+\n+            table = func(dom, X, Y, metas, W)\n+            np.testing.assert_equal(X, table.X)\n+            np.testing.assert_equal(Y, table.Y)\n+            np.testing.assert_equal(metas, table.metas)\n+            np.testing.assert_equal(W, table.W)\n+            self.assertEqual(ids.shape, (5, ))\n+\n+            table = func(dom, X, Y, metas)\n+            np.testing.assert_equal(X, table.X)\n+            np.testing.assert_equal(Y, table.Y)\n+            np.testing.assert_equal(metas, table.metas)\n+            self.assertEqual(table.W.shape, (5, 0))\n+            self.assertEqual(table.ids.shape, (5, ))\n+\n+            table = func(Domain(dom.attributes, dom.class_var), X, Y)\n+            np.testing.assert_equal(X, table.X)\n+            np.testing.assert_equal(Y, table.Y)\n+            self.assertEqual(table.metas.shape, (5, 0))\n+            self.assertEqual(table.W.shape, (5, 0))\n+            self.assertEqual(table.ids.shape, (5, ))\n+\n+            table = func(Domain(dom.attributes), X)\n+            np.testing.assert_equal(X, table.X)\n+            self.assertEqual(table.Y.shape, (5, 0))\n+            self.assertEqual(table.metas.shape, (5, 0))\n+            self.assertEqual(table.W.shape, (5, 0))\n+            self.assertEqual(table.ids.shape, (5, ))\n+\n+            self.assertRaises(ValueError, func, dom, X, Y, metas, W[:4])\n+            self.assertRaises(ValueError, func, dom, X, Y, metas[:4])\n+            self.assertRaises(ValueError, func, dom, X, Y[:4])\n+\n \n class TestTableFilters(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4281.0, "instance_id": "biolab__orange3-4281", "issue_numbers": 0, "base_commit": "a20b32f3561e4c98e6dcaa99ca939f7ceb1e9973", "patch": "diff --git a/Orange/widgets/data/owtable.py b/Orange/widgets/data/owtable.py\nindex d42689aa6..05c78808a 100644\n--- a/Orange/widgets/data/owtable.py\n+++ b/Orange/widgets/data/owtable.py\n@@ -519,20 +519,17 @@ class OWDataTable(OWWidget):\n             if current is not None:\n                 # pylint: disable=protected-access\n                 self.set_info(current._input_slot.summary)\n-        else:\n-            self.__pending_selected_rows = None\n-            self.__pending_selected_cols = None\n \n         self.tabs.tabBar().setVisible(self.tabs.count() > 1)\n         self.openContext(data)\n \n-        if self.__pending_selected_rows is not None:\n+        if data and self.__pending_selected_rows is not None:\n             self.selected_rows = self.__pending_selected_rows\n             self.__pending_selected_rows = None\n         else:\n             self.selected_rows = []\n \n-        if self.__pending_selected_cols is not None:\n+        if data and self.__pending_selected_cols is not None:\n             self.selected_cols = self.__pending_selected_cols\n             self.__pending_selected_cols = None\n         else:\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owtable.py b/Orange/widgets/data/tests/test_owtable.py\nindex 2feaf4a0e..e4de2e9b6 100644\n--- a/Orange/widgets/data/tests/test_owtable.py\n+++ b/Orange/widgets/data/tests/test_owtable.py\n@@ -66,6 +66,15 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin):\n             self.send_signal(self.widget.Inputs.data, self.data)\n             commit.assert_called()\n \n+    def test_pending_selection(self):\n+        widget = self.create_widget(OWDataTable, stored_settings=dict(\n+            selected_rows=[5, 6, 7, 8, 9],\n+            selected_cols=list(range(len(self.data.domain)))))\n+        self.send_signal(widget.Inputs.data, None, 1)\n+        self.send_signal(widget.Inputs.data, self.data, 1)\n+        output = self.get_output(widget.Outputs.selected_data)\n+        self.assertEqual(5, len(output))\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4165.0, "instance_id": "biolab__orange3-4165", "issue_numbers": 0, "base_commit": "dee9bbaa0472408537235e546e57445ce2b8e490", "patch": "diff --git a/Orange/widgets/data/owdatasampler.py b/Orange/widgets/data/owdatasampler.py\nindex cda524f64..74174d541 100644\n--- a/Orange/widgets/data/owdatasampler.py\n+++ b/Orange/widgets/data/owdatasampler.py\n@@ -70,9 +70,8 @@ class OWDataSampler(OWWidget):\n         self.indices = None\n         self.sampled_instances = self.remaining_instances = None\n \n-        box = gui.vBox(self.controlArea, \"Information\")\n-        self.dataInfoLabel = gui.widgetLabel(box, 'No data on input.')\n-        self.outputInfoLabel = gui.widgetLabel(box, ' ')\n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoInput)\n \n         self.sampling_box = gui.vBox(self.controlArea, \"Sampling Type\")\n         sampling = gui.radioButtons(self.sampling_box, self, \"sampling_type\",\n@@ -180,16 +179,14 @@ class OWDataSampler(OWWidget):\n             self.cb_seed.setVisible(not sql)\n             self.cb_stratify.setVisible(not sql)\n             self.cb_sql_dl.setVisible(sql)\n-            self.dataInfoLabel.setText(\n-                '{}{} instances in input dataset.'.format(*(\n-                    ('~', dataset.approx_len()) if sql else\n-                    ('', len(dataset)))))\n+            self.info.set_input_summary(str(len(dataset)))\n+\n             if not sql:\n                 self._update_sample_max_size()\n                 self.updateindices()\n         else:\n-            self.dataInfoLabel.setText('No data on input.')\n-            self.outputInfoLabel.setText('')\n+            self.info.set_input_summary(self.info.NoInput)\n+            self.info.set_output_summary(self.info.NoInput)\n             self.indices = None\n             self.clear_messages()\n         self.commit()\n@@ -205,7 +202,6 @@ class OWDataSampler(OWWidget):\n         if self.data is None:\n             sample = other = None\n             self.sampled_instances = self.remaining_instances = None\n-            self.outputInfoLabel.setText(\"\")\n         elif isinstance(self.data, SqlTable):\n             other = None\n             if self.sampling_type == self.SqlProportion:\n@@ -226,15 +222,10 @@ class OWDataSampler(OWWidget):\n             if self.sampling_type in (\n                     self.FixedProportion, self.FixedSize, self.Bootstrap):\n                 remaining, sample = self.indices\n-                self.outputInfoLabel.setText(\n-                    'Outputting %d instance%s.' %\n-                    (len(sample), \"s\" * (len(sample) != 1)))\n             elif self.sampling_type == self.CrossValidation:\n                 remaining, sample = self.indices[self.selectedFold - 1]\n-                self.outputInfoLabel.setText(\n-                    'Outputting fold %d, %d instance%s.' %\n-                    (self.selectedFold, len(sample), \"s\" * (len(sample) != 1))\n-                )\n+            self.info.set_output_summary(str(len(sample)))\n+\n             sample = self.data[sample]\n             other = self.data[remaining]\n             self.sampled_instances = len(sample)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasampler.py b/Orange/widgets/data/tests/test_owdatasampler.py\nindex ffb650bcb..28fbe220c 100644\n--- a/Orange/widgets/data/tests/test_owdatasampler.py\n+++ b/Orange/widgets/data/tests/test_owdatasampler.py\n@@ -1,5 +1,7 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n+# pylint: disable=missing-docstring,unsubscriptable-object\n+from unittest.mock import Mock\n+\n from Orange.data import Table\n from Orange.widgets.data.owdatasampler import OWDataSampler\n from Orange.widgets.tests.base import WidgetTest\n@@ -36,6 +38,7 @@ class TestOWDataSampler(WidgetTest):\n         self.assertTrue(self.widget.Warning.could_not_stratify.is_shown())\n \n     def test_bootstrap(self):\n+        output_sum = self.widget.info.set_output_summary = Mock()\n         self.select_sampling_type(self.widget.Bootstrap)\n \n         self.send_signal(\"Data\", self.iris)\n@@ -56,6 +59,8 @@ class TestOWDataSampler(WidgetTest):\n         # high probability (1-(1/150*2/150*...*150/150) ~= 1-2e-64)\n         self.assertGreater(len(in_sample), 0)\n         self.assertGreater(len(in_remaining), 0)\n+        #Check if status bar shows correct number of output data\n+        output_sum.assert_called_with(str(len(sample)))\n \n     def select_sampling_type(self, sampling_type):\n         buttons = self.widget.controls.sampling_type.group.buttons()\n@@ -63,9 +68,11 @@ class TestOWDataSampler(WidgetTest):\n \n     def test_no_intersection_in_outputs(self):\n         \"\"\" Check whether outputs intersect and whether length of outputs sums\n-        to length of original data \"\"\"\n+        to length of original data and\n+        if status bar displays correct output for each sampling type\"\"\"\n         self.send_signal(\"Data\", self.iris)\n         w = self.widget\n+        output_sum = self.widget.info.set_output_summary = Mock()\n         sampling_types = [w.FixedProportion, w.FixedSize, w.CrossValidation]\n \n         for replicable in [True, False]:\n@@ -80,6 +87,7 @@ class TestOWDataSampler(WidgetTest):\n                     other = self.get_output(\"Remaining Data\")\n                     self.assertEqual(len(self.iris), len(sample) + len(other))\n                     self.assertNoIntersection(sample, other)\n+                    output_sum.assert_called_with(str(len(sample)))\n \n     def test_bigger_size_with_replacement(self):\n         \"\"\"Allow bigger output without replacement.\"\"\"\n@@ -116,6 +124,20 @@ class TestOWDataSampler(WidgetTest):\n         self.assertTrue((self.iris.ids != sample.ids).any())\n         self.assertEqual(set(self.iris.ids), set(sample.ids))\n \n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        data = self.iris\n+\n+        input_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, data[:])\n+        input_sum.assert_called_with(\"150\")\n+\n+        input_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+\n     def set_fixed_sample_size(self, sample_size, with_replacement=False):\n         \"\"\"Set fixed sample size and return the number of gui spin.\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4120.0, "instance_id": "biolab__orange3-4120", "issue_numbers": 0, "base_commit": "706f525af0dae49a0600d742db2b8044e2b73abf", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 40fd50afd..e333118b7 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -26,6 +26,8 @@ MISSING_VALUES = {np.nan, \"?\", \"nan\", \".\", \"\", \"NA\", \"~\", None}\n \n DISCRETE_MAX_VALUES = 3  # == 2 + nan\n MAX_NUM_OF_DECIMALS = 5\n+# the variable with more than 100 different values should not be StringVariable\n+DISCRETE_MAX_ALLOWED_VALUES = 100\n \n \n def make_variable(cls, compute_value, *args):\n@@ -63,7 +65,8 @@ def is_discrete_values(values):\n     unique = set()\n     for i in values:\n         unique.add(i)\n-        if len(unique) > max_values:\n+        if (len(unique) > max_values or\n+                len(unique) > DISCRETE_MAX_ALLOWED_VALUES):\n             return False\n \n     # Strip NaN from unique\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_io.py b/Orange/data/tests/test_io.py\nnew file mode 100644\nindex 000000000..ad0c34281\n--- /dev/null\n+++ b/Orange/data/tests/test_io.py\n@@ -0,0 +1,70 @@\n+import unittest\n+import numpy as np\n+\n+from Orange.data import ContinuousVariable, DiscreteVariable, StringVariable\n+from Orange.data.io import guess_data_type\n+\n+\n+class TestTableFilters(unittest.TestCase):\n+\n+    def test_guess_data_type_continuous(self):\n+        # should be ContinuousVariable\n+        valuemap, values, coltype = guess_data_type(list(range(1, 100)))\n+        self.assertEqual(ContinuousVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal(np.array(list(range(1, 100))), values)\n+\n+        valuemap, values, coltype = guess_data_type([1, 2, 3, 1, 2, 3])\n+        self.assertEqual(ContinuousVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal([1, 2, 3, 1, 2, 3], values)\n+\n+        valuemap, values, coltype = guess_data_type(\n+            [\"1\", \"2\", \"3\", \"1\", \"2\", \"3\"])\n+        self.assertEqual(ContinuousVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal([1, 2, 3, 1, 2, 3], values)\n+\n+    def test_guess_data_type_discrete(self):\n+        # should be DiscreteVariable\n+        valuemap, values, coltype = guess_data_type([1, 2, 1, 2])\n+        self.assertEqual(DiscreteVariable, coltype)\n+        self.assertEqual([1, 2], valuemap)\n+        np.testing.assert_array_equal([1, 2, 1, 2], values)\n+\n+        valuemap, values, coltype = guess_data_type([\"1\", \"2\", \"1\", \"2\", \"a\"])\n+        self.assertEqual(DiscreteVariable, coltype)\n+        self.assertEqual([\"1\", \"2\", \"a\"], valuemap)\n+        np.testing.assert_array_equal(['1', '2', '1', '2', 'a'], values)\n+\n+        # just below the threshold for string variable\n+        in_values = list(map(lambda x: str(x) + \"a\", range(24))) + [\"a\"] * 76\n+        valuemap, values, coltype = guess_data_type(in_values)\n+        self.assertEqual(DiscreteVariable, coltype)\n+        self.assertEqual(sorted(set(in_values)), valuemap)\n+        np.testing.assert_array_equal(in_values, values)\n+\n+    def test_guess_data_type_string(self):\n+        # should be StringVariable\n+        # too many different values for discrete\n+        in_values = list(map(lambda x: str(x) + \"a\", range(90)))\n+        valuemap, values, coltype = guess_data_type(in_values)\n+        self.assertEqual(StringVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal(in_values, values)\n+\n+        # more than len(values)**0.7\n+        in_values = list(map(lambda x: str(x) + \"a\", range(25))) + [\"a\"] * 75\n+        valuemap, values, coltype = guess_data_type(in_values)\n+        self.assertEqual(StringVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal(in_values, values)\n+\n+        # more than 100 different values - exactly 101\n+        # this is the case when len(values)**0.7 rule would vote for the\n+        # DiscreteVariable\n+        in_values = list(map(lambda x: str(x) + \"a\", range(100))) + [\"a\"] * 999\n+        valuemap, values, coltype = guess_data_type(in_values)\n+        self.assertEqual(StringVariable, coltype)\n+        self.assertIsNone(valuemap)\n+        np.testing.assert_array_equal(in_values, values)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5251.0, "instance_id": "biolab__orange3-5251", "issue_numbers": 0, "base_commit": "6ae06fcc73392bab1dd83ef458a1f9c0868db3e6", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 059148a5c..4ea833e97 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -898,11 +898,11 @@ class Table(Sequence, Storage):\n     @classmethod\n     def concatenate(cls, tables, axis=0):\n         \"\"\"\n-        Concatenate tables into a new table, either horizontally or vertically.\n+        Concatenate tables into a new table, either vertically or horizontally.\n \n-        If axis=0 (horizontal concatenate), all tables must have the same domain.\n+        If axis=0 (vertical concatenate), all tables must have the same domain.\n \n-        If axis=1 (vertical),\n+        If axis=1 (horizontal),\n         - all variable names must be unique.\n         - ids are copied from the first table.\n         - weights are copied from the first table in which they are defined.\n@@ -915,12 +915,28 @@ class Table(Sequence, Storage):\n         Returns:\n             table (Table)\n         \"\"\"\n+        if axis not in (0, 1):\n+            raise ValueError(\"invalid axis\")\n+        if not tables:\n+            raise ValueError('need at least one table to concatenate')\n+\n+        if len(tables) == 1:\n+            return tables[0].copy()\n+\n         if axis == 0:\n-            return cls._concatenate_vertical(tables)\n-        elif axis == 1:\n-            return cls._concatenate_horizontal(tables)\n+            conc = cls._concatenate_vertical(tables)\n         else:\n-            raise ValueError(\"invalid axis\")\n+            conc = cls._concatenate_horizontal(tables)\n+\n+        # TODO: Add attributes = {} to __init__\n+        conc.attributes = getattr(conc, \"attributes\", {})\n+        for table in reversed(tables):\n+            conc.attributes.update(table.attributes)\n+\n+        names = [table.name for table in tables if table.name != \"untitled\"]\n+        if names:\n+            conc.name = names[0]\n+        return conc\n \n     @classmethod\n     def _concatenate_vertical(cls, tables):\n@@ -941,10 +957,6 @@ class Table(Sequence, Storage):\n         def collect(attr):\n             return [getattr(arr, attr) for arr in tables]\n \n-        if not tables:\n-            raise ValueError('need at least one table to concatenate')\n-        if len(tables) == 1:\n-            return tables[0].copy()\n         domain = tables[0].domain\n         if any(table.domain != domain for table in tables):\n             raise ValueError('concatenated tables must have the same domain')\n@@ -957,22 +969,12 @@ class Table(Sequence, Storage):\n             merge1d(collect(\"W\"))\n         )\n         conc.ids = np.hstack([t.ids for t in tables])\n-        names = [table.name for table in tables if table.name != \"untitled\"]\n-        if names:\n-            conc.name = names[0]\n-        # TODO: Add attributes = {} to __init__\n-        conc.attributes = getattr(conc, \"attributes\", {})\n-        for table in reversed(tables):\n-            conc.attributes.update(table.attributes)\n         return conc\n \n     @classmethod\n     def _concatenate_horizontal(cls, tables):\n         \"\"\"\n         \"\"\"\n-        if not tables:\n-            raise ValueError('need at least one table to join')\n-\n         def all_of(objs, names):\n             return (tuple(getattr(obj, name) for obj in objs)\n                     for name in names)\n@@ -983,7 +985,7 @@ class Table(Sequence, Storage):\n                               if arr is not None and arr.size > 0)\n             return np.hstack(non_empty) if non_empty else None\n \n-        doms, Ws, table_attrss = all_of(tables, (\"domain\", \"W\", \"attributes\"))\n+        doms, Ws = all_of(tables, (\"domain\", \"W\"))\n         Xs, Ys, Ms = map(stack, all_of(tables, (\"X\", \"Y\", \"metas\")))\n         # pylint: disable=undefined-loop-variable\n         for W in Ws:\n@@ -992,11 +994,7 @@ class Table(Sequence, Storage):\n \n         parts = all_of(doms, (\"attributes\", \"class_vars\", \"metas\"))\n         domain = Domain(*(tuple(chain(*lst)) for lst in parts))\n-        table = cls.from_numpy(domain, Xs, Ys, Ms, W, ids=tables[0].ids)\n-        for ta in reversed(table_attrss):\n-            table.attributes.update(ta)\n-\n-        return table\n+        return cls.from_numpy(domain, Xs, Ys, Ms, W, ids=tables[0].ids)\n \n     def add_column(self, variable, data, to_metas=None):\n         \"\"\"\n.", "test_patch": "diff --git a/Orange/data/tests/test_table.py b/Orange/data/tests/test_table.py\nindex 0c4bfbb0a..836110276 100644\n--- a/Orange/data/tests/test_table.py\n+++ b/Orange/data/tests/test_table.py\n@@ -183,6 +183,18 @@ class TestTableInit(unittest.TestCase):\n     def test_concatenate_invalid_axis(self):\n         self.assertRaises(ValueError, Table.concatenate, (), axis=2)\n \n+    def test_concatenate_names(self):\n+        a, b, c, d, e, f, g = map(ContinuousVariable, \"abcdefg\")\n+\n+        tab1 = self._new_table((a, ), (c, ), (d, ), 0)\n+        tab2 = self._new_table((e, ), (), (f, g), 1000)\n+        tab3 = self._new_table((b, ), (), (), 1000)\n+        tab2.name = \"tab2\"\n+        tab3.name = \"tab3\"\n+\n+        joined = Table.concatenate((tab1, tab2, tab3), axis=1)\n+        self.assertEqual(joined.name, \"tab2\")\n+\n     def test_with_column(self):\n         a, b, c, d, e, f, g = map(ContinuousVariable, \"abcdefg\")\n         col = np.arange(9, 14)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5037.0, "instance_id": "biolab__orange3-5037", "issue_numbers": 0, "base_commit": "119ce6cdbc58862de4669472ad4c3eb423dfe14d", "patch": "diff --git a/Orange/widgets/visualize/utils/customizableplot.py b/Orange/widgets/visualize/utils/customizableplot.py\nindex afdc0ecfa..f9655a268 100644\n--- a/Orange/widgets/visualize/utils/customizableplot.py\n+++ b/Orange/widgets/visualize/utils/customizableplot.py\n@@ -28,8 +28,11 @@ def available_font_families() -> List:\n     if not QApplication.instance():\n         _ = QApplication(sys.argv)\n     fonts = QFontDatabase().families()\n-    default = fonts.pop(fonts.index(default_font_family()))\n+    default = default_font_family()\n+\n     defaults = [default]\n+    if default in fonts:\n+        fonts.remove(default)\n \n     guessed_name = default.split()[0]\n     i = 0\n@@ -263,7 +266,7 @@ class CommonParameterSetter:\n                 self.getAxis(axis), settings[self.TITLE_LABEL])\n \n         self.FONT_FAMILY_SETTING: SettingsType = {  # pylint: disable=invalid-name\n-            Updater.FONT_FAMILY_LABEL: (available_font_families(), QFont().family()),\n+            Updater.FONT_FAMILY_LABEL: (available_font_families(), default_font_family()),\n         }\n \n         self.FONT_SETTING: SettingsType = {  # pylint: disable=invalid-name\n.", "test_patch": "diff --git a/Orange/widgets/visualize/utils/tests/test_customizableplot.py b/Orange/widgets/visualize/utils/tests/test_customizableplot.py\nnew file mode 100644\nindex 000000000..5863ced5f\n--- /dev/null\n+++ b/Orange/widgets/visualize/utils/tests/test_customizableplot.py\n@@ -0,0 +1,38 @@\n+import unittest\n+from unittest.mock import patch, Mock\n+\n+from Orange.widgets.visualize.utils import customizableplot\n+\n+\n+class TestFonts(unittest.TestCase):\n+    def test_available_font_families(self):\n+        with patch.object(customizableplot, \"QFont\") as font, \\\n+                patch.object(customizableplot, \"QFontDatabase\") as db:\n+            font.return_value = Mock()\n+            font.return_value.family = Mock(return_value=\"mock regular\")\n+\n+            db.return_value = Mock()\n+            db.return_value.families = Mock(\n+                return_value=[\"a\", \".d\", \"e\", \".b\", \"mock regular\", \"c\"])\n+            self.assertEqual(customizableplot.available_font_families(),\n+                             [\"mock regular\", \"\", \"a\", \".b\", \"c\", \".d\", \"e\"])\n+\n+            db.return_value = Mock()\n+            db.return_value.families = Mock(\n+                return_value=[\"a\", \".d\", \"e\", \".b\", \"mock regular\",\n+                              \"mock bold\", \"mock italic\", \"c\", \"mock semi\"])\n+            self.assertEqual(customizableplot.available_font_families(),\n+                             [\"mock regular\", \"mock bold\", \"mock italic\",\n+                              \"mock semi\", \"\",\n+                              \"a\", \".b\", \"c\", \".d\", \"e\"])\n+\n+            # It seems it's possible that default font family does not exist\n+            # (see gh-5036)\n+            db.return_value.families.return_value = [\"a\", \".d\", \"e\", \".b\", \"c\"]\n+            self.assertEqual(customizableplot.available_font_families(),\n+                             [\"mock regular\", \"\", \"a\", \".b\", \"c\", \".d\", \"e\"])\n+            self.assertIn(customizableplot.default_font_family(),\n+                          customizableplot.available_font_families())\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6202.0, "instance_id": "biolab__orange3-6202", "issue_numbers": 0, "base_commit": "e76079f0098a1a22d59128344427f49e697075de", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex 4f05506e8..c8c681e97 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -341,31 +341,31 @@ def stats(X, weights=None, compute_variance=False):\n     \"\"\"\n     is_numeric = np.issubdtype(X.dtype, np.number)\n     is_sparse = sp.issparse(X)\n-    weighted = weights is not None and X.dtype != object\n-    weights = weights if weighted else None\n+\n+    if X.size and is_numeric:\n+        if compute_variance:\n+            means, vars = nan_mean_var(X, axis=0, weights=weights)\n+        else:\n+            means = nanmean(X, axis=0, weights=weights)\n+            vars = np.zeros(X.shape[1] if X.ndim == 2 else 1)\n \n     if X.size and is_numeric and not is_sparse:\n         nans = np.isnan(X).sum(axis=0)\n         return np.column_stack((\n             np.nanmin(X, axis=0),\n             np.nanmax(X, axis=0),\n-            nanmean(X, axis=0, weights=weights),\n-            nanvar(X, axis=0) if compute_variance else \\\n-                np.zeros(X.shape[1] if X.ndim == 2 else 1),\n+            means,\n+            vars,\n             nans,\n             X.shape[0] - nans))\n     elif is_sparse and X.size:\n-        if compute_variance and weighted:\n-            raise NotImplementedError\n-\n         non_zero = np.bincount(X.nonzero()[1], minlength=X.shape[1])\n         X = X.tocsc()\n         return np.column_stack((\n             nanmin(X, axis=0),\n             nanmax(X, axis=0),\n-            nanmean(X, axis=0, weights=weights),\n-            nanvar(X, axis=0) if compute_variance else \\\n-                np.zeros(X.shape[1] if X.ndim == 2 else 1),\n+            means,\n+            vars,\n             X.shape[0] - non_zero,\n             non_zero))\n     else:\n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex 6b3dac821..0e5ee9c19 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -155,8 +155,9 @@ class TestUtil(unittest.TestCase):\n         np.testing.assert_equal(stats(X, weights), [[0, 2, 1.5, 0, 1, 1],\n                                                     [1, 3, 2.5, 0, 0, 2]])\n \n-        with self.assertRaises(NotImplementedError):\n-            stats(X, weights, compute_variance=True)\n+        np.testing.assert_equal(stats(X, weights, compute_variance=True),\n+                                [[0, 2, 1.5, 0.75, 1, 1],\n+                                 [1, 3, 2.5, 0.75, 0, 2]])\n \n     def test_stats_non_numeric(self):\n         X = np.array([\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3624.0, "instance_id": "biolab__orange3-3624", "issue_numbers": 0, "base_commit": "a05809c45d5a98b0160c14235964dd8dbf0ea96d", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 5bcc2ad91..73c0ba96d 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1779,7 +1779,8 @@ def _check_arrays(*arrays, dtype=None):\n             has_inf = _check_inf(array)\n \n         if has_inf:\n-            raise ValueError(\"Array contains infinity.\")\n+            array[np.isinf(array)] = np.nan\n+            warnings.warn(\"Array contains infinity.\", RuntimeWarning)\n         checked.append(array)\n \n     return checked\n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex a4beba674..80c49be31 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -1277,6 +1277,14 @@ class TableTestCase(unittest.TestCase):\n         table.X = sp.csr_matrix(table.X)\n         repr(table)     # make sure repr does not crash\n \n+    def test_inf(self):\n+        a = np.array([[2,   0,      0,      0],\n+                      [0,   np.nan, np.nan, 1],\n+                      [0,   0,      np.inf, 0]])\n+        with self.assertWarns(Warning):\n+            tab = data.Table(a)\n+        self.assertEqual(tab.get_nan_frequency_attribute(), 3/12)\n+\n \n def column_sizes(table):\n     return (len(table.domain.attributes),\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3957.0, "instance_id": "biolab__orange3-3957", "issue_numbers": 0, "base_commit": "715714859464e5020ffca0f7895a78462b43acfb", "patch": "diff --git a/Orange/widgets/data/owtable.py b/Orange/widgets/data/owtable.py\nindex 3af643019..8f77ba713 100644\n--- a/Orange/widgets/data/owtable.py\n+++ b/Orange/widgets/data/owtable.py\n@@ -536,7 +536,7 @@ class OWDataTable(OWWidget):\n             self.selected_cols = []\n \n         self.set_selection()\n-        self.commit()\n+        self.unconditional_commit()\n \n     def _setup_table_view(self, view, data):\n         \"\"\"Setup the `view` (QTableView) with `data` (Orange.data.Table)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owtable.py b/Orange/widgets/data/tests/test_owtable.py\nindex 65500508a..2feaf4a0e 100644\n--- a/Orange/widgets/data/tests/test_owtable.py\n+++ b/Orange/widgets/data/tests/test_owtable.py\n@@ -1,4 +1,5 @@\n-from unittest.mock import Mock\n+import unittest\n+from unittest.mock import Mock, patch\n \n from Orange.widgets.data.owtable import OWDataTable\n from Orange.widgets.tests.base import WidgetTest, WidgetOutputsTestMixin\n@@ -57,3 +58,14 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin):\n         # false positive, pylint: disable=unsubscriptable-object\n         self.assertEqual(\n             self.widget.set_corner_text.call_args[0][1], \"\\na\\nb\\nc\")\n+\n+    def test_unconditional_commit_on_new_signal(self):\n+        with patch.object(self.widget, 'unconditional_commit') as commit:\n+            self.widget.auto_commit = False\n+            commit.reset_mock()\n+            self.send_signal(self.widget.Inputs.data, self.data)\n+            commit.assert_called()\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4543.0, "instance_id": "biolab__orange3-4543", "issue_numbers": 0, "base_commit": "b838a6d8ab37622e96e0d6e506b3a3f7fb5cb38a", "patch": "diff --git a/Orange/widgets/utils/state_summary.py b/Orange/widgets/utils/state_summary.py\nindex c43f14864..b77bf8cd1 100644\n--- a/Orange/widgets/utils/state_summary.py\n+++ b/Orange/widgets/utils/state_summary.py\n@@ -24,9 +24,7 @@ def format_variables_string(variables):\n         # `isinstance`, which would fail in the above case\n         var_type_list = [v for v in variables if type(v) is var_type]  # pylint: disable=unidiomatic-typecheck\n         if var_type_list:\n-            not_shown = ' (not shown)' if issubclass(var_type, StringVariable)\\\n-                else ''\n-            agg.append((f'{var_type_name}{not_shown}', len(var_type_list)))\n+            agg.append((var_type_name, len(var_type_list)))\n \n     attrs, counts = list(zip(*agg))\n     if len(attrs) > 1:\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_state_summary.py b/Orange/widgets/utils/tests/test_state_summary.py\nindex 14e61dfbf..463018631 100644\n--- a/Orange/widgets/utils/tests/test_state_summary.py\n+++ b/Orange/widgets/utils/tests/test_state_summary.py\n@@ -108,7 +108,7 @@ class TestUtils(unittest.TestCase):\n                   f'{n_features} variables\\n' \\\n                   f'Features: {len(data.domain.attributes)} categorical\\n' \\\n                   f'Target: categorical\\n' \\\n-                  f'Metas: string (not shown)'\n+                  f'Metas: string'\n         self.assertEqual(details, format_summary_details(data))\n \n         data = Table('housing')\n@@ -154,7 +154,7 @@ class TestUtils(unittest.TestCase):\n                   f'(2 categorical, 1 numeric, 1 time)\\n' \\\n                   f'Target: {len(data.domain.class_vars)} ' \\\n                   f'(1 categorical, 1 numeric)\\n' \\\n-                  f'Metas: {len(data.domain.metas)} string (not shown)'\n+                  f'Metas: {len(data.domain.metas)} string'\n         self.assertEqual(details, format_summary_details(data))\n \n         data = make_table([time_full, time_missing], target=[ints_missing],\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4498.0, "instance_id": "biolab__orange3-4498", "issue_numbers": 0, "base_commit": "4462394d84f5c53e8982029ff6f53d3366483c8b", "patch": "diff --git a/Orange/widgets/data/owrandomize.py b/Orange/widgets/data/owrandomize.py\nindex c88c25337..018e0fd63 100644\n--- a/Orange/widgets/data/owrandomize.py\n+++ b/Orange/widgets/data/owrandomize.py\n@@ -7,6 +7,7 @@ from Orange.data import Table\n from Orange.preprocess import Randomize\n from Orange.widgets.settings import Setting\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import OWWidget, Input, Output\n from Orange.widgets import gui\n \n@@ -68,7 +69,7 @@ class OWRandomize(OWWidget):\n             callback=self._shuffle_check_changed)\n \n         self.info.set_input_summary(self.info.NoInput)\n-        self.info.set_output_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n \n         self.apply_button = gui.auto_apply(self.controlArea, self, box=False, commit=self.apply)\n \n@@ -89,9 +90,10 @@ class OWRandomize(OWWidget):\n     @Inputs.data\n     def set_data(self, data):\n         self.data = data\n+        summary = len(data) if data else self.info.NoInput\n+        details = format_summary_details(data) if data else \"\"\n+        self.info.set_input_summary(summary, details)\n         self.unconditional_apply()\n-        text = str(len(data)) if data else self.info.NoInput\n-        self.info.set_input_summary(text)\n \n     def apply(self):\n         data = None\n@@ -105,8 +107,9 @@ class OWRandomize(OWWidget):\n             data = self.data.copy()\n             for i, instance in zip(indices, randomized):\n                 data[i] = instance\n-        text = str(len(data)) if data else self.info.NoInput\n-        self.info.set_output_summary(text)\n+        summary = len(data) if data else self.info.NoOutput\n+        details = format_summary_details(data) if data else \"\"\n+        self.info.set_output_summary(summary, details)\n         self.Outputs.data.send(data)\n \n     def send_report(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owrandomize.py b/Orange/widgets/data/tests/test_owrandomize.py\nindex 173677402..153fe3d2b 100644\n--- a/Orange/widgets/data/tests/test_owrandomize.py\n+++ b/Orange/widgets/data/tests/test_owrandomize.py\n@@ -7,6 +7,7 @@ import numpy as np\n from Orange.data import Table\n from Orange.widgets.data.owrandomize import OWRandomize\n from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWRandomize(WidgetTest):\n@@ -79,13 +80,15 @@ class TestOWRandomize(WidgetTest):\n         output_sum = self.widget.info.set_output_summary = Mock()\n         input_sum = self.widget.info.set_input_summary = Mock()\n \n-        self.send_signal(self.widget.Inputs.data, self.zoo)\n-        input_sum.assert_called_with(str(len(self.zoo)))\n+        data = self.zoo\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data),\n+                                     format_summary_details(data))\n         output = self.get_output(self.widget.Outputs.data)\n-        output_sum.assert_called_with(str(len(output)))\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n         input_sum.reset_mock()\n         output_sum.reset_mock()\n-\n         self.send_signal(self.widget.Inputs.data, None)\n         input_sum.assert_called_once()\n         self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4866.0, "instance_id": "biolab__orange3-4866", "issue_numbers": 0, "base_commit": "56c12a59d4d42513e98e50dc35f2c1064151ecca", "patch": "diff --git a/Orange/data/util.py b/Orange/data/util.py\nindex 4976da8f0..f1b58874e 100644\n--- a/Orange/data/util.py\n+++ b/Orange/data/util.py\n@@ -10,7 +10,7 @@ import numpy as np\n import bottleneck as bn\n from scipy import sparse as sp\n \n-RE_FIND_INDEX = r\"(^{} \\()(\\d{{1,}})(\\)$)\"\n+RE_FIND_INDEX = r\"(^{})( \\((\\d{{1,}})\\))?$\"\n \n \n def one_hot(\n@@ -167,11 +167,11 @@ def get_indices(names, name):\n     :param name: str\n     :return: list of indices\n     \"\"\"\n-    return [int(a.group(2)) for x in filter(None, names)\n+    return [int(a.group(3) or 0) for x in filter(None, names)\n             for a in re.finditer(RE_FIND_INDEX.format(re.escape(name)), x)]\n \n \n-def get_unique_names(names, proposed):\n+def get_unique_names(names, proposed, equal_numbers=True):\n     \"\"\"\n     Returns unique names for variables\n \n@@ -189,13 +189,15 @@ def get_unique_names(names, proposed):\n     list.\n \n     The method is used in widgets like MDS, which adds two variables (`x` and\n-    `y`). It is desired that they have the same index. If `x`, `x (1)` and\n-    `x (2)` and `y` (but no other `y`'s already exist in the domain, MDS\n-    should append `x (3)` and `y (3)`, not `x (3)` and y (1)`.\n+    `y`). It is desired that they have the same index. In case when\n+    equal_numbers=True, if `x`, `x (1)` and `x (2)` and `y` (but no other\n+    `y`'s already exist in the domain, MDS should append `x (3)` and `y (3)`,\n+    not `x (3)` and y (1)`.\n \n     Args:\n         names (Domain or list of str): used names\n         proposed (str or list of str): proposed name\n+        equal_numbers (bool): Add same number to all proposed names\n \n     Return:\n         str or list of str\n@@ -206,13 +208,16 @@ def get_unique_names(names, proposed):\n         names = [var.name for var in chain(names.variables, names.metas)]\n     if isinstance(proposed, str):\n         return get_unique_names(names, [proposed])[0]\n-    indicess = [indices\n-                for indices in (get_indices(names, name) for name in proposed)\n-                if indices]\n-    if not (set(proposed) & set(names) or indicess):\n+    indices = {name: get_indices(names, name) for name in proposed}\n+    indices = {name: max(ind) + 1 for name, ind in indices.items() if ind}\n+    if not (set(proposed) & set(names) or indices):\n         return proposed\n-    max_index = max(map(max, indicess), default=0) + 1\n-    return [f\"{name} ({max_index})\" for name in proposed]\n+    if equal_numbers:\n+        max_index = max(indices.values())\n+        return [f\"{name} ({max_index})\" for name in proposed]\n+    else:\n+        return [f\"{name} ({indices[name]})\" if name in indices else name\n+                for name in proposed]\n \n \n def get_unique_names_duplicates(proposed: list, return_duplicated=False) -> list:\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_util.py b/Orange/data/tests/test_util.py\nindex 48977ada2..4d9911e47 100644\n--- a/Orange/data/tests/test_util.py\n+++ b/Orange/data/tests/test_util.py\n@@ -48,6 +48,78 @@ class TestGetUniqueNames(unittest.TestCase):\n         self.assertEqual(get_unique_names(domain, \"foo\"), \"foo (1)\")\n         self.assertEqual(get_unique_names(domain, \"baz\"), \"baz (4)\")\n \n+    def test_get_unique_names_not_equal(self):\n+        names = [\"foo\", \"bar\", \"baz\", \"baz (3)\"]\n+        self.assertEqual(\n+            get_unique_names(names, [\"qux\"], equal_numbers=False), [\"qux\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\"], equal_numbers=False), [\"foo (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"baz\"], equal_numbers=False), [\"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"baz (3)\"], equal_numbers=False),\n+            [\"baz (3) (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"qux\", \"quux\"], equal_numbers=False),\n+            [\"qux\", \"quux\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"bar\", \"baz\"], equal_numbers=False),\n+            [\"bar (1)\", \"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"qux\", \"baz\"], equal_numbers=False),\n+            [\"qux\", \"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"qux\", \"bar\"], equal_numbers=False),\n+            [\"qux\", \"bar (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\", \"bar\", \"baz\"], equal_numbers=False),\n+            [\"foo (1)\", \"bar (1)\", \"baz (4)\"]\n+        )\n+\n+        a, b, c, d = map(ContinuousVariable, [\"foo\", \"bar\", \"baz\", \"baz (3)\"])\n+        domain = Domain([a, b], c, [d])\n+        self.assertEqual(\n+            get_unique_names(names, [\"qux\"], equal_numbers=False), [\"qux\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"foo\"], equal_numbers=False), [\"foo (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"baz\"], equal_numbers=False), [\"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(names, [\"baz (3)\"], equal_numbers=False),\n+            [\"baz (3) (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(domain, [\"qux\", \"quux\"], equal_numbers=False),\n+            [\"qux\", \"quux\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(domain, [\"bar\", \"baz\"], equal_numbers=False),\n+            [\"bar (1)\", \"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(domain, [\"qux\", \"baz\"], equal_numbers=False),\n+            [\"qux\", \"baz (4)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(domain, [\"qux\", \"bar\"], equal_numbers=False),\n+            [\"qux\", \"bar (1)\"]\n+        )\n+        self.assertEqual(\n+            get_unique_names(domain, [\"foo\", \"bar\", \"baz\"], equal_numbers=False),\n+            [\"foo (1)\", \"bar (1)\", \"baz (4)\"]\n+        )\n+\n     def test_get_unique_names_from_duplicates(self):\n         self.assertEqual(\n             get_unique_names_duplicates([\"foo\", \"bar\", \"baz\"]),\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4779.0, "instance_id": "biolab__orange3-4779", "issue_numbers": 0, "base_commit": "cf5e816fe4b730fc307ca98c3d75ec527d42aa49", "patch": "diff --git a/Orange/preprocess/normalize.py b/Orange/preprocess/normalize.py\nindex 23ec66560..83868ee5d 100644\n--- a/Orange/preprocess/normalize.py\n+++ b/Orange/preprocess/normalize.py\n@@ -52,8 +52,14 @@ class Normalizer(Reprable):\n             compute_val = Norm(var, avg, 1 / sd)\n         else:\n             compute_val = Norm(var, 0, 1 / sd)\n-        num_decimals = var.number_of_decimals + int(np.ceil(np.log10(sd)))\n-        num_decimals = max(num_decimals, 0)  # num decimals can't be negative\n+\n+        # When dealing with integers, and multiplying by something smaller than\n+        # 1, the number of decimals should be decreased, but this integer will\n+        # likely turn into a float, which should have some default number of\n+        # decimals\n+        num_decimals = var.number_of_decimals + int(np.round(np.log10(sd)))\n+        num_decimals = max(num_decimals, 1)  # num decimals can't be negative\n+\n         return var.copy(compute_value=compute_val, number_of_decimals=num_decimals)\n \n     def normalize_by_span(self, dist, var: ContinuousVariable) -> ContinuousVariable:\n@@ -65,6 +71,9 @@ class Normalizer(Reprable):\n             compute_val = Norm(var, dmi, 1 / diff)\n         else:\n             compute_val = Norm(var, (dma + dmi) / 2, 2 / diff)\n-        num_decimals = var.number_of_decimals + int(np.ceil(np.log10(diff)))\n-        num_decimals = max(num_decimals, 0)  # num decimals can't be negative\n-        return var.copy(compute_value=compute_val, number_of_decimals=num_decimals)\n+        if not np.isnan(diff):\n+            num_decimals = var.number_of_decimals + int(np.ceil(np.log10(diff)))\n+            num_decimals = max(num_decimals, 0)  # num decimals can't be negative\n+            return var.copy(compute_value=compute_val, number_of_decimals=num_decimals)\n+        else:\n+            return var.copy(compute_value=compute_val)\n.", "test_patch": "diff --git a/Orange/tests/test_normalize.py b/Orange/tests/test_normalize.py\nindex 84c38d6dc..d58e9daae 100644\n--- a/Orange/tests/test_normalize.py\n+++ b/Orange/tests/test_normalize.py\n@@ -159,14 +159,12 @@ class TestNormalizer(unittest.TestCase):\n         data = Table.from_list(Domain((foo,)), [[1], [2], [3]])\n \n         normalized = Normalize()(data)\n-        norm_foo = normalized.domain.attributes[0]\n+        norm_foo: ContinuousVariable = normalized.domain.attributes[0]\n \n-        self.assertEqual(norm_foo.number_of_decimals, 3)\n-        self.assertEqual(norm_foo.format_str, \"%g\")\n-        self.assertEqual(norm_foo.adjust_decimals, 2)\n+        self.assertGreater(norm_foo.number_of_decimals, 0)\n \n         for val1, val2 in zip(normalized[:, \"Foo\"],\n-                              [\"-1.22474\", \"0\", \"1.22474\"]):\n+                              [\"-1.225\", \"0.0\", \"1.225\"]):\n             self.assertEqual(str(val1[0]), val2)\n \n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4333.0, "instance_id": "biolab__orange3-4333", "issue_numbers": 0, "base_commit": "667af5741ddf5762bdef9759ee81f7c95aff6e02", "patch": "diff --git a/Orange/widgets/data/owpreprocess.py b/Orange/widgets/data/owpreprocess.py\nindex bf776df70..238be791e 100644\n--- a/Orange/widgets/data/owpreprocess.py\n+++ b/Orange/widgets/data/owpreprocess.py\n@@ -1144,6 +1144,9 @@ class OWPreprocess(widget.OWWidget):\n         box = gui.vBox(self.controlArea, \"Output\")\n         gui.auto_send(box, self, \"autocommit\", box=False)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n         self._initialize()\n \n     def _initialize(self):\n@@ -1261,6 +1264,10 @@ class OWPreprocess(widget.OWWidget):\n     def set_data(self, data=None):\n         \"\"\"Set the input dataset.\"\"\"\n         self.data = data\n+        if data is not None:\n+            self.info.set_input_summary(len(data))\n+        else:\n+            self.info.set_input_summary(self.info.NoInput)\n \n     def handleNewSignals(self):\n         self.apply()\n@@ -1304,8 +1311,10 @@ class OWPreprocess(widget.OWWidget):\n             except (ValueError, ZeroDivisionError) as e:\n                 self.error(str(e))\n                 return\n+            self.info.set_output_summary(len(data))\n         else:\n             data = None\n+            self.info.set_output_summary(self.info.NoOutput)\n \n         self.Outputs.preprocessor.send(preprocessor)\n         self.Outputs.preprocessed_data.send(data)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpreprocess.py b/Orange/widgets/data/tests/test_owpreprocess.py\nindex 61a3a6e2f..873403cf4 100644\n--- a/Orange/widgets/data/tests/test_owpreprocess.py\n+++ b/Orange/widgets/data/tests/test_owpreprocess.py\n@@ -1,5 +1,6 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n+# pylint: disable=missing-docstring,unsubscriptable-object\n+from unittest.mock import Mock\n import numpy as np\n \n from Orange.data import Table\n@@ -12,6 +13,7 @@ from Orange.widgets.data import owpreprocess\n from Orange.widgets.data.owpreprocess import OWPreprocess, \\\n     UnivariateFeatureSelect, Scale as ScaleEditor\n from Orange.widgets.tests.base import WidgetTest, datasets\n+from orangewidget.widget import StateInfo\n \n \n class TestOWPreprocess(WidgetTest):\n@@ -138,6 +140,25 @@ class TestOWPreprocess(WidgetTest):\n         self.widget.set_model(model)\n         self.send_signal(self.widget.Inputs.data, table)\n \n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        data = Table(\"iris\")\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        output = self.get_output(self.widget.Outputs.preprocessed_data)\n+        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n \n # Test for editors\n class TestDiscretizeEditor(WidgetTest):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4259.0, "instance_id": "biolab__orange3-4259", "issue_numbers": 0, "base_commit": "626f9a51a8fd1e6ecd100fb32d3df0dc6a9c350a", "patch": "diff --git a/Orange/data/pandas_compat.py b/Orange/data/pandas_compat.py\nindex e6161eaee..a15b38656 100644\n--- a/Orange/data/pandas_compat.py\n+++ b/Orange/data/pandas_compat.py\n@@ -78,7 +78,7 @@ def table_from_frame(df, *, force_nominal=False):\n                             np.column_stack(M) if M else None)\n \n \n-def table_to_frame(tab):\n+def table_to_frame(tab, include_metas=False):\n     \"\"\"\n     Convert Orange.data.Table to pandas.DataFrame\n \n@@ -86,6 +86,9 @@ def table_to_frame(tab):\n     ----------\n     tab : Table\n \n+    include_metas : bool, (default=False)\n+        Include table metas into dataframe.\n+\n     Returns\n     -------\n     pandas.DataFrame\n@@ -122,6 +125,9 @@ def table_to_frame(tab):\n     if domain.metas:\n         metas = _columns_to_series(domain.metas, tab.metas)\n     all_series = dict(x + y + metas)\n-    original_column_order = [var.name for var in tab.domain.variables + tab.domain.metas]\n+    all_vars = tab.domain.variables\n+    if include_metas:\n+        all_vars += tab.domain.metas\n+    original_column_order = [var.name for var in all_vars]\n     unsorted_columns_df = pd.DataFrame(all_series)\n     return unsorted_columns_df[original_column_order]\n.", "test_patch": "diff --git a/Orange/data/tests/test_pandas.py b/Orange/data/tests/test_pandas.py\nindex 391b3af56..b0e4de50f 100644\n--- a/Orange/data/tests/test_pandas.py\n+++ b/Orange/data/tests/test_pandas.py\n@@ -1,3 +1,4 @@\n+# pylint: disable=import-outside-toplevel\n import unittest\n import numpy as np\n from Orange.data import ContinuousVariable, DiscreteVariable, TimeVariable, Table\n@@ -7,6 +8,7 @@ try:\n except ImportError:\n     pd = None\n \n+\n @unittest.skipIf(pd is None, \"Missing package 'pandas'\")\n class TestPandasCompat(unittest.TestCase):\n     def test_table_from_frame(self):\n@@ -73,6 +75,20 @@ class TestPandasCompat(unittest.TestCase):\n         self.assertEqual(list(df['sepal length'])[0:4], [5.1, 4.9, 4.7, 4.6])\n         self.assertEqual(list(df['iris'])[0:2], ['Iris-setosa', 'Iris-setosa'])\n \n+    def test_table_to_frame_metas(self):\n+        from Orange.data.pandas_compat import table_to_frame\n+\n+        table = Table(\"zoo\")\n+        domain = table.domain\n+\n+        df = table_to_frame(table)\n+        cols = pd.Index([var.name for var in domain.variables])\n+        pd.testing.assert_index_equal(df.columns, cols)\n+\n+        df = table_to_frame(table, include_metas=True)\n+        cols = pd.Index([var.name for var in domain.variables + domain.metas])\n+        pd.testing.assert_index_equal(df.columns, cols)\n+\n     @unittest.skip(\"Convert all Orange demo dataset. It takes about 5s which is way to slow\")\n     def test_table_to_frame_on_all_orange_dataset(self):\n         from os import listdir\n@@ -96,3 +112,7 @@ class TestPandasCompat(unittest.TestCase):\n             self.assertEqual(type(df), pd.DataFrame, assert_message)\n             self.assertEqual(len(df), len(table), assert_message)\n             self.assertEqual(len(df.columns), len(table.domain), assert_message)\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4425.0, "instance_id": "biolab__orange3-4425", "issue_numbers": 0, "base_commit": "98b0e15e7451d507eca66f7679add8a4140546b5", "patch": "diff --git a/Orange/widgets/data/owconcatenate.py b/Orange/widgets/data/owconcatenate.py\nindex f1aa4562a..3fabc8fcc 100644\n--- a/Orange/widgets/data/owconcatenate.py\n+++ b/Orange/widgets/data/owconcatenate.py\n@@ -16,7 +16,7 @@ from AnyQt.QtWidgets import QFormLayout\n from AnyQt.QtCore import Qt\n \n import Orange.data\n-from Orange.data.util import get_unique_names_duplicates\n+from Orange.data.util import get_unique_names_duplicates, get_unique_names\n from Orange.util import flatten\n from Orange.widgets import widget, gui, settings\n from Orange.widgets.settings import Setting\n@@ -196,7 +196,7 @@ class OWConcatenate(widget.OWWidget):\n                 names = ['{} ({})'.format(name, i)\n                          for i, name in enumerate(names)]\n             source_var = Orange.data.DiscreteVariable(\n-                self.source_attr_name,\n+                get_unique_names(domain, self.source_attr_name),\n                 values=names\n             )\n             places = [\"class_vars\", \"attributes\", \"metas\"]\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owconcatenate.py b/Orange/widgets/data/tests/test_owconcatenate.py\nindex 50126ddb9..11aef9795 100644\n--- a/Orange/widgets/data/tests/test_owconcatenate.py\n+++ b/Orange/widgets/data/tests/test_owconcatenate.py\n@@ -148,6 +148,20 @@ class TestOWConcatenate(WidgetTest):\n         np.testing.assert_equal(output.X,\n                                 np.array([0, 1, 2, 3, 3, 4, 5]).reshape(7, 1))\n \n+    def test_duplicated_id_column(self):\n+        widget = self.widget\n+\n+        var1 = DiscreteVariable(name=\"x\", values=list(\"abcd\"))\n+        data1 = Table.from_numpy(Domain([var1]),\n+                                 np.arange(4).reshape(4, 1), np.zeros((4, 0)))\n+        widget.append_source_column = True\n+        widget.source_column_role = 0\n+        widget.source_attr_name = \"x\"\n+        self.send_signal(widget.Inputs.primary_data, data1)\n+        out = self.get_output(widget.Outputs.data)\n+        self.assertEqual(out.domain.attributes[0].name, \"x\")\n+        self.assertEqual(out.domain.class_var.name, \"x (1)\")\n+\n     def test_domain_intersect(self):\n         widget = self.widget\n         widget.merge_type = OWConcatenate.MergeIntersection\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5159.0, "instance_id": "biolab__orange3-5159", "issue_numbers": 0, "base_commit": "2d216ee508593456e83cc1ed4c06258e72b0aa14", "patch": "diff --git a/Orange/base.py b/Orange/base.py\nindex 162b29a3b..f618a876f 100644\n--- a/Orange/base.py\n+++ b/Orange/base.py\n@@ -136,7 +136,11 @@ class Learner(ReprableWithPreprocessors):\n         progress_callback(0.1, \"Fitting...\")\n         model = self._fit_model(data)\n         model.used_vals = [np.unique(y).astype(int) for y in data.Y[:, None].T]\n-        model.domain = data.domain\n+        if not hasattr(model, \"domain\") or model.domain is None:\n+            # some models set domain themself and it should be respected\n+            # e.g. calibration learners set the base_learner's domain which\n+            # would be wrongly overwritten if we set it here for any model\n+            model.domain = data.domain\n         model.supports_multiclass = self.supports_multiclass\n         model.name = self.name\n         model.original_domain = origdomain\n.", "test_patch": "diff --git a/Orange/classification/tests/test_calibration.py b/Orange/classification/tests/test_calibration.py\nindex 733ca9383..1d5e8e6da 100644\n--- a/Orange/classification/tests/test_calibration.py\n+++ b/Orange/classification/tests/test_calibration.py\n@@ -4,6 +4,7 @@ from unittest.mock import Mock, patch\n import numpy as np\n \n from Orange.base import Model\n+from Orange.classification import LogisticRegressionLearner\n from Orange.classification.calibration import \\\n     ThresholdLearner, ThresholdClassifier, \\\n     CalibratedLearner, CalibratedClassifier\n@@ -65,6 +66,18 @@ class TestThresholdClassifier(unittest.TestCase):\n         base_model.domain.class_var.is_discrete = False\n         self.assertRaises(ValueError, ThresholdClassifier, base_model, 0.5)\n \n+    def test_np_data(self):\n+        \"\"\"\n+        Test ThresholdModel with numpy data.\n+        When passing numpy data to model they should be already\n+        transformed to models domain since model do not know how to do it.\n+        \"\"\"\n+        data = Table('heart_disease')\n+        base_learner = LogisticRegressionLearner()\n+        model = ThresholdLearner(base_learner)(data)\n+        res = model(model.data_to_model_domain(data).X)\n+        self.assertTupleEqual((len(data),), res.shape)\n+\n \n class TestThresholdLearner(unittest.TestCase):\n     @patch(\"Orange.evaluation.performance_curves.Curves.from_results\")\n@@ -169,6 +182,18 @@ class TestCalibratedClassifier(unittest.TestCase):\n         calprobs = self.model.calibrated_probs(self.probs)\n         np.testing.assert_almost_equal(calprobs, expprobs)\n \n+    def test_np_data(self):\n+        \"\"\"\n+        Test CalibratedClassifier with numpy data.\n+        When passing numpy data to model they should be already\n+        transformed to models domain since model do not know how to do it.\n+        \"\"\"\n+        data = Table('heart_disease')\n+        base_learner = LogisticRegressionLearner()\n+        model = CalibratedLearner(base_learner)(data)\n+        res = model(model.data_to_model_domain(data).X)\n+        self.assertTupleEqual((len(data),), res.shape)\n+\n \n class TestCalibratedLearner(unittest.TestCase):\n     @patch(\"Orange.classification.calibration._SigmoidCalibration.fit\")\n@@ -207,3 +232,7 @@ class TestCalibratedLearner(unittest.TestCase):\n         for call, cls_probs in zip(sigmoid_fit.call_args_list,\n                                    res.probabilities[0].T):\n             np.testing.assert_equal(call[0][0], cls_probs)\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4414.0, "instance_id": "biolab__orange3-4414", "issue_numbers": 0, "base_commit": "0a6539921793c2a83e18c70e888b5fd6635357ba", "patch": "diff --git a/Orange/widgets/data/owpreprocess.py b/Orange/widgets/data/owpreprocess.py\nindex 238be791e..ad7c642ac 100644\n--- a/Orange/widgets/data/owpreprocess.py\n+++ b/Orange/widgets/data/owpreprocess.py\n@@ -29,6 +29,7 @@ from Orange.widgets.settings import Setting\n from Orange.widgets.utils.overlay import OverlayWidget\n from Orange.widgets.utils.sql import check_sql_input\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n from Orange.preprocess import Normalize\n from Orange.widgets.data.utils.preprocess import (\n@@ -1265,7 +1266,7 @@ class OWPreprocess(widget.OWWidget):\n         \"\"\"Set the input dataset.\"\"\"\n         self.data = data\n         if data is not None:\n-            self.info.set_input_summary(len(data))\n+            self.info.set_input_summary(len(data), format_summary_details(data))\n         else:\n             self.info.set_input_summary(self.info.NoInput)\n \n@@ -1311,7 +1312,7 @@ class OWPreprocess(widget.OWWidget):\n             except (ValueError, ZeroDivisionError) as e:\n                 self.error(str(e))\n                 return\n-            self.info.set_output_summary(len(data))\n+            self.info.set_output_summary(len(data), format_summary_details(data))\n         else:\n             data = None\n             self.info.set_output_summary(self.info.NoOutput)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpreprocess.py b/Orange/widgets/data/tests/test_owpreprocess.py\nindex 873403cf4..030f036d4 100644\n--- a/Orange/widgets/data/tests/test_owpreprocess.py\n+++ b/Orange/widgets/data/tests/test_owpreprocess.py\n@@ -12,8 +12,8 @@ from Orange.preprocess import discretize, impute, fss, score\n from Orange.widgets.data import owpreprocess\n from Orange.widgets.data.owpreprocess import OWPreprocess, \\\n     UnivariateFeatureSelect, Scale as ScaleEditor\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.tests.base import WidgetTest, datasets\n-from orangewidget.widget import StateInfo\n \n \n class TestOWPreprocess(WidgetTest):\n@@ -147,9 +147,10 @@ class TestOWPreprocess(WidgetTest):\n         output_sum = self.widget.info.set_output_summary = Mock()\n \n         self.send_signal(self.widget.Inputs.data, data)\n-        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n         output = self.get_output(self.widget.Outputs.preprocessed_data)\n-        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n \n         input_sum.reset_mock()\n         output_sum.reset_mock()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4966.0, "instance_id": "biolab__orange3-4966", "issue_numbers": 0, "base_commit": "56cc38c333a80f95c30c308a4b65cf77ccf076b1", "patch": "diff --git a/Orange/widgets/utils/save/owsavebase.py b/Orange/widgets/utils/save/owsavebase.py\nindex 4b43f3637..ed527207b 100644\n--- a/Orange/widgets/utils/save/owsavebase.py\n+++ b/Orange/widgets/utils/save/owsavebase.py\n@@ -122,23 +122,21 @@ class OWSaveBase(widget.OWWidget, openclass=True):\n         \"\"\"\n         Compute absolute path from `stored_path` from settings.\n \n-        Auto save is disabled unless stored_path is relative and exists.\n+        Absolute stored path is used only if it exists.\n+        Auto save is disabled unless stored_path is relative.\n         \"\"\"\n         workflow_dir = self.workflowEnv().get(\"basedir\")\n         if os.path.isabs(self.stored_path):\n-            path = self.stored_path\n-            self.auto_save = False\n+            if os.path.exists(self.stored_path):\n+                self.auto_save = False\n+                return self.stored_path\n         elif workflow_dir:\n-            path = os.path.join(workflow_dir, self.stored_path)\n-        else:\n-            path = None\n+            return os.path.normpath(\n+                os.path.join(workflow_dir, self.stored_path))\n \n-        if path and os.path.exists(path):\n-            return path\n-        else:\n-            self.stored_path = workflow_dir or _userhome\n-            self.auto_save = False\n-            return self.stored_path\n+        self.stored_path = workflow_dir or _userhome\n+        self.auto_save = False\n+        return self.stored_path\n \n     @property\n     def filename(self):\n.", "test_patch": "diff --git a/Orange/widgets/utils/save/tests/test_owsavebase.py b/Orange/widgets/utils/save/tests/test_owsavebase.py\nindex 3b352a9e2..cadb637a6 100644\n--- a/Orange/widgets/utils/save/tests/test_owsavebase.py\n+++ b/Orange/widgets/utils/save/tests/test_owsavebase.py\n@@ -103,7 +103,8 @@ class TestOWSaveBaseWithWriters(WidgetTest):\n             b = b.replace(\"\\\\\", \"/\")\n         self.assertEqual(a.rstrip(\"/\"), b.rstrip(\"/\"))\n \n-    @patch(\"os.path.exists\", lambda name: name == \"/home/u/orange/a/b\")\n+    @patch(\"os.path.exists\",\n+           lambda name: name in [\"/home/u/orange/a/b\", \"/foo/bar\"])\n     def test_open_moved_workflow(self):\n         \"\"\"Stored relative paths are properly changed on load\"\"\"\n         home = _userhome\n@@ -128,6 +129,15 @@ class TestOWSaveBaseWithWriters(WidgetTest):\n             self.assertPathEqual(w.filename, home_c_foo)\n             self.assertFalse(w.auto_save)\n \n+            w = self.create_widget(\n+                self.OWSaveMockWriter,\n+                stored_settings=dict(stored_path=\"/foo/bar\",\n+                                     stored_name=\"c.foo\",\n+                                     auto_save=True))\n+            self.assertPathEqual(w.last_dir, \"/foo/bar\")\n+            self.assertPathEqual(w.filename, \"/foo/bar/c.foo\")\n+            self.assertFalse(w.auto_save)\n+\n             w = self.create_widget(\n                 self.OWSaveMockWriter,\n                 stored_settings=dict(stored_path=\".\",\n@@ -162,9 +172,9 @@ class TestOWSaveBaseWithWriters(WidgetTest):\n                 stored_settings=dict(stored_path=\"a/d\",\n                                      stored_name=\"c.foo\",\n                                      auto_save=True))\n-            self.assertPathEqual(w.last_dir, \"/home/u/orange/\")\n-            self.assertPathEqual(w.filename, \"/home/u/orange/c.foo\")\n-            self.assertFalse(w.auto_save)\n+            self.assertPathEqual(w.last_dir, \"/home/u/orange/a/d\")\n+            self.assertPathEqual(w.filename, \"/home/u/orange/a/d/c.foo\")\n+            self.assertTrue(w.auto_save)\n \n             w = self.create_widget(\n                 self.OWSaveMockWriter,\n@@ -182,7 +192,7 @@ class TestOWSaveBaseWithWriters(WidgetTest):\n                                      auto_save=True))\n             self.assertPathEqual(w.last_dir, \"/home/u/orange/\")\n             self.assertPathEqual(w.filename, \"/home/u/orange/c.foo\")\n-            self.assertFalse(w.auto_save)\n+            self.assertTrue(w.auto_save)\n \n             w = self.create_widget(\n                 self.OWSaveMockWriter,\n@@ -191,7 +201,7 @@ class TestOWSaveBaseWithWriters(WidgetTest):\n                                      auto_save=True))\n             self.assertPathEqual(w.last_dir, \"/home/u/orange/\")\n             self.assertPathEqual(w.filename, \"/home/u/orange/c.foo\")\n-            self.assertFalse(w.auto_save)\n+            self.assertTrue(w.auto_save)\n \n     def test_move_workflow(self):\n         \"\"\"Widget correctly stores relative paths\"\"\"\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6204.0, "instance_id": "biolab__orange3-6204", "issue_numbers": 0, "base_commit": "4c9885f467d0e2b6cc8acead0c6808012eaff247", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex 36a910029..b2042f362 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -342,20 +342,14 @@ def stats(X, weights=None, compute_variance=False):\n     is_numeric = np.issubdtype(X.dtype, np.number)\n     is_sparse = sp.issparse(X)\n     weighted = weights is not None and X.dtype != object\n-\n-    def weighted_mean():\n-        if is_sparse:\n-            w_X = X.multiply(sp.csr_matrix(np.c_[weights] / sum(weights)))\n-            return np.asarray(w_X.sum(axis=0)).ravel()\n-        else:\n-            return bn.nansum(X * np.c_[weights] / sum(weights), axis=0)\n+    weights = weights if weighted else None\n \n     if X.size and is_numeric and not is_sparse:\n         nans = np.isnan(X).sum(axis=0)\n         return np.column_stack((\n             np.nanmin(X, axis=0),\n             np.nanmax(X, axis=0),\n-            nanmean(X, axis=0) if not weighted else weighted_mean(),\n+            nanmean(X, axis=0, weights=weights),\n             nanvar(X, axis=0) if compute_variance else \\\n                 np.zeros(X.shape[1] if X.ndim == 2 else 1),\n             nans,\n@@ -369,7 +363,7 @@ def stats(X, weights=None, compute_variance=False):\n         return np.column_stack((\n             nanmin(X, axis=0),\n             nanmax(X, axis=0),\n-            nanmean(X, axis=0) if not weighted else weighted_mean(),\n+            nanmean(X, axis=0, weights=weights),\n             np.zeros(X.shape[1]),      # variance not supported\n             X.shape[0] - non_zero,\n             non_zero))\n@@ -453,15 +447,31 @@ def nansum(x, axis=None):\n     return _apply_func(x, np.nansum, nansum_sparse, axis=axis)\n \n \n-def nanmean(x, axis=None):\n+def nanmean(x, axis=None, weights=None):\n     \"\"\" Equivalent of np.nanmean that supports sparse or dense matrices. \"\"\"\n+    if axis is None and weights is not None:\n+        raise NotImplementedError(\"weights are only supported if axis is defined\")\n+\n     if not sp.issparse(x):\n-        means = bn.nanmean(x, axis=axis)\n+        if weights is None:\n+            means = bn.nanmean(x, axis=axis)\n+        else:\n+            if axis == 0:\n+                weights = weights.reshape(-1, 1)\n+            elif axis == 1:\n+                weights = weights.reshape(1, -1)\n+            else:\n+                raise NotImplementedError\n+            nanw = ~np.isnan(x) * weights  # do not divide by non-used weights\n+            means = bn.nansum(x * weights, axis=axis) / np.sum(nanw, axis=axis)\n     elif axis is None:\n         means, _ = mean_variance_axis(x, axis=0)\n         means = np.nanmean(means)\n     else:\n-        means, _ = mean_variance_axis(x, axis=axis)\n+        # mean_variance_axis is picky regarding the input type\n+        if weights is not None:\n+            weights = weights.astype(float)\n+        means, _ = mean_variance_axis(x, axis=axis, weights=weights)\n \n     return means\n \n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex e2db88b6f..f670e4dde 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -353,6 +353,16 @@ class TestNanmean(unittest.TestCase):\n         self.random_state = check_random_state(42)\n         self.x = self.random_state.uniform(size=(10, 5))\n         np.fill_diagonal(self.x, np.nan)\n+        self.y = np.array([[0, 1, 5],\n+                           [3, 4, np.nan],\n+                           [2, np.nan, np.nan],\n+                           [np.nan, np.nan, np.nan]])\n+        self.r0 = [5/3, 5/2, 5/1]\n+        self.r1 = [6/3, 7/2, 2/1, np.nan]\n+        self.w0 = np.array([4, 3, 2, 1])\n+        self.w1 = np.array([1, 2, 3])\n+        self.r0w = [13/9, 16/7, 20/4]\n+        self.r1w = [17/6, 11/3, 2/1, np.nan]\n \n     @dense_sparse\n     def test_axis_none(self, array):\n@@ -372,6 +382,41 @@ class TestNanmean(unittest.TestCase):\n             np.nanmean(self.x, axis=1), nanmean(array(self.x), axis=1)\n         )\n \n+    @dense_sparse\n+    def test_weights_axis_none(self, array):\n+        with self.assertRaises(NotImplementedError):\n+            nanmean(array(self.x), weights=1)\n+\n+    @dense_sparse\n+    def test_weights_axis_0(self, array):\n+        np.testing.assert_almost_equal(\n+            self.r0, nanmean(array(self.y), axis=0)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r1, nanmean(array(self.y.T), axis=0)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r0w, nanmean(array(self.y), axis=0, weights=self.w0)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r1w, nanmean(array(self.y.T), axis=0, weights=self.w1)\n+        )\n+\n+    @dense_sparse\n+    def test_weights_axis_1(self, array):\n+        np.testing.assert_almost_equal(\n+            self.r1, nanmean(array(self.y), axis=1)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r0, nanmean(array(self.y.T), axis=1)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r1w, nanmean(array(self.y), axis=1, weights=self.w1)\n+        )\n+        np.testing.assert_almost_equal(\n+            self.r0w, nanmean(array(self.y.T), axis=1, weights=self.w0)\n+        )\n+\n \n class TestDigitize(unittest.TestCase):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4401.0, "instance_id": "biolab__orange3-4401", "issue_numbers": 0, "base_commit": "c788de230377b48a5fe19a97c4e4040bc5d07dbb", "patch": "diff --git a/Orange/widgets/data/owfeatureconstructor.py b/Orange/widgets/data/owfeatureconstructor.py\nindex 5bd5dec52..a9e674a8f 100644\n--- a/Orange/widgets/data/owfeatureconstructor.py\n+++ b/Orange/widgets/data/owfeatureconstructor.py\n@@ -1069,9 +1069,12 @@ class FeatureFunc:\n         if isinstance(instance, Orange.data.Table):\n             return [self(inst) for inst in instance]\n         else:\n-            args = [str(instance[var])\n-                    if instance.domain[var].is_string else instance[var]\n-                    for _, var in self.args]\n+            try:\n+                args = [str(instance[var])\n+                        if instance.domain[var].is_string else instance[var]\n+                        for _, var in self.args]\n+            except KeyError:\n+                return np.nan\n             y = self.func(*args)\n             if self.cast:\n                 y = self.cast(y)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeatureconstructor.py b/Orange/widgets/data/tests/test_owfeatureconstructor.py\nindex 1280a8eb1..a2e7c7506 100644\n--- a/Orange/widgets/data/tests/test_owfeatureconstructor.py\n+++ b/Orange/widgets/data/tests/test_owfeatureconstructor.py\n@@ -274,6 +274,17 @@ class FeatureFuncTest(unittest.TestCase):\n         self.assertEqual(r, [x[0] for x in zoo.metas[:, 0]])\n         self.assertEqual(f(zoo[0]), str(zoo[0, \"name\"])[0])\n \n+    def test_missing_variable(self):\n+        zoo = Table(\"zoo\")\n+        assert zoo.domain.class_var.name == \"type\"\n+        f = FeatureFunc(\"type[0]\",\n+                        [(\"type\", zoo.domain[\"type\"])])\n+        no_class = Domain(zoo.domain.attributes, None, zoo.domain.metas)\n+        data2 = zoo.transform(no_class)\n+        r = f(data2)\n+        self.assertTrue(np.all(np.isnan(r)))\n+        self.assertTrue(np.isnan(f(data2[0])))\n+\n \n class OWFeatureConstructorTests(WidgetTest):\n     def setUp(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4494.0, "instance_id": "biolab__orange3-4494", "issue_numbers": 0, "base_commit": "4462394d84f5c53e8982029ff6f53d3366483c8b", "patch": "diff --git a/Orange/widgets/data/owcontinuize.py b/Orange/widgets/data/owcontinuize.py\nindex 5573d81eb..4fcd4ab67 100644\n--- a/Orange/widgets/data/owcontinuize.py\n+++ b/Orange/widgets/data/owcontinuize.py\n@@ -13,6 +13,7 @@ from Orange.widgets import gui, widget\n from Orange.widgets.settings import Setting\n from Orange.widgets.utils.sql import check_sql_input\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output\n \n \n@@ -116,7 +117,8 @@ class OWContinuize(widget.OWWidget):\n             self.info.set_output_summary(self.info.NoOutput)\n             self.Outputs.data.send(None)\n         else:\n-            self.info.set_input_summary(len(data))\n+            self.info.set_input_summary(len(data),\n+                                        format_summary_details(data))\n             self.unconditional_commit()\n \n     def enable_normalization(self):\n@@ -151,7 +153,8 @@ class OWContinuize(widget.OWWidget):\n             domain = continuizer(self.data)\n             data = self.data.transform(domain)\n             self.Outputs.data.send(data)\n-            self.info.set_output_summary(len(data))\n+            self.info.set_output_summary(len(data),\n+                                         format_summary_details(data))\n         else:\n             self.Outputs.data.send(self.data)  # None or empty data\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcontinuize.py b/Orange/widgets/data/tests/test_owcontinuize.py\nindex dfbe71abd..8bb950e26 100644\n--- a/Orange/widgets/data/tests/test_owcontinuize.py\n+++ b/Orange/widgets/data/tests/test_owcontinuize.py\n@@ -10,7 +10,7 @@ from Orange.preprocess import transformation\n from Orange.widgets.data import owcontinuize\n from Orange.widgets.data.owcontinuize import OWContinuize\n from Orange.widgets.tests.base import WidgetTest\n-from orangewidget.widget import StateInfo\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWContinuize(WidgetTest):\n@@ -48,9 +48,11 @@ class TestOWContinuize(WidgetTest):\n         output_sum = self.widget.info.set_output_summary = Mock()\n \n         self.send_signal(self.widget.Inputs.data, data)\n-        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        input_sum.assert_called_with(len(data),\n+                                     format_summary_details(data))\n         output = self.get_output(self.widget.Outputs.data)\n-        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n \n         input_sum.reset_mock()\n         output_sum.reset_mock()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4257.0, "instance_id": "biolab__orange3-4257", "issue_numbers": 0, "base_commit": "04b7c72740ee5ced370aa8104152c38e3245e2b1", "patch": "diff --git a/Orange/widgets/visualize/owboxplot.py b/Orange/widgets/visualize/owboxplot.py\nindex 958cc8894..5811d0244 100644\n--- a/Orange/widgets/visualize/owboxplot.py\n+++ b/Orange/widgets/visualize/owboxplot.py\n@@ -299,14 +299,14 @@ class OWBoxPlot(widget.OWWidget):\n         self.attrs[:] = [\n             var for var in chain(\n                 domain.class_vars, domain.metas, domain.attributes)\n-            if var.is_primitive()]\n+            if var.is_primitive() and not var.attributes.get(\"hidden\", False)]\n \n     def reset_groups(self):\n         domain = self.dataset.domain\n         self.group_vars[:] = [None] + [\n             var for var in chain(\n                 domain.class_vars, domain.metas, domain.attributes)\n-            if var.is_discrete]\n+            if var.is_discrete and not var.attributes.get(\"hidden\", False)]\n \n     # noinspection PyTypeChecker\n     @Inputs.data\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owboxplot.py b/Orange/widgets/visualize/tests/test_owboxplot.py\nindex 078294be8..18bb8986c 100644\n--- a/Orange/widgets/visualize/tests/test_owboxplot.py\n+++ b/Orange/widgets/visualize/tests/test_owboxplot.py\n@@ -47,6 +47,15 @@ class TestOWBoxPlot(WidgetTest, WidgetOutputsTestMixin):\n         self.assertTrue(self.widget.display_box.isHidden())\n         self.assertFalse(self.widget.stretching_box.isHidden())\n \n+    def test_dont_show_hidden_attrs(self):\n+        \"\"\"Check widget's data\"\"\"\n+        iris = Table(\"iris\")\n+        iris.domain[\"iris\"].attributes[\"hidden\"] = True\n+        iris.domain[\"petal length\"].attributes[\"hidden\"] = True\n+        self.send_signal(self.widget.Inputs.data, iris)\n+        self.assertEqual(len(self.widget.attrs), 3)\n+        self.assertEqual(len(self.widget.group_vars), 1)\n+\n     def test_primitive_metas(self):\n         new_domain = Domain(attributes=[], class_vars=[], metas=(\n             self.data.domain.attributes + self.data.domain.class_vars))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5658.0, "instance_id": "biolab__orange3-5658", "issue_numbers": 0, "base_commit": "e069969ad274df7e6b05bc91e76fd17cef58e503", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 1b95e5b0f..239bc7ce2 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1553,6 +1553,7 @@ class Table(Sequence, Storage):\n         self._Y = self._Y[ind]\n         self.metas = self.metas[ind]\n         self.W = self.W[ind]\n+        self.ids = self.ids[ind]\n \n     def get_column_view(self, index):\n         \"\"\"\n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex b37809304..865b9a9f8 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -417,11 +417,13 @@ class TableTestCase(unittest.TestCase):\n         d = data.Table(\"zoo\")\n         crc = d.checksum()\n         names = set(str(x[\"name\"]) for x in d)\n+        ids = d.ids\n \n         with d.unlocked_reference():\n             d.shuffle()\n         self.assertNotEqual(crc, d.checksum())\n         self.assertSetEqual(names, set(str(x[\"name\"]) for x in d))\n+        self.assertTrue(np.any(ids - d.ids != 0))\n         crc2 = d.checksum()\n \n         x = d[2:10]\n@@ -436,6 +438,7 @@ class TableTestCase(unittest.TestCase):\n             x.shuffle()\n         self.assertNotEqual(crcx, x.checksum())\n         self.assertEqual(crc2, d.checksum())\n+        self.assertLess(set(x.ids), set(ids))\n \n     @staticmethod\n     def not_less_ex(ex1, ex2):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4454.0, "instance_id": "biolab__orange3-4454", "issue_numbers": 0, "base_commit": "c4888199b4779ae0e615162704db6b29735506b6", "patch": "diff --git a/Orange/widgets/data/owselectcolumns.py b/Orange/widgets/data/owselectcolumns.py\nindex 3835127b7..c23161aaa 100644\n--- a/Orange/widgets/data/owselectcolumns.py\n+++ b/Orange/widgets/data/owselectcolumns.py\n@@ -14,6 +14,7 @@ from Orange.widgets.data.contexthandlers import \\\n from Orange.widgets.settings import ContextSetting, Setting\n from Orange.widgets.utils.listfilter import VariablesListItemView, slices, variables_filter\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input, Output, AttributeList, Msg\n from Orange.data.table import Table\n from Orange.widgets.utils import vartype\n@@ -266,6 +267,9 @@ class OWSelectAttributes(widget.OWWidget):\n         self.output_data = None\n         self.original_completer_items = []\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n         self.resize(600, 600)\n \n     @property\n@@ -343,11 +347,13 @@ class OWSelectAttributes(widget.OWWidget):\n             self.class_attrs[:] = classes\n             self.meta_attrs[:] = metas\n             self.available_attrs[:] = available\n+            self.info.set_input_summary(len(data), format_summary_details(data))\n         else:\n             self.used_attrs[:] = []\n             self.class_attrs[:] = []\n             self.meta_attrs[:] = []\n             self.available_attrs[:] = []\n+            self.info.set_input_summary(self.info.NoInput)\n \n     def update_domain_role_hints(self):\n         \"\"\" Update the domain hints to be stored in the widgets settings.\n@@ -522,10 +528,13 @@ class OWSelectAttributes(widget.OWWidget):\n             self.output_data = newdata\n             self.Outputs.data.send(newdata)\n             self.Outputs.features.send(AttributeList(attributes))\n+            self.info.set_output_summary(len(newdata),\n+                                         format_summary_details(newdata))\n         else:\n             self.output_data = None\n             self.Outputs.data.send(None)\n             self.Outputs.features.send(None)\n+            self.info.set_output_summary(self.info.NoOutput)\n \n     def reset(self):\n         self.enable_used_attrs()\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectcolumns.py b/Orange/widgets/data/tests/test_owselectcolumns.py\nindex d9d6aed27..8dff52c2b 100644\n--- a/Orange/widgets/data/tests/test_owselectcolumns.py\n+++ b/Orange/widgets/data/tests/test_owselectcolumns.py\n@@ -1,3 +1,4 @@\n+# pylint: disable=unsubscriptable-object\n from unittest import TestCase\n from unittest.mock import Mock\n \n@@ -9,6 +10,7 @@ from Orange.widgets.data.contexthandlers import \\\n     SelectAttributesDomainContextHandler\n from Orange.widgets.settings import ContextSetting\n from Orange.widgets.utils import vartype\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.tests.base import WidgetTest\n from Orange.widgets.data.owselectcolumns \\\n     import OWSelectAttributes, VariablesListItemModel\n@@ -386,3 +388,23 @@ class TestOWSelectAttributes(WidgetTest):\n             d1.domain.attributes,\n             data.domain.attributes\n         )\n+\n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        data = Table(\"iris\")\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4530.0, "instance_id": "biolab__orange3-4530", "issue_numbers": 0, "base_commit": "b838a6d8ab37622e96e0d6e506b3a3f7fb5cb38a", "patch": "diff --git a/Orange/widgets/utils/graphicslayoutitem.py b/Orange/widgets/utils/graphicslayoutitem.py\nindex 0639925ea..2830acaf3 100644\n--- a/Orange/widgets/utils/graphicslayoutitem.py\n+++ b/Orange/widgets/utils/graphicslayoutitem.py\n@@ -142,6 +142,8 @@ def scaled(size: QSizeF, constraint: QSizeF, mode=Qt.KeepAspectRatio) -> QSizeF:\n     ie. the result is not constrained in that dimension.\n     \"\"\"\n     size, constraint = QSizeF(size), QSizeF(constraint)\n+    if size.isEmpty():\n+        return size\n     if constraint.width() < 0 and constraint.height() < 0:\n         return size\n     if mode == Qt.IgnoreAspectRatio:\n.", "test_patch": "diff --git a/Orange/widgets/utils/tests/test_graphicstextlist.py b/Orange/widgets/utils/tests/test_graphicstextlist.py\nindex e57bb5aa7..903e410d1 100644\n--- a/Orange/widgets/utils/tests/test_graphicstextlist.py\n+++ b/Orange/widgets/utils/tests/test_graphicstextlist.py\n@@ -85,3 +85,7 @@ class TestUtils(unittest.TestCase):\n                 s, expected,\n                 f\"scaled({size}, {const}, Qt.KeepAspectRatioByExpanding)\"\n             )\n+\n+        self.assertEqual(\n+            scaled(QSizeF(0, 0), QSizeF(100, 100)), QSizeF(0, 0)\n+        )\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4513.0, "instance_id": "biolab__orange3-4513", "issue_numbers": 0, "base_commit": "6071575075ceeb2b0d4aefdee420a1b7dd28bcdc", "patch": "diff --git a/Orange/widgets/data/owdatainfo.py b/Orange/widgets/data/owdatainfo.py\nindex b4cfa69a9..1599cfc53 100644\n--- a/Orange/widgets/data/owdatainfo.py\n+++ b/Orange/widgets/data/owdatainfo.py\n@@ -4,6 +4,7 @@ import textwrap\n \n from Orange.widgets import widget, gui\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.widget import Input\n from Orange.data.table import Table\n from Orange.data import StringVariable, DiscreteVariable, ContinuousVariable\n@@ -42,6 +43,8 @@ class OWDataInfo(widget.OWWidget):\n                           addSpace=False and box != \"Meta Attributes\")\n             gui.label(bo, self, \"%%(%s)s\" % name)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+\n         # ensure the widget has some decent minimum width.\n         self.targets = \"Categorical outcome with 123 values\"\n         self.layout().activate()\n@@ -56,7 +59,9 @@ class OWDataInfo(widget.OWWidget):\n     def data(self, data):\n         if data is None:\n             self._clear_fields()\n+            self.info.set_input_summary(self.info.NoInput)\n         else:\n+            self.info.set_input_summary(len(data), format_summary_details(data))\n             self._set_fields(data)\n             self._set_report(data)\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatainfo.py b/Orange/widgets/data/tests/test_owdatainfo.py\nindex a480cc598..b69b923c6 100644\n--- a/Orange/widgets/data/tests/test_owdatainfo.py\n+++ b/Orange/widgets/data/tests/test_owdatainfo.py\n@@ -1,8 +1,11 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n+# pylint: disable=missing-docstring,unsubscriptable-object\n+from unittest.mock import Mock\n+\n from Orange.data import Table\n from Orange.widgets.data.owdatainfo import OWDataInfo\n from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWDataInfo(WidgetTest):\n@@ -25,3 +28,14 @@ class TestOWDataInfo(WidgetTest):\n         data = Table(\"iris\")\n         data.attributes = {\"att 1\": 1, \"att 2\": True, \"att 3\": 3}\n         self.send_signal(self.widget.Inputs.data, data)\n+\n+    def test_summary(self):\n+        \"\"\"Check if the status bar is updated when data is received\"\"\"\n+        data = Table(\"iris\")\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        input_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5617.0, "instance_id": "biolab__orange3-5617", "issue_numbers": 0, "base_commit": "afe81c82c9bde14cd32a2dce5b8036a8f3e124b5", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 630019239..fc9508445 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -1032,6 +1032,7 @@ class TimeVariable(ContinuousVariable):\n         if datestr in MISSING_VALUES:\n             return Unknown\n         datestr = datestr.strip().rstrip('Z')\n+        datestr = self._tzre_sub(datestr)\n \n         if not self._matches_iso_format(datestr):\n             try:\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex 0bf5ff157..ff487ca24 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -630,6 +630,10 @@ class TestTimeVariable(VariableTest):\n         ts2 = var.parse(datestr)\n         self.assertEqual(var.repr_val(ts2), datestr)\n         self.assertEqual(var.repr_val(ts1), '2015-10-18 20:48:20')\n+        # TZ is reset to UTC.\n+        datestr, offset = '2015-10-18T22:48:20', '+02:00'\n+        ts3 = var.parse(datestr + offset)\n+        self.assertEqual(var.repr_val(ts3), '2015-10-18 20:48:20')\n \n     def test_parse_timestamp(self):\n         var = TimeVariable(\"time\")\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6028.0, "instance_id": "biolab__orange3-6028", "issue_numbers": 0, "base_commit": "739c36b43e42865e19d443ee0eaebf4ecacf2a1e", "patch": "diff --git a/Orange/misc/utils/embedder_utils.py b/Orange/misc/utils/embedder_utils.py\nindex e01c6ab91..f19b8ee04 100644\n--- a/Orange/misc/utils/embedder_utils.py\n+++ b/Orange/misc/utils/embedder_utils.py\n@@ -78,7 +78,7 @@ class EmbedderCache:\n \n def get_proxies() -> Optional[Dict[str, str]]:\n     \"\"\"\n-    Return dict with proxy addresses if they exists.\n+    Return dict with proxy addresses if they exist.\n \n     Returns\n     -------\n@@ -86,14 +86,18 @@ def get_proxies() -> Optional[Dict[str, str]]:\n         Dictionary with format {proxy type: proxy address} or None if\n         they not set.\n     \"\"\"\n-    def add_protocol(url: Optional[str], prot: str) -> Optional[str]:\n-        if url and not url.startswith(prot):\n-            return f\"{prot}://{url}\"\n-        return url\n-    http_proxy = add_protocol(environ.get(\"http_proxy\"), \"http\")\n-    https_proxy = add_protocol(environ.get(\"https_proxy\"), \"https\")\n-    if http_proxy and https_proxy:  # both proxy addresses defined\n-        return {\"http://\": https_proxy, \"https://\": https_proxy}\n-    elif any([https_proxy, http_proxy]):  # one of the proxies defined\n-        return {\"all://\": http_proxy or https_proxy}\n-    return None  # proxies not defined\n+    def add_scheme(url: Optional[str]) -> Optional[str]:\n+        if url is not None and \"://\" not in url:\n+            # if no scheme default to http - as other libraries do (e.g. requests)\n+            return f\"http://{url}\"\n+        else:\n+            return url\n+\n+    http_proxy = add_scheme(environ.get(\"http_proxy\"))\n+    https_proxy = add_scheme(environ.get(\"https_proxy\"))\n+    proxy_dict = {}\n+    if http_proxy:\n+        proxy_dict[\"http://\"] = http_proxy\n+    if https_proxy:\n+        proxy_dict[\"https://\"] = https_proxy\n+    return proxy_dict if proxy_dict else None\n \n.", "test_patch": "diff --git a/Orange/misc/tests/test_embedder_utils.py b/Orange/misc/tests/test_embedder_utils.py\nnew file mode 100644\nindex 000000000..5890e4916\n--- /dev/null\n+++ b/Orange/misc/tests/test_embedder_utils.py\n@@ -0,0 +1,67 @@\n+import os\n+import unittest\n+\n+from Orange.misc.utils.embedder_utils import get_proxies\n+\n+\n+class TestProxies(unittest.TestCase):\n+    def setUp(self) -> None:\n+        self.previous_http = os.environ.get(\"http_proxy\")\n+        self.previous_https = os.environ.get(\"https_proxy\")\n+        os.environ.pop(\"http_proxy\", None)\n+        os.environ.pop(\"https_proxy\", None)\n+\n+    def tearDown(self) -> None:\n+        os.environ.pop(\"http_proxy\", None)\n+        os.environ.pop(\"https_proxy\", None)\n+        if self.previous_http is not None:\n+            os.environ[\"http_proxy\"] = self.previous_http\n+        if self.previous_https is not None:\n+            os.environ[\"https_proxy\"] = self.previous_https\n+\n+    def test_add_scheme(self):\n+        os.environ[\"http_proxy\"] = \"test1.com\"\n+        os.environ[\"https_proxy\"] = \"test2.com\"\n+        res = get_proxies()\n+        self.assertEqual(\"http://test1.com\", res.get(\"http://\"))\n+        self.assertEqual(\"http://test2.com\", res.get(\"https://\"))\n+\n+        os.environ[\"http_proxy\"] = \"test1.com/path\"\n+        os.environ[\"https_proxy\"] = \"test2.com/path\"\n+        res = get_proxies()\n+        self.assertEqual(\"http://test1.com/path\", res.get(\"http://\"))\n+        self.assertEqual(\"http://test2.com/path\", res.get(\"https://\"))\n+\n+        os.environ[\"http_proxy\"] = \"https://test1.com:123\"\n+        os.environ[\"https_proxy\"] = \"https://test2.com:124\"\n+        res = get_proxies()\n+        self.assertEqual(\"https://test1.com:123\", res.get(\"http://\"))\n+        self.assertEqual(\"https://test2.com:124\", res.get(\"https://\"))\n+\n+    def test_both_urls(self):\n+        os.environ[\"http_proxy\"] = \"http://test1.com:123\"\n+        os.environ[\"https_proxy\"] = \"https://test2.com:124\"\n+        res = get_proxies()\n+        self.assertEqual(\"http://test1.com:123\", res.get(\"http://\"))\n+        self.assertEqual(\"https://test2.com:124\", res.get(\"https://\"))\n+        self.assertNotIn(\"all://\", res)\n+\n+    def test_http_only(self):\n+        os.environ[\"http_proxy\"] = \"http://test1.com:123\"\n+        res = get_proxies()\n+        self.assertEqual(\"http://test1.com:123\", res.get(\"http://\"))\n+        self.assertNotIn(\"https://\", res)\n+\n+    def test_https_only(self):\n+        os.environ[\"https_proxy\"] = \"https://test1.com:123\"\n+        res = get_proxies()\n+        self.assertEqual(\"https://test1.com:123\", res.get(\"https://\"))\n+        self.assertNotIn(\"http://\", res)\n+\n+    def test_none(self):\n+        \"\"\" When no variable is set return None \"\"\"\n+        self.assertIsNone(get_proxies())\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4331.0, "instance_id": "biolab__orange3-4331", "issue_numbers": 0, "base_commit": "ccee1670f90d4c2ce2f9c87829973712116dd05c", "patch": "diff --git a/Orange/widgets/data/owdiscretize.py b/Orange/widgets/data/owdiscretize.py\nindex c4b880e35..edfe15ecb 100644\n--- a/Orange/widgets/data/owdiscretize.py\n+++ b/Orange/widgets/data/owdiscretize.py\n@@ -245,6 +245,9 @@ class OWDiscretize(widget.OWWidget):\n \n         self._update_spin_positions()\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n \n     @Inputs.data\n     def set_data(self, data):\n@@ -257,7 +260,9 @@ class OWDiscretize(widget.OWWidget):\n             self._restore(self.saved_var_states)\n             # Complete the induction of cut points\n             self._update_points()\n+            self.info.set_input_summary(len(data))\n         else:\n+            self.info.set_input_summary(self.info.NoInput)\n             self._clear()\n         self.unconditional_commit()\n \n@@ -478,6 +483,9 @@ class OWDiscretize(widget.OWWidget):\n         if self.data is not None and len(self.data):\n             domain = self.discretized_domain()\n             output = self.data.transform(domain)\n+            self.info.set_output_summary(len(output))\n+        else:\n+            self.info.set_output_summary(self.info.NoOutput)\n         self.Outputs.data.send(output)\n \n     def storeSpecificSettings(self):\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdiscretize.py b/Orange/widgets/data/tests/test_owdiscretize.py\nindex 6c5d70ee3..2a148c394 100644\n--- a/Orange/widgets/data/tests/test_owdiscretize.py\n+++ b/Orange/widgets/data/tests/test_owdiscretize.py\n@@ -1,8 +1,11 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n+# pylint: disable=missing-docstring,unsubscriptable-object\n+from unittest.mock import Mock\n+\n from Orange.data import Table\n from Orange.widgets.data.owdiscretize import OWDiscretize\n from Orange.widgets.tests.base import WidgetTest\n+from orangewidget.widget import StateInfo\n \n \n class TestOWDiscretize(WidgetTest):\n@@ -17,3 +20,22 @@ class TestOWDiscretize(WidgetTest):\n         self.send_signal(self.widget.Inputs.data,\n                          Table.from_domain(data.domain))\n         widget.unconditional_commit()\n+\n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        data = Table(\"iris\")\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(int(StateInfo.format_number(len(data))))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(int(StateInfo.format_number(len(output))))\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5138.0, "instance_id": "biolab__orange3-5138", "issue_numbers": 0, "base_commit": "04ba1f36da071a5eb0eeaf7b44aaab65d6849c7a", "patch": "diff --git a/Orange/widgets/evaluate/owrocanalysis.py b/Orange/widgets/evaluate/owrocanalysis.py\nindex 49bfa0374..a30bef6bf 100644\n--- a/Orange/widgets/evaluate/owrocanalysis.py\n+++ b/Orange/widgets/evaluate/owrocanalysis.py\n@@ -825,6 +825,13 @@ def roc_curve_for_fold(res, fold, clf_idx, target):\n         drop_intermediate=drop_intermediate\n     )\n \n+    # skl sets the first threshold to the highest threshold in the data + 1\n+    # since we deal with probabilities, we (carefully) set it to 1\n+    # Unrelated comparisons, thus pylint: disable=chained-comparison\n+    if len(thresholds) > 1 and thresholds[1] <= 1:\n+        thresholds[0] = 1\n+    return fpr, tpr, thresholds\n+\n \n def roc_curve_vertical_average(curves, samples=10):\n     if not curves:\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owrocanalysis.py b/Orange/widgets/evaluate/tests/test_owrocanalysis.py\nindex e8144c616..54a2476a9 100644\n--- a/Orange/widgets/evaluate/tests/test_owrocanalysis.py\n+++ b/Orange/widgets/evaluate/tests/test_owrocanalysis.py\n@@ -214,7 +214,7 @@ class TestOWROCAnalysis(WidgetTest, EvaluateTest):\n             pos = view.mapFromScene(pos)\n             mouseMove(view.viewport(), pos)\n             (_, text), _ = show_text.call_args\n-            self.assertIn(\"(#1) 1.800\\n(#2) 1.893\", text)\n+            self.assertIn(\"(#1) 1.000\\n(#2) 1.000\", text)\n \n             # test that cache is invalidated when changing averaging mode\n             self.widget.roc_averaging = OWROCAnalysis.Threshold\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4806.0, "instance_id": "biolab__orange3-4806", "issue_numbers": 0, "base_commit": "69e95f2754c1972ca0975f75f9df8ddf62f0cfef", "patch": "diff --git a/Orange/widgets/data/owcontinuize.py b/Orange/widgets/data/owcontinuize.py\nindex fa25ff4b4..484ffde94 100644\n--- a/Orange/widgets/data/owcontinuize.py\n+++ b/Orange/widgets/data/owcontinuize.py\n@@ -206,7 +206,7 @@ def one_hot_coding(var):\n \n def continuize_domain(data,\n                       multinomial_treatment=Continuize.Indicators,\n-                      continuous_treatment=Continuize.Leave,\n+                      continuous_treatment=OWContinuize.Normalize.Leave,\n                       class_treatment=Continuize.Leave):\n     domain = data.domain\n     def needs_dist(var, mtreat, ctreat):\n@@ -214,7 +214,7 @@ def continuize_domain(data,\n         if var.is_discrete:\n             return mtreat == Continuize.FrequentAsBase\n         elif var.is_continuous:\n-            return ctreat != Continuize.Leave\n+            return ctreat != OWContinuize.Normalize.Leave\n         else:\n             raise ValueError\n \n@@ -222,7 +222,7 @@ def continuize_domain(data,\n     attr_needs_dist = [needs_dist(var, multinomial_treatment,\n                                   continuous_treatment)\n                        for var in domain.attributes]\n-    cls_needs_dist = [needs_dist(var, class_treatment, Continuize.Leave)\n+    cls_needs_dist = [needs_dist(var, class_treatment, OWContinuize.Normalize.Leave)\n                       for var in domain.class_vars]\n \n     columns = [i for i, needs in enumerate(attr_needs_dist + cls_needs_dist)\n@@ -242,7 +242,7 @@ def continuize_domain(data,\n                 for var, needs_dist in zip(domain.attributes, attr_needs_dist)]\n     newclass = [continuize_var(var,\n                                next(dist_iter) if needs_dist else None,\n-                               class_treatment, Continuize.Remove)\n+                               class_treatment, OWContinuize.Normalize.Leave)\n                 for var, needs_dist in zip(domain.class_vars, cls_needs_dist)]\n \n     newattrs = reduce(list.__iadd__, newattrs, [])\n@@ -253,13 +253,13 @@ def continuize_domain(data,\n def continuize_var(var,\n                    data_or_dist=None,\n                    multinomial_treatment=Continuize.Indicators,\n-                   continuous_treatment=Continuize.Leave):\n+                   continuous_treatment=OWContinuize.Normalize.Leave):\n     def continuize_continuous():\n-        dist = _ensure_dist(var, data_or_dist)\n+        dist = _ensure_dist(var, data_or_dist) if continuous_treatment != OWContinuize.Normalize.Leave else None\n         treatments = [lambda var, _: var,\n                       normalize_by_sd, center_to_mean, divide_by_sd,\n                       normalize_to_11, normalize_to_01]\n-        if dist.shape[1] == 0:\n+        if dist is not None and dist.shape[1] == 0:\n             return [var]\n         new_var = treatments[continuous_treatment](var, dist)\n         return [new_var]\n@@ -365,7 +365,7 @@ def normalize_by_span(var, dist, zero_based=True):\n class DomainContinuizer(Reprable):\n     def __init__(self,\n                  multinomial_treatment=Continuize.Indicators,\n-                 continuous_treatment=Continuize.Leave,\n+                 continuous_treatment=OWContinuize.Normalize.Leave,\n                  class_treatment=Continuize.Leave):\n         self.multinomial_treatment = multinomial_treatment\n         self.continuous_treatment = continuous_treatment\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcontinuize.py b/Orange/widgets/data/tests/test_owcontinuize.py\nindex 7ff7292b0..36dface19 100644\n--- a/Orange/widgets/data/tests/test_owcontinuize.py\n+++ b/Orange/widgets/data/tests/test_owcontinuize.py\n@@ -62,6 +62,11 @@ class TestOWContinuize(WidgetTest):\n         output_sum.assert_called_once()\n         self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n \n+    def test_continuous(self):\n+        table = Table(\"housing\")\n+        self.send_signal(self.widget.Inputs.data, table)\n+        self.widget.unconditional_commit()\n+\n     def test_one_column_equal_values(self):\n         \"\"\"\n         No crash on a column with equal values and with selected option\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4510.0, "instance_id": "biolab__orange3-4510", "issue_numbers": 0, "base_commit": "685480ffe6c27f557a759663ca4f4d87c44a98a6", "patch": "diff --git a/Orange/widgets/visualize/owvenndiagram.py b/Orange/widgets/visualize/owvenndiagram.py\nindex aa229a473..0076a8280 100644\n--- a/Orange/widgets/visualize/owvenndiagram.py\n+++ b/Orange/widgets/visualize/owvenndiagram.py\n@@ -379,16 +379,19 @@ class OWVennDiagram(widget.OWWidget):\n             X = np.hstack(values['attributes'])\n         if 'metas' in values:\n             metas = np.hstack(values['metas'])\n+            n = len(metas)\n         if 'class_vars' in values:\n             class_vars = np.hstack(values['class_vars'])\n+            n = len(class_vars)\n+        if X is None:\n+            X = np.empty((n, 0))\n         table = Table.from_numpy(Domain(**domain), X, class_vars, metas)\n         if ids is not None:\n             table.ids = ids\n         return table\n \n     def extract_columnwise(self, var_dict, columns=None):\n-        #for columns\n-        domain = defaultdict(list)\n+        domain = {type_ : [] for type_ in self.atr_types}\n         values = defaultdict(list)\n         renamed = []\n         for atr_type, vars_dict in var_dict.items():\n@@ -514,7 +517,7 @@ class OWVennDiagram(widget.OWWidget):\n         for table_key, dict_ in ids.items():\n             permutations[table_key] = get_perm(list(dict_), all_ids)\n \n-        domain = defaultdict(list)\n+        domain = {type_ : [] for type_ in self.atr_types}\n         values = defaultdict(list)\n         renamed = []\n         for atr_type, vars_dict in var_dict.items():\n@@ -551,8 +554,8 @@ class OWVennDiagram(widget.OWWidget):\n \n         if renamed:\n             self.Warning.renamed_vars(', '.join(renamed))\n-        idas = None if self.selected_feature else np.array(all_ids)\n-        table = self.merge_data(domain, values, idas)\n+        ids = None if self.selected_feature else np.array(all_ids)\n+        table = self.merge_data(domain, values, ids)\n         if selection:\n             mask = [idx in self.selected_items for idx in all_ids]\n             return create_annotated_table(table, mask)\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owvenndiagram.py b/Orange/widgets/visualize/tests/test_owvenndiagram.py\nindex 7f892dd00..cf1d40664 100644\n--- a/Orange/widgets/visualize/tests/test_owvenndiagram.py\n+++ b/Orange/widgets/visualize/tests/test_owvenndiagram.py\n@@ -12,10 +12,10 @@ from Orange.data import (Table, Domain, StringVariable,\n from Orange.widgets.tests.base import WidgetTest, WidgetOutputsTestMixin\n from Orange.widgets.utils.annotated_data import (ANNOTATED_DATA_FEATURE_NAME)\n from Orange.widgets.visualize.owvenndiagram import (\n-                                                    OWVennDiagram,\n-                                                    arrays_equal,\n-                                                    pad_columns,\n-                                                    get_perm)\n+                        OWVennDiagram,\n+                        arrays_equal,\n+                        pad_columns,\n+                        get_perm)\n \n \n class TestOWVennDiagram(WidgetTest, WidgetOutputsTestMixin):\n@@ -224,6 +224,15 @@ class TestOWVennDiagram(WidgetTest, WidgetOutputsTestMixin):\n         self.send_signal(self.signal_name, None, 6)\n         self.assertFalse(self.widget.Error.too_many_inputs.is_shown())\n \n+    def test_no_attributes(self):\n+        domain = Domain([], class_vars=self.data.domain.attributes)\n+        n = len(self.data)\n+        table = Table.from_numpy(domain, np.empty((n, 0)), self.data.X)\n+\n+        self.widget.rowwise = True\n+        self.send_signal(self.signal_name, table, 1)\n+        out = self.get_output(self.widget.Outputs.annotated_data)\n+        self.assertEqual(len(out), len(table))\n \n class TestVennUtilities(unittest.TestCase):\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5536.0, "instance_id": "biolab__orange3-5536", "issue_numbers": 0, "base_commit": "61e60def4abdcf690c4d0fb8d6493ee6ada26e9a", "patch": "diff --git a/Orange/statistics/contingency.py b/Orange/statistics/contingency.py\nindex 76135576a..da9a1c819 100644\n--- a/Orange/statistics/contingency.py\n+++ b/Orange/statistics/contingency.py\n@@ -179,9 +179,20 @@ class Discrete(np.ndarray):\n         return (\n             _create_discrete,\n             (Discrete, np.copy(self), self.col_variable, self.row_variable,\n-             self.col_unknowns, self.row_unknowns)\n+             self.col_unknowns, self.row_unknowns, self.unknowns)\n         )\n \n+    def __array_finalize__(self, obj):\n+        # defined in __new__, pylint: disable=attribute-defined-outside-init\n+        \"\"\"See http://docs.scipy.org/doc/numpy/user/basics.subclassing.html\"\"\"\n+        if obj is None:\n+            return\n+        self.col_variable = getattr(obj, 'col_variable', None)\n+        self.row_variable = getattr(obj, 'row_variable', None)\n+        self.col_unknowns = getattr(obj, 'col_unknowns', None)\n+        self.row_unknowns = getattr(obj, 'row_unknowns', None)\n+        self.unknowns = getattr(obj, 'unknowns', None)\n+\n \n class Continuous:\n     def __init__(self, dat, col_variable=None, row_variable=None,\n.", "test_patch": "diff --git a/Orange/tests/test_contingency.py b/Orange/tests/test_contingency.py\nindex f866de168..9b3bf2a36 100644\n--- a/Orange/tests/test_contingency.py\n+++ b/Orange/tests/test_contingency.py\n@@ -1,6 +1,6 @@\n # Test methods with long descriptive names can omit docstrings\n # pylint: disable=missing-docstring\n-\n+import copy\n import unittest\n from unittest.mock import Mock\n \n@@ -71,6 +71,13 @@ class TestDiscrete(unittest.TestCase):\n         np.testing.assert_almost_equal(cont.row_unknowns, [0, 0])\n         self.assertEqual(1, cont.unknowns)\n \n+    def test_deepcopy(self):\n+        cont = contingency.Discrete(self.zoo, 0)\n+        dc = copy.deepcopy(cont)\n+        self.assertEqual(dc, cont)\n+        self.assertEqual(dc.col_variable, cont.col_variable)\n+        self.assertEqual(dc.row_variable, cont.row_variable)\n+\n     def test_array_with_unknowns(self):\n         d = data.Table(\"zoo\")\n         d.Y[2] = float(\"nan\")\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6314.0, "instance_id": "biolab__orange3-6314", "issue_numbers": 0, "base_commit": "a25a9d2d78386b0f43d77c4b2848d956cb4f82f3", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex c37715e47..0aaf1024e 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -344,31 +344,22 @@ def stats(X, weights=None, compute_variance=False):\n \n     if X.size and is_numeric:\n         if is_sparse:\n+            nans = countnans(X, axis=0)\n             X = X.tocsc()\n+        else:\n+            nans = np.isnan(X).sum(axis=0)\n         if compute_variance:\n             means, vars = nan_mean_var(X, axis=0, weights=weights)\n         else:\n             means = nanmean(X, axis=0, weights=weights)\n             vars = np.zeros(X.shape[1] if X.ndim == 2 else 1)\n-\n-    if X.size and is_numeric and not is_sparse:\n-        nans = np.isnan(X).sum(axis=0)\n-        return np.column_stack((\n-            np.nanmin(X, axis=0),\n-            np.nanmax(X, axis=0),\n-            means,\n-            vars,\n-            nans,\n-            X.shape[0] - nans))\n-    elif is_sparse and X.size:\n-        non_zero = np.bincount(X.nonzero()[1], minlength=X.shape[1])\n         return np.column_stack((\n             nanmin(X, axis=0),\n             nanmax(X, axis=0),\n             means,\n             vars,\n-            X.shape[0] - non_zero,\n-            non_zero))\n+            nans,\n+            X.shape[0] - nans))\n     else:\n         if X.ndim == 1:\n             X = X[:, None]\n.", "test_patch": "diff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex 121c66cee..b6ed4d568 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -107,26 +107,26 @@ class TestUtil(unittest.TestCase):\n \n     def test_stats_sparse(self):\n         X = csr_matrix(np.identity(5))\n-        np.testing.assert_equal(stats(X), [[0, 1, .2, 0, 4, 1],\n-                                           [0, 1, .2, 0, 4, 1],\n-                                           [0, 1, .2, 0, 4, 1],\n-                                           [0, 1, .2, 0, 4, 1],\n-                                           [0, 1, .2, 0, 4, 1]])\n+        np.testing.assert_equal(stats(X), [[0, 1, .2, 0, 0, 5],\n+                                           [0, 1, .2, 0, 0, 5],\n+                                           [0, 1, .2, 0, 0, 5],\n+                                           [0, 1, .2, 0, 0, 5],\n+                                           [0, 1, .2, 0, 0, 5]])\n \n         # assure last two columns have just zero elements\n         X = X[:3]\n-        np.testing.assert_equal(stats(X), [[0, 1, 1/3, 0, 2, 1],\n-                                           [0, 1, 1/3, 0, 2, 1],\n-                                           [0, 1, 1/3, 0, 2, 1],\n-                                           [0, 0, 0, 0, 3, 0],\n-                                           [0, 0, 0, 0, 3, 0]])\n+        np.testing.assert_equal(stats(X), [[0, 1, 1/3, 0, 0, 3],\n+                                           [0, 1, 1/3, 0, 0, 3],\n+                                           [0, 1, 1/3, 0, 0, 3],\n+                                           [0, 0, 0, 0, 0, 3],\n+                                           [0, 0, 0, 0, 0, 3]])\n \n         r = stats(X, compute_variance=True)\n-        np.testing.assert_almost_equal(r, [[0, 1, 1/3, 2/9, 2, 1],\n-                                           [0, 1, 1/3, 2/9, 2, 1],\n-                                           [0, 1, 1/3, 2/9, 2, 1],\n-                                           [0, 0, 0, 0, 3, 0],\n-                                           [0, 0, 0, 0, 3, 0]])\n+        np.testing.assert_almost_equal(r, [[0, 1, 1/3, 2/9, 0, 3],\n+                                           [0, 1, 1/3, 2/9, 0, 3],\n+                                           [0, 1, 1/3, 2/9, 0, 3],\n+                                           [0, 0, 0, 0, 0, 3],\n+                                           [0, 0, 0, 0, 0, 3]])\n \n     def test_stats_weights(self):\n         X = np.arange(4).reshape(2, 2).astype(float)\n@@ -152,11 +152,11 @@ class TestUtil(unittest.TestCase):\n         X = np.arange(4).reshape(2, 2).astype(float)\n         X = csr_matrix(X)\n         weights = np.array([1, 3])\n-        np.testing.assert_equal(stats(X, weights), [[0, 2, 1.5, 0, 1, 1],\n+        np.testing.assert_equal(stats(X, weights), [[0, 2, 1.5, 0, 0, 2],\n                                                     [1, 3, 2.5, 0, 0, 2]])\n \n         np.testing.assert_equal(stats(X, weights, compute_variance=True),\n-                                [[0, 2, 1.5, 0.75, 1, 1],\n+                                [[0, 2, 1.5, 0.75, 0, 2],\n                                  [1, 3, 2.5, 0.75, 0, 2]])\n \n     def test_stats_non_numeric(self):\n@@ -170,6 +170,42 @@ class TestUtil(unittest.TestCase):\n                                            [np.inf, -np.inf, 0, 0, 2, 1],\n                                            [np.inf, -np.inf, 0, 0, 0, 3]])\n \n+    def test_stats_nancounts(self):\n+        arr = np.array([[1, 4, 9],\n+                        [-2, 10, 0],\n+                        [0, np.nan, np.nan],\n+                        [0, np.nan, 0]])\n+\n+        expected = [[-2, 1, -0.25, (1.25 ** 2 + 1.75 ** 2 + .25 ** 2 + .25 ** 2) / 4, 0, 4],\n+                    [4, 10, 7, 3 ** 2, 2, 2],\n+                    [0, 9, 3, (6 ** 2 + 3 ** 2 + 3 ** 2) / 3, 1, 3]]\n+        np.testing.assert_almost_equal(stats(arr, compute_variance=True), expected)\n+\n+        sparr = csc_matrix(arr)\n+        np.testing.assert_almost_equal(stats(sparr, compute_variance=True), expected)\n+\n+        sparr = sparr.tocsr()\n+        np.testing.assert_almost_equal(stats(sparr, compute_variance=True), expected)\n+\n+        weights = np.array([1, 2, 0, 3])\n+        e0 = (1 * 1 - 2 * 2 + 0 * 0 + 3 * 0) / (1 + 2 + 0 + 3)\n+        e1 = (1 * 4 + 2 * 10) / 3\n+        e2 = (1 * 9 + 2 * 0 + 3 * 0) / 6\n+        expected = [[-2, 1, e0, ((e0 - 1) ** 2 + 2 * (e0 + 2) ** 2 + 3 * e0 ** 2) / 6, 0, 4],\n+                    [4, 10, e1, ((e1 - 4) ** 2 + 2 * (e1 - 10) ** 2) / 3, 2, 2],\n+                    [0, 9, e2, ((e2 - 9) ** 2 + 2 * e2 ** 2 + 3 * e2 ** 2) / 6, 1, 3]]\n+\n+        np.testing.assert_almost_equal(\n+            stats(arr, weights=weights, compute_variance=True), expected)\n+\n+        sparr = csc_matrix(arr)\n+        np.testing.assert_almost_equal(\n+            stats(sparr, weights=weights, compute_variance=True), expected)\n+\n+        sparr = sparr.tocsr()\n+        np.testing.assert_almost_equal(\n+            stats(sparr, weights=weights, compute_variance=True), expected)\n+\n     def test_stats_empty(self):\n         X = np.array([])\n         np.testing.assert_equal(stats(X), [[np.inf, -np.inf, 0, 0, 0, 0]])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6681.0, "instance_id": "biolab__orange3-6681", "issue_numbers": 0, "base_commit": "ef3f5988d25649251abe9d72a7cd71a6f412b801", "patch": "diff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex 100b34b7e..a82f73af5 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -10,6 +10,7 @@ from math import isnan, floor\n from pickle import PickleError\n \n import numpy as np\n+import pandas\n import scipy.sparse as sp\n \n from Orange.data import _variable\n@@ -905,6 +906,8 @@ class StringVariable(Variable):\n             if not val.value:\n                 return \"?\"\n             val = val.value\n+        if pandas.isnull(val):\n+            return \"?\"\n         return str(val)\n \n     def repr_val(self, val):\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_variable.py b/Orange/data/tests/test_variable.py\nindex 4021acafc..efb35106f 100644\n--- a/Orange/data/tests/test_variable.py\n+++ b/Orange/data/tests/test_variable.py\n@@ -634,6 +634,8 @@ class TestStringVariable(VariableTest):\n         self.assertEqual(a.str_val(\"\"), \"?\")\n         self.assertEqual(a.str_val(Value(a, \"\")), \"?\")\n         self.assertEqual(a.repr_val(Value(a, \"foo\")), '\"foo\"')\n+        self.assertEqual(a.str_val(np.nan), \"?\")\n+        self.assertEqual(a.str_val(None), \"?\")\n \n \n @variabletest(TimeVariable)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4044.0, "instance_id": "biolab__orange3-4044", "issue_numbers": 0, "base_commit": "0c039b8e57dc2a46c16e667371738697b716639c", "patch": "diff --git a/Orange/widgets/unsupervised/owpca.py b/Orange/widgets/unsupervised/owpca.py\nindex 76936fe8f..1bb96df1c 100644\n--- a/Orange/widgets/unsupervised/owpca.py\n+++ b/Orange/widgets/unsupervised/owpca.py\n@@ -199,18 +199,19 @@ class OWPCA(widget.OWWidget):\n         self._update_axis()\n \n     def _on_cut_changed(self, components):\n+        if components == self.ncomponents \\\n+                or self.ncomponents == 0 \\\n+                or self._pca is not None \\\n+                and components == len(self._variance_ratio):\n+            return\n \n-        if not (self.ncomponents == 0 and\n-                components == len(self._variance_ratio)):\n-            self.ncomponents = components\n-\n+        self.ncomponents = components\n         if self._pca is not None:\n             var = self._cumulative[components - 1]\n             if numpy.isfinite(var):\n                 self.variance_covered = int(var * 100)\n \n-        if components != self._nselected_components():\n-            self._invalidate_selection()\n+        self._invalidate_selection()\n \n     def _update_selection_component_spin(self):\n         # cut changed by \"ncomponents\" spin.\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owpca.py b/Orange/widgets/unsupervised/tests/test_owpca.py\nindex 6a1c50485..4d6b47f91 100644\n--- a/Orange/widgets/unsupervised/tests/test_owpca.py\n+++ b/Orange/widgets/unsupervised/tests/test_owpca.py\n@@ -1,6 +1,7 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring\n-from unittest.mock import patch\n+# pylint: disable=missing-docstring, protected-access\n+import unittest\n+from unittest.mock import patch, Mock\n \n import numpy as np\n \n@@ -203,3 +204,22 @@ class TestOWPCA(WidgetTest):\n         self.widget.set_data(data)\n         ndata = Table(\"iris.tab\")\n         self.assertEqual(data.domain[0], ndata.domain[0])\n+\n+    def test_on_cut_changed(self):\n+        widget = self.widget\n+        widget.ncomponents = 2\n+        invalidate = widget._invalidate_selection = Mock()\n+        widget._on_cut_changed(2)\n+        invalidate.assert_not_called()\n+        widget._on_cut_changed(3)\n+        invalidate.assert_called()\n+\n+        widget.ncomponents = 0  # Take all components\n+        invalidate.reset_mock()\n+        widget._on_cut_changed(1)\n+        invalidate.assert_not_called()\n+        self.assertEqual(widget.ncomponents, 0)\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5807.0, "instance_id": "biolab__orange3-5807", "issue_numbers": 0, "base_commit": "c3e7011300ac031c90838ad45f11324026c9e39b", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 9cefb1f2b..6fd95fd35 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -1465,9 +1465,10 @@ class Table(Sequence, Storage):\n         \"\"\"\n \n         def is_view(x):\n-            # Sparse matrices don't have views like numpy arrays. Since indexing on\n-            # them creates copies in constructor we can skip this check here.\n-            return not sp.issparse(x) and x.base is not None\n+            if not sp.issparse(x):\n+                return x.base is not None\n+            else:\n+                return x.data.base is not None\n \n         if is_view(self._X):\n             self._X = self._X.copy()\n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex f82c9921a..7963a45bb 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -495,9 +495,13 @@ class TableTestCase(unittest.TestCase):\n         self.assertNotEqual(id(t.metas), id(copy.metas))\n \n         # ensure that copied sparse arrays do not share data\n+        # and that both are unlockable\n         with t.unlocked():\n             t.X[0, 0] = 42\n         self.assertEqual(copy.X[0, 0], 5.1)\n+        with copy.unlocked():\n+            copy.X[0, 0] = 43\n+        self.assertEqual(t.X[0, 0], 42)\n \n     def test_concatenate(self):\n         d1 = data.Domain(\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6457.0, "instance_id": "biolab__orange3-6457", "issue_numbers": 0, "base_commit": "e0ee124f82b186de0b693dadf98011ccdf449bf2", "patch": "diff --git a/Orange/data/io_base.py b/Orange/data/io_base.py\nindex 677220995..629fce528 100644\n--- a/Orange/data/io_base.py\n+++ b/Orange/data/io_base.py\n@@ -654,7 +654,7 @@ class _FileWriter:\n         if var.is_time:\n             return var.repr_val\n         elif var.is_continuous:\n-            return lambda value: \"\" if isnan(value) else value\n+            return lambda value: \"\" if isnan(value) else var.repr_val(value)\n         elif var.is_discrete:\n             return lambda value: \"\" if isnan(value) else var.values[int(value)]\n         elif var.is_string:\n.", "test_patch": "diff --git a/Orange/data/tests/test_io.py b/Orange/data/tests/test_io.py\nindex 0490a9671..061d97661 100644\n--- a/Orange/data/tests/test_io.py\n+++ b/Orange/data/tests/test_io.py\n@@ -135,9 +135,9 @@ class TestWriters(unittest.TestCase):\n c\\td\\ta\\tb\n continuous\\tstring\\tx y z\\tcontinuous\n class\\tmeta\\t\\t\n-3.0\\tfoo\\ty\\t0.5\n-1.0\\tbar\\tz\\t\n-7.0\\tbaz\\t\\t1.0625\"\"\".strip())\n+3\\tfoo\\ty\\t0.500\n+1\\tbar\\tz\\t\n+7\\tbaz\\t\\t1.06250\"\"\".strip())\n         finally:\n             os.remove(fname)\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4963.0, "instance_id": "biolab__orange3-4963", "issue_numbers": 0, "base_commit": "9f2589809c185eaa3dbca55cf24601ff089ed582", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex f9deb6f98..96799796e 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -446,10 +446,7 @@ class Table(Sequence, Storage):\n                 return table\n \n             if isinstance(row_indices, slice):\n-                start, stop, stride = row_indices.indices(source.X.shape[0])\n-                n_rows = (stop - start) // stride\n-                if n_rows < 0:\n-                    n_rows = 0\n+                n_rows = len(range(*row_indices.indices(source.X.shape[0])))\n             elif row_indices is ...:\n                 n_rows = len(source)\n             else:\n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex dfe29509d..e05606bd3 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -1138,11 +1138,6 @@ class TableTests(unittest.TestCase):\n     nrows = 10\n     row_indices = (1, 5, 7, 9)\n \n-    data = np.random.random((nrows, len(attributes)))\n-    class_data = np.random.random((nrows, len(class_vars)))\n-    meta_data = np.random.random((nrows, len(metas)))\n-    weight_data = np.random.random((nrows, 1))\n-\n     def setUp(self):\n         self.data = np.random.random((self.nrows, len(self.attributes)))\n         self.class_data = np.random.random((self.nrows, len(self.class_vars)))\n@@ -1584,11 +1579,13 @@ class CreateTableWithDomainAndTable(TableTests):\n         slice(None),  # [:]   - all elements\n         slice(None, None, 2),  # [::2] - even elements\n         slice(None, None, -1),  # [::-1]- all elements reversed\n+        slice(9, 5, -10),  # slice a big negative stride and thus 1 element\n     ]\n \n     row_indices = [1, 5, 6, 7]\n \n     def setUp(self):\n+        super().setUp()\n         self.domain = self.create_domain(\n             self.attributes, self.class_vars, self.metas)\n         self.table = data.Table(\n@@ -1632,12 +1629,27 @@ class CreateTableWithDomainAndTable(TableTests):\n             self.assert_table_with_filter_matches(\n                 new_table, self.table, rows=indices)\n \n-    def test_can_filter_row_with_slice(self):\n+    @patch.object(Table, \"from_table_rows\", wraps=Table.from_table_rows)\n+    def test_can_filter_row_with_slice_from_table_rows(self, from_table_rows):\n+        # calling from_table with the same domain will forward to from_table_rows\n         for slice_ in self.interesting_slices:\n+            from_table_rows.reset_mock()\n             new_table = data.Table.from_table(\n                 self.domain, self.table, row_indices=slice_)\n             self.assert_table_with_filter_matches(\n                 new_table, self.table, rows=slice_)\n+            from_table_rows.assert_called()\n+\n+    @patch.object(Table, \"from_table_rows\", wraps=Table.from_table_rows)\n+    def test_can_filter_row_with_slice_from_table(self, from_table_rows):\n+        # calling from_table with a domain copy will use indexing in from_table\n+        for slice_ in self.interesting_slices:\n+            from_table_rows.reset_mock()\n+            new_table = data.Table.from_table(\n+                self.domain.copy(), self.table, row_indices=slice_)\n+            self.assert_table_with_filter_matches(\n+                new_table, self.table, rows=slice_)\n+            from_table_rows.assert_not_called()\n \n     def test_can_use_attributes_as_new_columns(self):\n         a, _, _ = column_sizes(self.table)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4929.0, "instance_id": "biolab__orange3-4929", "issue_numbers": 0, "base_commit": "dd692fac882700b72fba521567835b2dd1eb341a", "patch": "diff --git a/Orange/widgets/data/owdiscretize.py b/Orange/widgets/data/owdiscretize.py\nindex 8c3c33e02..159dd6888 100644\n--- a/Orange/widgets/data/owdiscretize.py\n+++ b/Orange/widgets/data/owdiscretize.py\n@@ -182,8 +182,7 @@ class IncreasingNumbersListValidator(QValidator):\n         for start, end in self.itersplit(string):\n             valuestr = string[start:end].strip()\n             if not valuestr:\n-                state = min(state, QValidator.Intermediate)\n-                # Middle element is empty\n+                # Middle element is empty (will be fixed by fixup)\n                 continue\n             value = parse_float(valuestr)\n             if value is None:\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdiscretize.py b/Orange/widgets/data/tests/test_owdiscretize.py\nindex 6350c8ad7..829d5beb7 100644\n--- a/Orange/widgets/data/tests/test_owdiscretize.py\n+++ b/Orange/widgets/data/tests/test_owdiscretize.py\n@@ -140,9 +140,9 @@ class TestValidator(unittest.TestCase):\n         v = IncreasingNumbersListValidator()\n         self.assertEqual(v.validate(\"\", 0), (v.Acceptable, '', 0))\n         self.assertEqual(v.validate(\"1\", 1), (v.Acceptable, '1', 1))\n-        self.assertEqual(v.validate(\",\", 0), (v.Intermediate, ',', 0))\n+        self.assertEqual(v.validate(\",\", 0), (v.Acceptable, ',', 0))\n         self.assertEqual(v.validate(\"-\", 0), (v.Intermediate, '-', 0))\n-        self.assertEqual(v.validate(\"1,,\", 1), (v.Intermediate, '1,,', 1))\n+        self.assertEqual(v.validate(\"1,,\", 1), (v.Acceptable, '1,,', 1))\n         self.assertEqual(v.validate(\"1,a,\", 1), (v.Invalid, '1,a,', 1))\n         self.assertEqual(v.validate(\"a\", 1), (v.Invalid, 'a', 1))\n         self.assertEqual(v.validate(\"1,1\", 0), (v.Intermediate, '1,1', 0))\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4226.0, "instance_id": "biolab__orange3-4226", "issue_numbers": 0, "base_commit": "6795cb914413c310f025848b6cb2cfda5c12a881", "patch": "diff --git a/Orange/data/io.py b/Orange/data/io.py\nindex 15d0ca0aa..dc1606379 100644\n--- a/Orange/data/io.py\n+++ b/Orange/data/io.py\n@@ -145,30 +145,39 @@ def guess_data_type(orig_values, namask=None):\n     \"\"\"\n     valuemap, values = None, orig_values\n     is_discrete = is_discrete_values(orig_values)\n+    orig_values = np.asarray(orig_values, dtype=str)\n+    if namask is None:\n+        namask = isnastr(orig_values)\n     if is_discrete:\n         valuemap = sorted(is_discrete)\n         coltype = DiscreteVariable\n     else:\n         # try to parse as float\n-        orig_values = np.asarray(orig_values)\n-        if namask is None:\n-            namask = isnastr(orig_values)\n         values = np.empty_like(orig_values, dtype=float)\n         values[namask] = np.nan\n         try:\n             np.copyto(values, orig_values, where=~namask, casting=\"unsafe\")\n         except ValueError:\n-            tvar = TimeVariable('_')\n-            try:\n-                values[~namask] = [tvar.parse(i) for i in orig_values[~namask]]\n-            except ValueError:\n-                coltype = StringVariable\n-                # return original_values\n-                values = orig_values\n-            else:\n-                coltype = TimeVariable\n+            values = orig_values\n+            coltype = StringVariable\n         else:\n             coltype = ContinuousVariable\n+\n+    if coltype is not ContinuousVariable:\n+        # when not continuous variable it can still be time variable even it\n+        # was before recognized as a discrete\n+        tvar = TimeVariable('_')\n+        # introducing new variable prevent overwriting orig_values and values\n+        temp_values = np.empty_like(orig_values, dtype=float)\n+        try:\n+            temp_values[~namask] = [\n+                tvar.parse_exact_iso(i) for i in orig_values[~namask]]\n+        except ValueError:\n+            pass\n+        else:\n+            valuemap = None\n+            coltype = TimeVariable\n+            values = temp_values\n     return valuemap, values, coltype\n \n \ndiff --git a/Orange/data/variable.py b/Orange/data/variable.py\nindex e333118b7..211bb6a44 100644\n--- a/Orange/data/variable.py\n+++ b/Orange/data/variable.py\n@@ -889,6 +889,13 @@ class TimeVariable(ContinuousVariable):\n              r'\\d{2}\\d{2}\\d{2}\\.\\d+|'\n              r'\\d{1,4}(-?\\d{2,3})?'\n              r')$')\n+\n+    class InvalidDateTimeFormatError(ValueError):\n+        def __init__(self, date_string):\n+            super().__init__(\n+                \"Invalid datetime format '{}'. \"\n+                \"Only ISO 8601 supported.\".format(date_string))\n+\n     _matches_iso_format = re.compile(REGEX).match\n \n     # UTC offset and associated timezone. If parsed datetime values provide an\n@@ -954,8 +961,6 @@ class TimeVariable(ContinuousVariable):\n             return Unknown\n         datestr = datestr.strip().rstrip('Z')\n \n-        ERROR = ValueError(\"Invalid datetime format '{}'. \"\n-                           \"Only ISO 8601 supported.\".format(datestr))\n         if not self._matches_iso_format(datestr):\n             try:\n                 # If it is a number, assume it is a unix timestamp\n@@ -963,7 +968,7 @@ class TimeVariable(ContinuousVariable):\n                 self.have_date = self.have_time = 1\n                 return value\n             except ValueError:\n-                raise ERROR\n+                raise self.InvalidDateTimeFormatError(datestr)\n \n         for i, (have_date, have_time, fmt) in enumerate(self._ISO_FORMATS):\n             try:\n@@ -984,7 +989,7 @@ class TimeVariable(ContinuousVariable):\n                                     self.UNIX_EPOCH.day)\n                 break\n         else:\n-            raise ERROR\n+            raise self.InvalidDateTimeFormatError(datestr)\n \n         # Remember UTC offset. If not all parsed values share the same offset,\n         # remember none of it.\n@@ -1010,6 +1015,16 @@ class TimeVariable(ContinuousVariable):\n         except OverflowError:\n             return -(self.UNIX_EPOCH - dt).total_seconds()\n \n+    def parse_exact_iso(self, datestr):\n+        \"\"\"\n+        This function is a meta function to `parse` function. It checks\n+        whether the date is of the iso format - it does not accept float-like\n+        date.\n+        \"\"\"\n+        if not self._matches_iso_format(datestr):\n+            raise self.InvalidDateTimeFormatError(datestr)\n+        return self.parse(datestr)\n+\n     def to_val(self, s):\n         \"\"\"\n         Convert a value, given as an instance of an arbitrary type, to a float.\n \n.", "test_patch": "diff --git a/Orange/data/tests/test_io.py b/Orange/data/tests/test_io.py\nindex ad0c34281..acac8e87d 100644\n--- a/Orange/data/tests/test_io.py\n+++ b/Orange/data/tests/test_io.py\n@@ -1,7 +1,8 @@\n import unittest\n import numpy as np\n \n-from Orange.data import ContinuousVariable, DiscreteVariable, StringVariable\n+from Orange.data import ContinuousVariable, DiscreteVariable, StringVariable, \\\n+    TimeVariable\n from Orange.data.io import guess_data_type\n \n \n@@ -68,3 +69,27 @@ class TestTableFilters(unittest.TestCase):\n         self.assertEqual(StringVariable, coltype)\n         self.assertIsNone(valuemap)\n         np.testing.assert_array_equal(in_values, values)\n+\n+    def test_guess_data_type_time(self):\n+        in_values = [\"2019-10-10\", \"2019-10-10\", \"2019-10-10\", \"2019-10-01\"]\n+        valuemap, _, coltype = guess_data_type(in_values)\n+        self.assertEqual(TimeVariable, coltype)\n+        self.assertIsNone(valuemap)\n+\n+        in_values = [\"2019-10-10T12:08:51\", \"2019-10-10T12:08:51\",\n+                     \"2019-10-10T12:08:51\", \"2019-10-01T12:08:51\"]\n+        valuemap, _, coltype = guess_data_type(in_values)\n+        self.assertEqual(TimeVariable, coltype)\n+        self.assertIsNone(valuemap)\n+\n+        in_values = [\"2019-10-10 12:08:51\", \"2019-10-10 12:08:51\",\n+                     \"2019-10-10 12:08:51\", \"2019-10-01 12:08:51\"]\n+        valuemap, _, coltype = guess_data_type(in_values)\n+        self.assertEqual(TimeVariable, coltype)\n+        self.assertIsNone(valuemap)\n+\n+        in_values = [\"2019-10-10 12:08\", \"2019-10-10 12:08\",\n+                     \"2019-10-10 12:08\", \"2019-10-01 12:08\"]\n+        valuemap, _, coltype = guess_data_type(in_values)\n+        self.assertEqual(TimeVariable, coltype)\n+        self.assertIsNone(valuemap)\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4457.0, "instance_id": "biolab__orange3-4457", "issue_numbers": 0, "base_commit": "97c865b7be911b2baa5dd3fd8e84b36cf021b224", "patch": "diff --git a/Orange/widgets/data/owrank.py b/Orange/widgets/data/owrank.py\nindex edbf5ffb9..d84d3e79f 100644\n--- a/Orange/widgets/data/owrank.py\n+++ b/Orange/widgets/data/owrank.py\n@@ -395,7 +395,7 @@ class OWRank(OWWidget):\n     def get_scorer_scores(self, scorer):\n         try:\n             scores = scorer.scorer.score_data(self.data).T\n-        except ValueError:\n+        except (ValueError, TypeError):\n             log.error(\"%s doesn't work on this data\", scorer.name)\n             scores = np.full((len(self.data.domain.attributes), 1), np.nan)\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owrank.py b/Orange/widgets/data/tests/test_owrank.py\nindex 050ee3a0e..7a3dba35b 100644\n--- a/Orange/widgets/data/tests/test_owrank.py\n+++ b/Orange/widgets/data/tests/test_owrank.py\n@@ -247,6 +247,24 @@ class TestOWRank(WidgetTest):\n         self.assertEqual(self.get_output(self.widget.Outputs.scores).X.shape,\n                          (len(self.iris.domain.variables), 8))\n \n+    def test_no_class_data_learner_class_reg(self):\n+        \"\"\"\n+        Check workflow with learners that can be both classifier\n+        or regressor and data have no class variable. This test should not\n+        fail.\n+        \"\"\"\n+        data = Table.from_table(Domain(self.iris.domain.variables), self.iris)\n+        random_forest = RandomForestLearner()\n+        self.assertIsNone(data.domain.class_var)\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        with patch(\"Orange.widgets.data.owrank.log.error\") as log:\n+            self.send_signal(self.widget.Inputs.scorer, random_forest, 1)\n+            log.assert_called()\n+\n+        self.assertEqual(self.get_output(self.widget.Outputs.scores).X.shape,\n+                         (len(self.iris.domain.variables), 1))\n+\n     def test_scores_sorting(self):\n         \"\"\"Check clicking on header column orders scores in a different way\"\"\"\n         self.send_signal(self.widget.Inputs.data, self.iris)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 3957.0, "instance_id": "biolab__orange3-3957", "issue_numbers": 0, "base_commit": "8d3f8998b2a09a2e27c32941d8f226e4377c340d", "patch": "diff --git a/Orange/widgets/visualize/owvenndiagram.py b/Orange/widgets/visualize/owvenndiagram.py\nindex 528bbf5ac..58b1d5077 100644\n--- a/Orange/widgets/visualize/owvenndiagram.py\n+++ b/Orange/widgets/visualize/owvenndiagram.py\n@@ -210,6 +210,10 @@ class OWVennDiagram(widget.OWWidget):\n         del self._queue[:]\n \n         self._createDiagram()\n+        # If autocommit is enabled, _createDiagram already outputs data\n+        # If not, call unconditional_commit from here\n+        if not self.autocommit:\n+            self.unconditional_commit()\n         if self.data:\n             self.infolabel.setText(f\"{len(self.data)} datasets on input.\\n\")\n         else:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owvenndiagram.py b/Orange/widgets/visualize/tests/test_owvenndiagram.py\nindex 9d0dfcad8..76ddb4c62 100644\n--- a/Orange/widgets/visualize/tests/test_owvenndiagram.py\n+++ b/Orange/widgets/visualize/tests/test_owvenndiagram.py\n@@ -2,6 +2,7 @@\n # pylint: disable=missing-docstring\n \n import unittest\n+from unittest.mock import patch\n from collections import defaultdict\n \n import numpy as np\n@@ -180,6 +181,13 @@ class TestOWVennDiagram(WidgetTest, WidgetOutputsTestMixin):\n         self.send_signal(self.signal_name, self.data[50:], 2)\n         self.send_signal(self.signal_name, self.data[:0], 3)\n \n+    def test_unconditional_commit_on_new_signal(self):\n+        with patch.object(self.widget, 'unconditional_commit') as commit:\n+            self.widget.autocommit = False\n+            commit.reset_mock()\n+            self.send_signal(self.signal_name, self.data[:100], 1)\n+            commit.assert_called()\n+\n \n class GroupTableIndicesTest(unittest.TestCase):\n \n@@ -269,3 +277,7 @@ class TestVennUtilities(unittest.TestCase):\n \n         copied = copy_descriptor(var, \"cux\")\n         self.assertEqual(copied.name, \"cux\")\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4505.0, "instance_id": "biolab__orange3-4505", "issue_numbers": 0, "base_commit": "9541a292c32883fcf173c2c3eeb68b92a2b827fd", "patch": "diff --git a/Orange/widgets/data/owsave.py b/Orange/widgets/data/owsave.py\nindex 2a8446ab3..b3b55a4fa 100644\n--- a/Orange/widgets/data/owsave.py\n+++ b/Orange/widgets/data/owsave.py\n@@ -8,6 +8,7 @@ from Orange.widgets.widget import Input\n from Orange.widgets.settings import Setting\n from Orange.widgets.utils.save.owsavebase import OWSaveBase\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n _userhome = os.path.expanduser(f\"~{os.sep}\")\n@@ -35,6 +36,8 @@ class OWSave(OWSaveBase):\n     def __init__(self):\n         super().__init__(2)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+\n         self.grid.addWidget(\n             gui.checkBox(\n                 None, self, \"add_type_annotations\",\n@@ -79,13 +82,9 @@ class OWSave(OWSaveBase):\n             and self.filename and not self.writer.SUPPORT_SPARSE_DATA)\n \n     def update_status(self):\n-        if self.data is None:\n-            self.info.set_input_summary(self.info.NoInput)\n-        else:\n-            self.info.set_input_summary(\n-                str(len(self.data)),\n-                f\"Data set {self.data.name or '(no name)'} \"\n-                f\"with {len(self.data)} instances\")\n+        summary = len(self.data) if self.data else self.info.NoInput\n+        details = format_summary_details(self.data) if self.data else \"\"\n+        self.info.set_input_summary(summary, details)\n \n     def send_report(self):\n         self.report_data_brief(self.data)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owsave.py b/Orange/widgets/data/tests/test_owsave.py\nindex d09179a89..5982d3102 100644\n--- a/Orange/widgets/data/tests/test_owsave.py\n+++ b/Orange/widgets/data/tests/test_owsave.py\n@@ -13,6 +13,7 @@ from Orange.tests import named_file\n from Orange.widgets.data.owsave import OWSave, OWSaveBase\n from Orange.widgets.utils.save.tests.test_owsavebase import \\\n     SaveWidgetsTestBaseMixin\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.tests.base import WidgetTest, open_widget_classes\n \n \n@@ -55,7 +56,7 @@ class TestOWSave(OWSaveTestBase):\n \n         datasig = widget.Inputs.data\n         self.send_signal(datasig, self.iris)\n-        self.assertEqual(insum.call_args[0][0], \"150\")\n+        insum.assert_called_with(len(self.iris), format_summary_details(self.iris))\n         insum.reset_mock()\n         savefile.reset_mock()\n \n@@ -63,16 +64,18 @@ class TestOWSave(OWSaveTestBase):\n         widget.writer = TabReader\n         widget.auto_save = False\n         self.send_signal(datasig, self.iris)\n-        self.assertEqual(insum.call_args[0][0], \"150\")\n+        insum.assert_called_with(len(self.iris), format_summary_details(self.iris))\n         savefile.assert_not_called()\n \n         widget.auto_save = True\n         self.send_signal(datasig, self.iris)\n-        self.assertEqual(insum.call_args[0][0], \"150\")\n+        insum.assert_called_with(len(self.iris), format_summary_details(self.iris))\n         savefile.assert_called()\n \n+        insum.reset_mock()\n         self.send_signal(datasig, None)\n-        insum.assert_called_with(widget.info.NoInput)\n+        insum.assert_called_once()\n+        self.assertEqual(insum.call_args[0][0].brief, \"\")\n \n     def test_initial_start_dir(self):\n         widget = self.widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4255.0, "instance_id": "biolab__orange3-4255", "issue_numbers": 0, "base_commit": "04b7c72740ee5ced370aa8104152c38e3245e2b1", "patch": "diff --git a/Orange/widgets/unsupervised/owpca.py b/Orange/widgets/unsupervised/owpca.py\nindex 5b9220d4a..8bd69c900 100644\n--- a/Orange/widgets/unsupervised/owpca.py\n+++ b/Orange/widgets/unsupervised/owpca.py\n@@ -31,6 +31,7 @@ class OWPCA(widget.OWWidget):\n \n     class Outputs:\n         transformed_data = Output(\"Transformed Data\", Table, replaces=[\"Transformed data\"])\n+        data = Output(\"Data\", Table, default=True)\n         components = Output(\"Components\", Table)\n         pca = Output(\"PCA\", PCA, dynamic=False)\n \n@@ -180,6 +181,7 @@ class OWPCA(widget.OWWidget):\n \n     def clear_outputs(self):\n         self.Outputs.transformed_data.send(None)\n+        self.Outputs.data.send(None)\n         self.Outputs.components.send(None)\n         self.Outputs.pca.send(self._pca_projector)\n \n@@ -286,7 +288,7 @@ class OWPCA(widget.OWWidget):\n         axis.setTicks([[(i, str(i)) for i in range(1, p + 1, d)]])\n \n     def commit(self):\n-        transformed = components = None\n+        transformed = data = components = None\n         if self._pca is not None:\n             if self._transformed is None:\n                 # Compute the full transform (MAX_COMPONENTS components) once.\n@@ -311,9 +313,18 @@ class OWPCA(widget.OWWidget):\n                                metas=metas)\n             components.name = 'components'\n \n+            data_dom = Domain(\n+                self.data.domain.attributes,\n+                self.data.domain.class_vars,\n+                self.data.domain.metas + domain.attributes)\n+            data = Table.from_numpy(\n+                data_dom, self.data.X, self.data.Y,\n+                numpy.hstack((self.data.metas, transformed.X)))\n+\n         self._pca_projector.component = self.ncomponents\n         self.Outputs.transformed_data.send(transformed)\n         self.Outputs.components.send(components)\n+        self.Outputs.data.send(data)\n         self.Outputs.pca.send(self._pca_projector)\n \n     def send_report(self):\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owpca.py b/Orange/widgets/unsupervised/tests/test_owpca.py\nindex 2220ddb6c..e6f36b6e0 100644\n--- a/Orange/widgets/unsupervised/tests/test_owpca.py\n+++ b/Orange/widgets/unsupervised/tests/test_owpca.py\n@@ -220,6 +220,28 @@ class TestOWPCA(WidgetTest):\n         invalidate.assert_not_called()\n         self.assertEqual(widget.ncomponents, 0)\n \n+    def test_output_data(self):\n+        widget = self.widget\n+        widget.ncomponents = 2\n+        domain = Domain(self.iris.domain.attributes[:3],\n+                        self.iris.domain.class_var,\n+                        self.iris.domain.attributes[3:])\n+        iris = self.iris.transform(domain)\n+        self.send_signal(widget.Inputs.data, iris)\n+        output = self.get_output(widget.Outputs.data)\n+        outdom = output.domain\n+        self.assertEqual(domain.attributes, outdom.attributes)\n+        self.assertEqual(domain.class_var, outdom.class_var)\n+        self.assertEqual(domain.metas, outdom.metas[:1])\n+        self.assertEqual(len(outdom.metas), 3)\n+        np.testing.assert_equal(iris.X, output.X)\n+        np.testing.assert_equal(iris.Y, output.Y)\n+        np.testing.assert_equal(iris.metas[:, 0], output.metas[:, 0])\n+\n+        trans = self.get_output(widget.Outputs.transformed_data)\n+        self.assertEqual(trans.domain.attributes, outdom.metas[1:])\n+        np.testing.assert_equal(trans.X, output.metas[:, 1:])\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6246.0, "instance_id": "biolab__orange3-6246", "issue_numbers": 0, "base_commit": "9c02c207cd1a4fbe419b0bdcd3869b71d8231daf", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 52ca0a61e..b95874275 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -2294,6 +2294,7 @@ class Table(Sequence, Storage):\n             cls._init_ids(self)\n             self.attributes = deepcopy(table.attributes)\n             self.attributes[\"old_domain\"] = table.domain\n+            self.name = table.name\n             progress_callback(1)\n             return self\n \n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex e9c4559ed..d8ad58d22 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -3128,6 +3128,11 @@ class TestTableTranspose(unittest.TestCase):\n         self.assertDictEqual(table.domain.attributes[0].attributes,\n                              {\"attr1\": \"a1\", \"attr2\": \"aa1\"})\n \n+    def test_transpose_name(self):\n+        table = Table(\"iris\")\n+        transposed = Table.transpose(table)\n+        self.assertEqual(table.name, transposed.name)\n+\n     def _compare_tables(self, table1, table2):\n         self.assertEqual(table1.n_rows, table2.n_rows)\n         np.testing.assert_array_equal(table1.X, table2.X)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5237.0, "instance_id": "biolab__orange3-5237", "issue_numbers": 0, "base_commit": "b6a16b1e7d633d5c7d7150b0e84f7792c288fa36", "patch": "diff --git a/Orange/widgets/data/owselectcolumns.py b/Orange/widgets/data/owselectcolumns.py\nindex af11f3668..3a385ba69 100644\n--- a/Orange/widgets/data/owselectcolumns.py\n+++ b/Orange/widgets/data/owselectcolumns.py\n@@ -168,7 +168,7 @@ class OWSelectAttributes(widget.OWWidget):\n     settingsHandler = SelectAttributesDomainContextHandler(first_match=False)\n     domain_role_hints = ContextSetting({})\n     use_input_features = Setting(False)\n-    select_new_features = Setting(True)\n+    ignore_new_features = Setting(False)\n     auto_commit = Setting(True)\n \n     class Warning(widget.OWWidget.Warning):\n@@ -301,7 +301,7 @@ class OWSelectAttributes(widget.OWWidget):\n \n         bbox = gui.vBox(self.controlArea, \"Additional settings\", addToLayout=False)\n         gui.checkBox(\n-            bbox, self, \"select_new_features\", \"Automatically select additional/new features\"\n+            bbox, self, \"ignore_new_features\", \"Ignore new variables by default\"\n         )\n         layout.addWidget(bbox, 3, 0, 1, 3)\n \n@@ -390,7 +390,7 @@ class OWSelectAttributes(widget.OWWidget):\n         Define hints for selected/unselected features.\n         Rules:\n         - if context available, restore new features based on checked/unchecked\n-          select_new_features, context hint should be took into account\n+          ignore_new_features, context hint should be took into account\n         - in no context, restore features based on the domain (as selected)\n \n         Parameters\n@@ -404,7 +404,7 @@ class OWSelectAttributes(widget.OWWidget):\n         should appear\n         \"\"\"\n         domain_hints = {}\n-        if self.select_new_features or len(self.domain_role_hints) == 0:\n+        if not self.ignore_new_features or len(self.domain_role_hints) == 0:\n             # select_new_features selected or no context - restore based on domain\n             domain_hints.update(\n                 self._hints_from_seq(\"attribute\", domain.attributes)\n@@ -414,7 +414,7 @@ class OWSelectAttributes(widget.OWWidget):\n                 self._hints_from_seq(\"class\", domain.class_vars)\n             )\n         else:\n-            # if context restored and select_new_features unselected - restore\n+            # if context restored and ignore_new_features selected - restore\n             # new features as available\n             d = domain.attributes + domain.metas + domain.class_vars\n             domain_hints.update(self._hints_from_seq(\"available\", d))\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectcolumns.py b/Orange/widgets/data/tests/test_owselectcolumns.py\nindex 21bb0a9c9..b7f8498ce 100644\n--- a/Orange/widgets/data/tests/test_owselectcolumns.py\n+++ b/Orange/widgets/data/tests/test_owselectcolumns.py\n@@ -415,7 +415,7 @@ class TestOWSelectAttributes(WidgetTest):\n \n     def test_select_new_features(self):\n         \"\"\"\n-        When select_new_features checked new attributes must appear in one of\n+        When ignore_new_features unchecked new attributes must appear in one of\n         selected columns. Test with fist make context remember attributes of\n         reduced domain and then testing with full domain. Features in missing\n         in reduced domain must appears as seleceted.\n@@ -445,14 +445,14 @@ class TestOWSelectAttributes(WidgetTest):\n \n         # if select_new_features checked all new features goes in the selected\n         # features columns - domain equal original\n-        self.assertTrue(self.widget.select_new_features)\n+        self.assertFalse(self.widget.ignore_new_features)\n         self.assertTupleEqual(data.domain.attributes, output.domain.attributes)\n         self.assertTupleEqual(data.domain.metas, output.domain.metas)\n         self.assertEqual(data.domain.class_var, output.domain.class_var)\n \n     def test_unselect_new_features(self):\n         \"\"\"\n-        When select_new_features not checked new attributes must appear in one\n+        When ignore_new_features checked new attributes must appear in one\n         available attributes column. Test with fist make context remember\n         attributes of reduced domain and then testing with full domain.\n         Features in missing in reduced domain must appears as not seleceted.\n@@ -468,9 +468,9 @@ class TestOWSelectAttributes(WidgetTest):\n \n         # make context remember features in reduced domain\n         self.send_signal(self.widget.Inputs.data, new_data)\n-        # unselect select_new_features\n-        self.widget.controls.select_new_features.click()\n-        self.assertFalse(self.widget.select_new_features)\n+        # select ignore_new_features\n+        self.widget.controls.ignore_new_features.click()\n+        self.assertTrue(self.widget.ignore_new_features)\n         output = self.get_output(self.widget.Outputs.data)\n \n         self.assertTupleEqual(\n@@ -483,9 +483,9 @@ class TestOWSelectAttributes(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, data)\n         output = self.get_output(self.widget.Outputs.data)\n \n-        # if select_new_features not checked all new features goes in the\n+        # if ignore_new_features checked all new features goes in the\n         # available attributes column\n-        self.assertFalse(self.widget.select_new_features)\n+        self.assertTrue(self.widget.ignore_new_features)\n         self.assertTupleEqual(new_domain.attributes, output.domain.attributes)\n         self.assertTupleEqual(new_domain.metas, output.domain.metas)\n         self.assertEqual(new_domain.class_var, output.domain.class_var)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6276.0, "instance_id": "biolab__orange3-6276", "issue_numbers": 0, "base_commit": "216264ac5c6fa0bd4c8392b3631d40138ae07652", "patch": "diff --git a/Orange/widgets/visualize/owpythagoreanforest.py b/Orange/widgets/visualize/owpythagoreanforest.py\nindex f615f0f14..e0b36d135 100644\n--- a/Orange/widgets/visualize/owpythagoreanforest.py\n+++ b/Orange/widgets/visualize/owpythagoreanforest.py\n@@ -3,11 +3,13 @@ from math import log, sqrt\n from typing import Any, Callable, Optional\n \n from AnyQt.QtCore import Qt, QRectF, QSize, QPointF, QSizeF, QModelIndex, \\\n-    QItemSelection, QItemSelectionModel, QT_VERSION\n+    QItemSelection, QItemSelectionModel, QT_VERSION, QByteArray, QBuffer, \\\n+    QIODevice\n from AnyQt.QtGui import QPainter, QPen, QColor, QBrush, QMouseEvent\n from AnyQt.QtWidgets import QSizePolicy, QGraphicsScene, QLabel, QSlider, \\\n     QListView, QStyledItemDelegate, QStyleOptionViewItem, QStyle\n \n+from orangewidget.io import PngFormat\n from Orange.base import RandomForestModel, TreeModel\n from Orange.data import Table\n from Orange.widgets import gui, settings\n@@ -23,6 +25,53 @@ from Orange.widgets.visualize.utils.tree.skltreeadapter import \\\n from Orange.widgets.widget import OWWidget\n \n \n+REPORT_STYLE = \"\"\"\n+<style>\n+* {\n+  box-sizing: border-box;\n+}\n+\n+.forest_model_row {\n+  display: flex;\n+  flex-wrap: wrap;\n+  padding: 0 4px;\n+}\n+\n+.forest_model_col {\n+  flex: 10%;\n+  max-width: 10%;\n+  padding: 0 4px;\n+}\n+\n+.forest_model_col img {\n+  margin-top: 8px;\n+  vertical-align: middle;\n+}\n+\n+@media screen and (max-width: 2200px) {\n+  .forest_model_col {\n+    flex: 25%;\n+    max-width: 25%;\n+  }\n+}\n+\n+@media screen and (max-width: 1200px) {\n+  .forest_model_col {\n+    flex: 50%;\n+    max-width: 50%;\n+  }\n+}\n+\n+@media screen and (max-width: 600px) {\n+  .forest_model_col {\n+    flex: 100%;\n+    max-width: 100%;\n+  }\n+}\n+</style>\n+\"\"\"\n+\n+\n class PythagoreanForestModel(PyListModel):\n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n@@ -377,7 +426,30 @@ class OWPythagoreanForest(OWWidget):\n \n     def send_report(self):\n         \"\"\"Send report.\"\"\"\n-        self.report_plot()\n+        model = self.forest_model\n+        max_rows = 30\n+\n+        def item_html(row):\n+            img_data = model.data(model.index(row))\n+            byte_array = QByteArray()\n+            filename = QBuffer(byte_array)\n+            filename.open(QIODevice.WriteOnly)\n+            PngFormat.write(filename, img_data)\n+            img_encoded = byte_array.toBase64().data().decode(\"utf-8\")\n+            return f'<img style=\"width:100%\" ' \\\n+                   f'src=\"data:image/png;base64,{img_encoded}\"/>'\n+\n+        html = [\"<div class='forest_model_row'>\"]\n+        for i in range(model.rowCount())[:max_rows]:\n+            html.append(\"<div class='forest_model_col'>\")\n+            html.extend(item_html(i))\n+            html.append(\"</div>\")\n+        html.append(\"</div>\")\n+\n+        html = REPORT_STYLE + \"\".join(html)\n+        if model.rowCount() > max_rows:\n+            html += \"<p>. . .</p>\"\n+        self.report_raw(html)\n \n \n class SklRandomForestAdapter:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owpythagoreanforest.py b/Orange/widgets/visualize/tests/test_owpythagoreanforest.py\nindex f2c88b362..29fa8dc19 100644\n--- a/Orange/widgets/visualize/tests/test_owpythagoreanforest.py\n+++ b/Orange/widgets/visualize/tests/test_owpythagoreanforest.py\n@@ -1,5 +1,5 @@\n # pylint: disable=missing-docstring,protected-access\n-\n+import unittest\n from unittest.mock import Mock\n \n from AnyQt.QtCore import Qt, QItemSelection, QItemSelectionModel\n@@ -238,3 +238,15 @@ class TestOWPythagoreanForest(WidgetTest):\n \n         self.send_signal(self.widget.Inputs.random_forest, iris_tree)\n         self.assertEqual(2, self.widget.target_class_index)\n+\n+    def test_report(self):\n+        self.widget.send_report()\n+\n+        self.widget.report_raw = Mock()\n+        self.send_signal(self.widget.Inputs.random_forest, self.titanic)\n+        self.widget.send_report()\n+        self.widget.report_raw.assert_called_once()\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5963.0, "instance_id": "biolab__orange3-5963", "issue_numbers": 0, "base_commit": "d25d38e01b0f3ac626f7961cf248aa0c1967b260", "patch": "diff --git a/Orange/widgets/visualize/owsilhouetteplot.py b/Orange/widgets/visualize/owsilhouetteplot.py\nindex 82b0b33d8..3a4534164 100644\n--- a/Orange/widgets/visualize/owsilhouetteplot.py\n+++ b/Orange/widgets/visualize/owsilhouetteplot.py\n@@ -267,7 +267,7 @@ class OWSilhouettePlot(widget.OWWidget):\n                      if var.is_string or var.is_discrete]\n         self.annotation_var_model[:] = [None] + annotvars\n         self.annotation_var = annotvars[0] if annotvars else None\n-        self.openContext(Orange.data.Domain(groupvars))\n+        self.openContext(domain)\n \n     def _is_empty(self) -> bool:\n         # Is empty (does not have any input).\n@@ -539,27 +539,22 @@ class OWSilhouettePlot(widget.OWWidget):\n     def migrate_context(cls, context, version):\n         values = context.values\n         if version < 2:\n-            discrete_vars = (\n-                name\n-                for name, type_ in itertools.chain(\n-                    context.attributes, context.class_vars, context.metas)\n-                if type_ == 1)\n+            # contexts were constructed from Domain containing vars shown in\n+            # the list view, context.class_vars and context.metas were always\n+            # empty, and context.attributes contained discrete attributes\n             index, _ = values.pop(\"cluster_var_idx\")\n-            name = next(itertools.islice(discrete_vars, index, None)\n-            )\n-            values[\"cluster_var\"] = (name, 101)\n+            values[\"cluster_var\"] = (context.attributes[index][0], 101)\n \n             index = values.pop(\"annotation_var_idx\")[0] - 1\n             if index == -1:\n                 values[\"annotation_var\"] = None\n-            else:\n-                annot_vars = (\n-                    (name, type_ + 100)\n-                    for name, type_ in itertools.chain(\n-                        context.attributes, context.class_vars, context.metas)\n-                    if type_ in (1, 3))\n-                values[\"annotation_var\"] = next(\n-                    itertools.islice(annot_vars, index, None))\n+            elif index < len(context.attributes):\n+                name, _ = context.attributes[index]\n+                values[\"annotation_var\"] = (name, 101)\n+            # else we cannot migrate\n+            # Even this migration can be erroneous if metas contained a mixture\n+            # of discrete and string attributes; the latter were not stored in\n+            # context, so indices in context could have been wrong\n \n \n class SelectAction(enum.IntEnum):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owsilhouetteplot.py b/Orange/widgets/visualize/tests/test_owsilhouetteplot.py\nindex 192b30e8e..81daceca1 100644\n--- a/Orange/widgets/visualize/tests/test_owsilhouetteplot.py\n+++ b/Orange/widgets/visualize/tests/test_owsilhouetteplot.py\n@@ -259,10 +259,10 @@ class TestOWSilhouettePlot(WidgetTest, WidgetOutputsTestMixin):\n \n     def test_migration(self):\n         enc_domain = dict(\n-            attributes=(('foo', 1), ('bar', 1), ('baz', 2), ('bax', 1)),\n-            class_vars=(('cfoo', 1), ),\n-            metas=(('mbar', 3), ('mbaz', 1)))\n+            attributes=(('foo', 1), ('bar', 1), ('baz', 1), ('bax', 1),\n+                        ('cfoo', 1), ('mbaz', 1)))\n \n+        # No annotation\n         context = Context(\n             values=dict(cluster_var_idx=(0, -2), annotation_var_idx=(0, -2)),\n             **enc_domain\n@@ -274,23 +274,26 @@ class TestOWSilhouettePlot(WidgetTest, WidgetOutputsTestMixin):\n         self.assertEqual(values[\"cluster_var\"], (\"foo\", 101))\n         self.assertEqual(values[\"annotation_var\"], None)\n \n+        # We have annotation\n         context = Context(\n-            values=dict(cluster_var_idx=(4, -2), annotation_var_idx=(4, -2)),\n+            values=dict(cluster_var_idx=(2, -2), annotation_var_idx=(4, -2)),\n             **enc_domain\n         )\n         OWSilhouettePlot.migrate_context(context, 1)\n         self.assertNotIn(\"cluster_var_idx\", values)\n         self.assertNotIn(\"annotation_var_idx\", values)\n-        self.assertEqual(context.values[\"cluster_var\"], (\"mbaz\", 101))\n-        self.assertEqual(context.values[\"annotation_var\"], (\"cfoo\", 101))\n+        self.assertEqual(context.values[\"cluster_var\"], (\"baz\", 101))\n+        self.assertEqual(context.values[\"annotation_var\"], (\"bax\", 101))\n \n+        # We thought was had annotation, but the index is wrong due to\n+        # incorrect domain\n         context = Context(\n-            values=dict(cluster_var_idx=(4, -2), annotation_var_idx=(5, -2)),\n+            values=dict(cluster_var_idx=(4, -2), annotation_var_idx=(7, -2)),\n             **enc_domain\n         )\n         OWSilhouettePlot.migrate_context(context, 1)\n-        self.assertEqual(context.values[\"cluster_var\"], (\"mbaz\", 101))\n-        self.assertEqual(context.values[\"annotation_var\"], (\"mbar\", 103))\n+        self.assertEqual(context.values[\"cluster_var\"], (\"cfoo\", 101))\n+        self.assertNotIn(\"annotation_var_idx\", values)\n \n \n if __name__ == \"__main__\":\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6930.0, "instance_id": "biolab__orange3-6930", "issue_numbers": 0, "base_commit": "2869a55733dc01f4c0ad813e92abf0dfd22f4893", "patch": "diff --git a/Orange/widgets/data/owdatasets.py b/Orange/widgets/data/owdatasets.py\nindex 84a2675e1..d445900ee 100644\n--- a/Orange/widgets/data/owdatasets.py\n+++ b/Orange/widgets/data/owdatasets.py\n@@ -278,7 +278,10 @@ class OWDataSets(OWWidget):\n         if self.language is not None and self.language not in languages:\n             languages.insert(1, self.language)\n         lang_combo.addItems(languages)\n-        lang_combo.setCurrentText(self.language)\n+        if self.language is None:\n+            lang_combo.setCurrentIndex(lang_combo.count() - 1)\n+        else:\n+            lang_combo.setCurrentText(self.language)\n         lang_combo.activated.connect(self._on_language_changed)\n         layout.addWidget(lang_combo)\n \n@@ -428,7 +431,7 @@ class OWDataSets(OWWidget):\n         if self.DEFAULT_LANG not in languages:\n             combo.addItem(self.DEFAULT_LANG)\n         combo.addItems(languages + [self.ALL_LANGUAGES])\n-        if current_language in languages:\n+        if current_language in languages or current_language == self.ALL_LANGUAGES:\n             combo.setCurrentText(current_language)\n         elif self.DEFAULT_LANG in languages:\n             combo.setCurrentText(self.DEFAULT_LANG)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasets.py b/Orange/widgets/data/tests/test_owdatasets.py\nindex 240b50a2d..31bb12e8d 100644\n--- a/Orange/widgets/data/tests/test_owdatasets.py\n+++ b/Orange/widgets/data/tests/test_owdatasets.py\n@@ -183,6 +183,22 @@ class TestOWDataSets(WidgetTest):\n         self.wait_until_stop_blocking(w2)\n         self.assertEqual(w2.language_combo.currentText(), \"Klingon\")\n \n+    @patch(\"Orange.widgets.data.owdatasets.list_remote\",\n+           Mock(return_value={('core', 'foo.tab'): {\"language\": \"English\"},\n+                              ('core', 'bar.tab'): {\"language\": \"Sloven\u0161\u010dina\"}}))\n+    @patch(\"Orange.widgets.data.owdatasets.list_local\",\n+           Mock(return_value={}))\n+    def test_remember_all_languages(self):\n+        w = self.create_widget(OWDataSets)  # type: OWDataSets\n+        self.wait_until_stop_blocking(w)\n+        w.language_combo.setCurrentText(w.ALL_LANGUAGES)\n+        w.language_combo.activated.emit(w.language_combo.currentIndex())\n+        settings = w.settingsHandler.pack_data(w)\n+\n+        w2 = self.create_widget(OWDataSets, stored_settings=settings)\n+        self.wait_until_stop_blocking(w2)\n+        self.assertEqual(w2.language_combo.currentText(), w2.ALL_LANGUAGES)\n+\n     @patch(\"Orange.widgets.data.owdatasets.list_remote\",\n            Mock(return_value={('core', 'iris.tab'): {}}))\n     @patch(\"Orange.widgets.data.owdatasets.list_local\",\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6246.0, "instance_id": "biolab__orange3-6246", "issue_numbers": 0, "base_commit": "4a6a70f9cb573b26d6dcc18fae0629136eeaa985", "patch": "diff --git a/Orange/data/table.py b/Orange/data/table.py\nindex 52ca0a61e..b95874275 100644\n--- a/Orange/data/table.py\n+++ b/Orange/data/table.py\n@@ -2294,6 +2294,7 @@ class Table(Sequence, Storage):\n             cls._init_ids(self)\n             self.attributes = deepcopy(table.attributes)\n             self.attributes[\"old_domain\"] = table.domain\n+            self.name = table.name\n             progress_callback(1)\n             return self\n \n.", "test_patch": "diff --git a/Orange/tests/test_table.py b/Orange/tests/test_table.py\nindex e9c4559ed..d8ad58d22 100644\n--- a/Orange/tests/test_table.py\n+++ b/Orange/tests/test_table.py\n@@ -3128,6 +3128,11 @@ class TestTableTranspose(unittest.TestCase):\n         self.assertDictEqual(table.domain.attributes[0].attributes,\n                              {\"attr1\": \"a1\", \"attr2\": \"aa1\"})\n \n+    def test_transpose_name(self):\n+        table = Table(\"iris\")\n+        transposed = Table.transpose(table)\n+        self.assertEqual(table.name, transposed.name)\n+\n     def _compare_tables(self, table1, table2):\n         self.assertEqual(table1.n_rows, table2.n_rows)\n         np.testing.assert_array_equal(table1.X, table2.X)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5986.0, "instance_id": "biolab__orange3-5986", "issue_numbers": 0, "base_commit": "25ba55a848a003c9e8aa122d8840879128a670d4", "patch": "diff --git a/Orange/widgets/data/owneighbors.py b/Orange/widgets/data/owneighbors.py\nindex ae1e502a0..8e5bc4356 100644\n--- a/Orange/widgets/data/owneighbors.py\n+++ b/Orange/widgets/data/owneighbors.py\n@@ -156,17 +156,16 @@ class OWNeighbors(OWWidget):\n         return np.argpartition(dist, up_to - 1)[:up_to]\n \n     def _data_with_similarity(self, indices):\n-        data = self.data\n-        varname = get_unique_names(data.domain, \"distance\")\n-        metas = data.domain.metas + (ContinuousVariable(varname), )\n-        domain = Domain(data.domain.attributes, data.domain.class_vars, metas)\n-        data_metas = self.distances[indices].reshape((-1, 1))\n-        if data.domain.metas:\n-            data_metas = np.hstack((data.metas[indices], data_metas))\n-        neighbors = Table(domain, data.X[indices], data.Y[indices], data_metas)\n-        neighbors.ids = data.ids[indices]\n-        neighbors.attributes = self.data.attributes\n-        return neighbors\n+        domain = self.data.domain\n+        dist_var = ContinuousVariable(get_unique_names(domain, \"distance\"))\n+        metas = domain.metas + (dist_var, )\n+        domain = Domain(domain.attributes, domain.class_vars, metas)\n+        neighbours = self.data.from_table(domain, self.data, row_indices=indices)\n+        distances = self.distances[indices]\n+        with neighbours.unlocked(neighbours.metas):\n+            if distances.size > 0:\n+                neighbours.get_column_view(dist_var)[0][:] = distances\n+        return neighbours\n \n \n if __name__ == \"__main__\":  # pragma: no cover\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owneighbors.py b/Orange/widgets/data/tests/test_owneighbors.py\nindex f695d64d3..394d86529 100644\n--- a/Orange/widgets/data/tests/test_owneighbors.py\n+++ b/Orange/widgets/data/tests/test_owneighbors.py\n@@ -442,6 +442,16 @@ class TestOWNeighbors(WidgetTest):\n         self.send_signal(w.Inputs.data, None)\n         self.assertEqual(sb.maximum(), default)\n \n+    def test_inherited_table(self):\n+        # pylint: disable=abstract-method\n+        class Table2(Table):\n+            pass\n+\n+        data = Table2(self.iris)\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.send_signal(self.widget.Inputs.reference, data[0:1])\n+        self.assertIsInstance(self.get_output(self.widget.Outputs.data), Table2)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4158.0, "instance_id": "biolab__orange3-4158", "issue_numbers": 0, "base_commit": "b0170aa0da19907d23cea635f8a7ed2ddce0a9b9", "patch": "diff --git a/Orange/widgets/evaluate/owtestlearners.py b/Orange/widgets/evaluate/owtestlearners.py\nindex 9b37fe8b4..a0e9ebe7d 100644\n--- a/Orange/widgets/evaluate/owtestlearners.py\n+++ b/Orange/widgets/evaluate/owtestlearners.py\n@@ -39,7 +39,6 @@ from Orange.widgets.utils.itemmodels import DomainModel\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n from Orange.widgets.utils.concurrent import ThreadExecutor, TaskState\n from Orange.widgets.widget import OWWidget, Msg, Input, Output\n-from orangewidget.utils.itemmodels import PyListModel\n \n log = logging.getLogger(__name__)\n \n@@ -285,7 +284,7 @@ class OWTestLearners(OWWidget):\n \n         self.modcompbox = box = gui.vBox(self.controlArea, \"Model Comparison\")\n         gui.comboBox(\n-            box, self, \"comparison_criterion\", model=PyListModel(),\n+            box, self, \"comparison_criterion\",\n             callback=self.update_comparison_table)\n \n         hbox = gui.hBox(box)\n@@ -490,12 +489,14 @@ class OWTestLearners(OWWidget):\n             new_scorers = usable_scorers(self.data.domain.class_var)\n         else:\n             new_scorers = []\n-        # Don't unnecessarily reset the model because this would always reset\n-        # comparison_criterion; we alse set it explicitly, though, for clarity\n+        # Don't unnecessarily reset the combo because this would always reset\n+        # comparison_criterion; we also set it explicitly, though, for clarity\n         if new_scorers != self.scorers:\n             self.scorers = new_scorers\n-            self.controls.comparison_criterion.model()[:] = \\\n-                [scorer.long_name or scorer.name for scorer in self.scorers]\n+            combo = self.controls.comparison_criterion\n+            combo.clear()\n+            combo.addItems([scorer.long_name or scorer.name\n+                            for scorer in self.scorers])\n             self.comparison_criterion = 0\n         if self.__pending_comparison_criterion is not None:\n             # Check for the unlikely case that some scorers have been removed\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owtestlearners.py b/Orange/widgets/evaluate/tests/test_owtestlearners.py\nindex 2c7aca093..d7cb43fde 100644\n--- a/Orange/widgets/evaluate/tests/test_owtestlearners.py\n+++ b/Orange/widgets/evaluate/tests/test_owtestlearners.py\n@@ -403,7 +403,7 @@ class TestOWTestLearners(WidgetTest):\n         w = self.widget\n         control = w.controls.comparison_criterion\n         control.setCurrentText(score)\n-        w.comparison_criterion = control.model().indexOf(score)\n+        w.comparison_criterion = control.findText(score)\n \n     def _set_three_majorities(self):\n         w = self.widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4755.0, "instance_id": "biolab__orange3-4755", "issue_numbers": 0, "base_commit": "e4dcf7c47223c04d6ba7508c840d4fc788dc9dd2", "patch": "diff --git a/Orange/widgets/data/owselectrows.py b/Orange/widgets/data/owselectrows.py\nindex b54ae8a12..4022330de 100644\n--- a/Orange/widgets/data/owselectrows.py\n+++ b/Orange/widgets/data/owselectrows.py\n@@ -339,6 +339,8 @@ class OWSelectRows(widget.OWWidget):\n \n     def set_new_operators(self, attr_combo, adding_all,\n                           selected_index=None, selected_values=None):\n+        old_combo = self.cond_list.cellWidget(attr_combo.row, 1)\n+        prev_text = old_combo.currentText() if old_combo else \"\"\n         oper_combo = QComboBox()\n         oper_combo.row = attr_combo.row\n         oper_combo.attr_combo = attr_combo\n@@ -348,7 +350,11 @@ class OWSelectRows(widget.OWWidget):\n         else:\n             var = self.data.domain[attr_name]\n             oper_combo.addItems(self.operator_names[type(var)])\n-        oper_combo.setCurrentIndex(selected_index or 0)\n+        if selected_index is None:\n+            selected_index = oper_combo.findText(prev_text)\n+            if selected_index == -1:\n+                selected_index = 0\n+        oper_combo.setCurrentIndex(selected_index)\n         self.cond_list.setCellWidget(oper_combo.row, 1, oper_combo)\n         self.set_new_values(oper_combo, adding_all, selected_values)\n         oper_combo.currentIndexChanged.connect(\n@@ -789,4 +795,4 @@ class DropDownToolButton(QToolButton):\n \n \n if __name__ == \"__main__\":  # pragma: no cover\n-    WidgetPreview(OWSelectRows).run(Table(\"zoo\"))\n+    WidgetPreview(OWSelectRows).run(Table(\"heart_disease\"))\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owselectrows.py b/Orange/widgets/data/tests/test_owselectrows.py\nindex bdbee4bd9..df0d6b4d9 100644\n--- a/Orange/widgets/data/tests/test_owselectrows.py\n+++ b/Orange/widgets/data/tests/test_owselectrows.py\n@@ -315,6 +315,26 @@ class TestOWSelectRows(WidgetTest):\n         new_iris = iris.transform(new_domain)\n         self.send_signal(self.widget.Inputs.data, new_iris)\n \n+    def test_keep_operator(self):\n+        data = Table(\"heart_disease\")\n+        domain = data.domain\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+\n+        self.widget.remove_all_button.click()\n+        self.enterFilter(domain[\"age\"], \"is not\", \"42\")\n+        simulate.combobox_activate_item(\n+            self.widget.cond_list.cellWidget(0, 0), \"chest pain\", delay=0)\n+        self.assertEqual(\n+            self.widget.cond_list.cellWidget(0, 1).currentText(), \"is not\")\n+\n+        self.widget.remove_all_button.click()\n+        self.enterFilter(domain[\"age\"], \"is below\", \"42\")\n+        simulate.combobox_activate_item(\n+            self.widget.cond_list.cellWidget(0, 0), \"chest pain\", delay=0)\n+        self.assertEqual(\n+            self.widget.cond_list.cellWidget(0, 1).currentText(), \"is\")\n+\n     # Uncomment this on 2022/2/2\n     #\n     # def test_migration_to_version_1(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5147.0, "instance_id": "biolab__orange3-5147", "issue_numbers": 0, "base_commit": "80363ea12e9693bd00dd90533346866a43e8244b", "patch": "diff --git a/Orange/widgets/data/owpythonscript.py b/Orange/widgets/data/owpythonscript.py\nindex 2f9089f27..47b088792 100644\n--- a/Orange/widgets/data/owpythonscript.py\n+++ b/Orange/widgets/data/owpythonscript.py\n@@ -590,7 +590,6 @@ class OWPythonScript(OWWidget):\n         self.splitterState = bytes(self.splitCanvas.saveState())\n \n     def handle_input(self, obj, sig_id, signal):\n-        sig_id = sig_id[0]\n         dic = getattr(self, signal)\n         if obj is None:\n             if sig_id in dic.keys():\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpythonscript.py b/Orange/widgets/data/tests/test_owpythonscript.py\nindex bda77790d..6c505737e 100644\n--- a/Orange/widgets/data/tests/test_owpythonscript.py\n+++ b/Orange/widgets/data/tests/test_owpythonscript.py\n@@ -32,9 +32,9 @@ class TestOWPythonScript(WidgetTest):\n                              (\"Classifier\", self.model),\n                              (\"Object\", \"object\")):\n             self.assertEqual(getattr(self.widget, input_.lower()), {})\n-            self.send_signal(input_, data, (1,))\n+            self.send_signal(input_, data, 1)\n             self.assertEqual(getattr(self.widget, input_.lower()), {1: data})\n-            self.send_signal(input_, None, (1,))\n+            self.send_signal(input_, None, 1)\n             self.assertEqual(getattr(self.widget, input_.lower()), {})\n \n     def test_outputs(self):\n@@ -45,9 +45,9 @@ class TestOWPythonScript(WidgetTest):\n                 (\"Classifier\", self.model)):\n             lsignal = signal.lower()\n             self.widget.text.setPlainText(\"out_{0} = in_{0}\".format(lsignal))\n-            self.send_signal(signal, data, (1,))\n+            self.send_signal(signal, data, 1)\n             self.assertIs(self.get_output(signal), data)\n-            self.send_signal(signal, None, (1,))\n+            self.send_signal(signal, None, 1)\n             self.widget.text.setPlainText(\"print(in_{})\".format(lsignal))\n             self.widget.execute_button.click()\n             self.assertIsNone(self.get_output(signal))\n@@ -73,7 +73,7 @@ class TestOWPythonScript(WidgetTest):\n                 (\"Learner\", self.learner),\n                 (\"Classifier\", self.model)):\n             lsignal = signal.lower()\n-            self.send_signal(signal, data, (1, ))\n+            self.send_signal(signal, data, 1)\n             self.widget.text.setPlainText(\"out_{} = 42\".format(lsignal))\n             self.widget.execute_button.click()\n             self.assertEqual(self.get_output(signal), None)\n@@ -98,27 +98,27 @@ class TestOWPythonScript(WidgetTest):\n         self.assertIsNone(console_locals[\"in_data\"])\n         self.assertEqual(console_locals[\"in_datas\"], [])\n \n-        self.send_signal(\"Data\", self.iris, (1, ))\n+        self.send_signal(\"Data\", self.iris, 1)\n         click()\n         self.assertIs(console_locals[\"in_data\"], self.iris)\n         datas = console_locals[\"in_datas\"]\n         self.assertEqual(len(datas), 1)\n         self.assertIs(datas[0], self.iris)\n \n-        self.send_signal(\"Data\", titanic, (2, ))\n+        self.send_signal(\"Data\", titanic, 2)\n         click()\n         self.assertIsNone(console_locals[\"in_data\"])\n         self.assertEqual({id(obj) for obj in console_locals[\"in_datas\"]},\n                          {id(self.iris), id(titanic)})\n \n-        self.send_signal(\"Data\", None, (2, ))\n+        self.send_signal(\"Data\", None, 2)\n         click()\n         self.assertIs(console_locals[\"in_data\"], self.iris)\n         datas = console_locals[\"in_datas\"]\n         self.assertEqual(len(datas), 1)\n         self.assertIs(datas[0], self.iris)\n \n-        self.send_signal(\"Data\", None, (1, ))\n+        self.send_signal(\"Data\", None, 1)\n         click()\n         self.assertIsNone(console_locals[\"in_data\"])\n         self.assertEqual(console_locals[\"in_datas\"], [])\n@@ -226,7 +226,7 @@ class TestOWPythonScript(WidgetTest):\n         self.signal_manager = DummySignalManager()\n         widget3 = self.create_widget(OWPythonScript)\n \n-        self.send_signal(widget1.Inputs.data, self.iris, (1,), widget=widget1)\n+        self.send_signal(widget1.Inputs.data, self.iris, 1, widget=widget1)\n         widget1.text.setPlainText(\"x = 42\\n\"\n                                   \"out_data = in_data\\n\")\n         widget1.execute_button.click()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6668.0, "instance_id": "biolab__orange3-6668", "issue_numbers": 0, "base_commit": "ab868dc0ac145072672f61b22c8b5eff29577be9", "patch": "diff --git a/Orange/preprocess/impute.py b/Orange/preprocess/impute.py\nindex c67c4a974..21005b872 100644\n--- a/Orange/preprocess/impute.py\n+++ b/Orange/preprocess/impute.py\n@@ -172,7 +172,7 @@ class FixedValueByType(BaseImputeMethod):\n         return FixedValueByType(*self.defaults.values())\n \n \n-class ReplaceUnknownsModel(Reprable):\n+class ReplaceUnknownsModel(Transformation):\n     \"\"\"\n     Replace unknown values with predicted values using a `Orange.base.Model`\n \n@@ -185,15 +185,14 @@ class ReplaceUnknownsModel(Reprable):\n     \"\"\"\n     def __init__(self, variable, model):\n         assert model.domain.class_var == variable\n-        self.variable = variable\n+        super().__init__(variable)\n         self.model = model\n \n     def __call__(self, data):\n         if isinstance(data, Orange.data.Instance):\n             data = Orange.data.Table.from_list(data.domain, [data])\n         domain = data.domain\n-        column = data.get_column(self.variable, copy=True)\n-\n+        column = data.transform(self._target_domain).get_column(self.variable, copy=True)\n         mask = np.isnan(column)\n         if not np.any(mask):\n             return column\n@@ -207,6 +206,9 @@ class ReplaceUnknownsModel(Reprable):\n         column[mask] = predicted\n         return column\n \n+    def transform(self, c):\n+        assert False, \"abstract in Transformation, never used here\"\n+\n     def __eq__(self, other):\n         return type(self) is type(other) \\\n                and self.variable == other.variable \\\n.", "test_patch": "diff --git a/Orange/tests/test_impute.py b/Orange/tests/test_impute.py\nindex 9c6fba5b3..82d217ebe 100644\n--- a/Orange/tests/test_impute.py\n+++ b/Orange/tests/test_impute.py\n@@ -9,7 +9,7 @@ import scipy.sparse as sp\n from Orange import preprocess\n from Orange.preprocess import impute, SklImpute\n from Orange import data\n-from Orange.data import Unknown, Table\n+from Orange.data import Unknown, Table, Domain\n \n from Orange.classification import MajorityLearner, SimpleTreeLearner\n from Orange.regression import MeanLearner\n@@ -293,6 +293,27 @@ class TestModel(unittest.TestCase):\n         self.assertRaises(ValueError, imputer, data=table,\n                           variable=table.domain[0])\n \n+    def test_missing_imputed_columns(self):\n+        housing = Table(\"housing\")\n+\n+        learner = SimpleTreeLearner(min_instances=10, max_depth=10)\n+        method = preprocess.impute.Model(learner)\n+\n+        ivar = method(housing, housing.domain.attributes[0])\n+        imputed = housing.transform(\n+            Domain([ivar],\n+                   housing.domain.class_var)\n+        )\n+        removed_imputed = imputed.transform(\n+            Domain([], housing.domain.class_var))\n+\n+        r = removed_imputed.transform(imputed.domain)\n+\n+        no_class = removed_imputed.transform(Domain(removed_imputed.domain.attributes, None))\n+        model_prediction_for_unknowns = ivar.compute_value.model(no_class[0])\n+\n+        np.testing.assert_equal(r.X, model_prediction_for_unknowns)\n+\n \n class TestRandom(unittest.TestCase):\n     def test_replacement(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6575.0, "instance_id": "biolab__orange3-6575", "issue_numbers": 0, "base_commit": "3dd6d9c95706be704b694cbf3755a9be2a0562d3", "patch": "diff --git a/Orange/widgets/data/owdatasets.py b/Orange/widgets/data/owdatasets.py\nindex d46a37b12..56f7c4654 100644\n--- a/Orange/widgets/data/owdatasets.py\n+++ b/Orange/widgets/data/owdatasets.py\n@@ -408,7 +408,8 @@ class OWDataSets(OWWidget):\n             row = [item1, item2, item3, item4, item5, item6, item7]\n             model.appendRow(row)\n \n-            if os.path.join(*file_path) == self.selected_id:\n+            # for settings do not use os.path.join (Windows separator is different)\n+            if \"/\".join(file_path) == self.selected_id:\n                 current_index = i\n \n         return model, current_index\n@@ -524,7 +525,8 @@ class OWDataSets(OWWidget):\n             di = current.data(Qt.UserRole)\n             text = description_html(di)\n             self.descriptionlabel.setText(text)\n-            self.selected_id = os.path.join(di.prefix, di.filename)\n+            # for settings do not use os.path.join (Windows separator is different)\n+            self.selected_id = \"/\".join(di.file_path)\n         else:\n             self.descriptionlabel.setText(\"\")\n             self.selected_id = None\n@@ -640,6 +642,12 @@ class OWDataSets(OWWidget):\n     def load_data(path):\n         return Orange.data.Table(path)\n \n+    @classmethod\n+    def migrate_settings(cls, settings, _):\n+        # until including 3.36.0 selected dataset was saved with \\ on Windows\n+        if \"selected_id\" in settings and isinstance(settings[\"selected_id\"], str):\n+            settings[\"selected_id\"] = settings[\"selected_id\"].replace(\"\\\\\", \"/\")\n+\n \n class FutureWatcher(QObject):\n     done = Signal(object)\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owdatasets.py b/Orange/widgets/data/tests/test_owdatasets.py\nindex 90cb78ec3..fb4fab763 100644\n--- a/Orange/widgets/data/tests/test_owdatasets.py\n+++ b/Orange/widgets/data/tests/test_owdatasets.py\n@@ -96,6 +96,25 @@ class TestOWDataSets(WidgetTest):\n         # select the only dataset\n         sel_type = QItemSelectionModel.ClearAndSelect | QItemSelectionModel.Rows\n         w.view.selectionModel().select(w.view.model().index(0, 0), sel_type)\n+        self.assertEqual(w.selected_id, \"core/iris.tab\")\n+        w.commit()\n+        iris = self.get_output(w.Outputs.data, w)\n+        self.assertEqual(len(iris), 150)\n+\n+    @patch(\"Orange.widgets.data.owdatasets.list_remote\",\n+           Mock(return_value={('dir1', 'dir2', 'foo.tab'): {}}))\n+    @patch(\"Orange.widgets.data.owdatasets.list_local\",\n+           Mock(return_value={}))\n+    @patch(\"Orange.widgets.data.owdatasets.ensure_local\",\n+           Mock(return_value=\"iris.tab\"))\n+    @WidgetTest.skipNonEnglish\n+    def test_download_multidir(self):\n+        w = self.create_widget(OWDataSets)  # type: OWDataSets\n+        self.wait_until_stop_blocking(w)\n+        # select the only dataset\n+        sel_type = QItemSelectionModel.ClearAndSelect | QItemSelectionModel.Rows\n+        w.view.selectionModel().select(w.view.model().index(0, 0), sel_type)\n+        self.assertEqual(w.selected_id, \"dir1/dir2/foo.tab\")\n         w.commit()\n         iris = self.get_output(w.Outputs.data, w)\n         self.assertEqual(len(iris), 150)\n@@ -112,6 +131,23 @@ class TestOWDataSets(WidgetTest):\n         self.wait_until_stop_blocking(w)\n         self.assertEqual(w.view.model().rowCount(), 2)\n \n+    def test_migrate_selected_id(self):\n+        settings = {}\n+        OWDataSets.migrate_settings(settings, 0)\n+        self.assertNotIn(\"selected_id\", settings)\n+\n+        settings = {\"selected_id\": None}\n+        OWDataSets.migrate_settings(settings, 0)\n+        self.assertEqual(settings[\"selected_id\"], None)\n+\n+        settings = {\"selected_id\": \"dir1\\\\bar\"}\n+        OWDataSets.migrate_settings(settings, 0)\n+        self.assertEqual(settings[\"selected_id\"], \"dir1/bar\")\n+\n+        settings = {\"selected_id\": \"dir1/bar\"}\n+        OWDataSets.migrate_settings(settings, 0)\n+        self.assertEqual(settings[\"selected_id\"], \"dir1/bar\")\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5514.0, "instance_id": "biolab__orange3-5514", "issue_numbers": 0, "base_commit": "c326cea91fbba5254ecd353935dacc3f42c54090", "patch": "diff --git a/Orange/widgets/unsupervised/owhierarchicalclustering.py b/Orange/widgets/unsupervised/owhierarchicalclustering.py\nindex 6d3f87120..b55c7af91 100644\n--- a/Orange/widgets/unsupervised/owhierarchicalclustering.py\n+++ b/Orange/widgets/unsupervised/owhierarchicalclustering.py\n@@ -610,16 +610,29 @@ class OWHierarchicalClustering(widget.OWWidget):\n                 selected_data.domain = Domain(\n                     attrs, classes, metas + (clust_var, ))\n \n+            annotated_data = create_annotated_table(data, selected_indices)\n+\n         elif isinstance(items, Orange.data.Table) and self.matrix.axis == 0:\n             # Select columns\n+            attrs = []\n+            for clust, indices in chain(enumerate(maps, start=1),\n+                                        [(0, unselected_indices)]):\n+                for i in indices:\n+                    attr = items.domain[i].copy()\n+                    attr.attributes[\"cluster\"] = clust\n+                    attrs.append(attr)\n             domain = Orange.data.Domain(\n-                [items.domain[i] for i in selected_indices],\n+                # len(unselected_indices) can be 0\n+                attrs[:len(attrs) - len(unselected_indices)],\n                 items.domain.class_vars, items.domain.metas)\n             selected_data = items.from_table(domain, items)\n-            data = None\n+\n+            domain = Orange.data.Domain(\n+                attrs,\n+                items.domain.class_vars, items.domain.metas)\n+            annotated_data = items.from_table(domain, items)\n \n         self.Outputs.selected_data.send(selected_data)\n-        annotated_data = create_annotated_table(data, selected_indices)\n         self.Outputs.annotated_data.send(annotated_data)\n \n     def eventFilter(self, obj, event):\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py b/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py\nindex bfd75ed87..c3e48e4e5 100644\n--- a/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py\n+++ b/Orange/widgets/unsupervised/tests/test_owhierarchicalclustering.py\n@@ -26,6 +26,8 @@ class TestOWHierarchicalClustering(WidgetTest, WidgetOutputsTestMixin):\n         cls.signal_data = cls.distances\n         cls.same_input_output_domain = False\n \n+        cls.distances_cols = Euclidean(cls.data, axis=0)\n+\n     def setUp(self):\n         self.widget = self.create_widget(OWHierarchicalClustering)\n \n@@ -35,6 +37,11 @@ class TestOWHierarchicalClustering(WidgetTest, WidgetOutputsTestMixin):\n         self.widget.dendrogram.set_selected_items([cluster])\n         return [14, 15, 32, 33]\n \n+    def _select_data_columns(self):\n+        items = self.widget.dendrogram._items\n+        cluster = items[sorted(list(items.keys()))[5]]\n+        self.widget.dendrogram.set_selected_items([cluster])\n+\n     def _compare_selected_annotated_domains(self, selected, annotated):\n         self.assertEqual(annotated.domain.variables,\n                          selected.domain.variables)\n@@ -170,3 +177,17 @@ class TestOWHierarchicalClustering(WidgetTest, WidgetOutputsTestMixin):\n         self.send_signal(w.Inputs.distances, self.distances, widget=w)\n         ids_2 = self.get_output(w.Outputs.selected_data, widget=w).ids\n         self.assertSequenceEqual(list(ids_1), list(ids_2))\n+\n+    def test_column_distances(self):\n+        self.send_signal(self.widget.Inputs.distances, self.distances_cols)\n+        self._select_data_columns()\n+        o = self.get_output(self.widget.Outputs.annotated_data)\n+        annotated = [(a.name, a.attributes['cluster']) for a in o.domain.attributes]\n+        self.assertEqual(annotated, [('sepal width', 1), ('petal length', 1),\n+                                     ('sepal length', 0), ('petal width', 0)])\n+\n+        self.widget.selection_box.buttons[2].click()  # top N\n+        o = self.get_output(self.widget.Outputs.annotated_data)\n+        annotated = [(a.name, a.attributes['cluster']) for a in o.domain.attributes]\n+        self.assertEqual(annotated, [('sepal length', 1), ('petal width', 2),\n+                                     ('sepal width', 3), ('petal length', 3)])\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4993.0, "instance_id": "biolab__orange3-4993", "issue_numbers": 0, "base_commit": "59beb38ef69867065d2f3b7296b18f66b4405bde", "patch": "diff --git a/Orange/widgets/evaluate/owtestandscore.py b/Orange/widgets/evaluate/owtestandscore.py\nindex 3d5e6c8d9..771025a0f 100644\n--- a/Orange/widgets/evaluate/owtestandscore.py\n+++ b/Orange/widgets/evaluate/owtestandscore.py\n@@ -169,7 +169,7 @@ class OWTestAndScore(OWWidget):\n     #: Selected resampling type\n     resampling = settings.Setting(0)\n     #: Number of folds for K-fold cross validation\n-    n_folds = settings.Setting(3)\n+    n_folds = settings.Setting(2)\n     #: Stratified sampling for K-fold\n     cv_stratified = settings.Setting(True)\n     #: Number of repeats for ShuffleSplit sampling\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owtestandscore.py b/Orange/widgets/evaluate/tests/test_owtestandscore.py\nindex 871056071..84a6f09b3 100644\n--- a/Orange/widgets/evaluate/tests/test_owtestandscore.py\n+++ b/Orange/widgets/evaluate/tests/test_owtestandscore.py\n@@ -554,7 +554,7 @@ class TestOWTestAndScore(WidgetTest):\n             scores = w._scores_by_folds(slots)\n             self.assertIsNone(scores[0])\n             self.assertEqual(scores[1][0], 1)\n-            self.assertAlmostEqual(scores[2][0], 1 / 11)\n+            self.assertAlmostEqual(scores[2][0], 1 / 6)\n \n     def test_comparison_binary_score(self):\n         # false warning at call_arg.kwargs\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6389.0, "instance_id": "biolab__orange3-6389", "issue_numbers": 0, "base_commit": "f592685eacf866437d6538083a2514219b2a4f0c", "patch": "diff --git a/Orange/widgets/data/owmergedata.py b/Orange/widgets/data/owmergedata.py\nindex cb82d8fef..fb48e5abc 100644\n--- a/Orange/widgets/data/owmergedata.py\n+++ b/Orange/widgets/data/owmergedata.py\n@@ -294,6 +294,11 @@ class OWMergeData(widget.OWWidget):\n     class Warning(widget.OWWidget.Warning):\n         renamed_vars = Msg(\"Some variables have been renamed \"\n                            \"to avoid duplicates.\\n{}\")\n+        nonunique_right = Msg(\n+            \"Some combinations of values on the right appear in multiple rows.\"\n+            \"\\n\"\n+            \"Merge is possible, though, because these combinations do not \"\n+            \"appear on the left.\")\n \n     class Error(widget.OWWidget.Error):\n         matching_numeric_with_nonnum = Msg(\n@@ -443,14 +448,33 @@ class OWMergeData(widget.OWWidget):\n     def _check_uniqueness(self, left, left_mask, right, right_mask):\n         ok = True\n         masked_right = right[right_mask]\n-        if len(set(map(tuple, masked_right))) != len(masked_right):\n-            self.Error.nonunique_right()\n-            ok = False\n-        if self.merging != self.LeftJoin:\n+        right_set = set(map(tuple, masked_right))\n+        if self.merging == self.LeftJoin:\n+            # Left join requires that used elements on the right are unique\n+            # It also detect non-unique unused elements and warns about them\n+            # to alert the user about the possible future problems when using\n+            # this table in merge\n+            if len(right_set) != len(masked_right):\n+                # In the sum, repeated elements from masked_right are counted\n+                # multiple time; in intersection, they're counted once\n+                masked_left = left[left_mask]\n+                left_set = set(map(tuple, masked_left))\n+                if sum(tuple(mr) in left_set for mr in masked_right) \\\n+                        == len(right_set & left_set):\n+                    self.Warning.nonunique_right()\n+                else:\n+                    self.Error.nonunique_right()\n+                    ok = False\n+        else:\n+            # Other two joins require unique elements on left and right\n             masked_left = left[left_mask]\n-            if len(set(map(tuple, masked_left))) != len(masked_left):\n+            left_set = set(map(tuple, masked_left))\n+            if len(left_set) != len(masked_left):\n                 self.Error.nonunique_left()\n                 ok = False\n+            if len(right_set) != len(masked_right):\n+                self.Error.nonunique_right()\n+                ok = False\n         return ok\n \n     def _compute_reduced_extra_data(self,\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owmergedata.py b/Orange/widgets/data/tests/test_owmergedata.py\nindex 794e16c81..a2eac294d 100644\n--- a/Orange/widgets/data/tests/test_owmergedata.py\n+++ b/Orange/widgets/data/tests/test_owmergedata.py\n@@ -838,29 +838,34 @@ class TestOWMergeData(WidgetTest):\n \n         self.assertFalse(widget.Error.nonunique_left.is_shown())\n         self.assertFalse(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n \n         widget.attr_boxes.set_state([(INSTANCEID, INSTANCEID)])\n         widget.commit.now()\n         self.assertFalse(widget.Error.nonunique_left.is_shown())\n         self.assertFalse(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n         self.assertIsNotNone(self.get_output(widget.Outputs.data))\n \n         widget.attr_boxes.set_state([(INDEX, INDEX)])\n         widget.commit.now()\n         self.assertFalse(widget.Error.nonunique_left.is_shown())\n         self.assertFalse(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n         self.assertIsNotNone(self.get_output(widget.Outputs.data))\n \n         widget.attr_boxes.set_state([(x, x)])\n         widget.commit.now()\n         self.assertTrue(widget.Error.nonunique_left.is_shown())\n         self.assertFalse(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n         self.assertIsNone(self.get_output(widget.Outputs.data))\n \n         widget.merging = widget.LeftJoin\n         widget.commit.now()\n         self.assertFalse(widget.Error.nonunique_left.is_shown())\n         self.assertFalse(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n         self.assertIsNotNone(self.get_output(widget.Outputs.data))\n \n         widget.merging = widget.InnerJoin\n@@ -868,30 +873,80 @@ class TestOWMergeData(WidgetTest):\n         widget.commit.now()\n         self.assertFalse(widget.Error.nonunique_left.is_shown())\n         self.assertFalse(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n         self.assertIsNotNone(self.get_output(widget.Outputs.data))\n \n         widget.attr_boxes.set_state([(d, d)])\n         widget.commit.now()\n         self.assertTrue(widget.Error.nonunique_left.is_shown())\n         self.assertTrue(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n         self.assertIsNone(self.get_output(widget.Outputs.data))\n \n         widget.merging = widget.LeftJoin\n         widget.commit.now()\n         self.assertFalse(widget.Error.nonunique_left.is_shown())\n         self.assertTrue(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n         self.assertIsNone(self.get_output(widget.Outputs.data))\n \n         widget.merging = widget.InnerJoin\n         widget.commit.now()\n         self.assertTrue(widget.Error.nonunique_left.is_shown())\n         self.assertTrue(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n         self.assertIsNone(self.get_output(widget.Outputs.data))\n \n         self.send_signal(widget.Inputs.data, None)\n         self.send_signal(widget.Inputs.extra_data, None)\n         self.assertFalse(widget.Error.nonunique_left.is_shown())\n         self.assertFalse(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n+        self.assertIsNone(self.get_output(widget.Outputs.data))\n+\n+    def test_nonunique_warning(self):\n+        widget = self.widget\n+        x = ContinuousVariable(\"x\")\n+        d = DiscreteVariable(\"d\", values=tuple(\"abc\"))\n+        domain = Domain([x, d], [])\n+        dataA = Table.from_numpy(\n+            domain, np.array([[1.0, 0], [2, 1]]))\n+        dataB = Table.from_numpy(\n+            domain, np.array([[1.0, 0], [2, 1], [3, 1], [3, 1]]))\n+        dataB.ids = dataA.ids\n+\n+\n+        self.send_signal(widget.Inputs.data, dataA)\n+        self.send_signal(widget.Inputs.extra_data, dataB)\n+        widget.attr_boxes.set_state([(x, x)])\n+\n+        widget.merging = widget.LeftJoin\n+        widget.commit.now()\n+        self.assertFalse(widget.Error.nonunique_left.is_shown())\n+        self.assertFalse(widget.Error.nonunique_right.is_shown())\n+        self.assertTrue(widget.Warning.nonunique_right.is_shown())\n+        self.assertIsNotNone(self.get_output(widget.Outputs.data))\n+\n+        widget.merging = widget.InnerJoin\n+        widget.commit.now()\n+        self.assertFalse(widget.Error.nonunique_left.is_shown())\n+        self.assertTrue(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n+        self.assertIsNone(self.get_output(widget.Outputs.data))\n+\n+        widget.merging = widget.OuterJoin\n+        widget.attr_boxes.set_state([(x, x), (d, d)])\n+        widget.commit.now()\n+        self.assertFalse(widget.Error.nonunique_left.is_shown())\n+        self.assertTrue(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n+        self.assertIsNone(self.get_output(widget.Outputs.data))\n+\n+        self.send_signal(widget.Inputs.data, None)\n+        self.send_signal(widget.Inputs.extra_data, None)\n+        self.assertFalse(widget.Error.nonunique_left.is_shown())\n+        self.assertFalse(widget.Error.nonunique_right.is_shown())\n+        self.assertFalse(widget.Warning.nonunique_right.is_shown())\n         self.assertIsNone(self.get_output(widget.Outputs.data))\n \n     def test_invalide_pairs(self):\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6288.0, "instance_id": "biolab__orange3-6288", "issue_numbers": 0, "base_commit": "d56940c3b88e791c18663a2967daae2c281efe0e", "patch": "diff --git a/Orange/widgets/unsupervised/owsom.py b/Orange/widgets/unsupervised/owsom.py\nindex 8448e4e8c..5712a70ae 100644\n--- a/Orange/widgets/unsupervised/owsom.py\n+++ b/Orange/widgets/unsupervised/owsom.py\n@@ -220,7 +220,7 @@ class OWSOM(OWWidget):\n \n     class Error(OWWidget.Error):\n         no_numeric_variables = Msg(\"Data contains no numeric columns.\")\n-        no_defined_rows = Msg(\"All rows contain at least one undefined value.\")\n+        not_enough_data = Msg(\"SOM needs at least two data rows without missing values.\")\n \n     def __init__(self):\n         super().__init__()\n@@ -318,8 +318,8 @@ class OWSOM(OWWidget):\n                 self.cont_x = x.tocsr()\n             else:\n                 mask = np.all(np.isfinite(x), axis=1)\n-                if not np.any(mask):\n-                    self.Error.no_defined_rows()\n+                if np.sum(mask) <= 1:\n+                    self.Error.not_enough_data()\n                 else:\n                     if np.all(mask):\n                         self.data = data\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owsom.py b/Orange/widgets/unsupervised/tests/test_owsom.py\nindex 3ed81d00e..8cbab3a6a 100644\n--- a/Orange/widgets/unsupervised/tests/test_owsom.py\n+++ b/Orange/widgets/unsupervised/tests/test_owsom.py\n@@ -86,7 +86,7 @@ class TestOWSOM(WidgetTest):\n                 self.iris.X[i, i % 4] = np.nan\n \n         self.send_signal(widget.Inputs.data, self.iris)\n-        self.assertTrue(widget.Error.no_defined_rows.is_shown())\n+        self.assertTrue(widget.Error.not_enough_data.is_shown())\n         self.assertFalse(widget.Warning.ignoring_disc_variables.is_shown())\n         self.assertIsNone(widget.data)\n         self.assertIsNone(widget.cont_x)\n@@ -100,7 +100,7 @@ class TestOWSOM(WidgetTest):\n             self.iris.X[:50, 0] = np.nan\n \n         self.send_signal(widget.Inputs.data, self.iris)\n-        self.assertFalse(widget.Error.no_defined_rows.is_shown())\n+        self.assertFalse(widget.Error.not_enough_data.is_shown())\n         self.assertTrue(widget.Warning.missing_values.is_shown())\n         np.testing.assert_almost_equal(\n             widget.data.Y.flatten(), [1] * 50 + [2] * 50)\n@@ -115,12 +115,32 @@ class TestOWSOM(WidgetTest):\n             self.iris.X[5, 0] = np.nan\n \n         self.send_signal(widget.Inputs.data, self.iris)\n-        self.assertFalse(widget.Error.no_defined_rows.is_shown())\n+        self.assertFalse(widget.Error.not_enough_data.is_shown())\n         self.assertTrue(widget.Warning.missing_values.is_shown())\n \n         self.send_signal(widget.Inputs.data, None)\n         self.assertFalse(widget.Warning.missing_values.is_shown())\n \n+    @_patch_recompute_som\n+    def test_single_row_data(self):\n+        widget = self.widget\n+        with self.iris.unlocked():\n+            self.iris.X[:-1] = np.nan\n+\n+        self.send_signal(widget.Inputs.data, self.iris)\n+        self.assertTrue(widget.Error.not_enough_data.is_shown())\n+\n+        self.send_signal(widget.Inputs.data, Table(\"heart_disease\"))\n+        self.assertFalse(widget.Error.not_enough_data.is_shown())\n+        self.assertTrue(widget.Warning.ignoring_disc_variables.is_shown())\n+\n+        self.send_signal(widget.Inputs.data, self.iris)\n+        self.assertTrue(widget.Error.not_enough_data.is_shown())\n+        self.assertFalse(widget.Warning.ignoring_disc_variables.is_shown())\n+\n+        self.send_signal(widget.Inputs.data, None)\n+        self.assertFalse(widget.Error.not_enough_data.is_shown())\n+\n     @_patch_recompute_som\n     def test_sparse_data(self):\n         widget = self.widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5847.0, "instance_id": "biolab__orange3-5847", "issue_numbers": 0, "base_commit": "b0fbaa11536e6f13d44157fda82e801cd56663db", "patch": "diff --git a/Orange/widgets/visualize/ownomogram.py b/Orange/widgets/visualize/ownomogram.py\nindex d41d9ea0a..c1c24b600 100644\n--- a/Orange/widgets/visualize/ownomogram.py\n+++ b/Orange/widgets/visualize/ownomogram.py\n@@ -910,8 +910,7 @@ class OWNomogram(OWWidget):\n         if not isinstance(self.classifier, LogisticRegressionClassifier):\n             return\n \n-        self.domain = self.reconstruct_domain(self.classifier.original_domain,\n-                                              self.domain)\n+        self.domain = self.reconstruct_domain(self.classifier, self.domain)\n         self.data = self.classifier.original_data.transform(self.domain)\n         attrs, ranges, start = self.domain.attributes, [], 0\n         for attr in attrs:\n@@ -1273,8 +1272,9 @@ class OWNomogram(OWWidget):\n         self.report_plot()\n \n     @staticmethod\n-    def reconstruct_domain(original, preprocessed):\n+    def reconstruct_domain(classifier: Model, preprocessed: Domain) -> Domain:\n         # abuse dict to make \"in\" comparisons faster\n+        original = classifier.original_domain\n         attrs = OrderedDict()\n         for attr in preprocessed.attributes:\n             cv = attr._compute_value.variable._compute_value\n@@ -1284,7 +1284,13 @@ class OWNomogram(OWWidget):\n                 continue\n             attrs[var] = None   # we only need keys\n         attrs = list(attrs.keys())\n-        return Domain(attrs, original.class_var, original.metas)\n+\n+        orig_clv = original.class_var\n+        orig_data = classifier.original_data\n+        values = (orig_clv.values[int(i)] for i in\n+                  np.unique(orig_data.get_column_view(orig_clv)[0]))\n+        class_var = DiscreteVariable(original.class_var.name, values)\n+        return Domain(attrs, class_var, original.metas)\n \n     @staticmethod\n     def get_ruler_values(start, stop, max_width, round_to_nearest=True):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_ownomogram.py b/Orange/widgets/visualize/tests/test_ownomogram.py\nindex 538dfb0e5..87bb0e07c 100644\n--- a/Orange/widgets/visualize/tests/test_ownomogram.py\n+++ b/Orange/widgets/visualize/tests/test_ownomogram.py\n@@ -14,6 +14,7 @@ from Orange.classification import (\n from Orange.preprocess import Scale, Continuize\n from Orange.tests import test_filename\n from Orange.widgets.tests.base import WidgetTest\n+from Orange.widgets.tests.utils import simulate\n from Orange.widgets.visualize.ownomogram import (\n     OWNomogram, DiscreteFeatureItem, ContinuousFeatureItem, ProbabilitiesDotItem,\n     MovableToolTip\n@@ -293,25 +294,52 @@ class TestOWNomogram(WidgetTest):\n     def test_reconstruct_domain(self):\n         data = Table(\"heart_disease\")\n         cls = LogisticRegressionLearner()(data)\n-        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        domain = OWNomogram.reconstruct_domain(cls, cls.domain)\n         transformed_data = cls.original_data.transform(domain)\n         self.assertEqual(transformed_data.X.shape, data.X.shape)\n         self.assertFalse(np.isnan(transformed_data.X[0]).any())\n \n         scaled_data = Scale()(data)\n         cls = LogisticRegressionLearner()(scaled_data)\n-        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        domain = OWNomogram.reconstruct_domain(cls, cls.domain)\n         transformed_data = cls.original_data.transform(domain)\n         self.assertEqual(transformed_data.X.shape, scaled_data.X.shape)\n         self.assertFalse(np.isnan(transformed_data.X[0]).any())\n \n         disc_data = Continuize()(data)\n         cls = LogisticRegressionLearner()(disc_data)\n-        domain = OWNomogram.reconstruct_domain(cls.original_domain, cls.domain)\n+        domain = OWNomogram.reconstruct_domain(cls, cls.domain)\n         transformed_data = cls.original_data.transform(domain)\n         self.assertEqual(transformed_data.X.shape, disc_data.X.shape)\n         self.assertFalse(np.isnan(transformed_data.X[0]).any())\n \n+    def test_missing_class_value(self):\n+        iris = Table(\"iris\")\n+        iris_set_ver = iris[:100]\n+        target_cb = self.widget.controls.target_class_index\n+\n+        lr = LogisticRegressionLearner()(iris)\n+        self.send_signal(self.widget.Inputs.classifier, lr)\n+        simulate.combobox_activate_index(target_cb, 2)\n+        self.assertEqual(target_cb.currentIndex(), 2)\n+        self.assertEqual(target_cb.count(), 3)\n+\n+        lr = LogisticRegressionLearner()(iris_set_ver)\n+        self.send_signal(self.widget.Inputs.classifier, lr)\n+        self.assertEqual(target_cb.currentIndex(), 0)\n+        self.assertEqual(target_cb.count(), 2)\n+\n+        nb = NaiveBayesLearner()(iris)\n+        self.send_signal(self.widget.Inputs.classifier, nb)\n+        simulate.combobox_activate_index(target_cb, 2)\n+        self.assertEqual(target_cb.currentIndex(), 2)\n+        self.assertEqual(target_cb.count(), 3)\n+\n+        nb = NaiveBayesLearner()(iris_set_ver)\n+        self.send_signal(self.widget.Inputs.classifier, nb)\n+        self.assertEqual(target_cb.currentIndex(), 2)\n+        self.assertEqual(target_cb.count(), 3)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5193.0, "instance_id": "biolab__orange3-5193", "issue_numbers": 0, "base_commit": "b8d3d676f506f1c49e09028e4e38ef99ffebf9a8", "patch": "diff --git a/Orange/widgets/data/owpivot.py b/Orange/widgets/data/owpivot.py\nindex f35b19ab2..1cee51a3e 100644\n--- a/Orange/widgets/data/owpivot.py\n+++ b/Orange/widgets/data/owpivot.py\n@@ -612,8 +612,11 @@ class PivotTableView(QTableView):\n             self.table_model.setItem(i + 1, 1, item)\n \n     def _set_values(self, table):\n+        attrs = table.domain.attributes\n         for i, j in product(range(len(table)), range(len(table[0]))):\n-            item = self._create_value_item(str(table.X[i, j]))\n+            # data is read faster when reading directly from table.X\n+            value = table.X[i, j] if attrs[j].is_continuous else table[i, j]\n+            item = self._create_value_item(str(value))\n             self.table_model.setItem(i + self._n_leading_rows,\n                                      j + self._n_leading_cols, item)\n \n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owpivot.py b/Orange/widgets/data/tests/test_owpivot.py\nindex 4d12d05eb..9864158a9 100644\n--- a/Orange/widgets/data/tests/test_owpivot.py\n+++ b/Orange/widgets/data/tests/test_owpivot.py\n@@ -283,6 +283,25 @@ class TestOWPivot(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, None)\n         self.assertFalse(self.widget.Warning.too_many_values.is_shown())\n \n+    def test_table_values(self):\n+        self.send_signal(self.widget.Inputs.data, self.heart_disease)\n+        domain = self.heart_disease.domain\n+        self.agg_checkboxes[Pivot.Functions.Majority.value].click()\n+        simulate.combobox_activate_item(self.widget.controls.col_feature,\n+                                        domain[\"gender\"].name)\n+        simulate.combobox_activate_item(self.widget.controls.val_feature,\n+                                        domain[\"thal\"].name)\n+\n+        model = self.widget.table_view.model()\n+        self.assertEqual(model.data(model.index(2, 3)), \"72.0\")\n+        self.assertEqual(model.data(model.index(3, 3)), \"normal\")\n+        self.assertEqual(model.data(model.index(4, 3)), \"25.0\")\n+        self.assertEqual(model.data(model.index(5, 3)), \"reversable defect\")\n+        self.assertEqual(model.data(model.index(2, 4)), \"92.0\")\n+        self.assertEqual(model.data(model.index(3, 4)), \"normal\")\n+        self.assertEqual(model.data(model.index(4, 4)), \"114.0\")\n+        self.assertEqual(model.data(model.index(5, 4)), \"reversable defect\")\n+\n \n class TestAggregationFunctionsEnum(unittest.TestCase):\n     def test_pickle(self):\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5281.0, "instance_id": "biolab__orange3-5281", "issue_numbers": 0, "base_commit": "bc1b1231f1092a0ea142b257dd1a65be8baf54be", "patch": "diff --git a/Orange/widgets/evaluate/owtestandscore.py b/Orange/widgets/evaluate/owtestandscore.py\nindex 304fbe31a..19324af82 100644\n--- a/Orange/widgets/evaluate/owtestandscore.py\n+++ b/Orange/widgets/evaluate/owtestandscore.py\n@@ -207,12 +207,16 @@ class OWTestAndScore(OWWidget):\n         scores_not_computed = Msg(\"Some scores could not be computed.\")\n         test_data_unused = Msg(\"Test data is present but unused. \"\n                                \"Select 'Test on test data' to use it.\")\n+        cant_stratify = \\\n+            Msg(\"Can't run stratified {}-fold cross validation; \"\n+                \"the least common class has only {} instances.\")\n \n     class Information(OWWidget.Information):\n         data_sampled = Msg(\"Train data has been sampled\")\n         test_data_sampled = Msg(\"Test data has been sampled\")\n         test_data_transformed = Msg(\n             \"Test data has been transformed to match the train data.\")\n+        cant_stratify_numeric = Msg(\"Stratification is ignored for regression\")\n \n     def __init__(self):\n         super().__init__()\n@@ -921,6 +925,8 @@ class OWTestAndScore(OWWidget):\n         self.Warning.test_data_unused.clear()\n         self.Error.test_data_incompatible.clear()\n         self.Warning.test_data_missing.clear()\n+        self.Warning.cant_stratify.clear()\n+        self.Information.cant_stratify_numeric.clear()\n         self.Information.test_data_transformed(\n             shown=self.resampling == self.TestOnTest\n             and self.data is not None\n@@ -931,7 +937,7 @@ class OWTestAndScore(OWWidget):\n         self.Error.too_many_folds.clear()\n         self.error()\n \n-        # check preconditions and return early\n+        # check preconditions and return early or show warnings\n         if self.data is None:\n             self.__state = State.Waiting\n             self.commit()\n@@ -940,12 +946,24 @@ class OWTestAndScore(OWWidget):\n             self.__state = State.Waiting\n             self.commit()\n             return\n-        if self.resampling == OWTestAndScore.KFold and \\\n-                len(self.data) < self.NFolds[self.n_folds]:\n-            self.Error.too_many_folds()\n-            self.__state = State.Waiting\n-            self.commit()\n-            return\n+        if self.resampling == OWTestAndScore.KFold:\n+            k = self.NFolds[self.n_folds]\n+            if len(self.data) < k:\n+                self.Error.too_many_folds()\n+                self.__state = State.Waiting\n+                self.commit()\n+                return\n+            do_stratify = self.cv_stratified\n+            if do_stratify:\n+                if self.data.domain.class_var.is_discrete:\n+                    least = min(filter(None,\n+                                       np.bincount(self.data.Y.astype(int))))\n+                    if least < k:\n+                        self.Warning.cant_stratify(k, least)\n+                        do_stratify = False\n+                else:\n+                    self.Information.cant_stratify_numeric()\n+                    do_stratify = False\n \n         elif self.resampling == OWTestAndScore.TestOnTest:\n             if self.test_data is None:\n@@ -985,7 +1003,8 @@ class OWTestAndScore(OWWidget):\n             if self.resampling == OWTestAndScore.KFold:\n                 sampler = Orange.evaluation.CrossValidation(\n                     k=self.NFolds[self.n_folds],\n-                    random_state=rstate)\n+                    random_state=rstate,\n+                    stratified=do_stratify)\n             elif self.resampling == OWTestAndScore.FeatureFold:\n                 sampler = Orange.evaluation.CrossValidationFeature(\n                     feature=self.fold_feature)\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owtestandscore.py b/Orange/widgets/evaluate/tests/test_owtestandscore.py\nindex 6155670a3..58473208a 100644\n--- a/Orange/widgets/evaluate/tests/test_owtestandscore.py\n+++ b/Orange/widgets/evaluate/tests/test_owtestandscore.py\n@@ -422,6 +422,52 @@ class TestOWTestAndScore(WidgetTest):\n                     OWTestAndScore.KFold, 0),\n                 (0.8, 0.5, 0.5, 0.5, 0.5))))\n \n+    def test_no_stratification(self):\n+        w = self.widget\n+        w.cv_stratified = True\n+        self._test_scores(\n+            Table(\"zoo\"), None, MajorityLearner(),\n+            OWTestAndScore.KFold, 2)\n+        self.assertTrue(w.Warning.cant_stratify.is_shown())\n+\n+        w.controls.cv_stratified.click()\n+        self.assertFalse(w.Warning.cant_stratify.is_shown())\n+\n+        w.controls.cv_stratified.click()\n+        self.assertTrue(w.Warning.cant_stratify.is_shown())\n+\n+        w.controls.n_folds.setCurrentIndex(0)\n+        w.controls.n_folds.activated[int].emit(0)\n+        self.assertFalse(w.Warning.cant_stratify.is_shown())\n+\n+        w.controls.n_folds.setCurrentIndex(2)\n+        w.controls.n_folds.activated[int].emit(2)\n+        self.assertTrue(w.Warning.cant_stratify.is_shown())\n+\n+        self._test_scores(\n+            Table(\"iris\"), None, MajorityLearner(), OWTestAndScore.KFold, 2)\n+        self.assertFalse(w.Warning.cant_stratify.is_shown())\n+\n+        self._test_scores(\n+            Table(\"zoo\"), None, MajorityLearner(), OWTestAndScore.KFold, 2)\n+        self.assertTrue(w.Warning.cant_stratify.is_shown())\n+\n+        self._test_scores(\n+            Table(\"housing\"), None, MeanLearner(), OWTestAndScore.KFold, 2)\n+        self.assertFalse(w.Warning.cant_stratify.is_shown())\n+        self.assertTrue(w.Information.cant_stratify_numeric.is_shown())\n+\n+        w.controls.cv_stratified.click()\n+        self.assertFalse(w.Warning.cant_stratify.is_shown())\n+\n+    def test_too_many_folds(self):\n+        w = self.widget\n+        w.controls.resampling.buttons[OWTestAndScore.KFold].click()\n+        w.n_folds = 3\n+        self.send_signal(w.Inputs.train_data, Table(\"zoo\")[:8])\n+        self.send_signal(w.Inputs.learner, MajorityLearner(), 0, wait=5000)\n+        self.assertTrue(w.Error.too_many_folds.is_shown())\n+\n     def test_no_pregressbar_warning(self):\n         data = Table(\"iris\")[::15]\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6917.0, "instance_id": "biolab__orange3-6917", "issue_numbers": 0, "base_commit": "9497b3943e7c4975fd99a8dc394d44b9c64fa2c8", "patch": "diff --git a/Orange/widgets/model/owcalibratedlearner.py b/Orange/widgets/model/owcalibratedlearner.py\nindex 7b4009573..8723015ca 100644\n--- a/Orange/widgets/model/owcalibratedlearner.py\n+++ b/Orange/widgets/model/owcalibratedlearner.py\n@@ -1,3 +1,5 @@\n+import copy\n+\n from Orange.classification import CalibratedLearner, ThresholdLearner, \\\n     NaiveBayesLearner\n from Orange.data import Table\n@@ -65,7 +67,6 @@ class OWCalibratedLearner(OWBaseLearner):\n         self.learner = self.model = None\n \n     def _set_default_name(self):\n-\n         if self.base_learner is None:\n             self.set_default_learner_name(\"\")\n         else:\n@@ -80,10 +81,6 @@ class OWCalibratedLearner(OWBaseLearner):\n         self.apply()\n \n     def create_learner(self):\n-        class IdentityWrapper(Learner):\n-            def fit_storage(self, data):\n-                return self.base_learner.fit_storage(data)\n-\n         if self.base_learner is None:\n             return None\n         learner = self.base_learner\n@@ -93,10 +90,11 @@ class OWCalibratedLearner(OWBaseLearner):\n         if self.threshold != self.NoThresholdOptimization:\n             learner = ThresholdLearner(learner,\n                                        self.ThresholdMap[self.threshold])\n+        if learner is self.base_learner:\n+            learner = copy.deepcopy(learner)\n         if self.preprocessors:\n-            if learner is self.base_learner:\n-                learner = IdentityWrapper()\n             learner.preprocessors = (self.preprocessors, )\n+        assert learner is not self.base_learner\n         return learner\n \n     def get_learner_parameters(self):\n.", "test_patch": "diff --git a/Orange/widgets/model/tests/test_owcalibratedlearner.py b/Orange/widgets/model/tests/test_owcalibratedlearner.py\nindex 27dcf378b..2058d73db 100644\n--- a/Orange/widgets/model/tests/test_owcalibratedlearner.py\n+++ b/Orange/widgets/model/tests/test_owcalibratedlearner.py\n@@ -95,7 +95,7 @@ class TestOWCalibratedLearner(WidgetTest, WidgetLearnerTestMixin):\n         widget.calibration = widget.NoCalibration\n         widget.threshold = widget.NoThresholdOptimization\n         learner = self.widget.create_learner()\n-        self.assertIs(learner, self.widget.base_learner)\n+        self.assertIsNot(learner, self.widget.base_learner)\n \n         widget.calibration = widget.SigmoidCalibration\n         widget.threshold = widget.OptimizeF1\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5408.0, "instance_id": "biolab__orange3-5408", "issue_numbers": 0, "base_commit": "9f5fd7b7d5473581c0204958796dc56b7f1c54ef", "patch": "diff --git a/Orange/widgets/visualize/owlineplot.py b/Orange/widgets/visualize/owlineplot.py\nindex bce51e2b4..0a013584c 100644\n--- a/Orange/widgets/visualize/owlineplot.py\n+++ b/Orange/widgets/visualize/owlineplot.py\n@@ -802,7 +802,7 @@ class OWLinePlot(OWWidget):\n \n     def plot_groups(self):\n         self._remove_groups()\n-        data = self.data[self.valid_data, self.graph_variables]\n+        data = self.data[self.valid_data][:, self.graph_variables]\n         if self.group_var is None:\n             self._plot_group(data, np.where(self.valid_data)[0])\n         else:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owlineplot.py b/Orange/widgets/visualize/tests/test_owlineplot.py\nindex e82a223ea..8260a1f04 100644\n--- a/Orange/widgets/visualize/tests/test_owlineplot.py\n+++ b/Orange/widgets/visualize/tests/test_owlineplot.py\n@@ -232,6 +232,14 @@ class TestOWLinePLot(WidgetTest, WidgetOutputsTestMixin):\n         self.assertEqual(p, 2)\n         self.assertFalse(self.widget.graph.legend.isVisible())\n \n+    def test_group_var_none_single_instance(self):\n+        self.send_signal(self.widget.Inputs.data, self.housing[:1])\n+        m, n, p = self.widget.graph.view_box._profile_items.shape\n+        self.assertEqual(m, len(self.housing.domain.attributes))\n+        self.assertEqual(n, 1)\n+        self.assertEqual(p, 2)\n+        self.assertFalse(self.widget.graph.legend.isVisible())\n+\n     def test_datasets(self):\n         for ds in datasets.datasets():\n             self.send_signal(self.widget.Inputs.data, ds)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5281.0, "instance_id": "biolab__orange3-5281", "issue_numbers": 0, "base_commit": "50345c21370a136f170c17c130677137c98600bf", "patch": "diff --git a/Orange/widgets/evaluate/owtestandscore.py b/Orange/widgets/evaluate/owtestandscore.py\nindex 304fbe31a..19324af82 100644\n--- a/Orange/widgets/evaluate/owtestandscore.py\n+++ b/Orange/widgets/evaluate/owtestandscore.py\n@@ -207,12 +207,16 @@ class OWTestAndScore(OWWidget):\n         scores_not_computed = Msg(\"Some scores could not be computed.\")\n         test_data_unused = Msg(\"Test data is present but unused. \"\n                                \"Select 'Test on test data' to use it.\")\n+        cant_stratify = \\\n+            Msg(\"Can't run stratified {}-fold cross validation; \"\n+                \"the least common class has only {} instances.\")\n \n     class Information(OWWidget.Information):\n         data_sampled = Msg(\"Train data has been sampled\")\n         test_data_sampled = Msg(\"Test data has been sampled\")\n         test_data_transformed = Msg(\n             \"Test data has been transformed to match the train data.\")\n+        cant_stratify_numeric = Msg(\"Stratification is ignored for regression\")\n \n     def __init__(self):\n         super().__init__()\n@@ -921,6 +925,8 @@ class OWTestAndScore(OWWidget):\n         self.Warning.test_data_unused.clear()\n         self.Error.test_data_incompatible.clear()\n         self.Warning.test_data_missing.clear()\n+        self.Warning.cant_stratify.clear()\n+        self.Information.cant_stratify_numeric.clear()\n         self.Information.test_data_transformed(\n             shown=self.resampling == self.TestOnTest\n             and self.data is not None\n@@ -931,7 +937,7 @@ class OWTestAndScore(OWWidget):\n         self.Error.too_many_folds.clear()\n         self.error()\n \n-        # check preconditions and return early\n+        # check preconditions and return early or show warnings\n         if self.data is None:\n             self.__state = State.Waiting\n             self.commit()\n@@ -940,12 +946,24 @@ class OWTestAndScore(OWWidget):\n             self.__state = State.Waiting\n             self.commit()\n             return\n-        if self.resampling == OWTestAndScore.KFold and \\\n-                len(self.data) < self.NFolds[self.n_folds]:\n-            self.Error.too_many_folds()\n-            self.__state = State.Waiting\n-            self.commit()\n-            return\n+        if self.resampling == OWTestAndScore.KFold:\n+            k = self.NFolds[self.n_folds]\n+            if len(self.data) < k:\n+                self.Error.too_many_folds()\n+                self.__state = State.Waiting\n+                self.commit()\n+                return\n+            do_stratify = self.cv_stratified\n+            if do_stratify:\n+                if self.data.domain.class_var.is_discrete:\n+                    least = min(filter(None,\n+                                       np.bincount(self.data.Y.astype(int))))\n+                    if least < k:\n+                        self.Warning.cant_stratify(k, least)\n+                        do_stratify = False\n+                else:\n+                    self.Information.cant_stratify_numeric()\n+                    do_stratify = False\n \n         elif self.resampling == OWTestAndScore.TestOnTest:\n             if self.test_data is None:\n@@ -985,7 +1003,8 @@ class OWTestAndScore(OWWidget):\n             if self.resampling == OWTestAndScore.KFold:\n                 sampler = Orange.evaluation.CrossValidation(\n                     k=self.NFolds[self.n_folds],\n-                    random_state=rstate)\n+                    random_state=rstate,\n+                    stratified=do_stratify)\n             elif self.resampling == OWTestAndScore.FeatureFold:\n                 sampler = Orange.evaluation.CrossValidationFeature(\n                     feature=self.fold_feature)\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owtestandscore.py b/Orange/widgets/evaluate/tests/test_owtestandscore.py\nindex 6155670a3..58473208a 100644\n--- a/Orange/widgets/evaluate/tests/test_owtestandscore.py\n+++ b/Orange/widgets/evaluate/tests/test_owtestandscore.py\n@@ -422,6 +422,52 @@ class TestOWTestAndScore(WidgetTest):\n                     OWTestAndScore.KFold, 0),\n                 (0.8, 0.5, 0.5, 0.5, 0.5))))\n \n+    def test_no_stratification(self):\n+        w = self.widget\n+        w.cv_stratified = True\n+        self._test_scores(\n+            Table(\"zoo\"), None, MajorityLearner(),\n+            OWTestAndScore.KFold, 2)\n+        self.assertTrue(w.Warning.cant_stratify.is_shown())\n+\n+        w.controls.cv_stratified.click()\n+        self.assertFalse(w.Warning.cant_stratify.is_shown())\n+\n+        w.controls.cv_stratified.click()\n+        self.assertTrue(w.Warning.cant_stratify.is_shown())\n+\n+        w.controls.n_folds.setCurrentIndex(0)\n+        w.controls.n_folds.activated[int].emit(0)\n+        self.assertFalse(w.Warning.cant_stratify.is_shown())\n+\n+        w.controls.n_folds.setCurrentIndex(2)\n+        w.controls.n_folds.activated[int].emit(2)\n+        self.assertTrue(w.Warning.cant_stratify.is_shown())\n+\n+        self._test_scores(\n+            Table(\"iris\"), None, MajorityLearner(), OWTestAndScore.KFold, 2)\n+        self.assertFalse(w.Warning.cant_stratify.is_shown())\n+\n+        self._test_scores(\n+            Table(\"zoo\"), None, MajorityLearner(), OWTestAndScore.KFold, 2)\n+        self.assertTrue(w.Warning.cant_stratify.is_shown())\n+\n+        self._test_scores(\n+            Table(\"housing\"), None, MeanLearner(), OWTestAndScore.KFold, 2)\n+        self.assertFalse(w.Warning.cant_stratify.is_shown())\n+        self.assertTrue(w.Information.cant_stratify_numeric.is_shown())\n+\n+        w.controls.cv_stratified.click()\n+        self.assertFalse(w.Warning.cant_stratify.is_shown())\n+\n+    def test_too_many_folds(self):\n+        w = self.widget\n+        w.controls.resampling.buttons[OWTestAndScore.KFold].click()\n+        w.n_folds = 3\n+        self.send_signal(w.Inputs.train_data, Table(\"zoo\")[:8])\n+        self.send_signal(w.Inputs.learner, MajorityLearner(), 0, wait=5000)\n+        self.assertTrue(w.Error.too_many_folds.is_shown())\n+\n     def test_no_pregressbar_warning(self):\n         data = Table(\"iris\")[::15]\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6542.0, "instance_id": "biolab__orange3-6542", "issue_numbers": 0, "base_commit": "9c2c45aed5507d38f727b19a73fb9a7debffab76", "patch": "diff --git a/Orange/widgets/unsupervised/owsom.py b/Orange/widgets/unsupervised/owsom.py\nindex 63f9dc351..84c11e311 100644\n--- a/Orange/widgets/unsupervised/owsom.py\n+++ b/Orange/widgets/unsupervised/owsom.py\n@@ -871,6 +871,7 @@ class OWSOM(OWWidget):\n             self._optimizer_thread = None\n \n         self.progressBarInit()\n+        self.setInvalidated(True)\n \n         self._optimizer = Optimizer(self.cont_x, self.som)\n         self._optimizer_thread = QThread()\n@@ -894,6 +895,7 @@ class OWSOM(OWWidget):\n     def __done(self, som):\n         self.enable_controls(True)\n         self.progressBarFinished()\n+        self.setInvalidated(False)\n         self._assign_instances(som.weights, som.ssum_weights)\n         self._redraw()\n         # This is the first time we know what was selected (assuming that\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owsom.py b/Orange/widgets/unsupervised/tests/test_owsom.py\nindex 776db304b..ea7350d46 100644\n--- a/Orange/widgets/unsupervised/tests/test_owsom.py\n+++ b/Orange/widgets/unsupervised/tests/test_owsom.py\n@@ -127,6 +127,12 @@ class TestOWSOM(WidgetTest):\n         self.send_signal(widget.Inputs.data, None)\n         self.assertFalse(widget.Warning.missing_values.is_shown())\n \n+    def test_run_actual_optimization(self):\n+        # ther tests that compute something use _patch_recompute_som\n+        self.send_signal(self.widget.Inputs.data, self.iris)\n+        out = self.get_output(self.widget.Outputs.annotated_data)\n+        self.assertEqual(len(out), 150)\n+\n     @_patch_recompute_som\n     def test_single_row_data(self):\n         widget = self.widget\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6221.0, "instance_id": "biolab__orange3-6221", "issue_numbers": 0, "base_commit": "66fb82945e6d1a5949664a4e5a810197c2513578", "patch": "diff --git a/Orange/statistics/util.py b/Orange/statistics/util.py\nindex 979be60d7..c37715e47 100644\n--- a/Orange/statistics/util.py\n+++ b/Orange/statistics/util.py\n@@ -370,6 +370,8 @@ def stats(X, weights=None, compute_variance=False):\n             X.shape[0] - non_zero,\n             non_zero))\n     else:\n+        if X.ndim == 1:\n+            X = X[:, None]\n         nans = (pandas.isnull(X).sum(axis=0) + (X == \"\").sum(axis=0)) \\\n             if X.size else np.zeros(X.shape[1])\n         return np.column_stack((\n.", "test_patch": "diff --git a/Orange/tests/test_basic_stats.py b/Orange/tests/test_basic_stats.py\nindex 3b5ec1879..fb234a84e 100644\n--- a/Orange/tests/test_basic_stats.py\n+++ b/Orange/tests/test_basic_stats.py\n@@ -28,6 +28,10 @@ class TestDomainBasicStats(TestCase):\n         self.assertStatsEqual(domain_stats.stats,\n                               attr_stats + class_var_stats + meta_stats)\n \n+    def test_empty_table(self):\n+        domain_stats = DomainBasicStats(self.zoo[:0])\n+        self.assertEqual(len(domain_stats.stats), 17)\n+\n     def test_speed(self):\n         n, m = 10, 10000\n         data = Table.from_numpy(None, np.random.rand(n, m))\ndiff --git a/Orange/tests/test_statistics.py b/Orange/tests/test_statistics.py\nindex 0e5ee9c19..121c66cee 100644\n--- a/Orange/tests/test_statistics.py\n+++ b/Orange/tests/test_statistics.py\n@@ -170,6 +170,18 @@ class TestUtil(unittest.TestCase):\n                                            [np.inf, -np.inf, 0, 0, 2, 1],\n                                            [np.inf, -np.inf, 0, 0, 0, 3]])\n \n+    def test_stats_empty(self):\n+        X = np.array([])\n+        np.testing.assert_equal(stats(X), [[np.inf, -np.inf, 0, 0, 0, 0]])\n+\n+        X = np.zeros((0,))\n+        np.testing.assert_equal(stats(X), [[np.inf, -np.inf, 0, 0, 0, 0]])\n+\n+        X = np.zeros((0, 4))\n+        np.testing.assert_equal(stats(X), [[np.inf, -np.inf, 0, 0, 0, 0]] * 4)\n+\n+\n+\n     def test_stats_long_string_mem_use(self):\n         X = np.full((1000, 1000), \"a\", dtype=object)\n         t = time.time()\ndiff --git a/Orange/widgets/data/tests/test_owtable.py b/Orange/widgets/data/tests/test_owtable.py\nindex 18ec1e60e..61dde5f33 100644\n--- a/Orange/widgets/data/tests/test_owtable.py\n+++ b/Orange/widgets/data/tests/test_owtable.py\n@@ -46,6 +46,12 @@ class TestOWDataTable(WidgetTest, WidgetOutputsTestMixin, dbt):\n         self.send_signal(self.widget.Inputs.data, None, 1)\n         self.assertEqual(self.widget.tabs.count(), 1)\n \n+    def test_input_data_empty(self):\n+        self.send_signal(self.widget.Inputs.data, self.data[:0])\n+        output = self.get_output(self.widget.Outputs.annotated_data)\n+        self.assertIsInstance(output, Table)\n+        self.assertEqual(len(output), 0)\n+\n     def test_data_model(self):\n         self.send_signal(self.widget.Inputs.data, self.data, 1)\n         self.assertEqual(self.widget.tabs.widget(0).model().rowCount(),\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6174.0, "instance_id": "biolab__orange3-6174", "issue_numbers": 0, "base_commit": "50234469b4e42343e767bd1bdbdb1f9b7c642299", "patch": "diff --git a/Orange/widgets/data/owfeaturestatistics.py b/Orange/widgets/data/owfeaturestatistics.py\nindex af79b97cb..8155d30f6 100644\n--- a/Orange/widgets/data/owfeaturestatistics.py\n+++ b/Orange/widgets/data/owfeaturestatistics.py\n@@ -805,7 +805,8 @@ class OWFeatureStatistics(widget.OWWidget):\n         self.__restore_sorting()\n         self.__color_var_changed()\n \n-        self.commit()\n+        self.commit_statistics()\n+        self.commit.now()\n \n     def __restore_selection(self):\n         \"\"\"Restore the selection on the table view from saved settings.\"\"\"\n@@ -845,8 +846,9 @@ class OWFeatureStatistics(widget.OWWidget):\n             i.row() for i in self.table_view.selectionModel().selectedRows()\n         ]))\n         self.selected_vars = list(self.model.variables[selection_indices])\n-        self.commit()\n+        self.commit.deferred()\n \n+    @gui.deferred\n     def commit(self):\n         if not self.selected_vars:\n             self.Outputs.reduced_data.send(None)\n@@ -854,6 +856,7 @@ class OWFeatureStatistics(widget.OWWidget):\n             # Send a table with only selected columns to output\n             self.Outputs.reduced_data.send(self.data[:, self.selected_vars])\n \n+    def commit_statistics(self):\n         if not self.data:\n             self.Outputs.statistics.send(None)\n             return\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owfeaturestatistics.py b/Orange/widgets/data/tests/test_owfeaturestatistics.py\nindex 576c4e0f6..76820bd98 100644\n--- a/Orange/widgets/data/tests/test_owfeaturestatistics.py\n+++ b/Orange/widgets/data/tests/test_owfeaturestatistics.py\n@@ -335,7 +335,7 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n         # By default, nothing should be sent since auto commit is off\n         self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n         # When we commit, the data should be on the output\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n         self.assertIsNotNone(self.get_output(self.widget.Outputs.reduced_data))\n \n         # Send some new data\n@@ -344,18 +344,9 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n         # By default, there should be nothing on the output\n         self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n         # Nothing should change after commit, since we haven't selected any rows\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n         self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n \n-        # Now let's switch back to the original data, where we selected row 0\n-        self.send_signal(self.widget.Inputs.data, self.data)\n-        # Again, since auto commit is off, nothing should be on the output\n-        self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n-        # Since the row selection is saved into context settings, the appropriate\n-        # thing should be sent to output\n-        self.widget.unconditional_commit()\n-        self.assertIsNotNone(self.get_output(self.widget.Outputs.reduced_data))\n-\n     def test_changing_data_updates_output_with_autocommit(self):\n         # Test behaviour of widget when auto commit is ON\n         self.widget.auto_commit = True\n@@ -380,7 +371,7 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n     def test_sends_single_attribute_table_to_output(self):\n         # Check if selecting a single attribute row\n         self.select_rows([0])\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n \n         desired_domain = Domain(attributes=[continuous_full.variable])\n         output = self.get_output(self.widget.Outputs.reduced_data)\n@@ -389,7 +380,7 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n     def test_sends_multiple_attribute_table_to_output(self):\n         # Check if selecting a single attribute row\n         self.select_rows([0, 1])\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n \n         desired_domain = Domain(attributes=[\n             continuous_full.variable, continuous_missing.variable,\n@@ -399,7 +390,7 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n \n     def test_sends_single_class_var_table_to_output(self):\n         self.select_rows([2])\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n \n         desired_domain = Domain(attributes=[], class_vars=[rgb_full.variable])\n         output = self.get_output(self.widget.Outputs.reduced_data)\n@@ -407,7 +398,7 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n \n     def test_sends_single_meta_table_to_output(self):\n         self.select_rows([4])\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n \n         desired_domain = Domain(attributes=[], metas=[ints_full.variable])\n         output = self.get_output(self.widget.Outputs.reduced_data)\n@@ -415,7 +406,7 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n \n     def test_sends_multiple_var_types_table_to_output(self):\n         self.select_rows([0, 2, 4])\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n \n         desired_domain = Domain(\n             attributes=[continuous_full.variable],\n@@ -428,7 +419,7 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n     def test_sends_all_samples_to_output(self):\n         \"\"\"All rows should be sent to output for selected column.\"\"\"\n         self.select_rows([0, 2])\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n \n         selected_vars = Domain(\n             attributes=[continuous_full.variable],\n@@ -442,11 +433,11 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n     def test_clearing_selection_sends_none_to_output(self):\n         \"\"\"Clearing all the selected rows should send `None` to output.\"\"\"\n         self.select_rows([0])\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n         self.assertIsNotNone(self.get_output(self.widget.Outputs.reduced_data))\n \n         self.widget.table_view.clearSelection()\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n         self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n \n     def test_output_statistics(self):\n@@ -502,14 +493,14 @@ class TestFeatureStatisticsOutputs(WidgetTest):\n \n     def test_output_combinations(self):\n         # No selection -> reduced_data is not output, statistics is present\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n         self.assertIsNone(self.get_output(self.widget.Outputs.reduced_data))\n         self.assertEqual(len(self.get_output(self.widget.Outputs.statistics)),\n                          self.widget.model.rowCount())\n \n         # Has selection -> all outputs present\n         self.select_rows([0, 1])\n-        self.widget.unconditional_commit()\n+        self.widget.commit.now()\n         outp = self.get_output(self.widget.Outputs.reduced_data)\n         self.assertEqual(len(outp), len(self.data))\n         self.assertEqual(len(outp.domain.variables), 2)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5957.0, "instance_id": "biolab__orange3-5957", "issue_numbers": 0, "base_commit": "0d3063d165824e56f2e96fcc3ce3341be0f32075", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex f215c648b..f16a808b3 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -617,7 +617,7 @@ class OWPredictions(OWWidget):\n                                                 - len(self.PROB_OPTS)]\n             tooltip_probs = (shown_class, )\n         sort_col_indices = []\n-        for col, slot in enumerate(self.predictors):\n+        for col, slot in enumerate(self._non_errored_predictors()):\n             target = slot.predictor.domain.class_var\n             if target is not None and target.is_discrete:\n                 shown_probs = self._shown_prob_indices(target, in_target=True)\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex 4e0817660..55a341518 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -611,6 +611,7 @@ class TestOWPredictions(WidgetTest):\n         widget = self.widget\n         prob_combo = widget.controls.shown_probs\n         set_prob_ind = widget.predictionsview.model().setProbInd\n+        widget._non_errored_predictors = lambda: widget.predictors[:4]\n \n         widget.data = Table.from_list(\n             Domain([], DiscreteVariable(\"c\", values=tuple(\"abc\"))), [])\n@@ -632,7 +633,7 @@ class TestOWPredictions(WidgetTest):\n             if isinstance(delegate, ClassificationItemDelegate):\n                 self.assertEqual(list(delegate.shown_probabilities), [])\n                 self.assertEqual(delegate.tooltip, \"\")\n-        set_prob_ind.assert_called_with([[], [], [], [], None])\n+        set_prob_ind.assert_called_with([[], [], [], []])\n \n         widget.shown_probs = widget.DATA_PROBS\n         widget._update_prediction_delegate()\n@@ -643,7 +644,7 @@ class TestOWPredictions(WidgetTest):\n         self.assertEqual(widget._delegates[3].shown_probabilities, [None, None, None])\n         for delegate in widget._delegates[:-1]:\n             self.assertEqual(delegate.tooltip, \"p(a, b, c)\")\n-        set_prob_ind.assert_called_with([[0, 1, 2], [0, 1], [1, 2], [], None])\n+        set_prob_ind.assert_called_with([[0, 1, 2], [0, 1], [1, 2], []])\n \n         widget.shown_probs = widget.MODEL_PROBS\n         widget._update_prediction_delegate()\n@@ -655,7 +656,7 @@ class TestOWPredictions(WidgetTest):\n         self.assertEqual(widget._delegates[2].tooltip, \"p(c, b, d)\")\n         self.assertEqual(widget._delegates[3].shown_probabilities, [4])\n         self.assertEqual(widget._delegates[3].tooltip, \"p(e)\")\n-        set_prob_ind.assert_called_with([[0, 1, 2], [0, 1], [2, 1, 3], [4], None])\n+        set_prob_ind.assert_called_with([[0, 1, 2], [0, 1], [2, 1, 3], [4]])\n \n         widget.shown_probs = widget.BOTH_PROBS\n         widget._update_prediction_delegate()\n@@ -667,7 +668,7 @@ class TestOWPredictions(WidgetTest):\n         self.assertEqual(widget._delegates[2].tooltip, \"p(b, c)\")\n         self.assertEqual(widget._delegates[3].shown_probabilities, [])\n         self.assertEqual(widget._delegates[3].tooltip, \"\")\n-        set_prob_ind.assert_called_with([[0, 1, 2], [0, 1], [1, 2], [], None])\n+        set_prob_ind.assert_called_with([[0, 1, 2], [0, 1], [1, 2], []])\n \n         n_fixed = len(widget.PROB_OPTS)\n         widget.shown_probs = n_fixed  # a\n@@ -678,7 +679,7 @@ class TestOWPredictions(WidgetTest):\n         self.assertEqual(widget._delegates[3].shown_probabilities, [None])\n         for delegate in widget._delegates[:-1]:\n             self.assertEqual(delegate.tooltip, \"p(a)\")\n-        set_prob_ind.assert_called_with([[0], [0], [], [], None])\n+        set_prob_ind.assert_called_with([[0], [0], [], []])\n \n         n_fixed = len(widget.PROB_OPTS)\n         widget.shown_probs = n_fixed + 1  # b\n@@ -689,7 +690,7 @@ class TestOWPredictions(WidgetTest):\n         self.assertEqual(widget._delegates[3].shown_probabilities, [None])\n         for delegate in widget._delegates[:-1]:\n             self.assertEqual(delegate.tooltip, \"p(b)\")\n-        set_prob_ind.assert_called_with([[1], [1], [1], [], None])\n+        set_prob_ind.assert_called_with([[1], [1], [1], []])\n \n         n_fixed = len(widget.PROB_OPTS)\n         widget.shown_probs = n_fixed + 2  # c\n@@ -700,7 +701,7 @@ class TestOWPredictions(WidgetTest):\n         self.assertEqual(widget._delegates[3].shown_probabilities, [None])\n         for delegate in widget._delegates[:-1]:\n             self.assertEqual(delegate.tooltip, \"p(c)\")\n-        set_prob_ind.assert_called_with([[2], [], [2], [], None])\n+        set_prob_ind.assert_called_with([[2], [], [2], []])\n \n     def test_update_delegates_continuous(self):\n         self._mock_predictors()\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5952.0, "instance_id": "biolab__orange3-5952", "issue_numbers": 0, "base_commit": "647f5dad021ac4539801f1387d13eb30992215bf", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex e66e4fc60..3842a0c60 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -1064,17 +1064,17 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n         Returns:\n             (tuple): a list of pens and list of brushes\n         \"\"\"\n-\n+        alpha_subset, alpha_unset = self._alpha_for_subsets()\n         if subset is not None:\n-            colors = [QColor(*color, alpha)\n-                      for alpha in self._alpha_for_subsets()]\n-            brushes = [QBrush(color) for color in colors]\n-            brush = np.where(subset, *brushes)\n+            qcolor = QColor(*color, alpha_subset)\n+            brush = np.where(subset, QBrush(qcolor), QBrush(QColor(0, 0, 0, 0)))\n+            pen = np.where(subset,\n+                           _make_pen(qcolor, 1.5),\n+                           _make_pen(QColor(*color, alpha_unset), 1.5))\n         else:\n             qcolor = QColor(*color, self.alpha_value)\n             brush = np.full(self.n_shown, QBrush(qcolor))\n-        qcolor = QColor(*color, self.alpha_value)\n-        pen = [_make_pen(qcolor, 1.5)] * self.n_shown\n+            pen = [_make_pen(qcolor, 1.5)] * self.n_shown\n         return pen, brush\n \n     def _get_continuous_colors(self, c_data, subset):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplotbase.py b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\nindex 1f737450f..eeb8cdcf3 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n@@ -681,8 +681,14 @@ class TestOWScatterPlotBase(WidgetTest):\n         data = graph.scatterplot_item.data\n         self.assertTrue(all(pen.color().hue() == hue for pen in data[\"pen\"]))\n         self.assertTrue(all(pen.color().hue() == hue for pen in data[\"brush\"]))\n-        self.assertEqual(len(set(map(id, data[\"pen\"]))), 1)\n+        self.assertEqual(len(set(map(id, data[\"pen\"]))), 2)\n+        self.assertEqual(data[\"pen\"][3].color(), data[\"pen\"][4].color())\n+        self.assertNotEqual(data[\"pen\"][4].color().alpha(),\n+                            data[\"pen\"][5].color().alpha())\n         self.assertEqual(len(set(map(id, data[\"brush\"]))), 2)  # transparent and colored\n+        self.assertEqual(data[\"brush\"][3].color(), data[\"brush\"][4].color())\n+        self.assertNotEqual(data[\"brush\"][4].color().alpha(),\n+                            data[\"brush\"][5].color().alpha())\n \n     def test_colors_update_legend_and_density(self):\n         graph = self.graph\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6186.0, "instance_id": "biolab__orange3-6186", "issue_numbers": 0, "base_commit": "29ecfa00fe214a1693a6c9cea0b7edf709cf5832", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex 85d4c0c74..273e31e16 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -1124,7 +1124,7 @@ class ClassificationErrorDelegate(ErrorDelegate):\n \n     def drawBar(self, painter, option, index, rect):\n         value = self.cachedData(index, Qt.DisplayRole)\n-        if numpy.isnan(value):\n+        if value is None or numpy.isnan(value):\n             return\n \n         painter.save()\n@@ -1210,7 +1210,7 @@ class RegressionErrorDelegate(ErrorDelegate):\n         if not self.span:  # can be 0 if no errors, or None if they're hidden\n             return\n         error = self.cachedData(index, Qt.DisplayRole)\n-        if numpy.isnan(error):\n+        if error is None or numpy.isnan(error):\n             return\n         scaled = error / self.span\n \n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex b032f4e41..ee9d13dd3 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -1839,6 +1839,10 @@ class TestClassificationErrorDelegate(GuiTest):\n         delegate.drawBar(painter, Mock(), index, rect)\n         dr.assert_not_called()\n \n+        delegate.cachedData = lambda *_: None\n+        delegate.drawBar(painter, Mock(), index, rect)\n+        dr.assert_not_called()\n+\n         delegate.cachedData = lambda *_: 1 / 4\n         delegate.drawBar(painter, Mock(), index, rect)\n         dr.assert_called_once()\n@@ -1876,6 +1880,10 @@ class TestRegressionErrorDelegate(GuiTest):\n         delegate.drawBar(painter, Mock(), index, rect)\n         dr.assert_not_called()\n \n+        delegate.cachedData = lambda *_: None\n+        delegate.drawBar(painter, Mock(), index, rect)\n+        dr.assert_not_called()\n+\n         delegate.cachedData = lambda *_: 3\n         delegate.drawBar(painter, Mock(), index, rect)\n         r = dr.call_args[0][0]\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6544.0, "instance_id": "biolab__orange3-6544", "issue_numbers": 0, "base_commit": "bb5e8458ca7a29f2914bd3e6a7566d3598818eae", "patch": "diff --git a/Orange/widgets/evaluate/owpredictions.py b/Orange/widgets/evaluate/owpredictions.py\nindex 69797905a..34c41302f 100644\n--- a/Orange/widgets/evaluate/owpredictions.py\n+++ b/Orange/widgets/evaluate/owpredictions.py\n@@ -325,7 +325,9 @@ class OWPredictions(OWWidget):\n         self.score_opt_box.setVisible(bool(self.class_var))\n \n     def _reg_error_changed(self):\n-        self.predictionsview.model().setRegErrorType(self.show_reg_errors)\n+        model = self.predictionsview.model()\n+        if model is not None:\n+            model.setRegErrorType(self.show_reg_errors)\n         self._update_prediction_delegate()\n \n     def _update_errors_visibility(self):\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpredictions.py b/Orange/widgets/evaluate/tests/test_owpredictions.py\nindex a6ab9b15d..f48a5eb88 100644\n--- a/Orange/widgets/evaluate/tests/test_owpredictions.py\n+++ b/Orange/widgets/evaluate/tests/test_owpredictions.py\n@@ -1157,6 +1157,13 @@ class TestOWPredictions(WidgetTest):\n         self.assertEqual(delegate.span, max(3 / 2, 6 / 11))\n         self.assertFalse(delegate.centered)\n \n+    def test_regression_error_no_model(self):\n+        data = self.housing[:5]\n+        self.send_signal(self.widget.Inputs.data, data)\n+        combo = self.widget.controls.show_reg_errors\n+        with excepthook_catch(raise_on_exit=True):\n+            simulate.combobox_activate_index(combo, 1)\n+\n     def test_report(self):\n         widget = self.widget\n \n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5214.0, "instance_id": "biolab__orange3-5214", "issue_numbers": 0, "base_commit": "0d6da92c5428470844999e85cdaed0736b7c619a", "patch": "diff --git a/Orange/widgets/visualize/owscatterplotgraph.py b/Orange/widgets/visualize/owscatterplotgraph.py\nindex aa54cebf6..54022573c 100644\n--- a/Orange/widgets/visualize/owscatterplotgraph.py\n+++ b/Orange/widgets/visualize/owscatterplotgraph.py\n@@ -43,6 +43,9 @@ with warnings.catch_warnings():\n SELECTION_WIDTH = 5\n MAX_N_VALID_SIZE_ANIMATE = 1000\n \n+# maximum number of colors (including Other)\n+MAX_COLORS = 11\n+\n \n class LegendItem(PgLegendItem):\n     def __init__(self, size=None, offset=None, pen=None, brush=None):\n@@ -1189,7 +1192,9 @@ class OWScatterPlotBase(gui.OWComponent, QObject):\n             c_data = self.master.get_color_data()\n             if c_data is None:\n                 return\n-            mask = np.isfinite(self._filter_visible(c_data))\n+            visible_c_data = self._filter_visible(c_data)\n+            mask = np.bitwise_and(np.isfinite(visible_c_data),\n+                                  visible_c_data < MAX_COLORS - 1)\n             pens = self.scatterplot_item.data['pen']\n             rgb_data = [\n                 pen.color().getRgb()[:3] if pen is not None else (255, 255, 255)\ndiff --git a/Orange/widgets/visualize/utils/widget.py b/Orange/widgets/visualize/utils/widget.py\nindex 7ecf34e17..ff827cbb4 100644\n--- a/Orange/widgets/visualize/utils/widget.py\n+++ b/Orange/widgets/visualize/utils/widget.py\n@@ -25,12 +25,12 @@ from Orange.widgets.utils.annotated_data import (\n from Orange.widgets.utils.plot import OWPlotGUI\n from Orange.widgets.utils.sql import check_sql_input\n from Orange.widgets.utils.state_summary import format_summary_details\n-from Orange.widgets.visualize.owscatterplotgraph import OWScatterPlotBase\n+from Orange.widgets.visualize.owscatterplotgraph import (\n+    OWScatterPlotBase, MAX_COLORS\n+)\n from Orange.widgets.visualize.utils.component import OWGraphWithAnchors\n from Orange.widgets.widget import OWWidget, Input, Output, Msg\n \n-# maximum number of colors (including Other)\n-MAX_COLORS = 11\n \n # maximum number of shapes (including Other)\n MAX_SHAPES = len(OWScatterPlotBase.CurveSymbols) - 1\n \n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplotbase.py b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\nindex 3e32b3abf..dcb911da7 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplotbase.py\n@@ -940,6 +940,46 @@ class TestOWScatterPlotBase(WidgetTest):\n         np.testing.assert_equal(y_data, y_data0)\n         np.testing.assert_equal(colors, colors0)\n \n+    @patch(\"Orange.widgets.visualize.owscatterplotgraph.MAX_COLORS\", 3)\n+    @patch(\"Orange.widgets.utils.classdensity.class_density_image\")\n+    def test_density_with_max_colors(self, class_density_image):\n+        graph = self.graph\n+        graph.reset_graph()\n+        graph.plot_widget.addItem = Mock()\n+        graph.plot_widget.removeItem = Mock()\n+\n+        graph.class_density = True\n+        d = np.arange(10, dtype=float) % 3\n+        self.master.get_color_data = lambda: d\n+\n+        # All colors known\n+        graph.update_colors()\n+        x_data, y_data, colors = class_density_image.call_args[0][5:]\n+        np.testing.assert_equal(x_data, np.arange(10)[d < 2])\n+        np.testing.assert_equal(y_data, np.arange(10)[d < 2])\n+        self.assertEqual(len(set(colors)), 2)\n+\n+        # Missing colors\n+        d[:3] = np.nan\n+        graph.update_colors()\n+        x_data, y_data, colors = class_density_image.call_args[0][5:]\n+        np.testing.assert_equal(x_data, np.arange(3, 10)[d[3:] < 2])\n+        np.testing.assert_equal(y_data, np.arange(3, 10)[d[3:] < 2])\n+        self.assertEqual(len(set(colors)), 2)\n+\n+        # Missing colors + only subsample plotted\n+        graph.set_sample_size(8)\n+        graph.reset_graph()\n+        x_data, y_data, colors = class_density_image.call_args[0][5:]\n+        visible_data = graph._filter_visible(d)\n+        d_known = np.bitwise_and(np.isfinite(visible_data),\n+                                  visible_data < 2)\n+        x_data0 = graph._filter_visible(np.arange(10))[d_known]\n+        y_data0 = graph._filter_visible(np.arange(10))[d_known]\n+        np.testing.assert_equal(x_data, x_data0)\n+        np.testing.assert_equal(y_data, y_data0)\n+        self.assertLessEqual(len(set(colors)), 2)\n+\n     def test_labels(self):\n         graph = self.graph\n         graph.reset_graph()\n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5837.0, "instance_id": "biolab__orange3-5837", "issue_numbers": 0, "base_commit": "ba151c8150ecfea2fda182dae11bcbbd76281bf3", "patch": "diff --git a/Orange/widgets/visualize/owscatterplot.py b/Orange/widgets/visualize/owscatterplot.py\nindex ccf55bacd..0f5ca28ca 100644\n--- a/Orange/widgets/visualize/owscatterplot.py\n+++ b/Orange/widgets/visualize/owscatterplot.py\n@@ -353,6 +353,7 @@ class OWScatterPlot(OWDataProjectionWidget):\n         self.vizrank: ScatterPlotVizRank = None\n         self.vizrank_button: QPushButton = None\n         self.sampling: QGroupBox = None\n+        self._xy_invalidated: bool = True\n \n         self.sql_data = None  # Orange.data.sql.table.SqlTable\n         self.attribute_selection_list = None  # list of Orange.data.Variable\n@@ -576,6 +577,8 @@ class OWScatterPlot(OWDataProjectionWidget):\n             self.attr_x, self.attr_y = self.attribute_selection_list[:2]\n             self.attr_box.setEnabled(False)\n             self.vizrank.setEnabled(False)\n+        self._invalidated = self._invalidated or self._xy_invalidated\n+        self._xy_invalidated = False\n         super().handleNewSignals()\n         if self._domain_invalidated:\n             self.graph.update_axes()\n@@ -586,7 +589,7 @@ class OWScatterPlot(OWDataProjectionWidget):\n     def set_shown_attributes(self, attributes):\n         if attributes and len(attributes) >= 2:\n             self.attribute_selection_list = attributes[:2]\n-            self._invalidated = self._invalidated \\\n+            self._xy_invalidated = self._xy_invalidated \\\n                 or self.attr_x != attributes[0] \\\n                 or self.attr_y != attributes[1]\n         else:\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplot.py b/Orange/widgets/visualize/tests/test_owscatterplot.py\nindex 9b6d4591f..b2974508b 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplot.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplot.py\n@@ -743,6 +743,13 @@ class TestOWScatterPlot(WidgetTest, ProjectionWidgetTestMixin,\n         self.widget.setup_plot.assert_called_once()\n         self.assertListEqual(self.widget.effective_variables, list(features))\n \n+        self.widget.setup_plot.reset_mock()\n+        features = self.data.domain.attributes[2:]\n+        signals = [(self.widget.Inputs.features, AttributeList(features)),\n+                   (self.widget.Inputs.data, self.data)]\n+        self.send_signals(signals)\n+        self.widget.setup_plot.assert_called_once()\n+\n     def test_invalidated_diff_features(self):\n         self.widget.setup_plot = Mock()\n         # send data and set default features\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6530.0, "instance_id": "biolab__orange3-6530", "issue_numbers": 0, "base_commit": "9eb649075e83cfea90aa2961abae8c8e00fcbea6", "patch": "diff --git a/Orange/widgets/visualize/owscatterplot.py b/Orange/widgets/visualize/owscatterplot.py\nindex 58b15601a..72e3be8d6 100644\n--- a/Orange/widgets/visualize/owscatterplot.py\n+++ b/Orange/widgets/visualize/owscatterplot.py\n@@ -1,4 +1,3 @@\n-from itertools import chain\n from xml.sax.saxutils import escape\n \n import numpy as np\n@@ -87,9 +86,11 @@ class ScatterPlotVizRank(VizRankDialogAttrPair):\n \n     def score_heuristic(self):\n         assert self.attr_color is not None\n-        master_domain = self.master.data.domain\n-        vars = [v for v in chain(master_domain.variables, master_domain.metas)\n-                if v is not self.attr_color and v.is_primitive()]\n+        vars = [\n+            v\n+            for v in self.master.xy_model  # same attributes that are in xy combos\n+            if v is not self.attr_color and v.is_primitive()\n+        ]\n         domain = Domain(attributes=vars, class_vars=self.attr_color)\n         data = self.master.data.transform(domain)\n         relief = ReliefF if isinstance(domain.class_var, DiscreteVariable) \\\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplot.py b/Orange/widgets/visualize/tests/test_owscatterplot.py\nindex f200c9525..766c178a9 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplot.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplot.py\n@@ -472,6 +472,20 @@ class TestOWScatterPlot(WidgetTest, ProjectionWidgetTestMixin,\n         self.assertEqual(self.widget.vizrank_button.toolTip(),\n                          \"Color variable has no values\")\n \n+    def test_vizrank_hidden_attributes(self):\n+        \"\"\"\n+        Test hidden attributes not considered in Find Informative Projections\n+        \"\"\"\n+        new_domain = self.data.domain.copy()\n+        new_domain.attributes[0].attributes[\"hidden\"] = True\n+        data = self.data.transform(new_domain)\n+        self.send_signal(self.widget.Inputs.data, data)\n+        vizrank = ScatterPlotVizRank(self.widget)\n+        self.assertListEqual(\n+            [\"petal width\", \"petal length\", \"sepal width\"],\n+            [x.name for x in vizrank.score_heuristic()],\n+        )\n+\n     def test_auto_send_selection(self):\n         \"\"\"\n         Scatter Plot automatically sends selection only when the checkbox Send automatically\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6531.0, "instance_id": "biolab__orange3-6531", "issue_numbers": 0, "base_commit": "67a7ee9a4855bcc064fd425b9f65d389a304e6d9", "patch": "diff --git a/Orange/widgets/visualize/owscatterplot.py b/Orange/widgets/visualize/owscatterplot.py\nindex 72e3be8d6..0f81a22ea 100644\n--- a/Orange/widgets/visualize/owscatterplot.py\n+++ b/Orange/widgets/visualize/owscatterplot.py\n@@ -527,6 +527,7 @@ class OWScatterPlot(OWDataProjectionWidget):\n     def can_draw_regresssion_line(self):\n         return self.data is not None and \\\n                self.data.domain is not None and \\\n+               self.attr_x is not None and self.attr_y is not None and \\\n                self.attr_x.is_continuous and \\\n                self.attr_y.is_continuous\n \n@@ -572,12 +573,13 @@ class OWScatterPlot(OWDataProjectionWidget):\n         self.attr_box.setEnabled(True)\n         self.vizrank.setEnabled(True)\n         if self.attribute_selection_list and self.data is not None and \\\n-                self.data.domain is not None and \\\n-                all(attr in self.data.domain for attr\n-                        in self.attribute_selection_list):\n-            self.attr_x, self.attr_y = self.attribute_selection_list[:2]\n+                self.data.domain is not None:\n             self.attr_box.setEnabled(False)\n             self.vizrank.setEnabled(False)\n+            if all(attr in self.xy_model for attr in self.attribute_selection_list):\n+                self.attr_x, self.attr_y = self.attribute_selection_list\n+            else:\n+                self.attr_x, self.attr_y = None, None\n         self._invalidated = self._invalidated or self._xy_invalidated\n         self._xy_invalidated = False\n         super().handleNewSignals()\n@@ -594,6 +596,10 @@ class OWScatterPlot(OWDataProjectionWidget):\n                 or self.attr_x != attributes[0] \\\n                 or self.attr_y != attributes[1]\n         else:\n+            if self.attr_x is None or self.attr_y is None:\n+                # scenario happens when features input removed and features\n+                # were invalid or hidden and those attr_x and attr_h were None\n+                self.init_attr_values()\n             self.attribute_selection_list = None\n \n     def set_attr(self, attr_x, attr_y):\n.", "test_patch": "diff --git a/Orange/widgets/visualize/tests/test_owscatterplot.py b/Orange/widgets/visualize/tests/test_owscatterplot.py\nindex c7ef1648e..76ece65d8 100644\n--- a/Orange/widgets/visualize/tests/test_owscatterplot.py\n+++ b/Orange/widgets/visualize/tests/test_owscatterplot.py\n@@ -350,6 +350,38 @@ class TestOWScatterPlot(WidgetTest, ProjectionWidgetTestMixin,\n         self.assertTrue(self.widget.attr_box.isEnabled())\n         self.assertTrue(self.widget.vizrank.isEnabled())\n \n+    def test_features_and_hidden_data(self):\n+        new_domain = self.data.domain.copy()\n+        new_domain.attributes[0].attributes[\"hidden\"] = True\n+        data = self.data.transform(new_domain)\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.send_signal(self.widget.Inputs.features, AttributeList(data.domain[:2]))\n+        self.assertIsNone(self.widget.attr_x)\n+        self.assertIsNone(self.widget.attr_y)\n+        self.assertFalse(self.widget.attr_box.isEnabled())\n+        self.assertFalse(self.widget.vizrank.isEnabled())\n+\n+        self.send_signal(self.widget.Inputs.features, None)\n+        self.assertEqual(self.widget.attr_x, self.data.domain[1])\n+        self.assertEqual(self.widget.attr_y, self.data.domain[2])\n+        self.assertTrue(self.widget.attr_box.isEnabled())\n+        self.assertTrue(self.widget.vizrank.isEnabled())\n+\n+        # try with features not in data\n+        bad_feat = AttributeList([ContinuousVariable(\"a\"), ContinuousVariable(\"b\")])\n+        self.send_signal(self.widget.Inputs.features, bad_feat)\n+        self.assertIsNone(self.widget.attr_x)\n+        self.assertIsNone(self.widget.attr_y)\n+        self.assertFalse(self.widget.attr_box.isEnabled())\n+        self.assertFalse(self.widget.vizrank.isEnabled())\n+\n+        self.send_signal(self.widget.Inputs.features, None)\n+        self.assertEqual(self.widget.attr_x, self.data.domain[1])\n+        self.assertEqual(self.widget.attr_y, self.data.domain[2])\n+        self.assertTrue(self.widget.attr_box.isEnabled())\n+        self.assertTrue(self.widget.vizrank.isEnabled())\n+\n     def test_output_features(self):\n         data = Table(\"iris\")\n         self.send_signal(self.widget.Inputs.data, data)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 5280.0, "instance_id": "biolab__orange3-5280", "issue_numbers": 0, "base_commit": "50345c21370a136f170c17c130677137c98600bf", "patch": "diff --git a/Orange/widgets/unsupervised/owkmeans.py b/Orange/widgets/unsupervised/owkmeans.py\nindex 1af73ddac..932731a5b 100644\n--- a/Orange/widgets/unsupervised/owkmeans.py\n+++ b/Orange/widgets/unsupervised/owkmeans.py\n@@ -2,6 +2,8 @@ from concurrent.futures import Future\n from typing import Optional, List, Dict\n \n import numpy as np\n+import scipy.sparse as sp\n+\n from AnyQt.QtCore import Qt, QTimer, QAbstractTableModel, QModelIndex, QThread, \\\n     pyqtSlot as Slot\n from AnyQt.QtGui import QIntValidator\n@@ -130,6 +132,7 @@ class OWKMeans(widget.OWWidget):\n         not_enough_data = widget.Msg(\n             \"Too few ({}) unique data instances for {} clusters\"\n         )\n+        no_sparse_normalization = widget.Msg(\"Sparse data cannot be normalized\")\n \n     INIT_METHODS = ((\"Initialize with KMeans++\", \"k-means++\"),\n                     (\"Random initialization\", \"random\"))\n@@ -490,7 +493,10 @@ class OWKMeans(widget.OWWidget):\n \n     def preproces(self, data):\n         if self.normalize:\n-            data = Normalize()(data)\n+            if sp.issparse(data.X):\n+                self.Warning.no_sparse_normalization()\n+            else:\n+                data = Normalize()(data)\n         for preprocessor in KMeans.preprocessors:  # use same preprocessors than\n             data = preprocessor(data)\n         return data\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owkmeans.py b/Orange/widgets/unsupervised/tests/test_owkmeans.py\nindex 3108ba156..27671c06b 100644\n--- a/Orange/widgets/unsupervised/tests/test_owkmeans.py\n+++ b/Orange/widgets/unsupervised/tests/test_owkmeans.py\n@@ -3,6 +3,8 @@ import unittest\n from unittest.mock import patch, Mock\n \n import numpy as np\n+import scipy.sparse as sp\n+\n from AnyQt.QtCore import Qt\n from AnyQt.QtWidgets import QRadioButton\n from sklearn.metrics import silhouette_score\n@@ -334,6 +336,40 @@ class TestOWKMeans(WidgetTest):\n         widget.update_results()\n         self.assertEqual(widget.selected_row(), None)\n \n+    @patch(\"Orange.widgets.unsupervised.owkmeans.Normalize\")\n+    def test_normalize_sparse(self, normalize):\n+        normalization = normalize.return_value = Mock(return_value=self.data)\n+        widget = self.widget\n+        widget.normalize = True\n+\n+        x = sp.csr_matrix(np.random.randint(0, 2, (5, 10)))\n+        data = Table.from_numpy(None, x)\n+\n+        self.send_signal(widget.Inputs.data, data)\n+        self.assertTrue(widget.Warning.no_sparse_normalization.is_shown())\n+        normalization.assert_not_called()\n+\n+        self.send_signal(widget.Inputs.data, None)\n+        self.assertFalse(widget.Warning.no_sparse_normalization.is_shown())\n+        normalization.assert_not_called()\n+\n+        self.send_signal(widget.Inputs.data, data)\n+        self.assertTrue(widget.Warning.no_sparse_normalization.is_shown())\n+        normalization.assert_not_called()\n+\n+        self.send_signal(widget.Inputs.data, self.data)\n+        self.assertFalse(widget.Warning.no_sparse_normalization.is_shown())\n+        normalization.assert_called()\n+        normalization.reset_mock()\n+\n+        self.send_signal(widget.Inputs.data, data)\n+        self.assertTrue(widget.Warning.no_sparse_normalization.is_shown())\n+        normalization.assert_not_called()\n+\n+        widget.controls.normalize.click()\n+        self.assertFalse(widget.Warning.no_sparse_normalization.is_shown())\n+        normalization.assert_not_called()\n+\n     def test_report(self):\n         widget = self.widget\n         widget.k = 4\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6762.0, "instance_id": "biolab__orange3-6762", "issue_numbers": 0, "base_commit": "d10b02242050e9eba97ef6ecd9c165e2f3a5477b", "patch": "diff --git a/Orange/widgets/evaluate/owpermutationplot.py b/Orange/widgets/evaluate/owpermutationplot.py\nindex 5886ec618..65acd8228 100644\n--- a/Orange/widgets/evaluate/owpermutationplot.py\n+++ b/Orange/widgets/evaluate/owpermutationplot.py\n@@ -15,6 +15,7 @@ from Orange.util import dummy_callback\n from Orange.widgets import gui\n from Orange.widgets.settings import Setting\n from Orange.widgets.utils.concurrent import ConcurrentWidgetMixin, TaskState\n+from Orange.widgets.utils.multi_target import check_multiple_targets_input\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n from Orange.widgets.visualize.owscatterplotgraph import LegendItem\n from Orange.widgets.visualize.utils.customizableplot import \\\n@@ -256,6 +257,7 @@ class OWPermutationPlot(OWWidget, ConcurrentWidgetMixin):\n         gui.rubber(self.controlArea)\n \n     @Inputs.data\n+    @check_multiple_targets_input\n     def set_data(self, data: Table):\n         self.Error.not_enough_data.clear()\n         self._data = data\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owpermutationplot.py b/Orange/widgets/evaluate/tests/test_owpermutationplot.py\nindex 38f027508..350435990 100644\n--- a/Orange/widgets/evaluate/tests/test_owpermutationplot.py\n+++ b/Orange/widgets/evaluate/tests/test_owpermutationplot.py\n@@ -77,7 +77,7 @@ class TestOWPermutationPlot(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, data)\n         self.send_signal(self.widget.Inputs.learner, self.rf_reg)\n         self.wait_until_finished()\n-        self.assertTrue(self.widget.Error.incompatible_learner.is_shown())\n+        self.assertTrue(self.widget.Error.multiple_targets_data.is_shown())\n \n     def test_sample_data(self):\n         self.send_signal(self.widget.Inputs.learner, self.rf_cls)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4068.0, "instance_id": "biolab__orange3-4068", "issue_numbers": 0, "base_commit": "af432aa288760ce85f7a60659fb1992c72360bb3", "patch": "diff --git a/Orange/widgets/unsupervised/owkmeans.py b/Orange/widgets/unsupervised/owkmeans.py\nindex c8a9ae874..71ccc7f4e 100644\n--- a/Orange/widgets/unsupervised/owkmeans.py\n+++ b/Orange/widgets/unsupervised/owkmeans.py\n@@ -436,7 +436,7 @@ class OWKMeans(widget.OWWidget):\n \n     def update_results(self):\n         scores = [mk if isinstance(mk, str) else silhouette_score(\n-            self.data.X, mk.labels) for mk in (\n+            self.preproces(self.data).X, mk.labels) for mk in (\n                 self.clusterings[k] for k in range(self.k_from, self.k_to + 1))]\n         best_row = max(\n             range(len(scores)), default=0,\n@@ -569,4 +569,4 @@ class OWKMeans(widget.OWWidget):\n \n \n if __name__ == \"__main__\":  # pragma: no cover\n-    WidgetPreview(OWKMeans).run(Table(\"iris.tab\"))\n+    WidgetPreview(OWKMeans).run(Table(\"heart_disease\"))\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owkmeans.py b/Orange/widgets/unsupervised/tests/test_owkmeans.py\nindex 5d9f2e903..ced457917 100644\n--- a/Orange/widgets/unsupervised/tests/test_owkmeans.py\n+++ b/Orange/widgets/unsupervised/tests/test_owkmeans.py\n@@ -45,6 +45,7 @@ class TestOWKMeans(WidgetTest):\n             OWKMeans, stored_settings={\"auto_commit\": False, \"version\": 2}\n         )  # type: OWKMeans\n         self.iris = Table(\"iris\")\n+        self.iris.X[0, 0] = np.nan\n \n     def tearDown(self):\n         self.widget.onDeleteWidget()\n@@ -263,10 +264,11 @@ class TestOWKMeans(WidgetTest):\n                 model, \"set_scores\", wraps=model.set_scores) as set_scores:\n             self.send_signal(self.widget.Inputs.data, self.iris, wait=5000)\n             scores, start_k = set_scores.call_args[0]\n+            X = self.widget.preproces(self.iris).X\n             self.assertEqual(\n                 scores,\n                 [km if isinstance(km, str) else silhouette_score(\n-                    self.iris.X, km(self.iris))\n+                    X, km(self.iris))\n                  for km in (widget.clusterings[k] for k in range(3, 9))]\n             )\n             self.assertEqual(start_k, 3)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4068.0, "instance_id": "biolab__orange3-4068", "issue_numbers": 0, "base_commit": "af68989b0f6f000f5549bdc4c36c9a2152f9fc18", "patch": "diff --git a/Orange/widgets/unsupervised/owkmeans.py b/Orange/widgets/unsupervised/owkmeans.py\nindex c8a9ae874..71ccc7f4e 100644\n--- a/Orange/widgets/unsupervised/owkmeans.py\n+++ b/Orange/widgets/unsupervised/owkmeans.py\n@@ -436,7 +436,7 @@ class OWKMeans(widget.OWWidget):\n \n     def update_results(self):\n         scores = [mk if isinstance(mk, str) else silhouette_score(\n-            self.data.X, mk.labels) for mk in (\n+            self.preproces(self.data).X, mk.labels) for mk in (\n                 self.clusterings[k] for k in range(self.k_from, self.k_to + 1))]\n         best_row = max(\n             range(len(scores)), default=0,\n@@ -569,4 +569,4 @@ class OWKMeans(widget.OWWidget):\n \n \n if __name__ == \"__main__\":  # pragma: no cover\n-    WidgetPreview(OWKMeans).run(Table(\"iris.tab\"))\n+    WidgetPreview(OWKMeans).run(Table(\"heart_disease\"))\n.", "test_patch": "diff --git a/Orange/widgets/unsupervised/tests/test_owkmeans.py b/Orange/widgets/unsupervised/tests/test_owkmeans.py\nindex 5d9f2e903..ced457917 100644\n--- a/Orange/widgets/unsupervised/tests/test_owkmeans.py\n+++ b/Orange/widgets/unsupervised/tests/test_owkmeans.py\n@@ -45,6 +45,7 @@ class TestOWKMeans(WidgetTest):\n             OWKMeans, stored_settings={\"auto_commit\": False, \"version\": 2}\n         )  # type: OWKMeans\n         self.iris = Table(\"iris\")\n+        self.iris.X[0, 0] = np.nan\n \n     def tearDown(self):\n         self.widget.onDeleteWidget()\n@@ -263,10 +264,11 @@ class TestOWKMeans(WidgetTest):\n                 model, \"set_scores\", wraps=model.set_scores) as set_scores:\n             self.send_signal(self.widget.Inputs.data, self.iris, wait=5000)\n             scores, start_k = set_scores.call_args[0]\n+            X = self.widget.preproces(self.iris).X\n             self.assertEqual(\n                 scores,\n                 [km if isinstance(km, str) else silhouette_score(\n-                    self.iris.X, km(self.iris))\n+                    X, km(self.iris))\n                  for km in (widget.clusterings[k] for k in range(3, 9))]\n             )\n             self.assertEqual(start_k, 3)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 4455.0, "instance_id": "biolab__orange3-4455", "issue_numbers": 0, "base_commit": "3781811839a66a39aca21ab85207902bc4005863", "patch": "diff --git a/Orange/widgets/data/owcorrelations.py b/Orange/widgets/data/owcorrelations.py\nindex cb8940a48..2564b6866 100644\n--- a/Orange/widgets/data/owcorrelations.py\n+++ b/Orange/widgets/data/owcorrelations.py\n@@ -25,6 +25,7 @@ from Orange.widgets.utils import vartype\n from Orange.widgets.utils.itemmodels import DomainModel\n from Orange.widgets.utils.signals import Input, Output\n from Orange.widgets.utils.widgetpreview import WidgetPreview\n+from Orange.widgets.utils.state_summary import format_summary_details\n from Orange.widgets.visualize.utils import VizRankDialogAttrPair\n from Orange.widgets.widget import OWWidget, AttributeList, Msg\n \n@@ -292,6 +293,9 @@ class OWCorrelations(OWWidget):\n         button_box = gui.hBox(self.mainArea)\n         button_box.layout().addWidget(self.vizrank.button)\n \n+        self.info.set_input_summary(self.info.NoInput)\n+        self.info.set_output_summary(self.info.NoOutput)\n+\n     @staticmethod\n     def sizeHint():\n         return QSize(350, 400)\n@@ -358,6 +362,10 @@ class OWCorrelations(OWWidget):\n                     self.Warning.not_enough_vars()\n                 else:\n                     self.cont_data = SklImpute()(cont_data)\n+            self.info.set_input_summary(len(data),\n+                                        format_summary_details(data))\n+        else:\n+            self.info.set_input_summary(self.info.NoInput)\n         self.set_feature_model()\n         self.openContext(self.cont_data)\n         self.apply()\n@@ -380,8 +388,12 @@ class OWCorrelations(OWWidget):\n             self.commit()\n \n     def commit(self):\n+        self.Outputs.data.send(self.data)\n+        summary = len(self.data) if self.data else self.info.NoOutput\n+        details = format_summary_details(self.data) if self.data else \"\"\n+        self.info.set_output_summary(summary, details)\n+\n         if self.data is None or self.cont_data is None:\n-            self.Outputs.data.send(self.data)\n             self.Outputs.features.send(None)\n             self.Outputs.correlations.send(None)\n             return\n@@ -401,7 +413,6 @@ class OWCorrelations(OWWidget):\n         corr_table = Table(domain, x, metas=m)\n         corr_table.name = \"Correlations\"\n \n-        self.Outputs.data.send(self.data)\n         # data has been imputed; send original attributes\n         self.Outputs.features.send(AttributeList(\n             [self.data.domain[name] for name, _ in self.selection]))\n.", "test_patch": "diff --git a/Orange/widgets/data/tests/test_owcorrelations.py b/Orange/widgets/data/tests/test_owcorrelations.py\nindex c7350a49b..9ca33cfdc 100644\n--- a/Orange/widgets/data/tests/test_owcorrelations.py\n+++ b/Orange/widgets/data/tests/test_owcorrelations.py\n@@ -1,5 +1,5 @@\n # Test methods with long descriptive names can omit docstrings\n-# pylint: disable=missing-docstring, protected-access\n+# pylint: disable=missing-docstring, protected-access, unsubscriptable-object\n import time\n import unittest\n from unittest.mock import patch, Mock\n@@ -19,6 +19,7 @@ from Orange.widgets.tests.base import WidgetTest\n from Orange.widgets.tests.utils import simulate\n from Orange.widgets.visualize.owscatterplot import OWScatterPlot\n from Orange.widgets.widget import AttributeList\n+from Orange.widgets.utils.state_summary import format_summary_details\n \n \n class TestOWCorrelations(WidgetTest):\n@@ -301,6 +302,26 @@ class TestOWCorrelations(WidgetTest):\n         self.send_signal(self.widget.Inputs.data, None)\n         self.widget.report_button.click()\n \n+    def test_summary(self):\n+        \"\"\"Check if status bar is updated when data is received\"\"\"\n+        data = Table(\"iris\")\n+        input_sum = self.widget.info.set_input_summary = Mock()\n+        output_sum = self.widget.info.set_output_summary = Mock()\n+\n+        self.send_signal(self.widget.Inputs.data, data)\n+        input_sum.assert_called_with(len(data), format_summary_details(data))\n+        output = self.get_output(self.widget.Outputs.data)\n+        output_sum.assert_called_with(len(output),\n+                                      format_summary_details(output))\n+\n+        input_sum.reset_mock()\n+        output_sum.reset_mock()\n+        self.send_signal(self.widget.Inputs.data, None)\n+        input_sum.assert_called_once()\n+        self.assertEqual(input_sum.call_args[0][0].brief, \"\")\n+        output_sum.assert_called_once()\n+        self.assertEqual(output_sum.call_args[0][0].brief, \"\")\n+\n \n class TestCorrelationRank(WidgetTest):\n     @classmethod\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6921.0, "instance_id": "biolab__orange3-6921", "issue_numbers": 0, "base_commit": "d353372ee41eba5c1154e5ec8a0da82f5fec0612", "patch": "diff --git a/Orange/widgets/evaluate/owparameterfitter.py b/Orange/widgets/evaluate/owparameterfitter.py\nindex 0d10a3aa8..296c98694 100644\n--- a/Orange/widgets/evaluate/owparameterfitter.py\n+++ b/Orange/widgets/evaluate/owparameterfitter.py\n@@ -485,6 +485,17 @@ class OWParameterFitter(OWWidget, ConcurrentWidgetMixin):\n         self.shutdown()\n         super().onDeleteWidget()\n \n+    def send_report(self):\n+        if self._data is None or self._learner is None \\\n+                or not self._learner.fitted_parameters():\n+            return\n+        parameter = self.fitted_parameters[self.parameter_index].label\n+        self.report_items(\"Settings\",\n+                          [(\"Parameter\", parameter),\n+                           (\"Range\", self.preview)])\n+        self.report_name(\"Plot\")\n+        self.report_plot()\n+\n     def set_visual_settings(self, key: KeyType, value: ValueType):\n         self.graph.parameter_setter.set_parameter(key, value)\n         # pylint: disable=unsupported-assignment-operation\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owparameterfitter.py b/Orange/widgets/evaluate/tests/test_owparameterfitter.py\nindex 0d54cf864..bd757e8ee 100644\n--- a/Orange/widgets/evaluate/tests/test_owparameterfitter.py\n+++ b/Orange/widgets/evaluate/tests/test_owparameterfitter.py\n@@ -286,7 +286,17 @@ class TestOWParameterFitter(WidgetTest):\n         self.assertEqual(font1.italic(), font2.italic())\n \n     def test_send_report(self):\n-        self.assertEqual(1, 2)\n+        self.widget.send_report()\n+\n+        self.send_signal(self.widget.Inputs.data, self._housing)\n+        self.send_signal(self.widget.Inputs.learner, self._pls)\n+        self.wait_until_finished()\n+        self.widget.send_report()\n+\n+        self.send_signal(self.widget.Inputs.data, self._heart)\n+        self.send_signal(self.widget.Inputs.learner, self._naive_bayes)\n+        self.wait_until_finished()\n+        self.widget.send_report()\n \n \n if __name__ == \"__main__\":\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6921.0, "instance_id": "biolab__orange3-6921", "issue_numbers": 0, "base_commit": "d0c9c1b2f4849bffebb75e794b93c88c4cf766c8", "patch": "diff --git a/Orange/widgets/evaluate/owparameterfitter.py b/Orange/widgets/evaluate/owparameterfitter.py\nindex 56c3e120e..b6434b71b 100644\n--- a/Orange/widgets/evaluate/owparameterfitter.py\n+++ b/Orange/widgets/evaluate/owparameterfitter.py\n@@ -335,6 +335,7 @@ class OWParameterFitter(OWWidget, ConcurrentWidgetMixin):\n         incompatible_learner = Msg(\"{}\")\n         manual_steps_error = Msg(\"Invalid values for '{}': {}\")\n         min_max_error = Msg(\"Minimum must be less than maximum.\")\n+        missing_target = Msg(\"Data has not target.\")\n \n     class Warning(OWWidget.Warning):\n         no_parameters = Msg(\"{} has no parameters to fit.\")\n@@ -514,6 +515,11 @@ class OWParameterFitter(OWWidget, ConcurrentWidgetMixin):\n             self._data = None\n             return\n \n+        if self._data and len(self._data.domain.class_vars) < 1:\n+            self.Error.missing_target()\n+            self._data = None\n+            return\n+\n         reason = self._learner.incompatibility_reason(self._data.domain)\n         if reason:\n             self.Error.incompatible_learner(reason)\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owparameterfitter.py b/Orange/widgets/evaluate/tests/test_owparameterfitter.py\nindex b8b9d3686..51d341204 100644\n--- a/Orange/widgets/evaluate/tests/test_owparameterfitter.py\n+++ b/Orange/widgets/evaluate/tests/test_owparameterfitter.py\n@@ -9,7 +9,7 @@ from AnyQt.QtGui import QFont\n from AnyQt.QtWidgets import QToolTip\n \n from Orange.classification import NaiveBayesLearner\n-from Orange.data import Table\n+from Orange.data import Table, Domain\n from Orange.modelling import RandomForestLearner\n from Orange.regression import PLSRegressionLearner\n from Orange.widgets.evaluate.owparameterfitter import OWParameterFitter\n@@ -85,6 +85,21 @@ class TestOWParameterFitter(WidgetTest):\n         self.assertFalse(self.widget.Error.not_enough_data.is_shown())\n         self.assertFalse(self.widget.Error.incompatible_learner.is_shown())\n \n+    def test_random_forest_classless_data(self):\n+        domain = self._heart.domain\n+        data = self._heart.transform(Domain(domain.attributes))\n+        rf_widget = self.create_widget(OWRandomForest)\n+        learner = self.get_output(rf_widget.Outputs.learner)\n+\n+        self.send_signal(self.widget.Inputs.learner, learner)\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.wait_until_finished()\n+        self.assertTrue(self.widget.Error.missing_target.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.data, self._heart)\n+        self.assertFalse(self.widget.Error.missing_target.is_shown())\n+        self.wait_until_finished()\n+\n     def test_plot(self):\n         self.send_signal(self.widget.Inputs.data, self._housing)\n         self.send_signal(self.widget.Inputs.learner, self._pls)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
{"repo": "biolab/orange3", "pull_number": 6921.0, "instance_id": "biolab__orange3-6921", "issue_numbers": 0, "base_commit": "15baede0c89aceea836156b86b2ade646bd29c68", "patch": "diff --git a/Orange/widgets/evaluate/owparameterfitter.py b/Orange/widgets/evaluate/owparameterfitter.py\nindex b6434b71b..ea115e9c6 100644\n--- a/Orange/widgets/evaluate/owparameterfitter.py\n+++ b/Orange/widgets/evaluate/owparameterfitter.py\n@@ -504,7 +504,12 @@ class OWParameterFitter(OWWidget, ConcurrentWidgetMixin):\n \n     def handleNewSignals(self):\n         self.Warning.clear()\n-        self.Error.clear()\n+        self.Error.unknown_err.clear()\n+        self.Error.not_enough_data.clear()\n+        self.Error.incompatible_learner.clear()\n+        self.Error.manual_steps_error.clear()\n+        self.Error.min_max_error.clear()\n+        self.Error.missing_target.clear()\n         self.clear()\n \n         if self._data is None or self._learner is None:\n.", "test_patch": "diff --git a/Orange/widgets/evaluate/tests/test_owparameterfitter.py b/Orange/widgets/evaluate/tests/test_owparameterfitter.py\nindex 51d341204..c1b7c1c56 100644\n--- a/Orange/widgets/evaluate/tests/test_owparameterfitter.py\n+++ b/Orange/widgets/evaluate/tests/test_owparameterfitter.py\n@@ -97,8 +97,24 @@ class TestOWParameterFitter(WidgetTest):\n         self.assertTrue(self.widget.Error.missing_target.is_shown())\n \n         self.send_signal(self.widget.Inputs.data, self._heart)\n+        self.wait_until_finished()\n         self.assertFalse(self.widget.Error.missing_target.is_shown())\n+\n+    def test_random_forest_multiclass_data(self):\n+        domain = self._heart.domain\n+        data = self._heart.transform(Domain(domain.attributes[2:],\n+                                            domain.attributes[:2]))\n+        rf_widget = self.create_widget(OWRandomForest)\n+        learner = self.get_output(rf_widget.Outputs.learner)\n+\n+        self.send_signal(self.widget.Inputs.learner, learner)\n+        self.send_signal(self.widget.Inputs.data, data)\n+        self.wait_until_finished()\n+        self.assertTrue(self.widget.Error.multiple_targets_data.is_shown())\n+\n+        self.send_signal(self.widget.Inputs.data, self._heart)\n         self.wait_until_finished()\n+        self.assertFalse(self.widget.Error.multiple_targets_data.is_shown())\n \n     def test_plot(self):\n         self.send_signal(self.widget.Inputs.data, self._housing)\n \n.", "problem_statement": "", "hints_text": "", "created_at": 0, "PASS_TO_PASS": [], "FAIL_TO_PASS": [], "FAIL_TO_FAIL": [], "score": -1.0, "note": null, "version": "default"}
